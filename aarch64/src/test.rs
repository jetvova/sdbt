// @generated
// This file was automatically generated by extracting instruction names, parameters, and bit
// patterns from the Armv8-A 2020-12, A64 Instruction Set Architecture documentation provided 
// in XML format. I believe this consitutes fair use for research and educational purposes.
// https://developer.arm.com/architectures/cpu-architecture/a-profile/exploration-tools

// Please note that the A64 instruction set is property and copyrighted material of Arm Ltd.

#![allow(unused_attributes, non_snake_case, non_camel_case_types)]
#![rustfmt::skip]
use super::*;
#[test]
fn roundtrip_SETFFR_f() {
    assert_eq!(Instruction::SETFFR_f.encode().decode(), 
                Instruction::SETFFR_f)
}
#[test]
fn roundtrip_NOP_HI_hints() {
    assert_eq!(Instruction::NOP_HI_hints.encode().decode(), 
                Instruction::NOP_HI_hints)
}
#[test]
fn roundtrip_YIELD_HI_hints() {
    assert_eq!(Instruction::YIELD_HI_hints.encode().decode(), 
                Instruction::YIELD_HI_hints)
}
#[test]
fn roundtrip_WFE_HI_hints() {
    assert_eq!(Instruction::WFE_HI_hints.encode().decode(), 
                Instruction::WFE_HI_hints)
}
#[test]
fn roundtrip_WFI_HI_hints() {
    assert_eq!(Instruction::WFI_HI_hints.encode().decode(), 
                Instruction::WFI_HI_hints)
}
#[test]
fn roundtrip_SEV_HI_hints() {
    assert_eq!(Instruction::SEV_HI_hints.encode().decode(), 
                Instruction::SEV_HI_hints)
}
#[test]
fn roundtrip_SEVL_HI_hints() {
    assert_eq!(Instruction::SEVL_HI_hints.encode().decode(), 
                Instruction::SEVL_HI_hints)
}
#[test]
fn roundtrip_DGH_HI_hints() {
    assert_eq!(Instruction::DGH_HI_hints.encode().decode(), 
                Instruction::DGH_HI_hints)
}
#[test]
fn roundtrip_XPACLRI_HI_hints() {
    assert_eq!(Instruction::XPACLRI_HI_hints.encode().decode(), 
                Instruction::XPACLRI_HI_hints)
}
#[test]
fn roundtrip_PACIA1716_HI_hints() {
    assert_eq!(Instruction::PACIA1716_HI_hints.encode().decode(), 
                Instruction::PACIA1716_HI_hints)
}
#[test]
fn roundtrip_PACIB1716_HI_hints() {
    assert_eq!(Instruction::PACIB1716_HI_hints.encode().decode(), 
                Instruction::PACIB1716_HI_hints)
}
#[test]
fn roundtrip_AUTIA1716_HI_hints() {
    assert_eq!(Instruction::AUTIA1716_HI_hints.encode().decode(), 
                Instruction::AUTIA1716_HI_hints)
}
#[test]
fn roundtrip_AUTIB1716_HI_hints() {
    assert_eq!(Instruction::AUTIB1716_HI_hints.encode().decode(), 
                Instruction::AUTIB1716_HI_hints)
}
#[test]
fn roundtrip_ESB_HI_hints() {
    assert_eq!(Instruction::ESB_HI_hints.encode().decode(), 
                Instruction::ESB_HI_hints)
}
#[test]
fn roundtrip_PSB_HC_hints() {
    assert_eq!(Instruction::PSB_HC_hints.encode().decode(), 
                Instruction::PSB_HC_hints)
}
#[test]
fn roundtrip_TSB_HC_hints() {
    assert_eq!(Instruction::TSB_HC_hints.encode().decode(), 
                Instruction::TSB_HC_hints)
}
#[test]
fn roundtrip_CSDB_HI_hints() {
    assert_eq!(Instruction::CSDB_HI_hints.encode().decode(), 
                Instruction::CSDB_HI_hints)
}
#[test]
fn roundtrip_PACIAZ_HI_hints() {
    assert_eq!(Instruction::PACIAZ_HI_hints.encode().decode(), 
                Instruction::PACIAZ_HI_hints)
}
#[test]
fn roundtrip_PACIASP_HI_hints() {
    assert_eq!(Instruction::PACIASP_HI_hints.encode().decode(), 
                Instruction::PACIASP_HI_hints)
}
#[test]
fn roundtrip_PACIBZ_HI_hints() {
    assert_eq!(Instruction::PACIBZ_HI_hints.encode().decode(), 
                Instruction::PACIBZ_HI_hints)
}
#[test]
fn roundtrip_PACIBSP_HI_hints() {
    assert_eq!(Instruction::PACIBSP_HI_hints.encode().decode(), 
                Instruction::PACIBSP_HI_hints)
}
#[test]
fn roundtrip_AUTIAZ_HI_hints() {
    assert_eq!(Instruction::AUTIAZ_HI_hints.encode().decode(), 
                Instruction::AUTIAZ_HI_hints)
}
#[test]
fn roundtrip_AUTIASP_HI_hints() {
    assert_eq!(Instruction::AUTIASP_HI_hints.encode().decode(), 
                Instruction::AUTIASP_HI_hints)
}
#[test]
fn roundtrip_AUTIBZ_HI_hints() {
    assert_eq!(Instruction::AUTIBZ_HI_hints.encode().decode(), 
                Instruction::AUTIBZ_HI_hints)
}
#[test]
fn roundtrip_AUTIBSP_HI_hints() {
    assert_eq!(Instruction::AUTIBSP_HI_hints.encode().decode(), 
                Instruction::AUTIBSP_HI_hints)
}
#[test]
fn roundtrip_SSBB_only_barriers() {
    assert_eq!(Instruction::SSBB_only_barriers.encode().decode(), 
                Instruction::SSBB_only_barriers)
}
#[test]
fn roundtrip_PSSBB_only_barriers() {
    assert_eq!(Instruction::PSSBB_only_barriers.encode().decode(), 
                Instruction::PSSBB_only_barriers)
}
#[test]
fn roundtrip_RETAA_64E_branch_reg() {
    assert_eq!(Instruction::RETAA_64E_branch_reg.encode().decode(), 
                Instruction::RETAA_64E_branch_reg)
}
#[test]
fn roundtrip_RETAB_64E_branch_reg() {
    assert_eq!(Instruction::RETAB_64E_branch_reg.encode().decode(), 
                Instruction::RETAB_64E_branch_reg)
}
#[test]
fn roundtrip_ERET_64E_branch_reg() {
    assert_eq!(Instruction::ERET_64E_branch_reg.encode().decode(), 
                Instruction::ERET_64E_branch_reg)
}
#[test]
fn roundtrip_ERETAA_64E_branch_reg() {
    assert_eq!(Instruction::ERETAA_64E_branch_reg.encode().decode(), 
                Instruction::ERETAA_64E_branch_reg)
}
#[test]
fn roundtrip_ERETAB_64E_branch_reg() {
    assert_eq!(Instruction::ERETAB_64E_branch_reg.encode().decode(), 
                Instruction::ERETAB_64E_branch_reg)
}
#[test]
fn roundtrip_DRPS_64E_branch_reg() {
    assert_eq!(Instruction::DRPS_64E_branch_reg.encode().decode(), 
                Instruction::DRPS_64E_branch_reg)
}
#[test]
fn roundtrip_BTI_HB_hints() {
    assert_eq!(Instruction::BTI_HB_hints { op2: 3, }.encode().decode(), 
                Instruction::BTI_HB_hints { op2: 3, })
}
#[test]
fn roundtrip_DSB_BOn_barriers() {
    assert_eq!(Instruction::DSB_BOn_barriers { imm2: 3, }.encode().decode(), 
                Instruction::DSB_BOn_barriers { imm2: 3, })
}
#[test]
fn roundtrip_DSB_BO_barriers() {
    assert_eq!(Instruction::DSB_BO_barriers { CRm: 15, }.encode().decode(), 
                Instruction::DSB_BO_barriers { CRm: 15, })
}
#[test]
fn roundtrip_PFALSE_p() {
    assert_eq!(Instruction::PFALSE_p { Pd: 15, }.encode().decode(), 
                Instruction::PFALSE_p { Pd: 15, })
}
#[test]
fn roundtrip_RDFFR_p_f() {
    assert_eq!(Instruction::RDFFR_p_f { Pd: 15, }.encode().decode(), 
                Instruction::RDFFR_p_f { Pd: 15, })
}
#[test]
fn roundtrip_WRFFR_f_p() {
    assert_eq!(Instruction::WRFFR_f_p { Pn: 15, }.encode().decode(), 
                Instruction::WRFFR_f_p { Pn: 15, })
}
#[test]
fn roundtrip_CFINV_M_pstate() {
    assert_eq!(Instruction::CFINV_M_pstate { CRm: 15, }.encode().decode(), 
                Instruction::CFINV_M_pstate { CRm: 15, })
}
#[test]
fn roundtrip_XAFLAG_M_pstate() {
    assert_eq!(Instruction::XAFLAG_M_pstate { CRm: 15, }.encode().decode(), 
                Instruction::XAFLAG_M_pstate { CRm: 15, })
}
#[test]
fn roundtrip_AXFLAG_M_pstate() {
    assert_eq!(Instruction::AXFLAG_M_pstate { CRm: 15, }.encode().decode(), 
                Instruction::AXFLAG_M_pstate { CRm: 15, })
}
#[test]
fn roundtrip_CLREX_BN_barriers() {
    assert_eq!(Instruction::CLREX_BN_barriers { CRm: 15, }.encode().decode(), 
                Instruction::CLREX_BN_barriers { CRm: 15, })
}
#[test]
fn roundtrip_DMB_BO_barriers() {
    assert_eq!(Instruction::DMB_BO_barriers { CRm: 15, }.encode().decode(), 
                Instruction::DMB_BO_barriers { CRm: 15, })
}
#[test]
fn roundtrip_ISB_BI_barriers() {
    assert_eq!(Instruction::ISB_BI_barriers { CRm: 15, }.encode().decode(), 
                Instruction::ISB_BI_barriers { CRm: 15, })
}
#[test]
fn roundtrip_SB_only_barriers() {
    assert_eq!(Instruction::SB_only_barriers { CRm: 15, }.encode().decode(), 
                Instruction::SB_only_barriers { CRm: 15, })
}
#[test]
fn roundtrip_SETF8_only_setf() {
    assert_eq!(Instruction::SETF8_only_setf { Rn: 31, }.encode().decode(), 
                Instruction::SETF8_only_setf { Rn: 31, })
}
#[test]
fn roundtrip_SETF16_only_setf() {
    assert_eq!(Instruction::SETF16_only_setf { Rn: 31, }.encode().decode(), 
                Instruction::SETF16_only_setf { Rn: 31, })
}
#[test]
fn roundtrip_WFET_only_systeminstrswithreg() {
    assert_eq!(Instruction::WFET_only_systeminstrswithreg { Rd: 31, }.encode().decode(), 
                Instruction::WFET_only_systeminstrswithreg { Rd: 31, })
}
#[test]
fn roundtrip_WFIT_only_systeminstrswithreg() {
    assert_eq!(Instruction::WFIT_only_systeminstrswithreg { Rd: 31, }.encode().decode(), 
                Instruction::WFIT_only_systeminstrswithreg { Rd: 31, })
}
#[test]
fn roundtrip_CFP_SYS_CR_systeminstrs() {
    assert_eq!(Instruction::CFP_SYS_CR_systeminstrs { Rt: 31, }.encode().decode(), 
                Instruction::CFP_SYS_CR_systeminstrs { Rt: 31, })
}
#[test]
fn roundtrip_DVP_SYS_CR_systeminstrs() {
    assert_eq!(Instruction::DVP_SYS_CR_systeminstrs { Rt: 31, }.encode().decode(), 
                Instruction::DVP_SYS_CR_systeminstrs { Rt: 31, })
}
#[test]
fn roundtrip_CPP_SYS_CR_systeminstrs() {
    assert_eq!(Instruction::CPP_SYS_CR_systeminstrs { Rt: 31, }.encode().decode(), 
                Instruction::CPP_SYS_CR_systeminstrs { Rt: 31, })
}
#[test]
fn roundtrip_BR_64_branch_reg() {
    assert_eq!(Instruction::BR_64_branch_reg { Rn: 31, }.encode().decode(), 
                Instruction::BR_64_branch_reg { Rn: 31, })
}
#[test]
fn roundtrip_BRAAZ_64_branch_reg() {
    assert_eq!(Instruction::BRAAZ_64_branch_reg { Rn: 31, }.encode().decode(), 
                Instruction::BRAAZ_64_branch_reg { Rn: 31, })
}
#[test]
fn roundtrip_BRABZ_64_branch_reg() {
    assert_eq!(Instruction::BRABZ_64_branch_reg { Rn: 31, }.encode().decode(), 
                Instruction::BRABZ_64_branch_reg { Rn: 31, })
}
#[test]
fn roundtrip_BLR_64_branch_reg() {
    assert_eq!(Instruction::BLR_64_branch_reg { Rn: 31, }.encode().decode(), 
                Instruction::BLR_64_branch_reg { Rn: 31, })
}
#[test]
fn roundtrip_BLRAAZ_64_branch_reg() {
    assert_eq!(Instruction::BLRAAZ_64_branch_reg { Rn: 31, }.encode().decode(), 
                Instruction::BLRAAZ_64_branch_reg { Rn: 31, })
}
#[test]
fn roundtrip_BLRABZ_64_branch_reg() {
    assert_eq!(Instruction::BLRABZ_64_branch_reg { Rn: 31, }.encode().decode(), 
                Instruction::BLRABZ_64_branch_reg { Rn: 31, })
}
#[test]
fn roundtrip_RET_64R_branch_reg() {
    assert_eq!(Instruction::RET_64R_branch_reg { Rn: 31, }.encode().decode(), 
                Instruction::RET_64R_branch_reg { Rn: 31, })
}
#[test]
fn roundtrip_PACIZA_64Z_dp_1src() {
    assert_eq!(Instruction::PACIZA_64Z_dp_1src { Rd: 31, }.encode().decode(), 
                Instruction::PACIZA_64Z_dp_1src { Rd: 31, })
}
#[test]
fn roundtrip_PACIZB_64Z_dp_1src() {
    assert_eq!(Instruction::PACIZB_64Z_dp_1src { Rd: 31, }.encode().decode(), 
                Instruction::PACIZB_64Z_dp_1src { Rd: 31, })
}
#[test]
fn roundtrip_PACDZA_64Z_dp_1src() {
    assert_eq!(Instruction::PACDZA_64Z_dp_1src { Rd: 31, }.encode().decode(), 
                Instruction::PACDZA_64Z_dp_1src { Rd: 31, })
}
#[test]
fn roundtrip_PACDZB_64Z_dp_1src() {
    assert_eq!(Instruction::PACDZB_64Z_dp_1src { Rd: 31, }.encode().decode(), 
                Instruction::PACDZB_64Z_dp_1src { Rd: 31, })
}
#[test]
fn roundtrip_AUTIZA_64Z_dp_1src() {
    assert_eq!(Instruction::AUTIZA_64Z_dp_1src { Rd: 31, }.encode().decode(), 
                Instruction::AUTIZA_64Z_dp_1src { Rd: 31, })
}
#[test]
fn roundtrip_AUTIZB_64Z_dp_1src() {
    assert_eq!(Instruction::AUTIZB_64Z_dp_1src { Rd: 31, }.encode().decode(), 
                Instruction::AUTIZB_64Z_dp_1src { Rd: 31, })
}
#[test]
fn roundtrip_AUTDZA_64Z_dp_1src() {
    assert_eq!(Instruction::AUTDZA_64Z_dp_1src { Rd: 31, }.encode().decode(), 
                Instruction::AUTDZA_64Z_dp_1src { Rd: 31, })
}
#[test]
fn roundtrip_AUTDZB_64Z_dp_1src() {
    assert_eq!(Instruction::AUTDZB_64Z_dp_1src { Rd: 31, }.encode().decode(), 
                Instruction::AUTDZB_64Z_dp_1src { Rd: 31, })
}
#[test]
fn roundtrip_XPACI_64Z_dp_1src() {
    assert_eq!(Instruction::XPACI_64Z_dp_1src { Rd: 31, }.encode().decode(), 
                Instruction::XPACI_64Z_dp_1src { Rd: 31, })
}
#[test]
fn roundtrip_XPACD_64Z_dp_1src() {
    assert_eq!(Instruction::XPACD_64Z_dp_1src { Rd: 31, }.encode().decode(), 
                Instruction::XPACD_64Z_dp_1src { Rd: 31, })
}
#[test]
fn roundtrip_FMOV_dup_z_i() {
    assert_eq!(Instruction::FMOV_dup_z_i { size: 3, Zd: 31, }.encode().decode(), 
                Instruction::FMOV_dup_z_i { size: 3, Zd: 31, })
}
#[test]
fn roundtrip_HINT_HM_hints() {
    assert_eq!(Instruction::HINT_HM_hints { CRm: 15, op2: 7, }.encode().decode(), 
                Instruction::HINT_HM_hints { CRm: 15, op2: 7, })
}
#[test]
fn roundtrip_PUNPKLO_p_p() {
    assert_eq!(Instruction::PUNPKLO_p_p { Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::PUNPKLO_p_p { Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_PUNPKHI_p_p() {
    assert_eq!(Instruction::PUNPKHI_p_p { Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::PUNPKHI_p_p { Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_RDFFR_p_p_f() {
    assert_eq!(Instruction::RDFFR_p_p_f { Pg: 15, Pd: 15, }.encode().decode(), 
                Instruction::RDFFR_p_p_f { Pg: 15, Pd: 15, })
}
#[test]
fn roundtrip_PTEST_p_p() {
    assert_eq!(Instruction::PTEST_p_p { Pg: 15, Pn: 15, }.encode().decode(), 
                Instruction::PTEST_p_p { Pg: 15, Pn: 15, })
}
#[test]
fn roundtrip_PFIRST_p_p_p() {
    assert_eq!(Instruction::PFIRST_p_p_p { Pg: 15, Pdn: 15, }.encode().decode(), 
                Instruction::PFIRST_p_p_p { Pg: 15, Pdn: 15, })
}
#[test]
fn roundtrip_RDFFRS_p_p_f() {
    assert_eq!(Instruction::RDFFRS_p_p_f { Pg: 15, Pd: 15, }.encode().decode(), 
                Instruction::RDFFRS_p_p_f { Pg: 15, Pd: 15, })
}
#[test]
fn roundtrip_CSET_CSINC_32_condsel() {
    assert_eq!(Instruction::CSET_CSINC_32_condsel { cond: 1, Rd: 31, }.encode().decode(), 
                Instruction::CSET_CSINC_32_condsel { cond: 1, Rd: 31, })
}
#[test]
fn roundtrip_CSETM_CSINV_32_condsel() {
    assert_eq!(Instruction::CSETM_CSINV_32_condsel { cond: 1, Rd: 31, }.encode().decode(), 
                Instruction::CSETM_CSINV_32_condsel { cond: 1, Rd: 31, })
}
#[test]
fn roundtrip_CSET_CSINC_64_condsel() {
    assert_eq!(Instruction::CSET_CSINC_64_condsel { cond: 1, Rd: 31, }.encode().decode(), 
                Instruction::CSET_CSINC_64_condsel { cond: 1, Rd: 31, })
}
#[test]
fn roundtrip_CSETM_CSINV_64_condsel() {
    assert_eq!(Instruction::CSETM_CSINV_64_condsel { cond: 1, Rd: 31, }.encode().decode(), 
                Instruction::CSETM_CSINV_64_condsel { cond: 1, Rd: 31, })
}
#[test]
fn roundtrip_MOVPRFX_z_z() {
    assert_eq!(Instruction::MOVPRFX_z_z { Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::MOVPRFX_z_z { Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_REV_p_p() {
    assert_eq!(Instruction::REV_p_p { size: 3, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::REV_p_p { size: 3, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_MOV_ADD_32_addsub_imm() {
    assert_eq!(Instruction::MOV_ADD_32_addsub_imm { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MOV_ADD_32_addsub_imm { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SXTB_SBFM_32M_bitfield() {
    assert_eq!(Instruction::SXTB_SBFM_32M_bitfield { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SXTB_SBFM_32M_bitfield { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SXTH_SBFM_32M_bitfield() {
    assert_eq!(Instruction::SXTH_SBFM_32M_bitfield { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SXTH_SBFM_32M_bitfield { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNS_32S_float2int() {
    assert_eq!(Instruction::FCVTNS_32S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNS_32S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMP_S_floatcmp() {
    assert_eq!(Instruction::FCMP_S_floatcmp { Rm: 31, Rn: 31, }.encode().decode(), 
                Instruction::FCMP_S_floatcmp { Rm: 31, Rn: 31, })
}
#[test]
fn roundtrip_FCMP_SZ_floatcmp() {
    assert_eq!(Instruction::FCMP_SZ_floatcmp { Rm: 31, Rn: 31, }.encode().decode(), 
                Instruction::FCMP_SZ_floatcmp { Rm: 31, Rn: 31, })
}
#[test]
fn roundtrip_FCMPE_S_floatcmp() {
    assert_eq!(Instruction::FCMPE_S_floatcmp { Rm: 31, Rn: 31, }.encode().decode(), 
                Instruction::FCMPE_S_floatcmp { Rm: 31, Rn: 31, })
}
#[test]
fn roundtrip_FCMPE_SZ_floatcmp() {
    assert_eq!(Instruction::FCMPE_SZ_floatcmp { Rm: 31, Rn: 31, }.encode().decode(), 
                Instruction::FCMPE_SZ_floatcmp { Rm: 31, Rn: 31, })
}
#[test]
fn roundtrip_FMOV_S_floatdp1() {
    assert_eq!(Instruction::FMOV_S_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_S_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FABS_S_floatdp1() {
    assert_eq!(Instruction::FABS_S_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FABS_S_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNU_32S_float2int() {
    assert_eq!(Instruction::FCVTNU_32S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNU_32S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FNEG_S_floatdp1() {
    assert_eq!(Instruction::FNEG_S_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FNEG_S_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FSQRT_S_floatdp1() {
    assert_eq!(Instruction::FSQRT_S_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FSQRT_S_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_S32_float2int() {
    assert_eq!(Instruction::SCVTF_S32_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_S32_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVT_DS_floatdp1() {
    assert_eq!(Instruction::FCVT_DS_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVT_DS_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_S32_float2int() {
    assert_eq!(Instruction::UCVTF_S32_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_S32_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVT_HS_floatdp1() {
    assert_eq!(Instruction::FCVT_HS_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVT_HS_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAS_32S_float2int() {
    assert_eq!(Instruction::FCVTAS_32S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAS_32S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTN_S_floatdp1() {
    assert_eq!(Instruction::FRINTN_S_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTN_S_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTP_S_floatdp1() {
    assert_eq!(Instruction::FRINTP_S_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTP_S_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAU_32S_float2int() {
    assert_eq!(Instruction::FCVTAU_32S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAU_32S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTM_S_floatdp1() {
    assert_eq!(Instruction::FRINTM_S_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTM_S_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTZ_S_floatdp1() {
    assert_eq!(Instruction::FRINTZ_S_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTZ_S_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_32S_float2int() {
    assert_eq!(Instruction::FMOV_32S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_32S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTA_S_floatdp1() {
    assert_eq!(Instruction::FRINTA_S_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTA_S_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_S32_float2int() {
    assert_eq!(Instruction::FMOV_S32_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_S32_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTX_S_floatdp1() {
    assert_eq!(Instruction::FRINTX_S_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTX_S_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTI_S_floatdp1() {
    assert_eq!(Instruction::FRINTI_S_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTI_S_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPS_32S_float2int() {
    assert_eq!(Instruction::FCVTPS_32S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPS_32S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINT32Z_S_floatdp1() {
    assert_eq!(Instruction::FRINT32Z_S_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINT32Z_S_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINT32X_S_floatdp1() {
    assert_eq!(Instruction::FRINT32X_S_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINT32X_S_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPU_32S_float2int() {
    assert_eq!(Instruction::FCVTPU_32S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPU_32S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINT64Z_S_floatdp1() {
    assert_eq!(Instruction::FRINT64Z_S_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINT64Z_S_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINT64X_S_floatdp1() {
    assert_eq!(Instruction::FRINT64X_S_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINT64X_S_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMS_32S_float2int() {
    assert_eq!(Instruction::FCVTMS_32S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMS_32S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMU_32S_float2int() {
    assert_eq!(Instruction::FCVTMU_32S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMU_32S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_32S_float2int() {
    assert_eq!(Instruction::FCVTZS_32S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_32S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_32S_float2int() {
    assert_eq!(Instruction::FCVTZU_32S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_32S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNS_32D_float2int() {
    assert_eq!(Instruction::FCVTNS_32D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNS_32D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMP_D_floatcmp() {
    assert_eq!(Instruction::FCMP_D_floatcmp { Rm: 31, Rn: 31, }.encode().decode(), 
                Instruction::FCMP_D_floatcmp { Rm: 31, Rn: 31, })
}
#[test]
fn roundtrip_FCMP_DZ_floatcmp() {
    assert_eq!(Instruction::FCMP_DZ_floatcmp { Rm: 31, Rn: 31, }.encode().decode(), 
                Instruction::FCMP_DZ_floatcmp { Rm: 31, Rn: 31, })
}
#[test]
fn roundtrip_FCMPE_D_floatcmp() {
    assert_eq!(Instruction::FCMPE_D_floatcmp { Rm: 31, Rn: 31, }.encode().decode(), 
                Instruction::FCMPE_D_floatcmp { Rm: 31, Rn: 31, })
}
#[test]
fn roundtrip_FCMPE_DZ_floatcmp() {
    assert_eq!(Instruction::FCMPE_DZ_floatcmp { Rm: 31, Rn: 31, }.encode().decode(), 
                Instruction::FCMPE_DZ_floatcmp { Rm: 31, Rn: 31, })
}
#[test]
fn roundtrip_FMOV_D_floatdp1() {
    assert_eq!(Instruction::FMOV_D_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_D_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FABS_D_floatdp1() {
    assert_eq!(Instruction::FABS_D_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FABS_D_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNU_32D_float2int() {
    assert_eq!(Instruction::FCVTNU_32D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNU_32D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FNEG_D_floatdp1() {
    assert_eq!(Instruction::FNEG_D_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FNEG_D_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FSQRT_D_floatdp1() {
    assert_eq!(Instruction::FSQRT_D_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FSQRT_D_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_D32_float2int() {
    assert_eq!(Instruction::SCVTF_D32_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_D32_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVT_SD_floatdp1() {
    assert_eq!(Instruction::FCVT_SD_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVT_SD_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_D32_float2int() {
    assert_eq!(Instruction::UCVTF_D32_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_D32_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BFCVT_BS_floatdp1() {
    assert_eq!(Instruction::BFCVT_BS_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BFCVT_BS_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVT_HD_floatdp1() {
    assert_eq!(Instruction::FCVT_HD_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVT_HD_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAS_32D_float2int() {
    assert_eq!(Instruction::FCVTAS_32D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAS_32D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTN_D_floatdp1() {
    assert_eq!(Instruction::FRINTN_D_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTN_D_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTP_D_floatdp1() {
    assert_eq!(Instruction::FRINTP_D_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTP_D_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAU_32D_float2int() {
    assert_eq!(Instruction::FCVTAU_32D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAU_32D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTM_D_floatdp1() {
    assert_eq!(Instruction::FRINTM_D_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTM_D_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTZ_D_floatdp1() {
    assert_eq!(Instruction::FRINTZ_D_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTZ_D_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTA_D_floatdp1() {
    assert_eq!(Instruction::FRINTA_D_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTA_D_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTX_D_floatdp1() {
    assert_eq!(Instruction::FRINTX_D_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTX_D_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTI_D_floatdp1() {
    assert_eq!(Instruction::FRINTI_D_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTI_D_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPS_32D_float2int() {
    assert_eq!(Instruction::FCVTPS_32D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPS_32D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINT32Z_D_floatdp1() {
    assert_eq!(Instruction::FRINT32Z_D_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINT32Z_D_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINT32X_D_floatdp1() {
    assert_eq!(Instruction::FRINT32X_D_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINT32X_D_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPU_32D_float2int() {
    assert_eq!(Instruction::FCVTPU_32D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPU_32D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINT64Z_D_floatdp1() {
    assert_eq!(Instruction::FRINT64Z_D_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINT64Z_D_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINT64X_D_floatdp1() {
    assert_eq!(Instruction::FRINT64X_D_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINT64X_D_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMS_32D_float2int() {
    assert_eq!(Instruction::FCVTMS_32D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMS_32D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMU_32D_float2int() {
    assert_eq!(Instruction::FCVTMU_32D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMU_32D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_32D_float2int() {
    assert_eq!(Instruction::FCVTZS_32D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_32D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_32D_float2int() {
    assert_eq!(Instruction::FCVTZU_32D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_32D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FJCVTZS_32D_float2int() {
    assert_eq!(Instruction::FJCVTZS_32D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FJCVTZS_32D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNS_32H_float2int() {
    assert_eq!(Instruction::FCVTNS_32H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNS_32H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMP_H_floatcmp() {
    assert_eq!(Instruction::FCMP_H_floatcmp { Rm: 31, Rn: 31, }.encode().decode(), 
                Instruction::FCMP_H_floatcmp { Rm: 31, Rn: 31, })
}
#[test]
fn roundtrip_FCMP_HZ_floatcmp() {
    assert_eq!(Instruction::FCMP_HZ_floatcmp { Rm: 31, Rn: 31, }.encode().decode(), 
                Instruction::FCMP_HZ_floatcmp { Rm: 31, Rn: 31, })
}
#[test]
fn roundtrip_FCMPE_H_floatcmp() {
    assert_eq!(Instruction::FCMPE_H_floatcmp { Rm: 31, Rn: 31, }.encode().decode(), 
                Instruction::FCMPE_H_floatcmp { Rm: 31, Rn: 31, })
}
#[test]
fn roundtrip_FCMPE_HZ_floatcmp() {
    assert_eq!(Instruction::FCMPE_HZ_floatcmp { Rm: 31, Rn: 31, }.encode().decode(), 
                Instruction::FCMPE_HZ_floatcmp { Rm: 31, Rn: 31, })
}
#[test]
fn roundtrip_FMOV_H_floatdp1() {
    assert_eq!(Instruction::FMOV_H_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_H_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FABS_H_floatdp1() {
    assert_eq!(Instruction::FABS_H_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FABS_H_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNU_32H_float2int() {
    assert_eq!(Instruction::FCVTNU_32H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNU_32H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FNEG_H_floatdp1() {
    assert_eq!(Instruction::FNEG_H_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FNEG_H_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FSQRT_H_floatdp1() {
    assert_eq!(Instruction::FSQRT_H_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FSQRT_H_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_H32_float2int() {
    assert_eq!(Instruction::SCVTF_H32_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_H32_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVT_SH_floatdp1() {
    assert_eq!(Instruction::FCVT_SH_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVT_SH_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVT_DH_floatdp1() {
    assert_eq!(Instruction::FCVT_DH_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVT_DH_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_H32_float2int() {
    assert_eq!(Instruction::UCVTF_H32_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_H32_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAS_32H_float2int() {
    assert_eq!(Instruction::FCVTAS_32H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAS_32H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTN_H_floatdp1() {
    assert_eq!(Instruction::FRINTN_H_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTN_H_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTP_H_floatdp1() {
    assert_eq!(Instruction::FRINTP_H_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTP_H_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAU_32H_float2int() {
    assert_eq!(Instruction::FCVTAU_32H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAU_32H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTM_H_floatdp1() {
    assert_eq!(Instruction::FRINTM_H_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTM_H_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTZ_H_floatdp1() {
    assert_eq!(Instruction::FRINTZ_H_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTZ_H_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_32H_float2int() {
    assert_eq!(Instruction::FMOV_32H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_32H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTA_H_floatdp1() {
    assert_eq!(Instruction::FRINTA_H_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTA_H_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_H32_float2int() {
    assert_eq!(Instruction::FMOV_H32_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_H32_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTX_H_floatdp1() {
    assert_eq!(Instruction::FRINTX_H_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTX_H_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTI_H_floatdp1() {
    assert_eq!(Instruction::FRINTI_H_floatdp1 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTI_H_floatdp1 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPS_32H_float2int() {
    assert_eq!(Instruction::FCVTPS_32H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPS_32H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPU_32H_float2int() {
    assert_eq!(Instruction::FCVTPU_32H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPU_32H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMS_32H_float2int() {
    assert_eq!(Instruction::FCVTMS_32H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMS_32H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMU_32H_float2int() {
    assert_eq!(Instruction::FCVTMU_32H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMU_32H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_32H_float2int() {
    assert_eq!(Instruction::FCVTZS_32H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_32H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_32H_float2int() {
    assert_eq!(Instruction::FCVTZU_32H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_32H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_PNEXT_p_p_p() {
    assert_eq!(Instruction::PNEXT_p_p_p { size: 3, Pg: 15, Pdn: 15, }.encode().decode(), 
                Instruction::PNEXT_p_p_p { size: 3, Pg: 15, Pdn: 15, })
}
#[test]
fn roundtrip_MOV_ORR_32_log_shift() {
    assert_eq!(Instruction::MOV_ORR_32_log_shift { Rm: 31, Rd: 31, }.encode().decode(), 
                Instruction::MOV_ORR_32_log_shift { Rm: 31, Rd: 31, })
}
#[test]
fn roundtrip_STADDB_LDADDB_32_memop() {
    assert_eq!(Instruction::STADDB_LDADDB_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STADDB_LDADDB_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STCLRB_LDCLRB_32_memop() {
    assert_eq!(Instruction::STCLRB_LDCLRB_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STCLRB_LDCLRB_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STEORB_LDEORB_32_memop() {
    assert_eq!(Instruction::STEORB_LDEORB_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STEORB_LDEORB_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSETB_LDSETB_32_memop() {
    assert_eq!(Instruction::STSETB_LDSETB_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSETB_LDSETB_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSMAXB_LDSMAXB_32_memop() {
    assert_eq!(Instruction::STSMAXB_LDSMAXB_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSMAXB_LDSMAXB_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSMINB_LDSMINB_32_memop() {
    assert_eq!(Instruction::STSMINB_LDSMINB_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSMINB_LDSMINB_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STUMAXB_LDUMAXB_32_memop() {
    assert_eq!(Instruction::STUMAXB_LDUMAXB_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STUMAXB_LDUMAXB_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STUMINB_LDUMINB_32_memop() {
    assert_eq!(Instruction::STUMINB_LDUMINB_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STUMINB_LDUMINB_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STADDLB_LDADDLB_32_memop() {
    assert_eq!(Instruction::STADDLB_LDADDLB_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STADDLB_LDADDLB_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STCLRLB_LDCLRLB_32_memop() {
    assert_eq!(Instruction::STCLRLB_LDCLRLB_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STCLRLB_LDCLRLB_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STEORLB_LDEORLB_32_memop() {
    assert_eq!(Instruction::STEORLB_LDEORLB_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STEORLB_LDEORLB_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSETLB_LDSETLB_32_memop() {
    assert_eq!(Instruction::STSETLB_LDSETLB_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSETLB_LDSETLB_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSMAXLB_LDSMAXLB_32_memop() {
    assert_eq!(Instruction::STSMAXLB_LDSMAXLB_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSMAXLB_LDSMAXLB_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSMINLB_LDSMINLB_32_memop() {
    assert_eq!(Instruction::STSMINLB_LDSMINLB_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSMINLB_LDSMINLB_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STUMAXLB_LDUMAXLB_32_memop() {
    assert_eq!(Instruction::STUMAXLB_LDUMAXLB_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STUMAXLB_LDUMAXLB_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STUMINLB_LDUMINLB_32_memop() {
    assert_eq!(Instruction::STUMINLB_LDUMINLB_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STUMINLB_LDUMINLB_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_AESE_B_cryptoaes() {
    assert_eq!(Instruction::AESE_B_cryptoaes { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::AESE_B_cryptoaes { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_AESD_B_cryptoaes() {
    assert_eq!(Instruction::AESD_B_cryptoaes { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::AESD_B_cryptoaes { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_AESMC_B_cryptoaes() {
    assert_eq!(Instruction::AESMC_B_cryptoaes { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::AESMC_B_cryptoaes { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_AESIMC_B_cryptoaes() {
    assert_eq!(Instruction::AESIMC_B_cryptoaes { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::AESIMC_B_cryptoaes { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UXTB_UBFM_32M_bitfield() {
    assert_eq!(Instruction::UXTB_UBFM_32M_bitfield { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UXTB_UBFM_32M_bitfield { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UXTH_UBFM_32M_bitfield() {
    assert_eq!(Instruction::UXTH_UBFM_32M_bitfield { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UXTH_UBFM_32M_bitfield { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_NGC_SBC_32_addsub_carry() {
    assert_eq!(Instruction::NGC_SBC_32_addsub_carry { Rm: 31, Rd: 31, }.encode().decode(), 
                Instruction::NGC_SBC_32_addsub_carry { Rm: 31, Rd: 31, })
}
#[test]
fn roundtrip_RBIT_32_dp_1src() {
    assert_eq!(Instruction::RBIT_32_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::RBIT_32_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_REV16_32_dp_1src() {
    assert_eq!(Instruction::REV16_32_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::REV16_32_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_REV_32_dp_1src() {
    assert_eq!(Instruction::REV_32_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::REV_32_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CLZ_32_dp_1src() {
    assert_eq!(Instruction::CLZ_32_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CLZ_32_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CLS_32_dp_1src() {
    assert_eq!(Instruction::CLS_32_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CLS_32_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHA1H_SS_cryptosha2() {
    assert_eq!(Instruction::SHA1H_SS_cryptosha2 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHA1H_SS_cryptosha2 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHA1SU1_VV_cryptosha2() {
    assert_eq!(Instruction::SHA1SU1_VV_cryptosha2 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHA1SU1_VV_cryptosha2 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHA256SU0_VV_cryptosha2() {
    assert_eq!(Instruction::SHA256SU0_VV_cryptosha2 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHA256SU0_VV_cryptosha2 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNS_asisdmiscfp16_R() {
    assert_eq!(Instruction::FCVTNS_asisdmiscfp16_R { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNS_asisdmiscfp16_R { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMS_asisdmiscfp16_R() {
    assert_eq!(Instruction::FCVTMS_asisdmiscfp16_R { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMS_asisdmiscfp16_R { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAS_asisdmiscfp16_R() {
    assert_eq!(Instruction::FCVTAS_asisdmiscfp16_R { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAS_asisdmiscfp16_R { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_asisdmiscfp16_R() {
    assert_eq!(Instruction::SCVTF_asisdmiscfp16_R { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_asisdmiscfp16_R { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMGT_asisdmiscfp16_FZ() {
    assert_eq!(Instruction::FCMGT_asisdmiscfp16_FZ { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMGT_asisdmiscfp16_FZ { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMEQ_asisdmiscfp16_FZ() {
    assert_eq!(Instruction::FCMEQ_asisdmiscfp16_FZ { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMEQ_asisdmiscfp16_FZ { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMLT_asisdmiscfp16_FZ() {
    assert_eq!(Instruction::FCMLT_asisdmiscfp16_FZ { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMLT_asisdmiscfp16_FZ { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPS_asisdmiscfp16_R() {
    assert_eq!(Instruction::FCVTPS_asisdmiscfp16_R { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPS_asisdmiscfp16_R { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_asisdmiscfp16_R() {
    assert_eq!(Instruction::FCVTZS_asisdmiscfp16_R { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_asisdmiscfp16_R { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRECPE_asisdmiscfp16_R() {
    assert_eq!(Instruction::FRECPE_asisdmiscfp16_R { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRECPE_asisdmiscfp16_R { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRECPX_asisdmiscfp16_R() {
    assert_eq!(Instruction::FRECPX_asisdmiscfp16_R { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRECPX_asisdmiscfp16_R { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_STADDH_LDADDH_32_memop() {
    assert_eq!(Instruction::STADDH_LDADDH_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STADDH_LDADDH_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STCLRH_LDCLRH_32_memop() {
    assert_eq!(Instruction::STCLRH_LDCLRH_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STCLRH_LDCLRH_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STEORH_LDEORH_32_memop() {
    assert_eq!(Instruction::STEORH_LDEORH_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STEORH_LDEORH_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSETH_LDSETH_32_memop() {
    assert_eq!(Instruction::STSETH_LDSETH_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSETH_LDSETH_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSMAXH_LDSMAXH_32_memop() {
    assert_eq!(Instruction::STSMAXH_LDSMAXH_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSMAXH_LDSMAXH_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSMINH_LDSMINH_32_memop() {
    assert_eq!(Instruction::STSMINH_LDSMINH_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSMINH_LDSMINH_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STUMAXH_LDUMAXH_32_memop() {
    assert_eq!(Instruction::STUMAXH_LDUMAXH_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STUMAXH_LDUMAXH_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STUMINH_LDUMINH_32_memop() {
    assert_eq!(Instruction::STUMINH_LDUMINH_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STUMINH_LDUMINH_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STADDLH_LDADDLH_32_memop() {
    assert_eq!(Instruction::STADDLH_LDADDLH_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STADDLH_LDADDLH_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STCLRLH_LDCLRLH_32_memop() {
    assert_eq!(Instruction::STCLRLH_LDCLRLH_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STCLRLH_LDCLRLH_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STEORLH_LDEORLH_32_memop() {
    assert_eq!(Instruction::STEORLH_LDEORLH_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STEORLH_LDEORLH_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSETLH_LDSETLH_32_memop() {
    assert_eq!(Instruction::STSETLH_LDSETLH_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSETLH_LDSETLH_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSMAXLH_LDSMAXLH_32_memop() {
    assert_eq!(Instruction::STSMAXLH_LDSMAXLH_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSMAXLH_LDSMAXLH_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSMINLH_LDSMINLH_32_memop() {
    assert_eq!(Instruction::STSMINLH_LDSMINLH_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSMINLH_LDSMINLH_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STUMAXLH_LDUMAXLH_32_memop() {
    assert_eq!(Instruction::STUMAXLH_LDUMAXLH_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STUMAXLH_LDUMAXLH_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STUMINLH_LDUMINLH_32_memop() {
    assert_eq!(Instruction::STUMINLH_LDUMINLH_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STUMINLH_LDUMINLH_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_NGCS_SBCS_32_addsub_carry() {
    assert_eq!(Instruction::NGCS_SBCS_32_addsub_carry { Rm: 31, Rd: 31, }.encode().decode(), 
                Instruction::NGCS_SBCS_32_addsub_carry { Rm: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNU_asisdmiscfp16_R() {
    assert_eq!(Instruction::FCVTNU_asisdmiscfp16_R { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNU_asisdmiscfp16_R { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMU_asisdmiscfp16_R() {
    assert_eq!(Instruction::FCVTMU_asisdmiscfp16_R { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMU_asisdmiscfp16_R { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAU_asisdmiscfp16_R() {
    assert_eq!(Instruction::FCVTAU_asisdmiscfp16_R { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAU_asisdmiscfp16_R { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_asisdmiscfp16_R() {
    assert_eq!(Instruction::UCVTF_asisdmiscfp16_R { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_asisdmiscfp16_R { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMGE_asisdmiscfp16_FZ() {
    assert_eq!(Instruction::FCMGE_asisdmiscfp16_FZ { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMGE_asisdmiscfp16_FZ { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMLE_asisdmiscfp16_FZ() {
    assert_eq!(Instruction::FCMLE_asisdmiscfp16_FZ { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMLE_asisdmiscfp16_FZ { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPU_asisdmiscfp16_R() {
    assert_eq!(Instruction::FCVTPU_asisdmiscfp16_R { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPU_asisdmiscfp16_R { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_asisdmiscfp16_R() {
    assert_eq!(Instruction::FCVTZU_asisdmiscfp16_R { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_asisdmiscfp16_R { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRSQRTE_asisdmiscfp16_R() {
    assert_eq!(Instruction::FRSQRTE_asisdmiscfp16_R { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRSQRTE_asisdmiscfp16_R { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOV_ADD_64_addsub_imm() {
    assert_eq!(Instruction::MOV_ADD_64_addsub_imm { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MOV_ADD_64_addsub_imm { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SXTB_SBFM_64M_bitfield() {
    assert_eq!(Instruction::SXTB_SBFM_64M_bitfield { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SXTB_SBFM_64M_bitfield { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SXTH_SBFM_64M_bitfield() {
    assert_eq!(Instruction::SXTH_SBFM_64M_bitfield { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SXTH_SBFM_64M_bitfield { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SXTW_SBFM_64M_bitfield() {
    assert_eq!(Instruction::SXTW_SBFM_64M_bitfield { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SXTW_SBFM_64M_bitfield { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNS_64S_float2int() {
    assert_eq!(Instruction::FCVTNS_64S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNS_64S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNU_64S_float2int() {
    assert_eq!(Instruction::FCVTNU_64S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNU_64S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_S64_float2int() {
    assert_eq!(Instruction::SCVTF_S64_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_S64_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_S64_float2int() {
    assert_eq!(Instruction::UCVTF_S64_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_S64_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAS_64S_float2int() {
    assert_eq!(Instruction::FCVTAS_64S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAS_64S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAU_64S_float2int() {
    assert_eq!(Instruction::FCVTAU_64S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAU_64S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPS_64S_float2int() {
    assert_eq!(Instruction::FCVTPS_64S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPS_64S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPU_64S_float2int() {
    assert_eq!(Instruction::FCVTPU_64S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPU_64S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMS_64S_float2int() {
    assert_eq!(Instruction::FCVTMS_64S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMS_64S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMU_64S_float2int() {
    assert_eq!(Instruction::FCVTMU_64S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMU_64S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_64S_float2int() {
    assert_eq!(Instruction::FCVTZS_64S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_64S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_64S_float2int() {
    assert_eq!(Instruction::FCVTZU_64S_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_64S_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNS_64D_float2int() {
    assert_eq!(Instruction::FCVTNS_64D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNS_64D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNU_64D_float2int() {
    assert_eq!(Instruction::FCVTNU_64D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNU_64D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_D64_float2int() {
    assert_eq!(Instruction::SCVTF_D64_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_D64_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_D64_float2int() {
    assert_eq!(Instruction::UCVTF_D64_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_D64_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAS_64D_float2int() {
    assert_eq!(Instruction::FCVTAS_64D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAS_64D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAU_64D_float2int() {
    assert_eq!(Instruction::FCVTAU_64D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAU_64D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_64D_float2int() {
    assert_eq!(Instruction::FMOV_64D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_64D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_D64_float2int() {
    assert_eq!(Instruction::FMOV_D64_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_D64_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPS_64D_float2int() {
    assert_eq!(Instruction::FCVTPS_64D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPS_64D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPU_64D_float2int() {
    assert_eq!(Instruction::FCVTPU_64D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPU_64D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMS_64D_float2int() {
    assert_eq!(Instruction::FCVTMS_64D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMS_64D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMU_64D_float2int() {
    assert_eq!(Instruction::FCVTMU_64D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMU_64D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_64D_float2int() {
    assert_eq!(Instruction::FCVTZS_64D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_64D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_64D_float2int() {
    assert_eq!(Instruction::FCVTZU_64D_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_64D_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_64VX_float2int() {
    assert_eq!(Instruction::FMOV_64VX_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_64VX_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_V64I_float2int() {
    assert_eq!(Instruction::FMOV_V64I_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_V64I_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNS_64H_float2int() {
    assert_eq!(Instruction::FCVTNS_64H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNS_64H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNU_64H_float2int() {
    assert_eq!(Instruction::FCVTNU_64H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNU_64H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_H64_float2int() {
    assert_eq!(Instruction::SCVTF_H64_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_H64_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_H64_float2int() {
    assert_eq!(Instruction::UCVTF_H64_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_H64_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAS_64H_float2int() {
    assert_eq!(Instruction::FCVTAS_64H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAS_64H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAU_64H_float2int() {
    assert_eq!(Instruction::FCVTAU_64H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAU_64H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_64H_float2int() {
    assert_eq!(Instruction::FMOV_64H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_64H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_H64_float2int() {
    assert_eq!(Instruction::FMOV_H64_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_H64_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPS_64H_float2int() {
    assert_eq!(Instruction::FCVTPS_64H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPS_64H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPU_64H_float2int() {
    assert_eq!(Instruction::FCVTPU_64H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPU_64H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMS_64H_float2int() {
    assert_eq!(Instruction::FCVTMS_64H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMS_64H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMU_64H_float2int() {
    assert_eq!(Instruction::FCVTMU_64H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMU_64H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_64H_float2int() {
    assert_eq!(Instruction::FCVTZS_64H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_64H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_64H_float2int() {
    assert_eq!(Instruction::FCVTZU_64H_float2int { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_64H_float2int { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOV_ORR_64_log_shift() {
    assert_eq!(Instruction::MOV_ORR_64_log_shift { Rm: 31, Rd: 31, }.encode().decode(), 
                Instruction::MOV_ORR_64_log_shift { Rm: 31, Rd: 31, })
}
#[test]
fn roundtrip_STADD_LDADD_32_memop() {
    assert_eq!(Instruction::STADD_LDADD_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STADD_LDADD_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STCLR_LDCLR_32_memop() {
    assert_eq!(Instruction::STCLR_LDCLR_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STCLR_LDCLR_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STEOR_LDEOR_32_memop() {
    assert_eq!(Instruction::STEOR_LDEOR_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STEOR_LDEOR_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSET_LDSET_32_memop() {
    assert_eq!(Instruction::STSET_LDSET_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSET_LDSET_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSMAX_LDSMAX_32_memop() {
    assert_eq!(Instruction::STSMAX_LDSMAX_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSMAX_LDSMAX_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSMIN_LDSMIN_32_memop() {
    assert_eq!(Instruction::STSMIN_LDSMIN_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSMIN_LDSMIN_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STUMAX_LDUMAX_32_memop() {
    assert_eq!(Instruction::STUMAX_LDUMAX_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STUMAX_LDUMAX_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STUMIN_LDUMIN_32_memop() {
    assert_eq!(Instruction::STUMIN_LDUMIN_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STUMIN_LDUMIN_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STADDL_LDADDL_32_memop() {
    assert_eq!(Instruction::STADDL_LDADDL_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STADDL_LDADDL_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STCLRL_LDCLRL_32_memop() {
    assert_eq!(Instruction::STCLRL_LDCLRL_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STCLRL_LDCLRL_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STEORL_LDEORL_32_memop() {
    assert_eq!(Instruction::STEORL_LDEORL_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STEORL_LDEORL_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSETL_LDSETL_32_memop() {
    assert_eq!(Instruction::STSETL_LDSETL_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSETL_LDSETL_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSMAXL_LDSMAXL_32_memop() {
    assert_eq!(Instruction::STSMAXL_LDSMAXL_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSMAXL_LDSMAXL_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSMINL_LDSMINL_32_memop() {
    assert_eq!(Instruction::STSMINL_LDSMINL_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSMINL_LDSMINL_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STUMAXL_LDUMAXL_32_memop() {
    assert_eq!(Instruction::STUMAXL_LDUMAXL_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STUMAXL_LDUMAXL_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STUMINL_LDUMINL_32_memop() {
    assert_eq!(Instruction::STUMINL_LDUMINL_32_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STUMINL_LDUMINL_32_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_CMPP_SUBPS_64S_dp_2src() {
    assert_eq!(Instruction::CMPP_SUBPS_64S_dp_2src { Xm: 31, Xn: 31, }.encode().decode(), 
                Instruction::CMPP_SUBPS_64S_dp_2src { Xm: 31, Xn: 31, })
}
#[test]
fn roundtrip_SHA512SU0_VV2_cryptosha512_2() {
    assert_eq!(Instruction::SHA512SU0_VV2_cryptosha512_2 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHA512SU0_VV2_cryptosha512_2 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SM4E_VV4_cryptosha512_2() {
    assert_eq!(Instruction::SM4E_VV4_cryptosha512_2 { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SM4E_VV4_cryptosha512_2 { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MSR_SI_pstate() {
    assert_eq!(Instruction::MSR_SI_pstate { op1: 7, CRm: 15, op2: 7, }.encode().decode(), 
                Instruction::MSR_SI_pstate { op1: 7, CRm: 15, op2: 7, })
}
#[test]
fn roundtrip_BRAA_64P_branch_reg() {
    assert_eq!(Instruction::BRAA_64P_branch_reg { Rn: 31, Rm: 31, }.encode().decode(), 
                Instruction::BRAA_64P_branch_reg { Rn: 31, Rm: 31, })
}
#[test]
fn roundtrip_BRAB_64P_branch_reg() {
    assert_eq!(Instruction::BRAB_64P_branch_reg { Rn: 31, Rm: 31, }.encode().decode(), 
                Instruction::BRAB_64P_branch_reg { Rn: 31, Rm: 31, })
}
#[test]
fn roundtrip_BLRAA_64P_branch_reg() {
    assert_eq!(Instruction::BLRAA_64P_branch_reg { Rn: 31, Rm: 31, }.encode().decode(), 
                Instruction::BLRAA_64P_branch_reg { Rn: 31, Rm: 31, })
}
#[test]
fn roundtrip_BLRAB_64P_branch_reg() {
    assert_eq!(Instruction::BLRAB_64P_branch_reg { Rn: 31, Rm: 31, }.encode().decode(), 
                Instruction::BLRAB_64P_branch_reg { Rn: 31, Rm: 31, })
}
#[test]
fn roundtrip_STZGM_64bulk_ldsttags() {
    assert_eq!(Instruction::STZGM_64bulk_ldsttags { Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::STZGM_64bulk_ldsttags { Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_STGM_64bulk_ldsttags() {
    assert_eq!(Instruction::STGM_64bulk_ldsttags { Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::STGM_64bulk_ldsttags { Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_LDGM_64bulk_ldsttags() {
    assert_eq!(Instruction::LDGM_64bulk_ldsttags { Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::LDGM_64bulk_ldsttags { Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_NGC_SBC_64_addsub_carry() {
    assert_eq!(Instruction::NGC_SBC_64_addsub_carry { Rm: 31, Rd: 31, }.encode().decode(), 
                Instruction::NGC_SBC_64_addsub_carry { Rm: 31, Rd: 31, })
}
#[test]
fn roundtrip_RBIT_64_dp_1src() {
    assert_eq!(Instruction::RBIT_64_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::RBIT_64_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_REV16_64_dp_1src() {
    assert_eq!(Instruction::REV16_64_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::REV16_64_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_REV32_64_dp_1src() {
    assert_eq!(Instruction::REV32_64_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::REV32_64_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_REV_64_dp_1src() {
    assert_eq!(Instruction::REV_64_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::REV_64_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_REV64_REV_64_dp_1src() {
    assert_eq!(Instruction::REV64_REV_64_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::REV64_REV_64_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CLZ_64_dp_1src() {
    assert_eq!(Instruction::CLZ_64_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CLZ_64_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CLS_64_dp_1src() {
    assert_eq!(Instruction::CLS_64_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CLS_64_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_PACIA_64P_dp_1src() {
    assert_eq!(Instruction::PACIA_64P_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::PACIA_64P_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_PACIB_64P_dp_1src() {
    assert_eq!(Instruction::PACIB_64P_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::PACIB_64P_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_PACDA_64P_dp_1src() {
    assert_eq!(Instruction::PACDA_64P_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::PACDA_64P_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_PACDB_64P_dp_1src() {
    assert_eq!(Instruction::PACDB_64P_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::PACDB_64P_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_AUTIA_64P_dp_1src() {
    assert_eq!(Instruction::AUTIA_64P_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::AUTIA_64P_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_AUTIB_64P_dp_1src() {
    assert_eq!(Instruction::AUTIB_64P_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::AUTIB_64P_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_AUTDA_64P_dp_1src() {
    assert_eq!(Instruction::AUTDA_64P_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::AUTDA_64P_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_AUTDB_64P_dp_1src() {
    assert_eq!(Instruction::AUTDB_64P_dp_1src { Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::AUTDB_64P_dp_1src { Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_STADD_LDADD_64_memop() {
    assert_eq!(Instruction::STADD_LDADD_64_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STADD_LDADD_64_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STCLR_LDCLR_64_memop() {
    assert_eq!(Instruction::STCLR_LDCLR_64_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STCLR_LDCLR_64_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STEOR_LDEOR_64_memop() {
    assert_eq!(Instruction::STEOR_LDEOR_64_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STEOR_LDEOR_64_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSET_LDSET_64_memop() {
    assert_eq!(Instruction::STSET_LDSET_64_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSET_LDSET_64_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSMAX_LDSMAX_64_memop() {
    assert_eq!(Instruction::STSMAX_LDSMAX_64_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSMAX_LDSMAX_64_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSMIN_LDSMIN_64_memop() {
    assert_eq!(Instruction::STSMIN_LDSMIN_64_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSMIN_LDSMIN_64_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STUMAX_LDUMAX_64_memop() {
    assert_eq!(Instruction::STUMAX_LDUMAX_64_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STUMAX_LDUMAX_64_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STUMIN_LDUMIN_64_memop() {
    assert_eq!(Instruction::STUMIN_LDUMIN_64_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STUMIN_LDUMIN_64_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_ST64B_64L_memop() {
    assert_eq!(Instruction::ST64B_64L_memop { Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST64B_64L_memop { Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD64B_64L_memop() {
    assert_eq!(Instruction::LD64B_64L_memop { Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD64B_64L_memop { Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STADDL_LDADDL_64_memop() {
    assert_eq!(Instruction::STADDL_LDADDL_64_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STADDL_LDADDL_64_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STCLRL_LDCLRL_64_memop() {
    assert_eq!(Instruction::STCLRL_LDCLRL_64_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STCLRL_LDCLRL_64_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STEORL_LDEORL_64_memop() {
    assert_eq!(Instruction::STEORL_LDEORL_64_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STEORL_LDEORL_64_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSETL_LDSETL_64_memop() {
    assert_eq!(Instruction::STSETL_LDSETL_64_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSETL_LDSETL_64_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSMAXL_LDSMAXL_64_memop() {
    assert_eq!(Instruction::STSMAXL_LDSMAXL_64_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSMAXL_LDSMAXL_64_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STSMINL_LDSMINL_64_memop() {
    assert_eq!(Instruction::STSMINL_LDSMINL_64_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STSMINL_LDSMINL_64_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STUMAXL_LDUMAXL_64_memop() {
    assert_eq!(Instruction::STUMAXL_LDUMAXL_64_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STUMAXL_LDUMAXL_64_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_STUMINL_LDUMINL_64_memop() {
    assert_eq!(Instruction::STUMINL_LDUMINL_64_memop { Rs: 31, Rn: 31, }.encode().decode(), 
                Instruction::STUMINL_LDUMINL_64_memop { Rs: 31, Rn: 31, })
}
#[test]
fn roundtrip_NGCS_SBCS_64_addsub_carry() {
    assert_eq!(Instruction::NGCS_SBCS_64_addsub_carry { Rm: 31, Rd: 31, }.encode().decode(), 
                Instruction::NGCS_SBCS_64_addsub_carry { Rm: 31, Rd: 31, })
}
#[test]
fn roundtrip_RDVL_r_i() {
    assert_eq!(Instruction::RDVL_r_i { imm6: 63, Rd: 31, }.encode().decode(), 
                Instruction::RDVL_r_i { imm6: 63, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_cpy_z_p_i() {
    assert_eq!(Instruction::FMOV_cpy_z_p_i { size: 3, Pg: 15, Zd: 31, }.encode().decode(), 
                Instruction::FMOV_cpy_z_p_i { size: 3, Pg: 15, Zd: 31, })
}
#[test]
fn roundtrip_ST1_asisdlso_D1_1d() {
    assert_eq!(Instruction::ST1_asisdlso_D1_1d { Q: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlso_D1_1d { Q: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST3_asisdlso_D3_3d() {
    assert_eq!(Instruction::ST3_asisdlso_D3_3d { Q: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST3_asisdlso_D3_3d { Q: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST2_asisdlso_D2_2d() {
    assert_eq!(Instruction::ST2_asisdlso_D2_2d { Q: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST2_asisdlso_D2_2d { Q: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST4_asisdlso_D4_4d() {
    assert_eq!(Instruction::ST4_asisdlso_D4_4d { Q: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST4_asisdlso_D4_4d { Q: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlso_D1_1d() {
    assert_eq!(Instruction::LD1_asisdlso_D1_1d { Q: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlso_D1_1d { Q: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3_asisdlso_D3_3d() {
    assert_eq!(Instruction::LD3_asisdlso_D3_3d { Q: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3_asisdlso_D3_3d { Q: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2_asisdlso_D2_2d() {
    assert_eq!(Instruction::LD2_asisdlso_D2_2d { Q: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2_asisdlso_D2_2d { Q: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4_asisdlso_D4_4d() {
    assert_eq!(Instruction::LD4_asisdlso_D4_4d { Q: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4_asisdlso_D4_4d { Q: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlsop_D1_i1d() {
    assert_eq!(Instruction::ST1_asisdlsop_D1_i1d { Q: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlsop_D1_i1d { Q: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST3_asisdlsop_D3_i3d() {
    assert_eq!(Instruction::ST3_asisdlsop_D3_i3d { Q: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST3_asisdlsop_D3_i3d { Q: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST2_asisdlsop_D2_i2d() {
    assert_eq!(Instruction::ST2_asisdlsop_D2_i2d { Q: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST2_asisdlsop_D2_i2d { Q: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST4_asisdlsop_D4_i4d() {
    assert_eq!(Instruction::ST4_asisdlsop_D4_i4d { Q: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST4_asisdlsop_D4_i4d { Q: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlsop_D1_i1d() {
    assert_eq!(Instruction::LD1_asisdlsop_D1_i1d { Q: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlsop_D1_i1d { Q: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3_asisdlsop_D3_i3d() {
    assert_eq!(Instruction::LD3_asisdlsop_D3_i3d { Q: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3_asisdlsop_D3_i3d { Q: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2_asisdlsop_D2_i2d() {
    assert_eq!(Instruction::LD2_asisdlsop_D2_i2d { Q: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2_asisdlsop_D2_i2d { Q: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4_asisdlsop_D4_i4d() {
    assert_eq!(Instruction::LD4_asisdlsop_D4_i4d { Q: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4_asisdlsop_D4_i4d { Q: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_FMAXNMV_asimdall_only_H() {
    assert_eq!(Instruction::FMAXNMV_asimdall_only_H { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXNMV_asimdall_only_H { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAXV_asimdall_only_H() {
    assert_eq!(Instruction::FMAXV_asimdall_only_H { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXV_asimdall_only_H { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTN_asimdmiscfp16_R() {
    assert_eq!(Instruction::FRINTN_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTN_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTM_asimdmiscfp16_R() {
    assert_eq!(Instruction::FRINTM_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTM_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNS_asimdmiscfp16_R() {
    assert_eq!(Instruction::FCVTNS_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNS_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMS_asimdmiscfp16_R() {
    assert_eq!(Instruction::FCVTMS_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMS_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAS_asimdmiscfp16_R() {
    assert_eq!(Instruction::FCVTAS_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAS_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_asimdmiscfp16_R() {
    assert_eq!(Instruction::SCVTF_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BFCVTN_asimdmisc_4S() {
    assert_eq!(Instruction::BFCVTN_asimdmisc_4S { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BFCVTN_asimdmisc_4S { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINNMV_asimdall_only_H() {
    assert_eq!(Instruction::FMINNMV_asimdall_only_H { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINNMV_asimdall_only_H { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINV_asimdall_only_H() {
    assert_eq!(Instruction::FMINV_asimdall_only_H { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINV_asimdall_only_H { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMGT_asimdmiscfp16_FZ() {
    assert_eq!(Instruction::FCMGT_asimdmiscfp16_FZ { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMGT_asimdmiscfp16_FZ { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMEQ_asimdmiscfp16_FZ() {
    assert_eq!(Instruction::FCMEQ_asimdmiscfp16_FZ { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMEQ_asimdmiscfp16_FZ { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMLT_asimdmiscfp16_FZ() {
    assert_eq!(Instruction::FCMLT_asimdmiscfp16_FZ { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMLT_asimdmiscfp16_FZ { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FABS_asimdmiscfp16_R() {
    assert_eq!(Instruction::FABS_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FABS_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTP_asimdmiscfp16_R() {
    assert_eq!(Instruction::FRINTP_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTP_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTZ_asimdmiscfp16_R() {
    assert_eq!(Instruction::FRINTZ_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTZ_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPS_asimdmiscfp16_R() {
    assert_eq!(Instruction::FCVTPS_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPS_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_asimdmiscfp16_R() {
    assert_eq!(Instruction::FCVTZS_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRECPE_asimdmiscfp16_R() {
    assert_eq!(Instruction::FRECPE_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRECPE_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_PTRUE_p_s() {
    assert_eq!(Instruction::PTRUE_p_s { size: 3, pattern: 31, Pd: 15, }.encode().decode(), 
                Instruction::PTRUE_p_s { size: 3, pattern: 31, Pd: 15, })
}
#[test]
fn roundtrip_PTRUES_p_s() {
    assert_eq!(Instruction::PTRUES_p_s { size: 3, pattern: 31, Pd: 15, }.encode().decode(), 
                Instruction::PTRUES_p_s { size: 3, pattern: 31, Pd: 15, })
}
#[test]
fn roundtrip_SQINCP_z_p_z() {
    assert_eq!(Instruction::SQINCP_z_p_z { size: 3, Pm: 15, Zdn: 31, }.encode().decode(), 
                Instruction::SQINCP_z_p_z { size: 3, Pm: 15, Zdn: 31, })
}
#[test]
fn roundtrip_SQINCP_r_p_r_sx() {
    assert_eq!(Instruction::SQINCP_r_p_r_sx { size: 3, Pm: 15, Rdn: 31, }.encode().decode(), 
                Instruction::SQINCP_r_p_r_sx { size: 3, Pm: 15, Rdn: 31, })
}
#[test]
fn roundtrip_SQINCP_r_p_r_x() {
    assert_eq!(Instruction::SQINCP_r_p_r_x { size: 3, Pm: 15, Rdn: 31, }.encode().decode(), 
                Instruction::SQINCP_r_p_r_x { size: 3, Pm: 15, Rdn: 31, })
}
#[test]
fn roundtrip_UQINCP_z_p_z() {
    assert_eq!(Instruction::UQINCP_z_p_z { size: 3, Pm: 15, Zdn: 31, }.encode().decode(), 
                Instruction::UQINCP_z_p_z { size: 3, Pm: 15, Zdn: 31, })
}
#[test]
fn roundtrip_UQINCP_r_p_r_uw() {
    assert_eq!(Instruction::UQINCP_r_p_r_uw { size: 3, Pm: 15, Rdn: 31, }.encode().decode(), 
                Instruction::UQINCP_r_p_r_uw { size: 3, Pm: 15, Rdn: 31, })
}
#[test]
fn roundtrip_UQINCP_r_p_r_x() {
    assert_eq!(Instruction::UQINCP_r_p_r_x { size: 3, Pm: 15, Rdn: 31, }.encode().decode(), 
                Instruction::UQINCP_r_p_r_x { size: 3, Pm: 15, Rdn: 31, })
}
#[test]
fn roundtrip_SQDECP_z_p_z() {
    assert_eq!(Instruction::SQDECP_z_p_z { size: 3, Pm: 15, Zdn: 31, }.encode().decode(), 
                Instruction::SQDECP_z_p_z { size: 3, Pm: 15, Zdn: 31, })
}
#[test]
fn roundtrip_SQDECP_r_p_r_sx() {
    assert_eq!(Instruction::SQDECP_r_p_r_sx { size: 3, Pm: 15, Rdn: 31, }.encode().decode(), 
                Instruction::SQDECP_r_p_r_sx { size: 3, Pm: 15, Rdn: 31, })
}
#[test]
fn roundtrip_SQDECP_r_p_r_x() {
    assert_eq!(Instruction::SQDECP_r_p_r_x { size: 3, Pm: 15, Rdn: 31, }.encode().decode(), 
                Instruction::SQDECP_r_p_r_x { size: 3, Pm: 15, Rdn: 31, })
}
#[test]
fn roundtrip_UQDECP_z_p_z() {
    assert_eq!(Instruction::UQDECP_z_p_z { size: 3, Pm: 15, Zdn: 31, }.encode().decode(), 
                Instruction::UQDECP_z_p_z { size: 3, Pm: 15, Zdn: 31, })
}
#[test]
fn roundtrip_UQDECP_r_p_r_uw() {
    assert_eq!(Instruction::UQDECP_r_p_r_uw { size: 3, Pm: 15, Rdn: 31, }.encode().decode(), 
                Instruction::UQDECP_r_p_r_uw { size: 3, Pm: 15, Rdn: 31, })
}
#[test]
fn roundtrip_UQDECP_r_p_r_x() {
    assert_eq!(Instruction::UQDECP_r_p_r_x { size: 3, Pm: 15, Rdn: 31, }.encode().decode(), 
                Instruction::UQDECP_r_p_r_x { size: 3, Pm: 15, Rdn: 31, })
}
#[test]
fn roundtrip_INCP_z_p_z() {
    assert_eq!(Instruction::INCP_z_p_z { size: 3, Pm: 15, Zdn: 31, }.encode().decode(), 
                Instruction::INCP_z_p_z { size: 3, Pm: 15, Zdn: 31, })
}
#[test]
fn roundtrip_INCP_r_p_r() {
    assert_eq!(Instruction::INCP_r_p_r { size: 3, Pm: 15, Rdn: 31, }.encode().decode(), 
                Instruction::INCP_r_p_r { size: 3, Pm: 15, Rdn: 31, })
}
#[test]
fn roundtrip_DECP_z_p_z() {
    assert_eq!(Instruction::DECP_z_p_z { size: 3, Pm: 15, Zdn: 31, }.encode().decode(), 
                Instruction::DECP_z_p_z { size: 3, Pm: 15, Zdn: 31, })
}
#[test]
fn roundtrip_DECP_r_p_r() {
    assert_eq!(Instruction::DECP_r_p_r { size: 3, Pm: 15, Rdn: 31, }.encode().decode(), 
                Instruction::DECP_r_p_r { size: 3, Pm: 15, Rdn: 31, })
}
#[test]
fn roundtrip_CTERMEQ_rr() {
    assert_eq!(Instruction::CTERMEQ_rr { sz: 1, Rm: 31, Rn: 31, }.encode().decode(), 
                Instruction::CTERMEQ_rr { sz: 1, Rm: 31, Rn: 31, })
}
#[test]
fn roundtrip_CTERMNE_rr() {
    assert_eq!(Instruction::CTERMNE_rr { sz: 1, Rm: 31, Rn: 31, }.encode().decode(), 
                Instruction::CTERMNE_rr { sz: 1, Rm: 31, Rn: 31, })
}
#[test]
fn roundtrip_MVN_NOT_asimdmisc_R() {
    assert_eq!(Instruction::MVN_NOT_asimdmisc_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MVN_NOT_asimdmisc_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_NOT_asimdmisc_R() {
    assert_eq!(Instruction::NOT_asimdmisc_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::NOT_asimdmisc_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_RBIT_asimdmisc_R() {
    assert_eq!(Instruction::RBIT_asimdmisc_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::RBIT_asimdmisc_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTA_asimdmiscfp16_R() {
    assert_eq!(Instruction::FRINTA_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTA_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTX_asimdmiscfp16_R() {
    assert_eq!(Instruction::FRINTX_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTX_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNU_asimdmiscfp16_R() {
    assert_eq!(Instruction::FCVTNU_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNU_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMU_asimdmiscfp16_R() {
    assert_eq!(Instruction::FCVTMU_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMU_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAU_asimdmiscfp16_R() {
    assert_eq!(Instruction::FCVTAU_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAU_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_asimdmiscfp16_R() {
    assert_eq!(Instruction::UCVTF_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMGE_asimdmiscfp16_FZ() {
    assert_eq!(Instruction::FCMGE_asimdmiscfp16_FZ { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMGE_asimdmiscfp16_FZ { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMLE_asimdmiscfp16_FZ() {
    assert_eq!(Instruction::FCMLE_asimdmiscfp16_FZ { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMLE_asimdmiscfp16_FZ { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FNEG_asimdmiscfp16_R() {
    assert_eq!(Instruction::FNEG_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FNEG_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTI_asimdmiscfp16_R() {
    assert_eq!(Instruction::FRINTI_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTI_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPU_asimdmiscfp16_R() {
    assert_eq!(Instruction::FCVTPU_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPU_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_asimdmiscfp16_R() {
    assert_eq!(Instruction::FCVTZU_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRSQRTE_asimdmiscfp16_R() {
    assert_eq!(Instruction::FRSQRTE_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRSQRTE_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FSQRT_asimdmiscfp16_R() {
    assert_eq!(Instruction::FSQRT_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FSQRT_asimdmiscfp16_R { Q: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOV_UMOV_asimdins_X_x() {
    assert_eq!(Instruction::MOV_UMOV_asimdins_X_x { imm5: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MOV_UMOV_asimdins_X_x { imm5: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMOV_asimdins_X_x() {
    assert_eq!(Instruction::UMOV_asimdins_X_x { imm5: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMOV_asimdins_X_x { imm5: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNS_asisdmisc_R() {
    assert_eq!(Instruction::FCVTNS_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNS_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMS_asisdmisc_R() {
    assert_eq!(Instruction::FCVTMS_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMS_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAS_asisdmisc_R() {
    assert_eq!(Instruction::FCVTAS_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAS_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_asisdmisc_R() {
    assert_eq!(Instruction::SCVTF_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAXNMP_asisdpair_only_H() {
    assert_eq!(Instruction::FMAXNMP_asisdpair_only_H { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXNMP_asisdpair_only_H { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FADDP_asisdpair_only_H() {
    assert_eq!(Instruction::FADDP_asisdpair_only_H { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FADDP_asisdpair_only_H { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAXP_asisdpair_only_H() {
    assert_eq!(Instruction::FMAXP_asisdpair_only_H { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXP_asisdpair_only_H { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMGT_asisdmisc_FZ() {
    assert_eq!(Instruction::FCMGT_asisdmisc_FZ { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMGT_asisdmisc_FZ { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMEQ_asisdmisc_FZ() {
    assert_eq!(Instruction::FCMEQ_asisdmisc_FZ { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMEQ_asisdmisc_FZ { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMLT_asisdmisc_FZ() {
    assert_eq!(Instruction::FCMLT_asisdmisc_FZ { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMLT_asisdmisc_FZ { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPS_asisdmisc_R() {
    assert_eq!(Instruction::FCVTPS_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPS_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_asisdmisc_R() {
    assert_eq!(Instruction::FCVTZS_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRECPE_asisdmisc_R() {
    assert_eq!(Instruction::FRECPE_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRECPE_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRECPX_asisdmisc_R() {
    assert_eq!(Instruction::FRECPX_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRECPX_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINNMP_asisdpair_only_H() {
    assert_eq!(Instruction::FMINNMP_asisdpair_only_H { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINNMP_asisdpair_only_H { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINP_asisdpair_only_H() {
    assert_eq!(Instruction::FMINP_asisdpair_only_H { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINP_asisdpair_only_H { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FADD_z_p_zs() {
    assert_eq!(Instruction::FADD_z_p_zs { size: 3, Pg: 7, i1: 1, Zdn: 31, }.encode().decode(), 
                Instruction::FADD_z_p_zs { size: 3, Pg: 7, i1: 1, Zdn: 31, })
}
#[test]
fn roundtrip_FSUB_z_p_zs() {
    assert_eq!(Instruction::FSUB_z_p_zs { size: 3, Pg: 7, i1: 1, Zdn: 31, }.encode().decode(), 
                Instruction::FSUB_z_p_zs { size: 3, Pg: 7, i1: 1, Zdn: 31, })
}
#[test]
fn roundtrip_FMUL_z_p_zs() {
    assert_eq!(Instruction::FMUL_z_p_zs { size: 3, Pg: 7, i1: 1, Zdn: 31, }.encode().decode(), 
                Instruction::FMUL_z_p_zs { size: 3, Pg: 7, i1: 1, Zdn: 31, })
}
#[test]
fn roundtrip_FSUBR_z_p_zs() {
    assert_eq!(Instruction::FSUBR_z_p_zs { size: 3, Pg: 7, i1: 1, Zdn: 31, }.encode().decode(), 
                Instruction::FSUBR_z_p_zs { size: 3, Pg: 7, i1: 1, Zdn: 31, })
}
#[test]
fn roundtrip_FMAXNM_z_p_zs() {
    assert_eq!(Instruction::FMAXNM_z_p_zs { size: 3, Pg: 7, i1: 1, Zdn: 31, }.encode().decode(), 
                Instruction::FMAXNM_z_p_zs { size: 3, Pg: 7, i1: 1, Zdn: 31, })
}
#[test]
fn roundtrip_FMINNM_z_p_zs() {
    assert_eq!(Instruction::FMINNM_z_p_zs { size: 3, Pg: 7, i1: 1, Zdn: 31, }.encode().decode(), 
                Instruction::FMINNM_z_p_zs { size: 3, Pg: 7, i1: 1, Zdn: 31, })
}
#[test]
fn roundtrip_FMAX_z_p_zs() {
    assert_eq!(Instruction::FMAX_z_p_zs { size: 3, Pg: 7, i1: 1, Zdn: 31, }.encode().decode(), 
                Instruction::FMAX_z_p_zs { size: 3, Pg: 7, i1: 1, Zdn: 31, })
}
#[test]
fn roundtrip_FMIN_z_p_zs() {
    assert_eq!(Instruction::FMIN_z_p_zs { size: 3, Pg: 7, i1: 1, Zdn: 31, }.encode().decode(), 
                Instruction::FMIN_z_p_zs { size: 3, Pg: 7, i1: 1, Zdn: 31, })
}
#[test]
fn roundtrip_FCVTXN_asisdmisc_N() {
    assert_eq!(Instruction::FCVTXN_asisdmisc_N { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTXN_asisdmisc_N { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNU_asisdmisc_R() {
    assert_eq!(Instruction::FCVTNU_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNU_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMU_asisdmisc_R() {
    assert_eq!(Instruction::FCVTMU_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMU_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAU_asisdmisc_R() {
    assert_eq!(Instruction::FCVTAU_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAU_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_asisdmisc_R() {
    assert_eq!(Instruction::UCVTF_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAXNMP_asisdpair_only_SD() {
    assert_eq!(Instruction::FMAXNMP_asisdpair_only_SD { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXNMP_asisdpair_only_SD { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FADDP_asisdpair_only_SD() {
    assert_eq!(Instruction::FADDP_asisdpair_only_SD { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FADDP_asisdpair_only_SD { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAXP_asisdpair_only_SD() {
    assert_eq!(Instruction::FMAXP_asisdpair_only_SD { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXP_asisdpair_only_SD { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMGE_asisdmisc_FZ() {
    assert_eq!(Instruction::FCMGE_asisdmisc_FZ { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMGE_asisdmisc_FZ { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMLE_asisdmisc_FZ() {
    assert_eq!(Instruction::FCMLE_asisdmisc_FZ { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMLE_asisdmisc_FZ { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPU_asisdmisc_R() {
    assert_eq!(Instruction::FCVTPU_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPU_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_asisdmisc_R() {
    assert_eq!(Instruction::FCVTZU_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRSQRTE_asisdmisc_R() {
    assert_eq!(Instruction::FRSQRTE_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRSQRTE_asisdmisc_R { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINNMP_asisdpair_only_SD() {
    assert_eq!(Instruction::FMINNMP_asisdpair_only_SD { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINNMP_asisdpair_only_SD { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINP_asisdpair_only_SD() {
    assert_eq!(Instruction::FMINP_asisdpair_only_SD { sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINP_asisdpair_only_SD { sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FEXPA_z_z() {
    assert_eq!(Instruction::FEXPA_z_z { size: 3, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FEXPA_z_z { size: 3, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_DUP_z_r() {
    assert_eq!(Instruction::DUP_z_r { size: 3, Rn: 31, Zd: 31, }.encode().decode(), 
                Instruction::DUP_z_r { size: 3, Rn: 31, Zd: 31, })
}
#[test]
fn roundtrip_MOV_dup_z_r() {
    assert_eq!(Instruction::MOV_dup_z_r { size: 3, Rn: 31, Zd: 31, }.encode().decode(), 
                Instruction::MOV_dup_z_r { size: 3, Rn: 31, Zd: 31, })
}
#[test]
fn roundtrip_INSR_z_r() {
    assert_eq!(Instruction::INSR_z_r { size: 3, Rm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::INSR_z_r { size: 3, Rm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_SUNPKLO_z_z() {
    assert_eq!(Instruction::SUNPKLO_z_z { size: 3, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::SUNPKLO_z_z { size: 3, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_SUNPKHI_z_z() {
    assert_eq!(Instruction::SUNPKHI_z_z { size: 3, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::SUNPKHI_z_z { size: 3, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UUNPKLO_z_z() {
    assert_eq!(Instruction::UUNPKLO_z_z { size: 3, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UUNPKLO_z_z { size: 3, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UUNPKHI_z_z() {
    assert_eq!(Instruction::UUNPKHI_z_z { size: 3, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UUNPKHI_z_z { size: 3, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_INSR_z_v() {
    assert_eq!(Instruction::INSR_z_v { size: 3, Vm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::INSR_z_v { size: 3, Vm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_REV_z_z() {
    assert_eq!(Instruction::REV_z_z { size: 3, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::REV_z_z { size: 3, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_ST1_asisdlso_S1_1s() {
    assert_eq!(Instruction::ST1_asisdlso_S1_1s { Q: 1, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlso_S1_1s { Q: 1, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST3_asisdlso_S3_3s() {
    assert_eq!(Instruction::ST3_asisdlso_S3_3s { Q: 1, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST3_asisdlso_S3_3s { Q: 1, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST2_asisdlso_S2_2s() {
    assert_eq!(Instruction::ST2_asisdlso_S2_2s { Q: 1, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST2_asisdlso_S2_2s { Q: 1, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST4_asisdlso_S4_4s() {
    assert_eq!(Instruction::ST4_asisdlso_S4_4s { Q: 1, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST4_asisdlso_S4_4s { Q: 1, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlso_S1_1s() {
    assert_eq!(Instruction::LD1_asisdlso_S1_1s { Q: 1, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlso_S1_1s { Q: 1, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3_asisdlso_S3_3s() {
    assert_eq!(Instruction::LD3_asisdlso_S3_3s { Q: 1, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3_asisdlso_S3_3s { Q: 1, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2_asisdlso_S2_2s() {
    assert_eq!(Instruction::LD2_asisdlso_S2_2s { Q: 1, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2_asisdlso_S2_2s { Q: 1, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4_asisdlso_S4_4s() {
    assert_eq!(Instruction::LD4_asisdlso_S4_4s { Q: 1, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4_asisdlso_S4_4s { Q: 1, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlsop_S1_i1s() {
    assert_eq!(Instruction::ST1_asisdlsop_S1_i1s { Q: 1, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlsop_S1_i1s { Q: 1, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST3_asisdlsop_S3_i3s() {
    assert_eq!(Instruction::ST3_asisdlsop_S3_i3s { Q: 1, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST3_asisdlsop_S3_i3s { Q: 1, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST2_asisdlsop_S2_i2s() {
    assert_eq!(Instruction::ST2_asisdlsop_S2_i2s { Q: 1, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST2_asisdlsop_S2_i2s { Q: 1, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST4_asisdlsop_S4_i4s() {
    assert_eq!(Instruction::ST4_asisdlsop_S4_i4s { Q: 1, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST4_asisdlsop_S4_i4s { Q: 1, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlsop_S1_i1s() {
    assert_eq!(Instruction::LD1_asisdlsop_S1_i1s { Q: 1, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlsop_S1_i1s { Q: 1, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3_asisdlsop_S3_i3s() {
    assert_eq!(Instruction::LD3_asisdlsop_S3_i3s { Q: 1, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3_asisdlsop_S3_i3s { Q: 1, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2_asisdlsop_S2_i2s() {
    assert_eq!(Instruction::LD2_asisdlsop_S2_i2s { Q: 1, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2_asisdlsop_S2_i2s { Q: 1, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4_asisdlsop_S4_i4s() {
    assert_eq!(Instruction::LD4_asisdlsop_S4_i4s { Q: 1, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4_asisdlsop_S4_i4s { Q: 1, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_MOV_UMOV_asimdins_W_w() {
    assert_eq!(Instruction::MOV_UMOV_asimdins_W_w { imm5: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MOV_UMOV_asimdins_W_w { imm5: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTN_asimdmisc_N() {
    assert_eq!(Instruction::FCVTN_asimdmisc_N { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTN_asimdmisc_N { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTL_asimdmisc_L() {
    assert_eq!(Instruction::FCVTL_asimdmisc_L { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTL_asimdmisc_L { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTN_asimdmisc_R() {
    assert_eq!(Instruction::FRINTN_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTN_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTM_asimdmisc_R() {
    assert_eq!(Instruction::FRINTM_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTM_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNS_asimdmisc_R() {
    assert_eq!(Instruction::FCVTNS_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNS_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMS_asimdmisc_R() {
    assert_eq!(Instruction::FCVTMS_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMS_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAS_asimdmisc_R() {
    assert_eq!(Instruction::FCVTAS_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAS_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_asimdmisc_R() {
    assert_eq!(Instruction::SCVTF_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINT32Z_asimdmisc_R() {
    assert_eq!(Instruction::FRINT32Z_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINT32Z_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINT64Z_asimdmisc_R() {
    assert_eq!(Instruction::FRINT64Z_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINT64Z_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMGT_asimdmisc_FZ() {
    assert_eq!(Instruction::FCMGT_asimdmisc_FZ { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMGT_asimdmisc_FZ { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMEQ_asimdmisc_FZ() {
    assert_eq!(Instruction::FCMEQ_asimdmisc_FZ { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMEQ_asimdmisc_FZ { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMLT_asimdmisc_FZ() {
    assert_eq!(Instruction::FCMLT_asimdmisc_FZ { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMLT_asimdmisc_FZ { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FABS_asimdmisc_R() {
    assert_eq!(Instruction::FABS_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FABS_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTP_asimdmisc_R() {
    assert_eq!(Instruction::FRINTP_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTP_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTZ_asimdmisc_R() {
    assert_eq!(Instruction::FRINTZ_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTZ_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPS_asimdmisc_R() {
    assert_eq!(Instruction::FCVTPS_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPS_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_asimdmisc_R() {
    assert_eq!(Instruction::FCVTZS_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_URECPE_asimdmisc_R() {
    assert_eq!(Instruction::URECPE_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::URECPE_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRECPE_asimdmisc_R() {
    assert_eq!(Instruction::FRECPE_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRECPE_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BRKN_p_p_pp() {
    assert_eq!(Instruction::BRKN_p_p_pp { Pg: 15, Pn: 15, Pdm: 15, }.encode().decode(), 
                Instruction::BRKN_p_p_pp { Pg: 15, Pn: 15, Pdm: 15, })
}
#[test]
fn roundtrip_BRKAS_p_p_p_z() {
    assert_eq!(Instruction::BRKAS_p_p_p_z { Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::BRKAS_p_p_p_z { Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_BRKNS_p_p_pp() {
    assert_eq!(Instruction::BRKNS_p_p_pp { Pg: 15, Pn: 15, Pdm: 15, }.encode().decode(), 
                Instruction::BRKNS_p_p_pp { Pg: 15, Pn: 15, Pdm: 15, })
}
#[test]
fn roundtrip_BRKBS_p_p_p_z() {
    assert_eq!(Instruction::BRKBS_p_p_p_z { Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::BRKBS_p_p_p_z { Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_FCVTXN_asimdmisc_N() {
    assert_eq!(Instruction::FCVTXN_asimdmisc_N { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTXN_asimdmisc_N { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTA_asimdmisc_R() {
    assert_eq!(Instruction::FRINTA_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTA_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTX_asimdmisc_R() {
    assert_eq!(Instruction::FRINTX_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTX_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTNU_asimdmisc_R() {
    assert_eq!(Instruction::FCVTNU_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTNU_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTMU_asimdmisc_R() {
    assert_eq!(Instruction::FCVTMU_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTMU_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTAU_asimdmisc_R() {
    assert_eq!(Instruction::FCVTAU_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTAU_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_asimdmisc_R() {
    assert_eq!(Instruction::UCVTF_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINT32X_asimdmisc_R() {
    assert_eq!(Instruction::FRINT32X_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINT32X_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINT64X_asimdmisc_R() {
    assert_eq!(Instruction::FRINT64X_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINT64X_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAXNMV_asimdall_only_SD() {
    assert_eq!(Instruction::FMAXNMV_asimdall_only_SD { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXNMV_asimdall_only_SD { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAXV_asimdall_only_SD() {
    assert_eq!(Instruction::FMAXV_asimdall_only_SD { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXV_asimdall_only_SD { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMGE_asimdmisc_FZ() {
    assert_eq!(Instruction::FCMGE_asimdmisc_FZ { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMGE_asimdmisc_FZ { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMLE_asimdmisc_FZ() {
    assert_eq!(Instruction::FCMLE_asimdmisc_FZ { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMLE_asimdmisc_FZ { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FNEG_asimdmisc_R() {
    assert_eq!(Instruction::FNEG_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FNEG_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRINTI_asimdmisc_R() {
    assert_eq!(Instruction::FRINTI_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRINTI_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTPU_asimdmisc_R() {
    assert_eq!(Instruction::FCVTPU_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTPU_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_asimdmisc_R() {
    assert_eq!(Instruction::FCVTZU_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_URSQRTE_asimdmisc_R() {
    assert_eq!(Instruction::URSQRTE_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::URSQRTE_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRSQRTE_asimdmisc_R() {
    assert_eq!(Instruction::FRSQRTE_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRSQRTE_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FSQRT_asimdmisc_R() {
    assert_eq!(Instruction::FSQRT_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FSQRT_asimdmisc_R { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINNMV_asimdall_only_SD() {
    assert_eq!(Instruction::FMINNMV_asimdall_only_SD { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINNMV_asimdall_only_SD { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINV_asimdall_only_SD() {
    assert_eq!(Instruction::FMINV_asimdall_only_SD { Q: 1, sz: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINV_asimdall_only_SD { Q: 1, sz: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUQADD_asisdmisc_R() {
    assert_eq!(Instruction::SUQADD_asisdmisc_R { size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUQADD_asisdmisc_R { size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQABS_asisdmisc_R() {
    assert_eq!(Instruction::SQABS_asisdmisc_R { size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQABS_asisdmisc_R { size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMGT_asisdmisc_Z() {
    assert_eq!(Instruction::CMGT_asisdmisc_Z { size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMGT_asisdmisc_Z { size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMEQ_asisdmisc_Z() {
    assert_eq!(Instruction::CMEQ_asisdmisc_Z { size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMEQ_asisdmisc_Z { size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMLT_asisdmisc_Z() {
    assert_eq!(Instruction::CMLT_asisdmisc_Z { size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMLT_asisdmisc_Z { size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ABS_asisdmisc_R() {
    assert_eq!(Instruction::ABS_asisdmisc_R { size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ABS_asisdmisc_R { size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQXTN_asisdmisc_N() {
    assert_eq!(Instruction::SQXTN_asisdmisc_N { size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQXTN_asisdmisc_N { size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADDP_asisdpair_only() {
    assert_eq!(Instruction::ADDP_asisdpair_only { size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADDP_asisdpair_only { size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRECPE_z_z() {
    assert_eq!(Instruction::FRECPE_z_z { size: 3, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FRECPE_z_z { size: 3, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FRSQRTE_z_z() {
    assert_eq!(Instruction::FRSQRTE_z_z { size: 3, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FRSQRTE_z_z { size: 3, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_USQADD_asisdmisc_R() {
    assert_eq!(Instruction::USQADD_asisdmisc_R { size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::USQADD_asisdmisc_R { size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQNEG_asisdmisc_R() {
    assert_eq!(Instruction::SQNEG_asisdmisc_R { size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQNEG_asisdmisc_R { size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMGE_asisdmisc_Z() {
    assert_eq!(Instruction::CMGE_asisdmisc_Z { size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMGE_asisdmisc_Z { size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMLE_asisdmisc_Z() {
    assert_eq!(Instruction::CMLE_asisdmisc_Z { size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMLE_asisdmisc_Z { size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_NEG_asisdmisc_R() {
    assert_eq!(Instruction::NEG_asisdmisc_R { size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::NEG_asisdmisc_R { size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQXTUN_asisdmisc_N() {
    assert_eq!(Instruction::SQXTUN_asisdmisc_N { size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQXTUN_asisdmisc_N { size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UQXTN_asisdmisc_N() {
    assert_eq!(Instruction::UQXTN_asisdmisc_N { size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UQXTN_asisdmisc_N { size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_AT_SYS_CR_systeminstrs() {
    assert_eq!(Instruction::AT_SYS_CR_systeminstrs { op1: 7, CRm: 1, op2: 7, Rt: 31, }.encode().decode(), 
                Instruction::AT_SYS_CR_systeminstrs { op1: 7, CRm: 1, op2: 7, Rt: 31, })
}
#[test]
fn roundtrip_ST4_asisdlse_R4() {
    assert_eq!(Instruction::ST4_asisdlse_R4 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST4_asisdlse_R4 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlse_R4_4v() {
    assert_eq!(Instruction::ST1_asisdlse_R4_4v { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlse_R4_4v { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST3_asisdlse_R3() {
    assert_eq!(Instruction::ST3_asisdlse_R3 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST3_asisdlse_R3 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlse_R3_3v() {
    assert_eq!(Instruction::ST1_asisdlse_R3_3v { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlse_R3_3v { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlse_R1_1v() {
    assert_eq!(Instruction::ST1_asisdlse_R1_1v { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlse_R1_1v { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST2_asisdlse_R2() {
    assert_eq!(Instruction::ST2_asisdlse_R2 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST2_asisdlse_R2 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlse_R2_2v() {
    assert_eq!(Instruction::ST1_asisdlse_R2_2v { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlse_R2_2v { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4_asisdlse_R4() {
    assert_eq!(Instruction::LD4_asisdlse_R4 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4_asisdlse_R4 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlse_R4_4v() {
    assert_eq!(Instruction::LD1_asisdlse_R4_4v { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlse_R4_4v { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3_asisdlse_R3() {
    assert_eq!(Instruction::LD3_asisdlse_R3 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3_asisdlse_R3 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlse_R3_3v() {
    assert_eq!(Instruction::LD1_asisdlse_R3_3v { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlse_R3_3v { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlse_R1_1v() {
    assert_eq!(Instruction::LD1_asisdlse_R1_1v { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlse_R1_1v { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2_asisdlse_R2() {
    assert_eq!(Instruction::LD2_asisdlse_R2 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2_asisdlse_R2 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlse_R2_2v() {
    assert_eq!(Instruction::LD1_asisdlse_R2_2v { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlse_R2_2v { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST4_asisdlsep_I4_i() {
    assert_eq!(Instruction::ST4_asisdlsep_I4_i { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST4_asisdlsep_I4_i { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlsep_I4_i4() {
    assert_eq!(Instruction::ST1_asisdlsep_I4_i4 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlsep_I4_i4 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST3_asisdlsep_I3_i() {
    assert_eq!(Instruction::ST3_asisdlsep_I3_i { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST3_asisdlsep_I3_i { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlsep_I3_i3() {
    assert_eq!(Instruction::ST1_asisdlsep_I3_i3 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlsep_I3_i3 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlsep_I1_i1() {
    assert_eq!(Instruction::ST1_asisdlsep_I1_i1 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlsep_I1_i1 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST2_asisdlsep_I2_i() {
    assert_eq!(Instruction::ST2_asisdlsep_I2_i { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST2_asisdlsep_I2_i { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlsep_I2_i2() {
    assert_eq!(Instruction::ST1_asisdlsep_I2_i2 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlsep_I2_i2 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4_asisdlsep_I4_i() {
    assert_eq!(Instruction::LD4_asisdlsep_I4_i { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4_asisdlsep_I4_i { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlsep_I4_i4() {
    assert_eq!(Instruction::LD1_asisdlsep_I4_i4 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlsep_I4_i4 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3_asisdlsep_I3_i() {
    assert_eq!(Instruction::LD3_asisdlsep_I3_i { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3_asisdlsep_I3_i { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlsep_I3_i3() {
    assert_eq!(Instruction::LD1_asisdlsep_I3_i3 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlsep_I3_i3 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlsep_I1_i1() {
    assert_eq!(Instruction::LD1_asisdlsep_I1_i1 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlsep_I1_i1 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2_asisdlsep_I2_i() {
    assert_eq!(Instruction::LD2_asisdlsep_I2_i { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2_asisdlsep_I2_i { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlsep_I2_i2() {
    assert_eq!(Instruction::LD1_asisdlsep_I2_i2 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlsep_I2_i2 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlso_H1_1h() {
    assert_eq!(Instruction::ST1_asisdlso_H1_1h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlso_H1_1h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST3_asisdlso_H3_3h() {
    assert_eq!(Instruction::ST3_asisdlso_H3_3h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST3_asisdlso_H3_3h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST2_asisdlso_H2_2h() {
    assert_eq!(Instruction::ST2_asisdlso_H2_2h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST2_asisdlso_H2_2h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST4_asisdlso_H4_4h() {
    assert_eq!(Instruction::ST4_asisdlso_H4_4h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST4_asisdlso_H4_4h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlso_H1_1h() {
    assert_eq!(Instruction::LD1_asisdlso_H1_1h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlso_H1_1h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3_asisdlso_H3_3h() {
    assert_eq!(Instruction::LD3_asisdlso_H3_3h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3_asisdlso_H3_3h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1R_asisdlso_R1() {
    assert_eq!(Instruction::LD1R_asisdlso_R1 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1R_asisdlso_R1 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3R_asisdlso_R3() {
    assert_eq!(Instruction::LD3R_asisdlso_R3 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3R_asisdlso_R3 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2_asisdlso_H2_2h() {
    assert_eq!(Instruction::LD2_asisdlso_H2_2h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2_asisdlso_H2_2h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4_asisdlso_H4_4h() {
    assert_eq!(Instruction::LD4_asisdlso_H4_4h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4_asisdlso_H4_4h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2R_asisdlso_R2() {
    assert_eq!(Instruction::LD2R_asisdlso_R2 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2R_asisdlso_R2 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4R_asisdlso_R4() {
    assert_eq!(Instruction::LD4R_asisdlso_R4 { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4R_asisdlso_R4 { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlsop_H1_i1h() {
    assert_eq!(Instruction::ST1_asisdlsop_H1_i1h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlsop_H1_i1h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST3_asisdlsop_H3_i3h() {
    assert_eq!(Instruction::ST3_asisdlsop_H3_i3h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST3_asisdlsop_H3_i3h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST2_asisdlsop_H2_i2h() {
    assert_eq!(Instruction::ST2_asisdlsop_H2_i2h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST2_asisdlsop_H2_i2h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST4_asisdlsop_H4_i4h() {
    assert_eq!(Instruction::ST4_asisdlsop_H4_i4h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST4_asisdlsop_H4_i4h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlsop_H1_i1h() {
    assert_eq!(Instruction::LD1_asisdlsop_H1_i1h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlsop_H1_i1h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3_asisdlsop_H3_i3h() {
    assert_eq!(Instruction::LD3_asisdlsop_H3_i3h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3_asisdlsop_H3_i3h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1R_asisdlsop_R1_i() {
    assert_eq!(Instruction::LD1R_asisdlsop_R1_i { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1R_asisdlsop_R1_i { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3R_asisdlsop_R3_i() {
    assert_eq!(Instruction::LD3R_asisdlsop_R3_i { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3R_asisdlsop_R3_i { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2_asisdlsop_H2_i2h() {
    assert_eq!(Instruction::LD2_asisdlsop_H2_i2h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2_asisdlsop_H2_i2h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4_asisdlsop_H4_i4h() {
    assert_eq!(Instruction::LD4_asisdlsop_H4_i4h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4_asisdlsop_H4_i4h { Q: 1, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2R_asisdlsop_R2_i() {
    assert_eq!(Instruction::LD2R_asisdlsop_R2_i { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2R_asisdlsop_R2_i { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4R_asisdlsop_R4_i() {
    assert_eq!(Instruction::LD4R_asisdlsop_R4_i { Q: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4R_asisdlsop_R4_i { Q: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_REV64_asimdmisc_R() {
    assert_eq!(Instruction::REV64_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::REV64_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_REV16_asimdmisc_R() {
    assert_eq!(Instruction::REV16_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::REV16_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SADDLP_asimdmisc_P() {
    assert_eq!(Instruction::SADDLP_asimdmisc_P { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SADDLP_asimdmisc_P { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUQADD_asimdmisc_R() {
    assert_eq!(Instruction::SUQADD_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUQADD_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CLS_asimdmisc_R() {
    assert_eq!(Instruction::CLS_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CLS_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CNT_asimdmisc_R() {
    assert_eq!(Instruction::CNT_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CNT_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SADALP_asimdmisc_P() {
    assert_eq!(Instruction::SADALP_asimdmisc_P { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SADALP_asimdmisc_P { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQABS_asimdmisc_R() {
    assert_eq!(Instruction::SQABS_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQABS_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMGT_asimdmisc_Z() {
    assert_eq!(Instruction::CMGT_asimdmisc_Z { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMGT_asimdmisc_Z { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMEQ_asimdmisc_Z() {
    assert_eq!(Instruction::CMEQ_asimdmisc_Z { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMEQ_asimdmisc_Z { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMLT_asimdmisc_Z() {
    assert_eq!(Instruction::CMLT_asimdmisc_Z { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMLT_asimdmisc_Z { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ABS_asimdmisc_R() {
    assert_eq!(Instruction::ABS_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ABS_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_XTN_asimdmisc_N() {
    assert_eq!(Instruction::XTN_asimdmisc_N { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::XTN_asimdmisc_N { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQXTN_asimdmisc_N() {
    assert_eq!(Instruction::SQXTN_asimdmisc_N { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQXTN_asimdmisc_N { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SADDLV_asimdall_only() {
    assert_eq!(Instruction::SADDLV_asimdall_only { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SADDLV_asimdall_only { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMAXV_asimdall_only() {
    assert_eq!(Instruction::SMAXV_asimdall_only { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMAXV_asimdall_only { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMINV_asimdall_only() {
    assert_eq!(Instruction::SMINV_asimdall_only { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMINV_asimdall_only { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADDV_asimdall_only() {
    assert_eq!(Instruction::ADDV_asimdall_only { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADDV_asimdall_only { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_S_floatimm() {
    assert_eq!(Instruction::FMOV_S_floatimm { imm8: 255, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_S_floatimm { imm8: 255, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_D_floatimm() {
    assert_eq!(Instruction::FMOV_D_floatimm { imm8: 255, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_D_floatimm { imm8: 255, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_H_floatimm() {
    assert_eq!(Instruction::FMOV_H_floatimm { imm8: 255, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_H_floatimm { imm8: 255, Rd: 31, })
}
#[test]
fn roundtrip_BRKA_p_p_p() {
    assert_eq!(Instruction::BRKA_p_p_p { Pg: 15, Pn: 15, M: 1, Pd: 15, }.encode().decode(), 
                Instruction::BRKA_p_p_p { Pg: 15, Pn: 15, M: 1, Pd: 15, })
}
#[test]
fn roundtrip_BRKB_p_p_p() {
    assert_eq!(Instruction::BRKB_p_p_p { Pg: 15, Pn: 15, M: 1, Pd: 15, }.encode().decode(), 
                Instruction::BRKB_p_p_p { Pg: 15, Pn: 15, M: 1, Pd: 15, })
}
#[test]
fn roundtrip_REV32_asimdmisc_R() {
    assert_eq!(Instruction::REV32_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::REV32_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UADDLP_asimdmisc_P() {
    assert_eq!(Instruction::UADDLP_asimdmisc_P { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UADDLP_asimdmisc_P { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_USQADD_asimdmisc_R() {
    assert_eq!(Instruction::USQADD_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::USQADD_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CLZ_asimdmisc_R() {
    assert_eq!(Instruction::CLZ_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CLZ_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UADALP_asimdmisc_P() {
    assert_eq!(Instruction::UADALP_asimdmisc_P { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UADALP_asimdmisc_P { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQNEG_asimdmisc_R() {
    assert_eq!(Instruction::SQNEG_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQNEG_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMGE_asimdmisc_Z() {
    assert_eq!(Instruction::CMGE_asimdmisc_Z { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMGE_asimdmisc_Z { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMLE_asimdmisc_Z() {
    assert_eq!(Instruction::CMLE_asimdmisc_Z { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMLE_asimdmisc_Z { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_NEG_asimdmisc_R() {
    assert_eq!(Instruction::NEG_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::NEG_asimdmisc_R { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQXTUN_asimdmisc_N() {
    assert_eq!(Instruction::SQXTUN_asimdmisc_N { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQXTUN_asimdmisc_N { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHLL_asimdmisc_S() {
    assert_eq!(Instruction::SHLL_asimdmisc_S { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHLL_asimdmisc_S { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UQXTN_asimdmisc_N() {
    assert_eq!(Instruction::UQXTN_asimdmisc_N { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UQXTN_asimdmisc_N { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UADDLV_asimdall_only() {
    assert_eq!(Instruction::UADDLV_asimdall_only { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UADDLV_asimdall_only { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMAXV_asimdall_only() {
    assert_eq!(Instruction::UMAXV_asimdall_only { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMAXV_asimdall_only { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMINV_asimdall_only() {
    assert_eq!(Instruction::UMINV_asimdall_only { Q: 1, size: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMINV_asimdall_only { Q: 1, size: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOVI_asimdimm_D_ds() {
    assert_eq!(Instruction::MOVI_asimdimm_D_ds { a: 1, b: 1, c: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, }.encode().decode(), 
                Instruction::MOVI_asimdimm_D_ds { a: 1, b: 1, c: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, })
}
#[test]
fn roundtrip_BFCVTNT_z_p_z_s2bf() {
    assert_eq!(Instruction::BFCVTNT_z_p_z_s2bf { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::BFCVTNT_z_p_z_s2bf { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_SCVTF_z_p_z_h2fp16() {
    assert_eq!(Instruction::SCVTF_z_p_z_h2fp16 { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::SCVTF_z_p_z_h2fp16 { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UCVTF_z_p_z_h2fp16() {
    assert_eq!(Instruction::UCVTF_z_p_z_h2fp16 { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UCVTF_z_p_z_h2fp16 { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_SCVTF_z_p_z_w2fp16() {
    assert_eq!(Instruction::SCVTF_z_p_z_w2fp16 { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::SCVTF_z_p_z_w2fp16 { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UCVTF_z_p_z_w2fp16() {
    assert_eq!(Instruction::UCVTF_z_p_z_w2fp16 { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UCVTF_z_p_z_w2fp16 { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_SCVTF_z_p_z_x2fp16() {
    assert_eq!(Instruction::SCVTF_z_p_z_x2fp16 { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::SCVTF_z_p_z_x2fp16 { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UCVTF_z_p_z_x2fp16() {
    assert_eq!(Instruction::UCVTF_z_p_z_x2fp16 { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UCVTF_z_p_z_x2fp16 { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVTZS_z_p_z_fp162h() {
    assert_eq!(Instruction::FCVTZS_z_p_z_fp162h { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVTZS_z_p_z_fp162h { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVTZU_z_p_z_fp162h() {
    assert_eq!(Instruction::FCVTZU_z_p_z_fp162h { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVTZU_z_p_z_fp162h { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVTZS_z_p_z_fp162w() {
    assert_eq!(Instruction::FCVTZS_z_p_z_fp162w { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVTZS_z_p_z_fp162w { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVTZU_z_p_z_fp162w() {
    assert_eq!(Instruction::FCVTZU_z_p_z_fp162w { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVTZU_z_p_z_fp162w { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVTZS_z_p_z_fp162x() {
    assert_eq!(Instruction::FCVTZS_z_p_z_fp162x { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVTZS_z_p_z_fp162x { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVTZU_z_p_z_fp162x() {
    assert_eq!(Instruction::FCVTZU_z_p_z_fp162x { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVTZU_z_p_z_fp162x { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVT_z_p_z_s2h() {
    assert_eq!(Instruction::FCVT_z_p_z_s2h { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVT_z_p_z_s2h { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVT_z_p_z_h2s() {
    assert_eq!(Instruction::FCVT_z_p_z_h2s { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVT_z_p_z_h2s { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_BFCVT_z_p_z_s2bf() {
    assert_eq!(Instruction::BFCVT_z_p_z_s2bf { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::BFCVT_z_p_z_s2bf { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_SCVTF_z_p_z_w2s() {
    assert_eq!(Instruction::SCVTF_z_p_z_w2s { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::SCVTF_z_p_z_w2s { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UCVTF_z_p_z_w2s() {
    assert_eq!(Instruction::UCVTF_z_p_z_w2s { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UCVTF_z_p_z_w2s { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVTZS_z_p_z_s2w() {
    assert_eq!(Instruction::FCVTZS_z_p_z_s2w { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVTZS_z_p_z_s2w { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVTZU_z_p_z_s2w() {
    assert_eq!(Instruction::FCVTZU_z_p_z_s2w { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVTZU_z_p_z_s2w { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVT_z_p_z_d2h() {
    assert_eq!(Instruction::FCVT_z_p_z_d2h { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVT_z_p_z_d2h { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVT_z_p_z_h2d() {
    assert_eq!(Instruction::FCVT_z_p_z_h2d { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVT_z_p_z_h2d { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVT_z_p_z_d2s() {
    assert_eq!(Instruction::FCVT_z_p_z_d2s { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVT_z_p_z_d2s { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVT_z_p_z_s2d() {
    assert_eq!(Instruction::FCVT_z_p_z_s2d { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVT_z_p_z_s2d { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_SCVTF_z_p_z_w2d() {
    assert_eq!(Instruction::SCVTF_z_p_z_w2d { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::SCVTF_z_p_z_w2d { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UCVTF_z_p_z_w2d() {
    assert_eq!(Instruction::UCVTF_z_p_z_w2d { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UCVTF_z_p_z_w2d { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_SCVTF_z_p_z_x2s() {
    assert_eq!(Instruction::SCVTF_z_p_z_x2s { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::SCVTF_z_p_z_x2s { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UCVTF_z_p_z_x2s() {
    assert_eq!(Instruction::UCVTF_z_p_z_x2s { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UCVTF_z_p_z_x2s { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_SCVTF_z_p_z_x2d() {
    assert_eq!(Instruction::SCVTF_z_p_z_x2d { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::SCVTF_z_p_z_x2d { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UCVTF_z_p_z_x2d() {
    assert_eq!(Instruction::UCVTF_z_p_z_x2d { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UCVTF_z_p_z_x2d { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVTZS_z_p_z_d2w() {
    assert_eq!(Instruction::FCVTZS_z_p_z_d2w { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVTZS_z_p_z_d2w { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVTZU_z_p_z_d2w() {
    assert_eq!(Instruction::FCVTZU_z_p_z_d2w { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVTZU_z_p_z_d2w { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVTZS_z_p_z_s2x() {
    assert_eq!(Instruction::FCVTZS_z_p_z_s2x { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVTZS_z_p_z_s2x { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVTZU_z_p_z_s2x() {
    assert_eq!(Instruction::FCVTZU_z_p_z_s2x { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVTZU_z_p_z_s2x { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVTZS_z_p_z_d2x() {
    assert_eq!(Instruction::FCVTZS_z_p_z_d2x { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVTZS_z_p_z_d2x { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FCVTZU_z_p_z_d2x() {
    assert_eq!(Instruction::FCVTZU_z_p_z_d2x { Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FCVTZU_z_p_z_d2x { Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_MOVI_asimdimm_D2_d() {
    assert_eq!(Instruction::MOVI_asimdimm_D2_d { a: 1, b: 1, c: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, }.encode().decode(), 
                Instruction::MOVI_asimdimm_D2_d { a: 1, b: 1, c: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_asimdimm_D2_d() {
    assert_eq!(Instruction::FMOV_asimdimm_D2_d { a: 1, b: 1, c: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_asimdimm_D2_d { a: 1, b: 1, c: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, })
}
#[test]
fn roundtrip_CNTB_r_s() {
    assert_eq!(Instruction::CNTB_r_s { imm4: 15, pattern: 31, Rd: 31, }.encode().decode(), 
                Instruction::CNTB_r_s { imm4: 15, pattern: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQINCB_r_rs_sx() {
    assert_eq!(Instruction::SQINCB_r_rs_sx { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::SQINCB_r_rs_sx { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_UQINCB_r_rs_uw() {
    assert_eq!(Instruction::UQINCB_r_rs_uw { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::UQINCB_r_rs_uw { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_SQDECB_r_rs_sx() {
    assert_eq!(Instruction::SQDECB_r_rs_sx { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::SQDECB_r_rs_sx { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_UQDECB_r_rs_uw() {
    assert_eq!(Instruction::UQDECB_r_rs_uw { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::UQDECB_r_rs_uw { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_INCB_r_rs() {
    assert_eq!(Instruction::INCB_r_rs { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::INCB_r_rs { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_DECB_r_rs() {
    assert_eq!(Instruction::DECB_r_rs { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::DECB_r_rs { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_SQINCB_r_rs_x() {
    assert_eq!(Instruction::SQINCB_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::SQINCB_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_UQINCB_r_rs_x() {
    assert_eq!(Instruction::UQINCB_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::UQINCB_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_SQDECB_r_rs_x() {
    assert_eq!(Instruction::SQDECB_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::SQDECB_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_UQDECB_r_rs_x() {
    assert_eq!(Instruction::UQDECB_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::UQDECB_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_SQINCH_z_zs() {
    assert_eq!(Instruction::SQINCH_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::SQINCH_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_UQINCH_z_zs() {
    assert_eq!(Instruction::UQINCH_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::UQINCH_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_SQDECH_z_zs() {
    assert_eq!(Instruction::SQDECH_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::SQDECH_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_UQDECH_z_zs() {
    assert_eq!(Instruction::UQDECH_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::UQDECH_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_CNTH_r_s() {
    assert_eq!(Instruction::CNTH_r_s { imm4: 15, pattern: 31, Rd: 31, }.encode().decode(), 
                Instruction::CNTH_r_s { imm4: 15, pattern: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQINCH_r_rs_sx() {
    assert_eq!(Instruction::SQINCH_r_rs_sx { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::SQINCH_r_rs_sx { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_UQINCH_r_rs_uw() {
    assert_eq!(Instruction::UQINCH_r_rs_uw { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::UQINCH_r_rs_uw { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_SQDECH_r_rs_sx() {
    assert_eq!(Instruction::SQDECH_r_rs_sx { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::SQDECH_r_rs_sx { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_UQDECH_r_rs_uw() {
    assert_eq!(Instruction::UQDECH_r_rs_uw { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::UQDECH_r_rs_uw { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_INCH_z_zs() {
    assert_eq!(Instruction::INCH_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::INCH_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_DECH_z_zs() {
    assert_eq!(Instruction::DECH_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::DECH_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_INCH_r_rs() {
    assert_eq!(Instruction::INCH_r_rs { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::INCH_r_rs { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_DECH_r_rs() {
    assert_eq!(Instruction::DECH_r_rs { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::DECH_r_rs { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_SQINCH_r_rs_x() {
    assert_eq!(Instruction::SQINCH_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::SQINCH_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_UQINCH_r_rs_x() {
    assert_eq!(Instruction::UQINCH_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::UQINCH_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_SQDECH_r_rs_x() {
    assert_eq!(Instruction::SQDECH_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::SQDECH_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_UQDECH_r_rs_x() {
    assert_eq!(Instruction::UQDECH_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::UQDECH_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_SQINCW_z_zs() {
    assert_eq!(Instruction::SQINCW_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::SQINCW_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_UQINCW_z_zs() {
    assert_eq!(Instruction::UQINCW_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::UQINCW_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_SQDECW_z_zs() {
    assert_eq!(Instruction::SQDECW_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::SQDECW_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_UQDECW_z_zs() {
    assert_eq!(Instruction::UQDECW_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::UQDECW_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_CNTW_r_s() {
    assert_eq!(Instruction::CNTW_r_s { imm4: 15, pattern: 31, Rd: 31, }.encode().decode(), 
                Instruction::CNTW_r_s { imm4: 15, pattern: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQINCW_r_rs_sx() {
    assert_eq!(Instruction::SQINCW_r_rs_sx { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::SQINCW_r_rs_sx { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_UQINCW_r_rs_uw() {
    assert_eq!(Instruction::UQINCW_r_rs_uw { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::UQINCW_r_rs_uw { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_SQDECW_r_rs_sx() {
    assert_eq!(Instruction::SQDECW_r_rs_sx { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::SQDECW_r_rs_sx { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_UQDECW_r_rs_uw() {
    assert_eq!(Instruction::UQDECW_r_rs_uw { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::UQDECW_r_rs_uw { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_INCW_z_zs() {
    assert_eq!(Instruction::INCW_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::INCW_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_DECW_z_zs() {
    assert_eq!(Instruction::DECW_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::DECW_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_INCW_r_rs() {
    assert_eq!(Instruction::INCW_r_rs { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::INCW_r_rs { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_DECW_r_rs() {
    assert_eq!(Instruction::DECW_r_rs { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::DECW_r_rs { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_SQINCW_r_rs_x() {
    assert_eq!(Instruction::SQINCW_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::SQINCW_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_UQINCW_r_rs_x() {
    assert_eq!(Instruction::UQINCW_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::UQINCW_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_SQDECW_r_rs_x() {
    assert_eq!(Instruction::SQDECW_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::SQDECW_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_UQDECW_r_rs_x() {
    assert_eq!(Instruction::UQDECW_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::UQDECW_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_SQINCD_z_zs() {
    assert_eq!(Instruction::SQINCD_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::SQINCD_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_UQINCD_z_zs() {
    assert_eq!(Instruction::UQINCD_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::UQINCD_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_SQDECD_z_zs() {
    assert_eq!(Instruction::SQDECD_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::SQDECD_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_UQDECD_z_zs() {
    assert_eq!(Instruction::UQDECD_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::UQDECD_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_CNTD_r_s() {
    assert_eq!(Instruction::CNTD_r_s { imm4: 15, pattern: 31, Rd: 31, }.encode().decode(), 
                Instruction::CNTD_r_s { imm4: 15, pattern: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQINCD_r_rs_sx() {
    assert_eq!(Instruction::SQINCD_r_rs_sx { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::SQINCD_r_rs_sx { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_UQINCD_r_rs_uw() {
    assert_eq!(Instruction::UQINCD_r_rs_uw { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::UQINCD_r_rs_uw { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_SQDECD_r_rs_sx() {
    assert_eq!(Instruction::SQDECD_r_rs_sx { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::SQDECD_r_rs_sx { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_UQDECD_r_rs_uw() {
    assert_eq!(Instruction::UQDECD_r_rs_uw { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::UQDECD_r_rs_uw { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_INCD_z_zs() {
    assert_eq!(Instruction::INCD_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::INCD_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_DECD_z_zs() {
    assert_eq!(Instruction::DECD_z_zs { imm4: 15, pattern: 31, Zdn: 31, }.encode().decode(), 
                Instruction::DECD_z_zs { imm4: 15, pattern: 31, Zdn: 31, })
}
#[test]
fn roundtrip_INCD_r_rs() {
    assert_eq!(Instruction::INCD_r_rs { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::INCD_r_rs { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_DECD_r_rs() {
    assert_eq!(Instruction::DECD_r_rs { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::DECD_r_rs { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_SQINCD_r_rs_x() {
    assert_eq!(Instruction::SQINCD_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::SQINCD_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_UQINCD_r_rs_x() {
    assert_eq!(Instruction::UQINCD_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::UQINCD_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_SQDECD_r_rs_x() {
    assert_eq!(Instruction::SQDECD_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::SQDECD_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_UQDECD_r_rs_x() {
    assert_eq!(Instruction::UQDECD_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, }.encode().decode(), 
                Instruction::UQDECD_r_rs_x { imm4: 15, pattern: 31, Rdn: 31, })
}
#[test]
fn roundtrip_ZIP1_p_pp() {
    assert_eq!(Instruction::ZIP1_p_pp { size: 3, Pm: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::ZIP1_p_pp { size: 3, Pm: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_ZIP2_p_pp() {
    assert_eq!(Instruction::ZIP2_p_pp { size: 3, Pm: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::ZIP2_p_pp { size: 3, Pm: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_UZP1_p_pp() {
    assert_eq!(Instruction::UZP1_p_pp { size: 3, Pm: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::UZP1_p_pp { size: 3, Pm: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_UZP2_p_pp() {
    assert_eq!(Instruction::UZP2_p_pp { size: 3, Pm: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::UZP2_p_pp { size: 3, Pm: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_TRN1_p_pp() {
    assert_eq!(Instruction::TRN1_p_pp { size: 3, Pm: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::TRN1_p_pp { size: 3, Pm: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_TRN2_p_pp() {
    assert_eq!(Instruction::TRN2_p_pp { size: 3, Pm: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::TRN2_p_pp { size: 3, Pm: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_ST1_asisdlso_B1_1b() {
    assert_eq!(Instruction::ST1_asisdlso_B1_1b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlso_B1_1b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST3_asisdlso_B3_3b() {
    assert_eq!(Instruction::ST3_asisdlso_B3_3b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST3_asisdlso_B3_3b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST2_asisdlso_B2_2b() {
    assert_eq!(Instruction::ST2_asisdlso_B2_2b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST2_asisdlso_B2_2b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST4_asisdlso_B4_4b() {
    assert_eq!(Instruction::ST4_asisdlso_B4_4b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST4_asisdlso_B4_4b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlso_B1_1b() {
    assert_eq!(Instruction::LD1_asisdlso_B1_1b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlso_B1_1b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3_asisdlso_B3_3b() {
    assert_eq!(Instruction::LD3_asisdlso_B3_3b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3_asisdlso_B3_3b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2_asisdlso_B2_2b() {
    assert_eq!(Instruction::LD2_asisdlso_B2_2b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2_asisdlso_B2_2b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4_asisdlso_B4_4b() {
    assert_eq!(Instruction::LD4_asisdlso_B4_4b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4_asisdlso_B4_4b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlsop_B1_i1b() {
    assert_eq!(Instruction::ST1_asisdlsop_B1_i1b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlsop_B1_i1b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST3_asisdlsop_B3_i3b() {
    assert_eq!(Instruction::ST3_asisdlsop_B3_i3b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST3_asisdlsop_B3_i3b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST2_asisdlsop_B2_i2b() {
    assert_eq!(Instruction::ST2_asisdlsop_B2_i2b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST2_asisdlsop_B2_i2b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST4_asisdlsop_B4_i4b() {
    assert_eq!(Instruction::ST4_asisdlsop_B4_i4b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST4_asisdlsop_B4_i4b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlsop_B1_i1b() {
    assert_eq!(Instruction::LD1_asisdlsop_B1_i1b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlsop_B1_i1b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3_asisdlsop_B3_i3b() {
    assert_eq!(Instruction::LD3_asisdlsop_B3_i3b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3_asisdlsop_B3_i3b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2_asisdlsop_B2_i2b() {
    assert_eq!(Instruction::LD2_asisdlsop_B2_i2b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2_asisdlsop_B2_i2b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4_asisdlsop_B4_i4b() {
    assert_eq!(Instruction::LD4_asisdlsop_B4_i4b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4_asisdlsop_B4_i4b { Q: 1, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_MOVI_asimdimm_N_b() {
    assert_eq!(Instruction::MOVI_asimdimm_N_b { Q: 1, a: 1, b: 1, c: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, }.encode().decode(), 
                Instruction::MOVI_asimdimm_N_b { Q: 1, a: 1, b: 1, c: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_asimdimm_S_s() {
    assert_eq!(Instruction::FMOV_asimdimm_S_s { Q: 1, a: 1, b: 1, c: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_asimdimm_S_s { Q: 1, a: 1, b: 1, c: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, })
}
#[test]
fn roundtrip_FMOV_asimdimm_H_h() {
    assert_eq!(Instruction::FMOV_asimdimm_H_h { Q: 1, a: 1, b: 1, c: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, }.encode().decode(), 
                Instruction::FMOV_asimdimm_H_h { Q: 1, a: 1, b: 1, c: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, })
}
#[test]
fn roundtrip_FCMGE_p_p_z0() {
    assert_eq!(Instruction::FCMGE_p_p_z0 { size: 3, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FCMGE_p_p_z0 { size: 3, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FCMGT_p_p_z0() {
    assert_eq!(Instruction::FCMGT_p_p_z0 { size: 3, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FCMGT_p_p_z0 { size: 3, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FCMLT_p_p_z0() {
    assert_eq!(Instruction::FCMLT_p_p_z0 { size: 3, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FCMLT_p_p_z0 { size: 3, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FCMLE_p_p_z0() {
    assert_eq!(Instruction::FCMLE_p_p_z0 { size: 3, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FCMLE_p_p_z0 { size: 3, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FCMEQ_p_p_z0() {
    assert_eq!(Instruction::FCMEQ_p_p_z0 { size: 3, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FCMEQ_p_p_z0 { size: 3, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FCMNE_p_p_z0() {
    assert_eq!(Instruction::FCMNE_p_p_z0 { size: 3, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FCMNE_p_p_z0 { size: 3, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_SXTL_SSHLL_asimdshf_L() {
    assert_eq!(Instruction::SXTL_SSHLL_asimdshf_L { Q: 1, immh: 15, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SXTL_SSHLL_asimdshf_L { Q: 1, immh: 15, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UXTL_USHLL_asimdshf_L() {
    assert_eq!(Instruction::UXTL_USHLL_asimdshf_L { Q: 1, immh: 15, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UXTL_USHLL_asimdshf_L { Q: 1, immh: 15, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADD_z_p_zz() {
    assert_eq!(Instruction::ADD_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::ADD_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_SADDV_r_p_z() {
    assert_eq!(Instruction::SADDV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, }.encode().decode(), 
                Instruction::SADDV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, })
}
#[test]
fn roundtrip_ASR_z_p_zi() {
    assert_eq!(Instruction::ASR_z_p_zi { tszh: 3, Pg: 7, tszl: 3, imm3: 7, Zdn: 31, }.encode().decode(), 
                Instruction::ASR_z_p_zi { tszh: 3, Pg: 7, tszl: 3, imm3: 7, Zdn: 31, })
}
#[test]
fn roundtrip_SUB_z_p_zz() {
    assert_eq!(Instruction::SUB_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::SUB_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_UADDV_r_p_z() {
    assert_eq!(Instruction::UADDV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, }.encode().decode(), 
                Instruction::UADDV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, })
}
#[test]
fn roundtrip_LSR_z_p_zi() {
    assert_eq!(Instruction::LSR_z_p_zi { tszh: 3, Pg: 7, tszl: 3, imm3: 7, Zdn: 31, }.encode().decode(), 
                Instruction::LSR_z_p_zi { tszh: 3, Pg: 7, tszl: 3, imm3: 7, Zdn: 31, })
}
#[test]
fn roundtrip_SUBR_z_p_zz() {
    assert_eq!(Instruction::SUBR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::SUBR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_LSL_z_p_zi() {
    assert_eq!(Instruction::LSL_z_p_zi { tszh: 3, Pg: 7, tszl: 3, imm3: 7, Zdn: 31, }.encode().decode(), 
                Instruction::LSL_z_p_zi { tszh: 3, Pg: 7, tszl: 3, imm3: 7, Zdn: 31, })
}
#[test]
fn roundtrip_ASRD_z_p_zi() {
    assert_eq!(Instruction::ASRD_z_p_zi { tszh: 3, Pg: 7, tszl: 3, imm3: 7, Zdn: 31, }.encode().decode(), 
                Instruction::ASRD_z_p_zi { tszh: 3, Pg: 7, tszl: 3, imm3: 7, Zdn: 31, })
}
#[test]
fn roundtrip_SMAX_z_p_zz() {
    assert_eq!(Instruction::SMAX_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::SMAX_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_SMAXV_r_p_z() {
    assert_eq!(Instruction::SMAXV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, }.encode().decode(), 
                Instruction::SMAXV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, })
}
#[test]
fn roundtrip_UMAX_z_p_zz() {
    assert_eq!(Instruction::UMAX_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::UMAX_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_UMAXV_r_p_z() {
    assert_eq!(Instruction::UMAXV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, }.encode().decode(), 
                Instruction::UMAXV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, })
}
#[test]
fn roundtrip_SMIN_z_p_zz() {
    assert_eq!(Instruction::SMIN_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::SMIN_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_SMINV_r_p_z() {
    assert_eq!(Instruction::SMINV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, }.encode().decode(), 
                Instruction::SMINV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, })
}
#[test]
fn roundtrip_UMIN_z_p_zz() {
    assert_eq!(Instruction::UMIN_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::UMIN_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_UMINV_r_p_z() {
    assert_eq!(Instruction::UMINV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, }.encode().decode(), 
                Instruction::UMINV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, })
}
#[test]
fn roundtrip_SABD_z_p_zz() {
    assert_eq!(Instruction::SABD_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::SABD_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_UABD_z_p_zz() {
    assert_eq!(Instruction::UABD_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::UABD_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_MUL_z_p_zz() {
    assert_eq!(Instruction::MUL_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::MUL_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_ASR_z_p_zz() {
    assert_eq!(Instruction::ASR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::ASR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_SXTB_z_p_z() {
    assert_eq!(Instruction::SXTB_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::SXTB_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_LSR_z_p_zz() {
    assert_eq!(Instruction::LSR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::LSR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_UXTB_z_p_z() {
    assert_eq!(Instruction::UXTB_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UXTB_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_SMULH_z_p_zz() {
    assert_eq!(Instruction::SMULH_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::SMULH_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_SXTH_z_p_z() {
    assert_eq!(Instruction::SXTH_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::SXTH_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UMULH_z_p_zz() {
    assert_eq!(Instruction::UMULH_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::UMULH_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_LSL_z_p_zz() {
    assert_eq!(Instruction::LSL_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::LSL_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_UXTH_z_p_z() {
    assert_eq!(Instruction::UXTH_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UXTH_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_SDIV_z_p_zz() {
    assert_eq!(Instruction::SDIV_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::SDIV_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_ASRR_z_p_zz() {
    assert_eq!(Instruction::ASRR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::ASRR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_SXTW_z_p_z() {
    assert_eq!(Instruction::SXTW_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::SXTW_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UDIV_z_p_zz() {
    assert_eq!(Instruction::UDIV_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::UDIV_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_LSRR_z_p_zz() {
    assert_eq!(Instruction::LSRR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::LSRR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_UXTW_z_p_z() {
    assert_eq!(Instruction::UXTW_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UXTW_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_SDIVR_z_p_zz() {
    assert_eq!(Instruction::SDIVR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::SDIVR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_ABS_z_p_z() {
    assert_eq!(Instruction::ABS_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::ABS_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UDIVR_z_p_zz() {
    assert_eq!(Instruction::UDIVR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::UDIVR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_LSLR_z_p_zz() {
    assert_eq!(Instruction::LSLR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::LSLR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_NEG_z_p_z() {
    assert_eq!(Instruction::NEG_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::NEG_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_ORR_z_p_zz() {
    assert_eq!(Instruction::ORR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::ORR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_ORV_r_p_z() {
    assert_eq!(Instruction::ORV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, }.encode().decode(), 
                Instruction::ORV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, })
}
#[test]
fn roundtrip_ASR_z_p_zw() {
    assert_eq!(Instruction::ASR_z_p_zw { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::ASR_z_p_zw { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_CLS_z_p_z() {
    assert_eq!(Instruction::CLS_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::CLS_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_EOR_z_p_zz() {
    assert_eq!(Instruction::EOR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::EOR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_EORV_r_p_z() {
    assert_eq!(Instruction::EORV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, }.encode().decode(), 
                Instruction::EORV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, })
}
#[test]
fn roundtrip_LSR_z_p_zw() {
    assert_eq!(Instruction::LSR_z_p_zw { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::LSR_z_p_zw { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_CLZ_z_p_z() {
    assert_eq!(Instruction::CLZ_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::CLZ_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_AND_z_p_zz() {
    assert_eq!(Instruction::AND_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::AND_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_ANDV_r_p_z() {
    assert_eq!(Instruction::ANDV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, }.encode().decode(), 
                Instruction::ANDV_r_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, })
}
#[test]
fn roundtrip_CNT_z_p_z() {
    assert_eq!(Instruction::CNT_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::CNT_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_BIC_z_p_zz() {
    assert_eq!(Instruction::BIC_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::BIC_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_LSL_z_p_zw() {
    assert_eq!(Instruction::LSL_z_p_zw { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::LSL_z_p_zw { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_CNOT_z_p_z() {
    assert_eq!(Instruction::CNOT_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::CNOT_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FABS_z_p_z() {
    assert_eq!(Instruction::FABS_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FABS_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FNEG_z_p_z() {
    assert_eq!(Instruction::FNEG_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FNEG_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_NOT_z_p_z() {
    assert_eq!(Instruction::NOT_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::NOT_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_AND_z_zz() {
    assert_eq!(Instruction::AND_z_zz { Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::AND_z_zz { Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_MOV_orr_z_zz() {
    assert_eq!(Instruction::MOV_orr_z_zz { Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::MOV_orr_z_zz { Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_ORR_z_zz() {
    assert_eq!(Instruction::ORR_z_zz { Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::ORR_z_zz { Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_EOR_z_zz() {
    assert_eq!(Instruction::EOR_z_zz { Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::EOR_z_zz { Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_BIC_z_zz() {
    assert_eq!(Instruction::BIC_z_zz { Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::BIC_z_zz { Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_CPY_z_p_v() {
    assert_eq!(Instruction::CPY_z_p_v { size: 3, Pg: 7, Vn: 31, Zd: 31, }.encode().decode(), 
                Instruction::CPY_z_p_v { size: 3, Pg: 7, Vn: 31, Zd: 31, })
}
#[test]
fn roundtrip_MOV_cpy_z_p_v() {
    assert_eq!(Instruction::MOV_cpy_z_p_v { size: 3, Pg: 7, Vn: 31, Zd: 31, }.encode().decode(), 
                Instruction::MOV_cpy_z_p_v { size: 3, Pg: 7, Vn: 31, Zd: 31, })
}
#[test]
fn roundtrip_LASTA_r_p_z() {
    assert_eq!(Instruction::LASTA_r_p_z { size: 3, Pg: 7, Zn: 31, Rd: 31, }.encode().decode(), 
                Instruction::LASTA_r_p_z { size: 3, Pg: 7, Zn: 31, Rd: 31, })
}
#[test]
fn roundtrip_COMPACT_z_p_z() {
    assert_eq!(Instruction::COMPACT_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::COMPACT_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_LASTB_r_p_z() {
    assert_eq!(Instruction::LASTB_r_p_z { size: 3, Pg: 7, Zn: 31, Rd: 31, }.encode().decode(), 
                Instruction::LASTB_r_p_z { size: 3, Pg: 7, Zn: 31, Rd: 31, })
}
#[test]
fn roundtrip_LASTA_v_p_z() {
    assert_eq!(Instruction::LASTA_v_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, }.encode().decode(), 
                Instruction::LASTA_v_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, })
}
#[test]
fn roundtrip_LASTB_v_p_z() {
    assert_eq!(Instruction::LASTB_v_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, }.encode().decode(), 
                Instruction::LASTB_v_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, })
}
#[test]
fn roundtrip_REVB_z_z() {
    assert_eq!(Instruction::REVB_z_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::REVB_z_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_REVH_z_z() {
    assert_eq!(Instruction::REVH_z_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::REVH_z_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_REVW_z_z() {
    assert_eq!(Instruction::REVW_z_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::REVW_z_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_RBIT_z_p_z() {
    assert_eq!(Instruction::RBIT_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::RBIT_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_CLASTA_z_p_zz() {
    assert_eq!(Instruction::CLASTA_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::CLASTA_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_CPY_z_p_r() {
    assert_eq!(Instruction::CPY_z_p_r { size: 3, Pg: 7, Rn: 31, Zd: 31, }.encode().decode(), 
                Instruction::CPY_z_p_r { size: 3, Pg: 7, Rn: 31, Zd: 31, })
}
#[test]
fn roundtrip_MOV_cpy_z_p_r() {
    assert_eq!(Instruction::MOV_cpy_z_p_r { size: 3, Pg: 7, Rn: 31, Zd: 31, }.encode().decode(), 
                Instruction::MOV_cpy_z_p_r { size: 3, Pg: 7, Rn: 31, Zd: 31, })
}
#[test]
fn roundtrip_CLASTB_z_p_zz() {
    assert_eq!(Instruction::CLASTB_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::CLASTB_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_CLASTA_v_p_z() {
    assert_eq!(Instruction::CLASTA_v_p_z { size: 3, Pg: 7, Zm: 31, Vdn: 31, }.encode().decode(), 
                Instruction::CLASTA_v_p_z { size: 3, Pg: 7, Zm: 31, Vdn: 31, })
}
#[test]
fn roundtrip_CLASTB_v_p_z() {
    assert_eq!(Instruction::CLASTB_v_p_z { size: 3, Pg: 7, Zm: 31, Vdn: 31, }.encode().decode(), 
                Instruction::CLASTB_v_p_z { size: 3, Pg: 7, Zm: 31, Vdn: 31, })
}
#[test]
fn roundtrip_SPLICE_z_p_zz_des() {
    assert_eq!(Instruction::SPLICE_z_p_zz_des { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::SPLICE_z_p_zz_des { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_CLASTA_r_p_z() {
    assert_eq!(Instruction::CLASTA_r_p_z { size: 3, Pg: 7, Zm: 31, Rdn: 31, }.encode().decode(), 
                Instruction::CLASTA_r_p_z { size: 3, Pg: 7, Zm: 31, Rdn: 31, })
}
#[test]
fn roundtrip_CLASTB_r_p_z() {
    assert_eq!(Instruction::CLASTB_r_p_z { size: 3, Pg: 7, Zm: 31, Rdn: 31, }.encode().decode(), 
                Instruction::CLASTB_r_p_z { size: 3, Pg: 7, Zm: 31, Rdn: 31, })
}
#[test]
fn roundtrip_ZIP1_z_zz_q() {
    assert_eq!(Instruction::ZIP1_z_zz_q { Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::ZIP1_z_zz_q { Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_ZIP2_z_zz_q() {
    assert_eq!(Instruction::ZIP2_z_zz_q { Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::ZIP2_z_zz_q { Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UZP1_z_zz_q() {
    assert_eq!(Instruction::UZP1_z_zz_q { Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UZP1_z_zz_q { Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UZP2_z_zz_q() {
    assert_eq!(Instruction::UZP2_z_zz_q { Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UZP2_z_zz_q { Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_TRN1_z_zz_q() {
    assert_eq!(Instruction::TRN1_z_zz_q { Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::TRN1_z_zz_q { Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_TRN2_z_zz_q() {
    assert_eq!(Instruction::TRN2_z_zz_q { Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::TRN2_z_zz_q { Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_CASP_CP32_ldstexcl() {
    assert_eq!(Instruction::CASP_CP32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASP_CP32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASPL_CP32_ldstexcl() {
    assert_eq!(Instruction::CASPL_CP32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASPL_CP32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASPA_CP32_ldstexcl() {
    assert_eq!(Instruction::CASPA_CP32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASPA_CP32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASPAL_CP32_ldstexcl() {
    assert_eq!(Instruction::CASPAL_CP32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASPAL_CP32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASB_C32_ldstexcl() {
    assert_eq!(Instruction::CASB_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASB_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASLB_C32_ldstexcl() {
    assert_eq!(Instruction::CASLB_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASLB_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASAB_C32_ldstexcl() {
    assert_eq!(Instruction::CASAB_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASAB_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASALB_C32_ldstexcl() {
    assert_eq!(Instruction::CASALB_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASALB_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SMOV_asimdins_W_w() {
    assert_eq!(Instruction::SMOV_asimdins_W_w { imm5: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMOV_asimdins_W_w { imm5: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMOV_asimdins_W_w() {
    assert_eq!(Instruction::UMOV_asimdins_W_w { imm5: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMOV_asimdins_W_w { imm5: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOVI_asimdimm_L_hl() {
    assert_eq!(Instruction::MOVI_asimdimm_L_hl { Q: 1, a: 1, b: 1, c: 1, cmode: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, }.encode().decode(), 
                Instruction::MOVI_asimdimm_L_hl { Q: 1, a: 1, b: 1, c: 1, cmode: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, })
}
#[test]
fn roundtrip_ORR_asimdimm_L_hl() {
    assert_eq!(Instruction::ORR_asimdimm_L_hl { Q: 1, a: 1, b: 1, c: 1, cmode: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, }.encode().decode(), 
                Instruction::ORR_asimdimm_L_hl { Q: 1, a: 1, b: 1, c: 1, cmode: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, })
}
#[test]
fn roundtrip_MOVI_asimdimm_M_sm() {
    assert_eq!(Instruction::MOVI_asimdimm_M_sm { Q: 1, a: 1, b: 1, c: 1, cmode: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, }.encode().decode(), 
                Instruction::MOVI_asimdimm_M_sm { Q: 1, a: 1, b: 1, c: 1, cmode: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, })
}
#[test]
fn roundtrip_ADC_32_addsub_carry() {
    assert_eq!(Instruction::ADC_32_addsub_carry { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADC_32_addsub_carry { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UDIV_32_dp_2src() {
    assert_eq!(Instruction::UDIV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UDIV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SDIV_32_dp_2src() {
    assert_eq!(Instruction::SDIV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SDIV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_LSL_LSLV_32_dp_2src() {
    assert_eq!(Instruction::LSL_LSLV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::LSL_LSLV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_LSLV_32_dp_2src() {
    assert_eq!(Instruction::LSLV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::LSLV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_LSR_LSRV_32_dp_2src() {
    assert_eq!(Instruction::LSR_LSRV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::LSR_LSRV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_LSRV_32_dp_2src() {
    assert_eq!(Instruction::LSRV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::LSRV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ASR_ASRV_32_dp_2src() {
    assert_eq!(Instruction::ASR_ASRV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ASR_ASRV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ASRV_32_dp_2src() {
    assert_eq!(Instruction::ASRV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ASRV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ROR_RORV_32_dp_2src() {
    assert_eq!(Instruction::ROR_RORV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ROR_RORV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_RORV_32_dp_2src() {
    assert_eq!(Instruction::RORV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::RORV_32_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CRC32B_32C_dp_2src() {
    assert_eq!(Instruction::CRC32B_32C_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CRC32B_32C_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CRC32H_32C_dp_2src() {
    assert_eq!(Instruction::CRC32H_32C_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CRC32H_32C_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CRC32W_32C_dp_2src() {
    assert_eq!(Instruction::CRC32W_32C_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CRC32W_32C_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CRC32CB_32C_dp_2src() {
    assert_eq!(Instruction::CRC32CB_32C_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CRC32CB_32C_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CRC32CH_32C_dp_2src() {
    assert_eq!(Instruction::CRC32CH_32C_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CRC32CH_32C_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CRC32CW_32C_dp_2src() {
    assert_eq!(Instruction::CRC32CW_32C_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CRC32CW_32C_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MUL_MADD_32A_dp_3src() {
    assert_eq!(Instruction::MUL_MADD_32A_dp_3src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MUL_MADD_32A_dp_3src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MNEG_MSUB_32A_dp_3src() {
    assert_eq!(Instruction::MNEG_MSUB_32A_dp_3src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MNEG_MSUB_32A_dp_3src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMUL_S_floatdp2() {
    assert_eq!(Instruction::FMUL_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMUL_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FDIV_S_floatdp2() {
    assert_eq!(Instruction::FDIV_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FDIV_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FADD_S_floatdp2() {
    assert_eq!(Instruction::FADD_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FADD_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FSUB_S_floatdp2() {
    assert_eq!(Instruction::FSUB_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FSUB_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAX_S_floatdp2() {
    assert_eq!(Instruction::FMAX_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAX_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMIN_S_floatdp2() {
    assert_eq!(Instruction::FMIN_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMIN_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAXNM_S_floatdp2() {
    assert_eq!(Instruction::FMAXNM_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXNM_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINNM_S_floatdp2() {
    assert_eq!(Instruction::FMINNM_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINNM_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FNMUL_S_floatdp2() {
    assert_eq!(Instruction::FNMUL_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FNMUL_S_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMUL_D_floatdp2() {
    assert_eq!(Instruction::FMUL_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMUL_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FDIV_D_floatdp2() {
    assert_eq!(Instruction::FDIV_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FDIV_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FADD_D_floatdp2() {
    assert_eq!(Instruction::FADD_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FADD_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FSUB_D_floatdp2() {
    assert_eq!(Instruction::FSUB_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FSUB_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAX_D_floatdp2() {
    assert_eq!(Instruction::FMAX_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAX_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMIN_D_floatdp2() {
    assert_eq!(Instruction::FMIN_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMIN_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAXNM_D_floatdp2() {
    assert_eq!(Instruction::FMAXNM_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXNM_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINNM_D_floatdp2() {
    assert_eq!(Instruction::FMINNM_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINNM_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FNMUL_D_floatdp2() {
    assert_eq!(Instruction::FNMUL_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FNMUL_D_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMUL_H_floatdp2() {
    assert_eq!(Instruction::FMUL_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMUL_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FDIV_H_floatdp2() {
    assert_eq!(Instruction::FDIV_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FDIV_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FADD_H_floatdp2() {
    assert_eq!(Instruction::FADD_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FADD_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FSUB_H_floatdp2() {
    assert_eq!(Instruction::FSUB_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FSUB_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAX_H_floatdp2() {
    assert_eq!(Instruction::FMAX_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAX_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMIN_H_floatdp2() {
    assert_eq!(Instruction::FMIN_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMIN_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAXNM_H_floatdp2() {
    assert_eq!(Instruction::FMAXNM_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXNM_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINNM_H_floatdp2() {
    assert_eq!(Instruction::FMINNM_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINNM_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FNMUL_H_floatdp2() {
    assert_eq!(Instruction::FNMUL_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FNMUL_H_floatdp2 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CNTP_r_p_p() {
    assert_eq!(Instruction::CNTP_r_p_p { size: 3, Pg: 15, Pn: 15, Rd: 31, }.encode().decode(), 
                Instruction::CNTP_r_p_p { size: 3, Pg: 15, Pn: 15, Rd: 31, })
}
#[test]
fn roundtrip_SMAX_z_zi() {
    assert_eq!(Instruction::SMAX_z_zi { size: 3, imm8: 255, Zdn: 31, }.encode().decode(), 
                Instruction::SMAX_z_zi { size: 3, imm8: 255, Zdn: 31, })
}
#[test]
fn roundtrip_UMAX_z_zi() {
    assert_eq!(Instruction::UMAX_z_zi { size: 3, imm8: 255, Zdn: 31, }.encode().decode(), 
                Instruction::UMAX_z_zi { size: 3, imm8: 255, Zdn: 31, })
}
#[test]
fn roundtrip_SMIN_z_zi() {
    assert_eq!(Instruction::SMIN_z_zi { size: 3, imm8: 255, Zdn: 31, }.encode().decode(), 
                Instruction::SMIN_z_zi { size: 3, imm8: 255, Zdn: 31, })
}
#[test]
fn roundtrip_UMIN_z_zi() {
    assert_eq!(Instruction::UMIN_z_zi { size: 3, imm8: 255, Zdn: 31, }.encode().decode(), 
                Instruction::UMIN_z_zi { size: 3, imm8: 255, Zdn: 31, })
}
#[test]
fn roundtrip_MUL_z_zi() {
    assert_eq!(Instruction::MUL_z_zi { size: 3, imm8: 255, Zdn: 31, }.encode().decode(), 
                Instruction::MUL_z_zi { size: 3, imm8: 255, Zdn: 31, })
}
#[test]
fn roundtrip_FDUP_z_i() {
    assert_eq!(Instruction::FDUP_z_i { size: 3, imm8: 255, Zd: 31, }.encode().decode(), 
                Instruction::FDUP_z_i { size: 3, imm8: 255, Zd: 31, })
}
#[test]
fn roundtrip_FMOV_fdup_z_i() {
    assert_eq!(Instruction::FMOV_fdup_z_i { size: 3, imm8: 255, Zd: 31, }.encode().decode(), 
                Instruction::FMOV_fdup_z_i { size: 3, imm8: 255, Zd: 31, })
}
#[test]
fn roundtrip_MVNI_asimdimm_L_hl() {
    assert_eq!(Instruction::MVNI_asimdimm_L_hl { Q: 1, a: 1, b: 1, c: 1, cmode: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, }.encode().decode(), 
                Instruction::MVNI_asimdimm_L_hl { Q: 1, a: 1, b: 1, c: 1, cmode: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, })
}
#[test]
fn roundtrip_BIC_asimdimm_L_hl() {
    assert_eq!(Instruction::BIC_asimdimm_L_hl { Q: 1, a: 1, b: 1, c: 1, cmode: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, }.encode().decode(), 
                Instruction::BIC_asimdimm_L_hl { Q: 1, a: 1, b: 1, c: 1, cmode: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, })
}
#[test]
fn roundtrip_MVNI_asimdimm_M_sm() {
    assert_eq!(Instruction::MVNI_asimdimm_M_sm { Q: 1, a: 1, b: 1, c: 1, cmode: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, }.encode().decode(), 
                Instruction::MVNI_asimdimm_M_sm { Q: 1, a: 1, b: 1, c: 1, cmode: 1, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, })
}
#[test]
fn roundtrip_LDADDB_32_memop() {
    assert_eq!(Instruction::LDADDB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDADDB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDCLRB_32_memop() {
    assert_eq!(Instruction::LDCLRB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDCLRB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDEORB_32_memop() {
    assert_eq!(Instruction::LDEORB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDEORB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSETB_32_memop() {
    assert_eq!(Instruction::LDSETB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSETB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMAXB_32_memop() {
    assert_eq!(Instruction::LDSMAXB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMAXB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMINB_32_memop() {
    assert_eq!(Instruction::LDSMINB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMINB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMAXB_32_memop() {
    assert_eq!(Instruction::LDUMAXB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMAXB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMINB_32_memop() {
    assert_eq!(Instruction::LDUMINB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMINB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SWPB_32_memop() {
    assert_eq!(Instruction::SWPB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::SWPB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDADDLB_32_memop() {
    assert_eq!(Instruction::LDADDLB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDADDLB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDCLRLB_32_memop() {
    assert_eq!(Instruction::LDCLRLB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDCLRLB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDEORLB_32_memop() {
    assert_eq!(Instruction::LDEORLB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDEORLB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSETLB_32_memop() {
    assert_eq!(Instruction::LDSETLB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSETLB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMAXLB_32_memop() {
    assert_eq!(Instruction::LDSMAXLB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMAXLB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMINLB_32_memop() {
    assert_eq!(Instruction::LDSMINLB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMINLB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMAXLB_32_memop() {
    assert_eq!(Instruction::LDUMAXLB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMAXLB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMINLB_32_memop() {
    assert_eq!(Instruction::LDUMINLB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMINLB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SWPLB_32_memop() {
    assert_eq!(Instruction::SWPLB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::SWPLB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDADDAB_32_memop() {
    assert_eq!(Instruction::LDADDAB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDADDAB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDCLRAB_32_memop() {
    assert_eq!(Instruction::LDCLRAB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDCLRAB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDEORAB_32_memop() {
    assert_eq!(Instruction::LDEORAB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDEORAB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSETAB_32_memop() {
    assert_eq!(Instruction::LDSETAB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSETAB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMAXAB_32_memop() {
    assert_eq!(Instruction::LDSMAXAB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMAXAB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMINAB_32_memop() {
    assert_eq!(Instruction::LDSMINAB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMINAB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMAXAB_32_memop() {
    assert_eq!(Instruction::LDUMAXAB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMAXAB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMINAB_32_memop() {
    assert_eq!(Instruction::LDUMINAB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMINAB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SWPAB_32_memop() {
    assert_eq!(Instruction::SWPAB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::SWPAB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAPRB_32L_memop() {
    assert_eq!(Instruction::LDAPRB_32L_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAPRB_32L_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDADDALB_32_memop() {
    assert_eq!(Instruction::LDADDALB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDADDALB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDCLRALB_32_memop() {
    assert_eq!(Instruction::LDCLRALB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDCLRALB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDEORALB_32_memop() {
    assert_eq!(Instruction::LDEORALB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDEORALB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSETALB_32_memop() {
    assert_eq!(Instruction::LDSETALB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSETALB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMAXALB_32_memop() {
    assert_eq!(Instruction::LDSMAXALB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMAXALB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMINALB_32_memop() {
    assert_eq!(Instruction::LDSMINALB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMINALB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMAXALB_32_memop() {
    assert_eq!(Instruction::LDUMAXALB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMAXALB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMINALB_32_memop() {
    assert_eq!(Instruction::LDUMINALB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMINALB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SWPALB_32_memop() {
    assert_eq!(Instruction::SWPALB_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::SWPALB_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ADCS_32_addsub_carry() {
    assert_eq!(Instruction::ADCS_32_addsub_carry { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADCS_32_addsub_carry { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_USDOT_z_zzz_s() {
    assert_eq!(Instruction::USDOT_z_zzz_s { Zm: 31, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::USDOT_z_zzz_s { Zm: 31, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_SDOT_z_zzzi_s() {
    assert_eq!(Instruction::SDOT_z_zzzi_s { i2: 3, Zm: 7, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::SDOT_z_zzzi_s { i2: 3, Zm: 7, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_UDOT_z_zzzi_s() {
    assert_eq!(Instruction::UDOT_z_zzzi_s { i2: 3, Zm: 7, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::UDOT_z_zzzi_s { i2: 3, Zm: 7, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_USDOT_z_zzzi_s() {
    assert_eq!(Instruction::USDOT_z_zzzi_s { i2: 3, Zm: 7, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::USDOT_z_zzzi_s { i2: 3, Zm: 7, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_SUDOT_z_zzzi_s() {
    assert_eq!(Instruction::SUDOT_z_zzzi_s { i2: 3, Zm: 7, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::SUDOT_z_zzzi_s { i2: 3, Zm: 7, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_SDOT_z_zzzi_d() {
    assert_eq!(Instruction::SDOT_z_zzzi_d { i1: 1, Zm: 15, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::SDOT_z_zzzi_d { i1: 1, Zm: 15, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_UDOT_z_zzzi_d() {
    assert_eq!(Instruction::UDOT_z_zzzi_d { i1: 1, Zm: 15, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::UDOT_z_zzzi_d { i1: 1, Zm: 15, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_SMMLA_z_zzz() {
    assert_eq!(Instruction::SMMLA_z_zzz { Zm: 31, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::SMMLA_z_zzz { Zm: 31, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_USMMLA_z_zzz() {
    assert_eq!(Instruction::USMMLA_z_zzz { Zm: 31, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::USMMLA_z_zzz { Zm: 31, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_UMMLA_z_zzz() {
    assert_eq!(Instruction::UMMLA_z_zzz { Zm: 31, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::UMMLA_z_zzz { Zm: 31, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_CASP_CP64_ldstexcl() {
    assert_eq!(Instruction::CASP_CP64_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASP_CP64_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASPL_CP64_ldstexcl() {
    assert_eq!(Instruction::CASPL_CP64_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASPL_CP64_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASPA_CP64_ldstexcl() {
    assert_eq!(Instruction::CASPA_CP64_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASPA_CP64_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASPAL_CP64_ldstexcl() {
    assert_eq!(Instruction::CASPAL_CP64_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASPAL_CP64_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASH_C32_ldstexcl() {
    assert_eq!(Instruction::CASH_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASH_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASLH_C32_ldstexcl() {
    assert_eq!(Instruction::CASLH_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASLH_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASAH_C32_ldstexcl() {
    assert_eq!(Instruction::CASAH_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASAH_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASALH_C32_ldstexcl() {
    assert_eq!(Instruction::CASALH_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASALH_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_INS_asimdins_IR_r() {
    assert_eq!(Instruction::INS_asimdins_IR_r { imm5: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::INS_asimdins_IR_r { imm5: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOV_INS_asimdins_IR_r() {
    assert_eq!(Instruction::MOV_INS_asimdins_IR_r { imm5: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MOV_INS_asimdins_IR_r { imm5: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMOV_asimdins_X_x() {
    assert_eq!(Instruction::SMOV_asimdins_X_x { imm5: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMOV_asimdins_X_x { imm5: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMMLA_asimdsame2_G() {
    assert_eq!(Instruction::SMMLA_asimdsame2_G { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMMLA_asimdsame2_G { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_USMMLA_asimdsame2_G() {
    assert_eq!(Instruction::USMMLA_asimdsame2_G { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::USMMLA_asimdsame2_G { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SBC_32_addsub_carry() {
    assert_eq!(Instruction::SBC_32_addsub_carry { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SBC_32_addsub_carry { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHA1C_QSV_cryptosha3() {
    assert_eq!(Instruction::SHA1C_QSV_cryptosha3 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHA1C_QSV_cryptosha3 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_DUP_asisdone_only() {
    assert_eq!(Instruction::DUP_asisdone_only { imm5: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::DUP_asisdone_only { imm5: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOV_DUP_asisdone_only() {
    assert_eq!(Instruction::MOV_DUP_asisdone_only { imm5: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MOV_DUP_asisdone_only { imm5: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHA1P_QSV_cryptosha3() {
    assert_eq!(Instruction::SHA1P_QSV_cryptosha3 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHA1P_QSV_cryptosha3 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHA1M_QSV_cryptosha3() {
    assert_eq!(Instruction::SHA1M_QSV_cryptosha3 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHA1M_QSV_cryptosha3 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHA1SU0_VVV_cryptosha3() {
    assert_eq!(Instruction::SHA1SU0_VVV_cryptosha3 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHA1SU0_VVV_cryptosha3 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHA256H_QQV_cryptosha3() {
    assert_eq!(Instruction::SHA256H_QQV_cryptosha3 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHA256H_QQV_cryptosha3 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHA256H2_QQV_cryptosha3() {
    assert_eq!(Instruction::SHA256H2_QQV_cryptosha3 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHA256H2_QQV_cryptosha3 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHA256SU1_VVV_cryptosha3() {
    assert_eq!(Instruction::SHA256SU1_VVV_cryptosha3 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHA256SU1_VVV_cryptosha3 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMULX_asisdsamefp16_only() {
    assert_eq!(Instruction::FMULX_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMULX_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMEQ_asisdsamefp16_only() {
    assert_eq!(Instruction::FCMEQ_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMEQ_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRECPS_asisdsamefp16_only() {
    assert_eq!(Instruction::FRECPS_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRECPS_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRSQRTS_asisdsamefp16_only() {
    assert_eq!(Instruction::FRSQRTS_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRSQRTS_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BFDOT_z_zzzi() {
    assert_eq!(Instruction::BFDOT_z_zzzi { i2: 3, Zm: 7, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::BFDOT_z_zzzi { i2: 3, Zm: 7, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_BFDOT_z_zzz() {
    assert_eq!(Instruction::BFDOT_z_zzz { Zm: 31, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::BFDOT_z_zzz { Zm: 31, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_BFMMLA_z_zzz() {
    assert_eq!(Instruction::BFMMLA_z_zzz { Zm: 31, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::BFMMLA_z_zzz { Zm: 31, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_FMLA_z_zzzi_s() {
    assert_eq!(Instruction::FMLA_z_zzzi_s { i2: 3, Zm: 7, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::FMLA_z_zzzi_s { i2: 3, Zm: 7, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_FMLS_z_zzzi_s() {
    assert_eq!(Instruction::FMLS_z_zzzi_s { i2: 3, Zm: 7, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::FMLS_z_zzzi_s { i2: 3, Zm: 7, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_FMUL_z_zzi_s() {
    assert_eq!(Instruction::FMUL_z_zzi_s { i2: 3, Zm: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FMUL_z_zzi_s { i2: 3, Zm: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FMMLA_z_zzz_s() {
    assert_eq!(Instruction::FMMLA_z_zzz_s { Zm: 31, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::FMMLA_z_zzz_s { Zm: 31, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_FMLA_z_zzzi_d() {
    assert_eq!(Instruction::FMLA_z_zzzi_d { i1: 1, Zm: 15, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::FMLA_z_zzzi_d { i1: 1, Zm: 15, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_FMLS_z_zzzi_d() {
    assert_eq!(Instruction::FMLS_z_zzzi_d { i1: 1, Zm: 15, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::FMLS_z_zzzi_d { i1: 1, Zm: 15, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_FMUL_z_zzi_d() {
    assert_eq!(Instruction::FMUL_z_zzi_d { i1: 1, Zm: 15, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FMUL_z_zzi_d { i1: 1, Zm: 15, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_BFMLALB_z_zzz() {
    assert_eq!(Instruction::BFMLALB_z_zzz { Zm: 31, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::BFMLALB_z_zzz { Zm: 31, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_BFMLALT_z_zzz() {
    assert_eq!(Instruction::BFMLALT_z_zzz { Zm: 31, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::BFMLALT_z_zzz { Zm: 31, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_FMMLA_z_zzz_d() {
    assert_eq!(Instruction::FMMLA_z_zzz_d { Zm: 31, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::FMMLA_z_zzz_d { Zm: 31, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_FADDV_v_p_z() {
    assert_eq!(Instruction::FADDV_v_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, }.encode().decode(), 
                Instruction::FADDV_v_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, })
}
#[test]
fn roundtrip_FADD_z_p_zz() {
    assert_eq!(Instruction::FADD_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FADD_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FRINTN_z_p_z() {
    assert_eq!(Instruction::FRINTN_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FRINTN_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FSUB_z_p_zz() {
    assert_eq!(Instruction::FSUB_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FSUB_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FRINTP_z_p_z() {
    assert_eq!(Instruction::FRINTP_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FRINTP_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FMUL_z_p_zz() {
    assert_eq!(Instruction::FMUL_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FMUL_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FRINTM_z_p_z() {
    assert_eq!(Instruction::FRINTM_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FRINTM_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FSUBR_z_p_zz() {
    assert_eq!(Instruction::FSUBR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FSUBR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FRINTZ_z_p_z() {
    assert_eq!(Instruction::FRINTZ_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FRINTZ_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FMAXNMV_v_p_z() {
    assert_eq!(Instruction::FMAXNMV_v_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, }.encode().decode(), 
                Instruction::FMAXNMV_v_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, })
}
#[test]
fn roundtrip_FMAXNM_z_p_zz() {
    assert_eq!(Instruction::FMAXNM_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FMAXNM_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FRINTA_z_p_z() {
    assert_eq!(Instruction::FRINTA_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FRINTA_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FMINNMV_v_p_z() {
    assert_eq!(Instruction::FMINNMV_v_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, }.encode().decode(), 
                Instruction::FMINNMV_v_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, })
}
#[test]
fn roundtrip_FMINNM_z_p_zz() {
    assert_eq!(Instruction::FMINNM_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FMINNM_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FMAXV_v_p_z() {
    assert_eq!(Instruction::FMAXV_v_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, }.encode().decode(), 
                Instruction::FMAXV_v_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, })
}
#[test]
fn roundtrip_FMAX_z_p_zz() {
    assert_eq!(Instruction::FMAX_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FMAX_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FRINTX_z_p_z() {
    assert_eq!(Instruction::FRINTX_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FRINTX_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FMINV_v_p_z() {
    assert_eq!(Instruction::FMINV_v_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, }.encode().decode(), 
                Instruction::FMINV_v_p_z { size: 3, Pg: 7, Zn: 31, Vd: 31, })
}
#[test]
fn roundtrip_FMIN_z_p_zz() {
    assert_eq!(Instruction::FMIN_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FMIN_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FRINTI_z_p_z() {
    assert_eq!(Instruction::FRINTI_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FRINTI_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FABD_z_p_zz() {
    assert_eq!(Instruction::FABD_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FABD_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FSCALE_z_p_zz() {
    assert_eq!(Instruction::FSCALE_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FSCALE_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FMULX_z_p_zz() {
    assert_eq!(Instruction::FMULX_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FMULX_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FDIVR_z_p_zz() {
    assert_eq!(Instruction::FDIVR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FDIVR_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FRECPX_z_p_z() {
    assert_eq!(Instruction::FRECPX_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FRECPX_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FDIV_z_p_zz() {
    assert_eq!(Instruction::FDIV_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FDIV_z_p_zz { size: 3, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FSQRT_z_p_z() {
    assert_eq!(Instruction::FSQRT_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FSQRT_z_p_z { size: 3, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FTMAD_z_zzi() {
    assert_eq!(Instruction::FTMAD_z_zzi { size: 3, imm3: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FTMAD_z_zzi { size: 3, imm3: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FADDA_v_p_z() {
    assert_eq!(Instruction::FADDA_v_p_z { size: 3, Pg: 7, Zm: 31, Vdn: 31, }.encode().decode(), 
                Instruction::FADDA_v_p_z { size: 3, Pg: 7, Zm: 31, Vdn: 31, })
}
#[test]
fn roundtrip_BFMMLA_asimdsame2_E() {
    assert_eq!(Instruction::BFMMLA_asimdsame2_E { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BFMMLA_asimdsame2_E { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMMLA_asimdsame2_G() {
    assert_eq!(Instruction::UMMLA_asimdsame2_G { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMMLA_asimdsame2_G { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_LDADDH_32_memop() {
    assert_eq!(Instruction::LDADDH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDADDH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDCLRH_32_memop() {
    assert_eq!(Instruction::LDCLRH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDCLRH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDEORH_32_memop() {
    assert_eq!(Instruction::LDEORH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDEORH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSETH_32_memop() {
    assert_eq!(Instruction::LDSETH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSETH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMAXH_32_memop() {
    assert_eq!(Instruction::LDSMAXH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMAXH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMINH_32_memop() {
    assert_eq!(Instruction::LDSMINH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMINH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMAXH_32_memop() {
    assert_eq!(Instruction::LDUMAXH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMAXH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMINH_32_memop() {
    assert_eq!(Instruction::LDUMINH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMINH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SWPH_32_memop() {
    assert_eq!(Instruction::SWPH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::SWPH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDADDLH_32_memop() {
    assert_eq!(Instruction::LDADDLH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDADDLH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDCLRLH_32_memop() {
    assert_eq!(Instruction::LDCLRLH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDCLRLH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDEORLH_32_memop() {
    assert_eq!(Instruction::LDEORLH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDEORLH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSETLH_32_memop() {
    assert_eq!(Instruction::LDSETLH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSETLH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMAXLH_32_memop() {
    assert_eq!(Instruction::LDSMAXLH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMAXLH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMINLH_32_memop() {
    assert_eq!(Instruction::LDSMINLH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMINLH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMAXLH_32_memop() {
    assert_eq!(Instruction::LDUMAXLH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMAXLH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMINLH_32_memop() {
    assert_eq!(Instruction::LDUMINLH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMINLH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SWPLH_32_memop() {
    assert_eq!(Instruction::SWPLH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::SWPLH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDADDAH_32_memop() {
    assert_eq!(Instruction::LDADDAH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDADDAH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDCLRAH_32_memop() {
    assert_eq!(Instruction::LDCLRAH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDCLRAH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDEORAH_32_memop() {
    assert_eq!(Instruction::LDEORAH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDEORAH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSETAH_32_memop() {
    assert_eq!(Instruction::LDSETAH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSETAH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMAXAH_32_memop() {
    assert_eq!(Instruction::LDSMAXAH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMAXAH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMINAH_32_memop() {
    assert_eq!(Instruction::LDSMINAH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMINAH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMAXAH_32_memop() {
    assert_eq!(Instruction::LDUMAXAH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMAXAH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMINAH_32_memop() {
    assert_eq!(Instruction::LDUMINAH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMINAH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SWPAH_32_memop() {
    assert_eq!(Instruction::SWPAH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::SWPAH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAPRH_32L_memop() {
    assert_eq!(Instruction::LDAPRH_32L_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAPRH_32L_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDADDALH_32_memop() {
    assert_eq!(Instruction::LDADDALH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDADDALH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDCLRALH_32_memop() {
    assert_eq!(Instruction::LDCLRALH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDCLRALH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDEORALH_32_memop() {
    assert_eq!(Instruction::LDEORALH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDEORALH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSETALH_32_memop() {
    assert_eq!(Instruction::LDSETALH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSETALH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMAXALH_32_memop() {
    assert_eq!(Instruction::LDSMAXALH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMAXALH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMINALH_32_memop() {
    assert_eq!(Instruction::LDSMINALH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMINALH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMAXALH_32_memop() {
    assert_eq!(Instruction::LDUMAXALH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMAXALH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMINALH_32_memop() {
    assert_eq!(Instruction::LDUMINALH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMINALH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SWPALH_32_memop() {
    assert_eq!(Instruction::SWPALH_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::SWPALH_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SBCS_32_addsub_carry() {
    assert_eq!(Instruction::SBCS_32_addsub_carry { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SBCS_32_addsub_carry { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMGE_asisdsamefp16_only() {
    assert_eq!(Instruction::FCMGE_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMGE_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FACGE_asisdsamefp16_only() {
    assert_eq!(Instruction::FACGE_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FACGE_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FABD_asisdsamefp16_only() {
    assert_eq!(Instruction::FABD_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FABD_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMGT_asisdsamefp16_only() {
    assert_eq!(Instruction::FCMGT_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMGT_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FACGT_asisdsamefp16_only() {
    assert_eq!(Instruction::FACGT_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FACGT_asisdsamefp16_only { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CAS_C32_ldstexcl() {
    assert_eq!(Instruction::CAS_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CAS_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASL_C32_ldstexcl() {
    assert_eq!(Instruction::CASL_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASL_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASA_C32_ldstexcl() {
    assert_eq!(Instruction::CASA_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASA_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASAL_C32_ldstexcl() {
    assert_eq!(Instruction::CASAL_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASAL_C32_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ADC_64_addsub_carry() {
    assert_eq!(Instruction::ADC_64_addsub_carry { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADC_64_addsub_carry { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUBP_64S_dp_2src() {
    assert_eq!(Instruction::SUBP_64S_dp_2src { Xm: 31, Xn: 31, Xd: 31, }.encode().decode(), 
                Instruction::SUBP_64S_dp_2src { Xm: 31, Xn: 31, Xd: 31, })
}
#[test]
fn roundtrip_UDIV_64_dp_2src() {
    assert_eq!(Instruction::UDIV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UDIV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SDIV_64_dp_2src() {
    assert_eq!(Instruction::SDIV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SDIV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_IRG_64I_dp_2src() {
    assert_eq!(Instruction::IRG_64I_dp_2src { Xm: 31, Xn: 31, Xd: 31, }.encode().decode(), 
                Instruction::IRG_64I_dp_2src { Xm: 31, Xn: 31, Xd: 31, })
}
#[test]
fn roundtrip_GMI_64G_dp_2src() {
    assert_eq!(Instruction::GMI_64G_dp_2src { Xm: 31, Xn: 31, Xd: 31, }.encode().decode(), 
                Instruction::GMI_64G_dp_2src { Xm: 31, Xn: 31, Xd: 31, })
}
#[test]
fn roundtrip_LSL_LSLV_64_dp_2src() {
    assert_eq!(Instruction::LSL_LSLV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::LSL_LSLV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_LSLV_64_dp_2src() {
    assert_eq!(Instruction::LSLV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::LSLV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_LSR_LSRV_64_dp_2src() {
    assert_eq!(Instruction::LSR_LSRV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::LSR_LSRV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_LSRV_64_dp_2src() {
    assert_eq!(Instruction::LSRV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::LSRV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ASR_ASRV_64_dp_2src() {
    assert_eq!(Instruction::ASR_ASRV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ASR_ASRV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ASRV_64_dp_2src() {
    assert_eq!(Instruction::ASRV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ASRV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ROR_RORV_64_dp_2src() {
    assert_eq!(Instruction::ROR_RORV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ROR_RORV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_RORV_64_dp_2src() {
    assert_eq!(Instruction::RORV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::RORV_64_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_PACGA_64P_dp_2src() {
    assert_eq!(Instruction::PACGA_64P_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::PACGA_64P_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CRC32X_64C_dp_2src() {
    assert_eq!(Instruction::CRC32X_64C_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CRC32X_64C_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CRC32CX_64C_dp_2src() {
    assert_eq!(Instruction::CRC32CX_64C_dp_2src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CRC32CX_64C_dp_2src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MUL_MADD_64A_dp_3src() {
    assert_eq!(Instruction::MUL_MADD_64A_dp_3src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MUL_MADD_64A_dp_3src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MNEG_MSUB_64A_dp_3src() {
    assert_eq!(Instruction::MNEG_MSUB_64A_dp_3src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MNEG_MSUB_64A_dp_3src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMULL_SMADDL_64WA_dp_3src() {
    assert_eq!(Instruction::SMULL_SMADDL_64WA_dp_3src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMULL_SMADDL_64WA_dp_3src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMNEGL_SMSUBL_64WA_dp_3src() {
    assert_eq!(Instruction::SMNEGL_SMSUBL_64WA_dp_3src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMNEGL_SMSUBL_64WA_dp_3src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMULL_UMADDL_64WA_dp_3src() {
    assert_eq!(Instruction::UMULL_UMADDL_64WA_dp_3src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMULL_UMADDL_64WA_dp_3src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMNEGL_UMSUBL_64WA_dp_3src() {
    assert_eq!(Instruction::UMNEGL_UMSUBL_64WA_dp_3src { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMNEGL_UMSUBL_64WA_dp_3src { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_LDADD_32_memop() {
    assert_eq!(Instruction::LDADD_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDADD_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDCLR_32_memop() {
    assert_eq!(Instruction::LDCLR_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDCLR_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDEOR_32_memop() {
    assert_eq!(Instruction::LDEOR_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDEOR_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSET_32_memop() {
    assert_eq!(Instruction::LDSET_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSET_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMAX_32_memop() {
    assert_eq!(Instruction::LDSMAX_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMAX_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMIN_32_memop() {
    assert_eq!(Instruction::LDSMIN_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMIN_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMAX_32_memop() {
    assert_eq!(Instruction::LDUMAX_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMAX_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMIN_32_memop() {
    assert_eq!(Instruction::LDUMIN_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMIN_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SWP_32_memop() {
    assert_eq!(Instruction::SWP_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::SWP_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDADDL_32_memop() {
    assert_eq!(Instruction::LDADDL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDADDL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDCLRL_32_memop() {
    assert_eq!(Instruction::LDCLRL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDCLRL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDEORL_32_memop() {
    assert_eq!(Instruction::LDEORL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDEORL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSETL_32_memop() {
    assert_eq!(Instruction::LDSETL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSETL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMAXL_32_memop() {
    assert_eq!(Instruction::LDSMAXL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMAXL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMINL_32_memop() {
    assert_eq!(Instruction::LDSMINL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMINL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMAXL_32_memop() {
    assert_eq!(Instruction::LDUMAXL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMAXL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMINL_32_memop() {
    assert_eq!(Instruction::LDUMINL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMINL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SWPL_32_memop() {
    assert_eq!(Instruction::SWPL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::SWPL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDADDA_32_memop() {
    assert_eq!(Instruction::LDADDA_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDADDA_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDCLRA_32_memop() {
    assert_eq!(Instruction::LDCLRA_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDCLRA_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDEORA_32_memop() {
    assert_eq!(Instruction::LDEORA_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDEORA_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSETA_32_memop() {
    assert_eq!(Instruction::LDSETA_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSETA_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMAXA_32_memop() {
    assert_eq!(Instruction::LDSMAXA_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMAXA_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMINA_32_memop() {
    assert_eq!(Instruction::LDSMINA_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMINA_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMAXA_32_memop() {
    assert_eq!(Instruction::LDUMAXA_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMAXA_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMINA_32_memop() {
    assert_eq!(Instruction::LDUMINA_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMINA_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SWPA_32_memop() {
    assert_eq!(Instruction::SWPA_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::SWPA_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAPR_32L_memop() {
    assert_eq!(Instruction::LDAPR_32L_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAPR_32L_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDADDAL_32_memop() {
    assert_eq!(Instruction::LDADDAL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDADDAL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDCLRAL_32_memop() {
    assert_eq!(Instruction::LDCLRAL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDCLRAL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDEORAL_32_memop() {
    assert_eq!(Instruction::LDEORAL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDEORAL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSETAL_32_memop() {
    assert_eq!(Instruction::LDSETAL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSETAL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMAXAL_32_memop() {
    assert_eq!(Instruction::LDSMAXAL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMAXAL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMINAL_32_memop() {
    assert_eq!(Instruction::LDSMINAL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMINAL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMAXAL_32_memop() {
    assert_eq!(Instruction::LDUMAXAL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMAXAL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMINAL_32_memop() {
    assert_eq!(Instruction::LDUMINAL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMINAL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SWPAL_32_memop() {
    assert_eq!(Instruction::SWPAL_32_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::SWPAL_32_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ADCS_64_addsub_carry() {
    assert_eq!(Instruction::ADCS_64_addsub_carry { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADCS_64_addsub_carry { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_RMIF_only_rmif() {
    assert_eq!(Instruction::RMIF_only_rmif { imm6: 63, Rn: 31, mask: 15, }.encode().decode(), 
                Instruction::RMIF_only_rmif { imm6: 63, Rn: 31, mask: 15, })
}
#[test]
fn roundtrip_SUBPS_64S_dp_2src() {
    assert_eq!(Instruction::SUBPS_64S_dp_2src { Xm: 31, Xn: 31, Xd: 31, }.encode().decode(), 
                Instruction::SUBPS_64S_dp_2src { Xm: 31, Xn: 31, Xd: 31, })
}
#[test]
fn roundtrip_CAS_C64_ldstexcl() {
    assert_eq!(Instruction::CAS_C64_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CAS_C64_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASL_C64_ldstexcl() {
    assert_eq!(Instruction::CASL_C64_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASL_C64_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASA_C64_ldstexcl() {
    assert_eq!(Instruction::CASA_C64_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASA_C64_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CASAL_C64_ldstexcl() {
    assert_eq!(Instruction::CASAL_C64_ldstexcl { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::CASAL_C64_ldstexcl { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SHA512H_QQV_cryptosha512_3() {
    assert_eq!(Instruction::SHA512H_QQV_cryptosha512_3 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHA512H_QQV_cryptosha512_3 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHA512H2_QQV_cryptosha512_3() {
    assert_eq!(Instruction::SHA512H2_QQV_cryptosha512_3 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHA512H2_QQV_cryptosha512_3 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHA512SU1_VVV2_cryptosha512_3() {
    assert_eq!(Instruction::SHA512SU1_VVV2_cryptosha512_3 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHA512SU1_VVV2_cryptosha512_3 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_RAX1_VVV2_cryptosha512_3() {
    assert_eq!(Instruction::RAX1_VVV2_cryptosha512_3 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::RAX1_VVV2_cryptosha512_3 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SM3PARTW1_VVV4_cryptosha512_3() {
    assert_eq!(Instruction::SM3PARTW1_VVV4_cryptosha512_3 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SM3PARTW1_VVV4_cryptosha512_3 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SM3PARTW2_VVV4_cryptosha512_3() {
    assert_eq!(Instruction::SM3PARTW2_VVV4_cryptosha512_3 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SM3PARTW2_VVV4_cryptosha512_3 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SM4EKEY_VVV4_cryptosha512_3() {
    assert_eq!(Instruction::SM4EKEY_VVV4_cryptosha512_3 { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SM4EKEY_VVV4_cryptosha512_3 { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_DC_SYS_CR_systeminstrs() {
    assert_eq!(Instruction::DC_SYS_CR_systeminstrs { op1: 7, CRm: 15, op2: 7, Rt: 31, }.encode().decode(), 
                Instruction::DC_SYS_CR_systeminstrs { op1: 7, CRm: 15, op2: 7, Rt: 31, })
}
#[test]
fn roundtrip_IC_SYS_CR_systeminstrs() {
    assert_eq!(Instruction::IC_SYS_CR_systeminstrs { op1: 7, CRm: 15, op2: 7, Rt: 31, }.encode().decode(), 
                Instruction::IC_SYS_CR_systeminstrs { op1: 7, CRm: 15, op2: 7, Rt: 31, })
}
#[test]
fn roundtrip_TLBI_SYS_CR_systeminstrs() {
    assert_eq!(Instruction::TLBI_SYS_CR_systeminstrs { op1: 7, CRm: 15, op2: 7, Rt: 31, }.encode().decode(), 
                Instruction::TLBI_SYS_CR_systeminstrs { op1: 7, CRm: 15, op2: 7, Rt: 31, })
}
#[test]
fn roundtrip_SBC_64_addsub_carry() {
    assert_eq!(Instruction::SBC_64_addsub_carry { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SBC_64_addsub_carry { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_LDADD_64_memop() {
    assert_eq!(Instruction::LDADD_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDADD_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDCLR_64_memop() {
    assert_eq!(Instruction::LDCLR_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDCLR_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDEOR_64_memop() {
    assert_eq!(Instruction::LDEOR_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDEOR_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSET_64_memop() {
    assert_eq!(Instruction::LDSET_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSET_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMAX_64_memop() {
    assert_eq!(Instruction::LDSMAX_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMAX_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMIN_64_memop() {
    assert_eq!(Instruction::LDSMIN_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMIN_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMAX_64_memop() {
    assert_eq!(Instruction::LDUMAX_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMAX_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMIN_64_memop() {
    assert_eq!(Instruction::LDUMIN_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMIN_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SWP_64_memop() {
    assert_eq!(Instruction::SWP_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::SWP_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST64BV0_64_memop() {
    assert_eq!(Instruction::ST64BV0_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST64BV0_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST64BV_64_memop() {
    assert_eq!(Instruction::ST64BV_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST64BV_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDADDL_64_memop() {
    assert_eq!(Instruction::LDADDL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDADDL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDCLRL_64_memop() {
    assert_eq!(Instruction::LDCLRL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDCLRL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDEORL_64_memop() {
    assert_eq!(Instruction::LDEORL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDEORL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSETL_64_memop() {
    assert_eq!(Instruction::LDSETL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSETL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMAXL_64_memop() {
    assert_eq!(Instruction::LDSMAXL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMAXL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMINL_64_memop() {
    assert_eq!(Instruction::LDSMINL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMINL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMAXL_64_memop() {
    assert_eq!(Instruction::LDUMAXL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMAXL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMINL_64_memop() {
    assert_eq!(Instruction::LDUMINL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMINL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SWPL_64_memop() {
    assert_eq!(Instruction::SWPL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::SWPL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDADDA_64_memop() {
    assert_eq!(Instruction::LDADDA_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDADDA_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDCLRA_64_memop() {
    assert_eq!(Instruction::LDCLRA_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDCLRA_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDEORA_64_memop() {
    assert_eq!(Instruction::LDEORA_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDEORA_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSETA_64_memop() {
    assert_eq!(Instruction::LDSETA_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSETA_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMAXA_64_memop() {
    assert_eq!(Instruction::LDSMAXA_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMAXA_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMINA_64_memop() {
    assert_eq!(Instruction::LDSMINA_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMINA_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMAXA_64_memop() {
    assert_eq!(Instruction::LDUMAXA_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMAXA_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMINA_64_memop() {
    assert_eq!(Instruction::LDUMINA_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMINA_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SWPA_64_memop() {
    assert_eq!(Instruction::SWPA_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::SWPA_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAPR_64L_memop() {
    assert_eq!(Instruction::LDAPR_64L_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAPR_64L_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDADDAL_64_memop() {
    assert_eq!(Instruction::LDADDAL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDADDAL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDCLRAL_64_memop() {
    assert_eq!(Instruction::LDCLRAL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDCLRAL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDEORAL_64_memop() {
    assert_eq!(Instruction::LDEORAL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDEORAL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSETAL_64_memop() {
    assert_eq!(Instruction::LDSETAL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSETAL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMAXAL_64_memop() {
    assert_eq!(Instruction::LDSMAXAL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMAXAL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDSMINAL_64_memop() {
    assert_eq!(Instruction::LDSMINAL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDSMINAL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMAXAL_64_memop() {
    assert_eq!(Instruction::LDUMAXAL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMAXAL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUMINAL_64_memop() {
    assert_eq!(Instruction::LDUMINAL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUMINAL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SWPAL_64_memop() {
    assert_eq!(Instruction::SWPAL_64_memop { Rs: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::SWPAL_64_memop { Rs: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SBCS_64_addsub_carry() {
    assert_eq!(Instruction::SBCS_64_addsub_carry { Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SBCS_64_addsub_carry { Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UDF_only_perm_undef() {
    assert_eq!(Instruction::UDF_only_perm_undef { imm16: 65535, }.encode().decode(), 
                Instruction::UDF_only_perm_undef { imm16: 65535, })
}
#[test]
fn roundtrip_MOVPRFX_z_p_z() {
    assert_eq!(Instruction::MOVPRFX_z_p_z { size: 3, M: 1, Pg: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::MOVPRFX_z_p_z { size: 3, M: 1, Pg: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_ADDVL_r_ri() {
    assert_eq!(Instruction::ADDVL_r_ri { Rn: 31, imm6: 63, Rd: 31, }.encode().decode(), 
                Instruction::ADDVL_r_ri { Rn: 31, imm6: 63, Rd: 31, })
}
#[test]
fn roundtrip_ADDPL_r_ri() {
    assert_eq!(Instruction::ADDPL_r_ri { Rn: 31, imm6: 63, Rd: 31, }.encode().decode(), 
                Instruction::ADDPL_r_ri { Rn: 31, imm6: 63, Rd: 31, })
}
#[test]
fn roundtrip_ST1_asisdlsop_DX1_r1d() {
    assert_eq!(Instruction::ST1_asisdlsop_DX1_r1d { Q: 1, Rm: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlsop_DX1_r1d { Q: 1, Rm: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST3_asisdlsop_DX3_r3d() {
    assert_eq!(Instruction::ST3_asisdlsop_DX3_r3d { Q: 1, Rm: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST3_asisdlsop_DX3_r3d { Q: 1, Rm: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST2_asisdlsop_DX2_r2d() {
    assert_eq!(Instruction::ST2_asisdlsop_DX2_r2d { Q: 1, Rm: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST2_asisdlsop_DX2_r2d { Q: 1, Rm: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST4_asisdlsop_DX4_r4d() {
    assert_eq!(Instruction::ST4_asisdlsop_DX4_r4d { Q: 1, Rm: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST4_asisdlsop_DX4_r4d { Q: 1, Rm: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlsop_DX1_r1d() {
    assert_eq!(Instruction::LD1_asisdlsop_DX1_r1d { Q: 1, Rm: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlsop_DX1_r1d { Q: 1, Rm: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3_asisdlsop_DX3_r3d() {
    assert_eq!(Instruction::LD3_asisdlsop_DX3_r3d { Q: 1, Rm: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3_asisdlsop_DX3_r3d { Q: 1, Rm: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2_asisdlsop_DX2_r2d() {
    assert_eq!(Instruction::LD2_asisdlsop_DX2_r2d { Q: 1, Rm: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2_asisdlsop_DX2_r2d { Q: 1, Rm: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4_asisdlsop_DX4_r4d() {
    assert_eq!(Instruction::LD4_asisdlsop_DX4_r4d { Q: 1, Rm: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4_asisdlsop_DX4_r4d { Q: 1, Rm: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_TBL_asimdtbl_L1_1() {
    assert_eq!(Instruction::TBL_asimdtbl_L1_1 { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::TBL_asimdtbl_L1_1 { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_DUP_asimdins_DV_v() {
    assert_eq!(Instruction::DUP_asimdins_DV_v { Q: 1, imm5: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::DUP_asimdins_DV_v { Q: 1, imm5: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_DUP_asimdins_DR_r() {
    assert_eq!(Instruction::DUP_asimdins_DR_r { Q: 1, imm5: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::DUP_asimdins_DR_r { Q: 1, imm5: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_TBX_asimdtbl_L1_1() {
    assert_eq!(Instruction::TBX_asimdtbl_L1_1 { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::TBX_asimdtbl_L1_1 { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_TBL_asimdtbl_L2_2() {
    assert_eq!(Instruction::TBL_asimdtbl_L2_2 { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::TBL_asimdtbl_L2_2 { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_TBX_asimdtbl_L2_2() {
    assert_eq!(Instruction::TBX_asimdtbl_L2_2 { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::TBX_asimdtbl_L2_2 { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_TBL_asimdtbl_L3_3() {
    assert_eq!(Instruction::TBL_asimdtbl_L3_3 { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::TBL_asimdtbl_L3_3 { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_TBX_asimdtbl_L3_3() {
    assert_eq!(Instruction::TBX_asimdtbl_L3_3 { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::TBX_asimdtbl_L3_3 { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_TBL_asimdtbl_L4_4() {
    assert_eq!(Instruction::TBL_asimdtbl_L4_4 { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::TBL_asimdtbl_L4_4 { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_TBX_asimdtbl_L4_4() {
    assert_eq!(Instruction::TBX_asimdtbl_L4_4 { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::TBX_asimdtbl_L4_4 { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_AND_asimdsame_only() {
    assert_eq!(Instruction::AND_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::AND_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLAL_asimdsame_F() {
    assert_eq!(Instruction::FMLAL_asimdsame_F { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLAL_asimdsame_F { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAXNM_asimdsamefp16_only() {
    assert_eq!(Instruction::FMAXNM_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXNM_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLA_asimdsamefp16_only() {
    assert_eq!(Instruction::FMLA_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLA_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FADD_asimdsamefp16_only() {
    assert_eq!(Instruction::FADD_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FADD_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMULX_asimdsamefp16_only() {
    assert_eq!(Instruction::FMULX_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMULX_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMEQ_asimdsamefp16_only() {
    assert_eq!(Instruction::FCMEQ_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMEQ_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAX_asimdsamefp16_only() {
    assert_eq!(Instruction::FMAX_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAX_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRECPS_asimdsamefp16_only() {
    assert_eq!(Instruction::FRECPS_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRECPS_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BIC_asimdsame_only() {
    assert_eq!(Instruction::BIC_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BIC_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_USDOT_asimdsame2_D() {
    assert_eq!(Instruction::USDOT_asimdsame2_D { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::USDOT_asimdsame2_D { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOV_ORR_asimdsame_only() {
    assert_eq!(Instruction::MOV_ORR_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MOV_ORR_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ORR_asimdsame_only() {
    assert_eq!(Instruction::ORR_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ORR_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLSL_asimdsame_F() {
    assert_eq!(Instruction::FMLSL_asimdsame_F { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLSL_asimdsame_F { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINNM_asimdsamefp16_only() {
    assert_eq!(Instruction::FMINNM_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINNM_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLS_asimdsamefp16_only() {
    assert_eq!(Instruction::FMLS_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLS_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FSUB_asimdsamefp16_only() {
    assert_eq!(Instruction::FSUB_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FSUB_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMIN_asimdsamefp16_only() {
    assert_eq!(Instruction::FMIN_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMIN_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRSQRTS_asimdsamefp16_only() {
    assert_eq!(Instruction::FRSQRTS_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRSQRTS_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ORN_asimdsame_only() {
    assert_eq!(Instruction::ORN_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ORN_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOVI_asimdimm_L_sl() {
    assert_eq!(Instruction::MOVI_asimdimm_L_sl { Q: 1, a: 1, b: 1, c: 1, cmode: 3, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, }.encode().decode(), 
                Instruction::MOVI_asimdimm_L_sl { Q: 1, a: 1, b: 1, c: 1, cmode: 3, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, })
}
#[test]
fn roundtrip_ORR_asimdimm_L_sl() {
    assert_eq!(Instruction::ORR_asimdimm_L_sl { Q: 1, a: 1, b: 1, c: 1, cmode: 3, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, }.encode().decode(), 
                Instruction::ORR_asimdimm_L_sl { Q: 1, a: 1, b: 1, c: 1, cmode: 3, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, })
}
#[test]
fn roundtrip_ASR_SBFM_32M_bitfield() {
    assert_eq!(Instruction::ASR_SBFM_32M_bitfield { immr: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ASR_SBFM_32M_bitfield { immr: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_S32_float2fix() {
    assert_eq!(Instruction::SCVTF_S32_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_S32_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_S32_float2fix() {
    assert_eq!(Instruction::UCVTF_S32_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_S32_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_32S_float2fix() {
    assert_eq!(Instruction::FCVTZS_32S_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_32S_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_32S_float2fix() {
    assert_eq!(Instruction::FCVTZU_32S_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_32S_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_D32_float2fix() {
    assert_eq!(Instruction::SCVTF_D32_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_D32_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_D32_float2fix() {
    assert_eq!(Instruction::UCVTF_D32_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_D32_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_32D_float2fix() {
    assert_eq!(Instruction::FCVTZS_32D_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_32D_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_32D_float2fix() {
    assert_eq!(Instruction::FCVTZU_32D_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_32D_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_H32_float2fix() {
    assert_eq!(Instruction::SCVTF_H32_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_H32_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_H32_float2fix() {
    assert_eq!(Instruction::UCVTF_H32_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_H32_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_32H_float2fix() {
    assert_eq!(Instruction::FCVTZS_32H_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_32H_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_32H_float2fix() {
    assert_eq!(Instruction::FCVTZU_32H_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_32H_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_AND_p_p_pp_z() {
    assert_eq!(Instruction::AND_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::AND_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_MOV_and_p_p_pp_z() {
    assert_eq!(Instruction::MOV_and_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::MOV_and_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_BIC_p_p_pp_z() {
    assert_eq!(Instruction::BIC_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::BIC_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_EOR_p_p_pp_z() {
    assert_eq!(Instruction::EOR_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::EOR_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_NOT_eor_p_p_pp_z() {
    assert_eq!(Instruction::NOT_eor_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::NOT_eor_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_MOV_sel_p_p_pp() {
    assert_eq!(Instruction::MOV_sel_p_p_pp { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::MOV_sel_p_p_pp { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_SEL_p_p_pp() {
    assert_eq!(Instruction::SEL_p_p_pp { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::SEL_p_p_pp { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_BRKPA_p_p_pp() {
    assert_eq!(Instruction::BRKPA_p_p_pp { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::BRKPA_p_p_pp { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_BRKPB_p_p_pp() {
    assert_eq!(Instruction::BRKPB_p_p_pp { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::BRKPB_p_p_pp { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_ADD_z_zi() {
    assert_eq!(Instruction::ADD_z_zi { size: 3, sh: 1, imm8: 255, Zdn: 31, }.encode().decode(), 
                Instruction::ADD_z_zi { size: 3, sh: 1, imm8: 255, Zdn: 31, })
}
#[test]
fn roundtrip_SUB_z_zi() {
    assert_eq!(Instruction::SUB_z_zi { size: 3, sh: 1, imm8: 255, Zdn: 31, }.encode().decode(), 
                Instruction::SUB_z_zi { size: 3, sh: 1, imm8: 255, Zdn: 31, })
}
#[test]
fn roundtrip_SUBR_z_zi() {
    assert_eq!(Instruction::SUBR_z_zi { size: 3, sh: 1, imm8: 255, Zdn: 31, }.encode().decode(), 
                Instruction::SUBR_z_zi { size: 3, sh: 1, imm8: 255, Zdn: 31, })
}
#[test]
fn roundtrip_SQADD_z_zi() {
    assert_eq!(Instruction::SQADD_z_zi { size: 3, sh: 1, imm8: 255, Zdn: 31, }.encode().decode(), 
                Instruction::SQADD_z_zi { size: 3, sh: 1, imm8: 255, Zdn: 31, })
}
#[test]
fn roundtrip_UQADD_z_zi() {
    assert_eq!(Instruction::UQADD_z_zi { size: 3, sh: 1, imm8: 255, Zdn: 31, }.encode().decode(), 
                Instruction::UQADD_z_zi { size: 3, sh: 1, imm8: 255, Zdn: 31, })
}
#[test]
fn roundtrip_SQSUB_z_zi() {
    assert_eq!(Instruction::SQSUB_z_zi { size: 3, sh: 1, imm8: 255, Zdn: 31, }.encode().decode(), 
                Instruction::SQSUB_z_zi { size: 3, sh: 1, imm8: 255, Zdn: 31, })
}
#[test]
fn roundtrip_UQSUB_z_zi() {
    assert_eq!(Instruction::UQSUB_z_zi { size: 3, sh: 1, imm8: 255, Zdn: 31, }.encode().decode(), 
                Instruction::UQSUB_z_zi { size: 3, sh: 1, imm8: 255, Zdn: 31, })
}
#[test]
fn roundtrip_DUP_z_i() {
    assert_eq!(Instruction::DUP_z_i { size: 3, sh: 1, imm8: 255, Zd: 31, }.encode().decode(), 
                Instruction::DUP_z_i { size: 3, sh: 1, imm8: 255, Zd: 31, })
}
#[test]
fn roundtrip_MOV_dup_z_i() {
    assert_eq!(Instruction::MOV_dup_z_i { size: 3, sh: 1, imm8: 255, Zd: 31, }.encode().decode(), 
                Instruction::MOV_dup_z_i { size: 3, sh: 1, imm8: 255, Zd: 31, })
}
#[test]
fn roundtrip_ANDS_p_p_pp_z() {
    assert_eq!(Instruction::ANDS_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::ANDS_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_MOVS_ands_p_p_pp_z() {
    assert_eq!(Instruction::MOVS_ands_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::MOVS_ands_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_BICS_p_p_pp_z() {
    assert_eq!(Instruction::BICS_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::BICS_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_EORS_p_p_pp_z() {
    assert_eq!(Instruction::EORS_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::EORS_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_NOTS_eors_p_p_pp_z() {
    assert_eq!(Instruction::NOTS_eors_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::NOTS_eors_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_BRKPAS_p_p_pp() {
    assert_eq!(Instruction::BRKPAS_p_p_pp { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::BRKPAS_p_p_pp { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_BRKPBS_p_p_pp() {
    assert_eq!(Instruction::BRKPBS_p_p_pp { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::BRKPBS_p_p_pp { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_MOV_orr_p_p_pp_z() {
    assert_eq!(Instruction::MOV_orr_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::MOV_orr_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_ORR_p_p_pp_z() {
    assert_eq!(Instruction::ORR_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::ORR_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_ORN_p_p_pp_z() {
    assert_eq!(Instruction::ORN_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::ORN_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_NOR_p_p_pp_z() {
    assert_eq!(Instruction::NOR_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::NOR_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_NAND_p_p_pp_z() {
    assert_eq!(Instruction::NAND_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::NAND_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_MOVS_orrs_p_p_pp_z() {
    assert_eq!(Instruction::MOVS_orrs_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::MOVS_orrs_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_ORRS_p_p_pp_z() {
    assert_eq!(Instruction::ORRS_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::ORRS_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_ORNS_p_p_pp_z() {
    assert_eq!(Instruction::ORNS_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::ORNS_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_NORS_p_p_pp_z() {
    assert_eq!(Instruction::NORS_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::NORS_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_NANDS_p_p_pp_z() {
    assert_eq!(Instruction::NANDS_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, }.encode().decode(), 
                Instruction::NANDS_p_p_pp_z { Pm: 15, Pg: 15, Pn: 15, Pd: 15, })
}
#[test]
fn roundtrip_CMN_ADDS_32S_addsub_ext() {
    assert_eq!(Instruction::CMN_ADDS_32S_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, }.encode().decode(), 
                Instruction::CMN_ADDS_32S_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, })
}
#[test]
fn roundtrip_EOR_asimdsame_only() {
    assert_eq!(Instruction::EOR_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::EOR_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLAL2_asimdsame_F() {
    assert_eq!(Instruction::FMLAL2_asimdsame_F { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLAL2_asimdsame_F { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAXNMP_asimdsamefp16_only() {
    assert_eq!(Instruction::FMAXNMP_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXNMP_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FADDP_asimdsamefp16_only() {
    assert_eq!(Instruction::FADDP_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FADDP_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMUL_asimdsamefp16_only() {
    assert_eq!(Instruction::FMUL_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMUL_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMGE_asimdsamefp16_only() {
    assert_eq!(Instruction::FCMGE_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMGE_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FACGE_asimdsamefp16_only() {
    assert_eq!(Instruction::FACGE_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FACGE_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAXP_asimdsamefp16_only() {
    assert_eq!(Instruction::FMAXP_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXP_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FDIV_asimdsamefp16_only() {
    assert_eq!(Instruction::FDIV_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FDIV_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BFDOT_asimdsame2_D() {
    assert_eq!(Instruction::BFDOT_asimdsame2_D { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BFDOT_asimdsame2_D { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BSL_asimdsame_only() {
    assert_eq!(Instruction::BSL_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BSL_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BIT_asimdsame_only() {
    assert_eq!(Instruction::BIT_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BIT_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLSL2_asimdsame_F() {
    assert_eq!(Instruction::FMLSL2_asimdsame_F { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLSL2_asimdsame_F { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINNMP_asimdsamefp16_only() {
    assert_eq!(Instruction::FMINNMP_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINNMP_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FABD_asimdsamefp16_only() {
    assert_eq!(Instruction::FABD_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FABD_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMGT_asimdsamefp16_only() {
    assert_eq!(Instruction::FCMGT_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMGT_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FACGT_asimdsamefp16_only() {
    assert_eq!(Instruction::FACGT_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FACGT_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINP_asimdsamefp16_only() {
    assert_eq!(Instruction::FMINP_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINP_asimdsamefp16_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BFMLAL_asimdsame2_F() {
    assert_eq!(Instruction::BFMLAL_asimdsame2_F { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BFMLAL_asimdsame2_F { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BIF_asimdsame_only() {
    assert_eq!(Instruction::BIF_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BIF_asimdsame_only { Q: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MVNI_asimdimm_L_sl() {
    assert_eq!(Instruction::MVNI_asimdimm_L_sl { Q: 1, a: 1, b: 1, c: 1, cmode: 3, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, }.encode().decode(), 
                Instruction::MVNI_asimdimm_L_sl { Q: 1, a: 1, b: 1, c: 1, cmode: 3, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, })
}
#[test]
fn roundtrip_BIC_asimdimm_L_sl() {
    assert_eq!(Instruction::BIC_asimdimm_L_sl { Q: 1, a: 1, b: 1, c: 1, cmode: 3, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, }.encode().decode(), 
                Instruction::BIC_asimdimm_L_sl { Q: 1, a: 1, b: 1, c: 1, cmode: 3, d: 1, e: 1, f: 1, g: 1, h: 1, Rd: 31, })
}
#[test]
fn roundtrip_STRB_32BL_ldst_regoff() {
    assert_eq!(Instruction::STRB_32BL_ldst_regoff { Rm: 31, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STRB_32BL_ldst_regoff { Rm: 31, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRB_32BL_ldst_regoff() {
    assert_eq!(Instruction::LDRB_32BL_ldst_regoff { Rm: 31, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRB_32BL_ldst_regoff { Rm: 31, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSB_64BL_ldst_regoff() {
    assert_eq!(Instruction::LDRSB_64BL_ldst_regoff { Rm: 31, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSB_64BL_ldst_regoff { Rm: 31, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSB_32BL_ldst_regoff() {
    assert_eq!(Instruction::LDRSB_32BL_ldst_regoff { Rm: 31, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSB_32BL_ldst_regoff { Rm: 31, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_BL_ldst_regoff() {
    assert_eq!(Instruction::STR_BL_ldst_regoff { Rm: 31, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_BL_ldst_regoff { Rm: 31, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_BL_ldst_regoff() {
    assert_eq!(Instruction::LDR_BL_ldst_regoff { Rm: 31, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_BL_ldst_regoff { Rm: 31, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LSR_UBFM_32M_bitfield() {
    assert_eq!(Instruction::LSR_UBFM_32M_bitfield { immr: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::LSR_UBFM_32M_bitfield { immr: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMULX_asisdsame_only() {
    assert_eq!(Instruction::FMULX_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMULX_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMEQ_asisdsame_only() {
    assert_eq!(Instruction::FCMEQ_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMEQ_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRECPS_asisdsame_only() {
    assert_eq!(Instruction::FRECPS_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRECPS_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRSQRTS_asisdsame_only() {
    assert_eq!(Instruction::FRSQRTS_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRSQRTS_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCADD_z_p_zz() {
    assert_eq!(Instruction::FCADD_z_p_zz { size: 3, rot: 1, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FCADD_z_p_zz { size: 3, rot: 1, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FMLA_z_zzzi_h() {
    assert_eq!(Instruction::FMLA_z_zzzi_h { i3h: 1, i3l: 3, Zm: 7, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::FMLA_z_zzzi_h { i3h: 1, i3l: 3, Zm: 7, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_FMLS_z_zzzi_h() {
    assert_eq!(Instruction::FMLS_z_zzzi_h { i3h: 1, i3l: 3, Zm: 7, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::FMLS_z_zzzi_h { i3h: 1, i3l: 3, Zm: 7, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_FMUL_z_zzi_h() {
    assert_eq!(Instruction::FMUL_z_zzi_h { i3h: 1, i3l: 3, Zm: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FMUL_z_zzi_h { i3h: 1, i3l: 3, Zm: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_BFMLALB_z_zzzi() {
    assert_eq!(Instruction::BFMLALB_z_zzzi { i3h: 3, Zm: 7, i3l: 1, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::BFMLALB_z_zzzi { i3h: 3, Zm: 7, i3l: 1, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_BFMLALT_z_zzzi() {
    assert_eq!(Instruction::BFMLALT_z_zzzi { i3h: 3, Zm: 7, i3l: 1, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::BFMLALT_z_zzzi { i3h: 3, Zm: 7, i3l: 1, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_CMP_SUBS_32S_addsub_ext() {
    assert_eq!(Instruction::CMP_SUBS_32S_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, }.encode().decode(), 
                Instruction::CMP_SUBS_32S_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, })
}
#[test]
fn roundtrip_FCMGE_asisdsame_only() {
    assert_eq!(Instruction::FCMGE_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMGE_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FACGE_asisdsame_only() {
    assert_eq!(Instruction::FACGE_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FACGE_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FABD_asisdsame_only() {
    assert_eq!(Instruction::FABD_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FABD_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMGT_asisdsame_only() {
    assert_eq!(Instruction::FCMGT_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMGT_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FACGT_asisdsame_only() {
    assert_eq!(Instruction::FACGT_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FACGT_asisdsame_only { sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ASR_SBFM_64M_bitfield() {
    assert_eq!(Instruction::ASR_SBFM_64M_bitfield { immr: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ASR_SBFM_64M_bitfield { immr: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_S64_float2fix() {
    assert_eq!(Instruction::SCVTF_S64_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_S64_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_S64_float2fix() {
    assert_eq!(Instruction::UCVTF_S64_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_S64_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_64S_float2fix() {
    assert_eq!(Instruction::FCVTZS_64S_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_64S_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_64S_float2fix() {
    assert_eq!(Instruction::FCVTZU_64S_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_64S_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_D64_float2fix() {
    assert_eq!(Instruction::SCVTF_D64_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_D64_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_D64_float2fix() {
    assert_eq!(Instruction::UCVTF_D64_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_D64_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_64D_float2fix() {
    assert_eq!(Instruction::FCVTZS_64D_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_64D_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_64D_float2fix() {
    assert_eq!(Instruction::FCVTZU_64D_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_64D_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_H64_float2fix() {
    assert_eq!(Instruction::SCVTF_H64_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_H64_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_H64_float2fix() {
    assert_eq!(Instruction::UCVTF_H64_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_H64_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_64H_float2fix() {
    assert_eq!(Instruction::FCVTZS_64H_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_64H_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_64H_float2fix() {
    assert_eq!(Instruction::FCVTZU_64H_float2fix { scale: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_64H_float2fix { scale: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMN_ADDS_64S_addsub_ext() {
    assert_eq!(Instruction::CMN_ADDS_64S_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, }.encode().decode(), 
                Instruction::CMN_ADDS_64S_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, })
}
#[test]
fn roundtrip_LSR_UBFM_64M_bitfield() {
    assert_eq!(Instruction::LSR_UBFM_64M_bitfield { immr: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::LSR_UBFM_64M_bitfield { immr: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SVC_EX_exception() {
    assert_eq!(Instruction::SVC_EX_exception { imm16: 65535, }.encode().decode(), 
                Instruction::SVC_EX_exception { imm16: 65535, })
}
#[test]
fn roundtrip_HVC_EX_exception() {
    assert_eq!(Instruction::HVC_EX_exception { imm16: 65535, }.encode().decode(), 
                Instruction::HVC_EX_exception { imm16: 65535, })
}
#[test]
fn roundtrip_SMC_EX_exception() {
    assert_eq!(Instruction::SMC_EX_exception { imm16: 65535, }.encode().decode(), 
                Instruction::SMC_EX_exception { imm16: 65535, })
}
#[test]
fn roundtrip_BRK_EX_exception() {
    assert_eq!(Instruction::BRK_EX_exception { imm16: 65535, }.encode().decode(), 
                Instruction::BRK_EX_exception { imm16: 65535, })
}
#[test]
fn roundtrip_HLT_EX_exception() {
    assert_eq!(Instruction::HLT_EX_exception { imm16: 65535, }.encode().decode(), 
                Instruction::HLT_EX_exception { imm16: 65535, })
}
#[test]
fn roundtrip_DCPS1_DC_exception() {
    assert_eq!(Instruction::DCPS1_DC_exception { imm16: 65535, }.encode().decode(), 
                Instruction::DCPS1_DC_exception { imm16: 65535, })
}
#[test]
fn roundtrip_DCPS2_DC_exception() {
    assert_eq!(Instruction::DCPS2_DC_exception { imm16: 65535, }.encode().decode(), 
                Instruction::DCPS2_DC_exception { imm16: 65535, })
}
#[test]
fn roundtrip_DCPS3_DC_exception() {
    assert_eq!(Instruction::DCPS3_DC_exception { imm16: 65535, }.encode().decode(), 
                Instruction::DCPS3_DC_exception { imm16: 65535, })
}
#[test]
fn roundtrip_CMP_SUBS_64S_addsub_ext() {
    assert_eq!(Instruction::CMP_SUBS_64S_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, }.encode().decode(), 
                Instruction::CMP_SUBS_64S_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, })
}
#[test]
fn roundtrip_SSHR_asisdshf_R() {
    assert_eq!(Instruction::SSHR_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SSHR_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SSRA_asisdshf_R() {
    assert_eq!(Instruction::SSRA_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SSRA_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SRSHR_asisdshf_R() {
    assert_eq!(Instruction::SRSHR_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SRSHR_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SRSRA_asisdshf_R() {
    assert_eq!(Instruction::SRSRA_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SRSRA_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHL_asisdshf_R() {
    assert_eq!(Instruction::SHL_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHL_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQSHL_asisdshf_R() {
    assert_eq!(Instruction::SQSHL_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQSHL_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQSHRN_asisdshf_N() {
    assert_eq!(Instruction::SQSHRN_asisdshf_N { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQSHRN_asisdshf_N { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQRSHRN_asisdshf_N() {
    assert_eq!(Instruction::SQRSHRN_asisdshf_N { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRSHRN_asisdshf_N { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_asisdshf_C() {
    assert_eq!(Instruction::SCVTF_asisdshf_C { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_asisdshf_C { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_asisdshf_C() {
    assert_eq!(Instruction::FCVTZS_asisdshf_C { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_asisdshf_C { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_USHR_asisdshf_R() {
    assert_eq!(Instruction::USHR_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::USHR_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_USRA_asisdshf_R() {
    assert_eq!(Instruction::USRA_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::USRA_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_URSHR_asisdshf_R() {
    assert_eq!(Instruction::URSHR_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::URSHR_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_URSRA_asisdshf_R() {
    assert_eq!(Instruction::URSRA_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::URSRA_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SRI_asisdshf_R() {
    assert_eq!(Instruction::SRI_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SRI_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SLI_asisdshf_R() {
    assert_eq!(Instruction::SLI_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SLI_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQSHLU_asisdshf_R() {
    assert_eq!(Instruction::SQSHLU_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQSHLU_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UQSHL_asisdshf_R() {
    assert_eq!(Instruction::UQSHL_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UQSHL_asisdshf_R { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQSHRUN_asisdshf_N() {
    assert_eq!(Instruction::SQSHRUN_asisdshf_N { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQSHRUN_asisdshf_N { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQRSHRUN_asisdshf_N() {
    assert_eq!(Instruction::SQRSHRUN_asisdshf_N { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRSHRUN_asisdshf_N { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UQSHRN_asisdshf_N() {
    assert_eq!(Instruction::UQSHRN_asisdshf_N { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UQSHRN_asisdshf_N { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UQRSHRN_asisdshf_N() {
    assert_eq!(Instruction::UQRSHRN_asisdshf_N { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UQRSHRN_asisdshf_N { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_asisdshf_C() {
    assert_eq!(Instruction::UCVTF_asisdshf_C { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_asisdshf_C { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_asisdshf_C() {
    assert_eq!(Instruction::FCVTZU_asisdshf_C { immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_asisdshf_C { immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADD_z_zz() {
    assert_eq!(Instruction::ADD_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::ADD_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_SUB_z_zz() {
    assert_eq!(Instruction::SUB_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::SUB_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_SQADD_z_zz() {
    assert_eq!(Instruction::SQADD_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::SQADD_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UQADD_z_zz() {
    assert_eq!(Instruction::UQADD_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UQADD_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_SQSUB_z_zz() {
    assert_eq!(Instruction::SQSUB_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::SQSUB_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UQSUB_z_zz() {
    assert_eq!(Instruction::UQSUB_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UQSUB_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_INDEX_z_ii() {
    assert_eq!(Instruction::INDEX_z_ii { size: 3, imm5b: 31, imm5: 31, Zd: 31, }.encode().decode(), 
                Instruction::INDEX_z_ii { size: 3, imm5b: 31, imm5: 31, Zd: 31, })
}
#[test]
fn roundtrip_INDEX_z_ri() {
    assert_eq!(Instruction::INDEX_z_ri { size: 3, imm5: 31, Rn: 31, Zd: 31, }.encode().decode(), 
                Instruction::INDEX_z_ri { size: 3, imm5: 31, Rn: 31, Zd: 31, })
}
#[test]
fn roundtrip_INDEX_z_ir() {
    assert_eq!(Instruction::INDEX_z_ir { size: 3, Rm: 31, imm5: 31, Zd: 31, }.encode().decode(), 
                Instruction::INDEX_z_ir { size: 3, Rm: 31, imm5: 31, Zd: 31, })
}
#[test]
fn roundtrip_INDEX_z_rr() {
    assert_eq!(Instruction::INDEX_z_rr { size: 3, Rm: 31, Rn: 31, Zd: 31, }.encode().decode(), 
                Instruction::INDEX_z_rr { size: 3, Rm: 31, Rn: 31, Zd: 31, })
}
#[test]
fn roundtrip_ASR_z_zw() {
    assert_eq!(Instruction::ASR_z_zw { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::ASR_z_zw { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_LSR_z_zw() {
    assert_eq!(Instruction::LSR_z_zw { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::LSR_z_zw { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_LSL_z_zw() {
    assert_eq!(Instruction::LSL_z_zw { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::LSL_z_zw { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_ASR_z_zi() {
    assert_eq!(Instruction::ASR_z_zi { tszh: 3, tszl: 3, imm3: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::ASR_z_zi { tszh: 3, tszl: 3, imm3: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_LSR_z_zi() {
    assert_eq!(Instruction::LSR_z_zi { tszh: 3, tszl: 3, imm3: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::LSR_z_zi { tszh: 3, tszl: 3, imm3: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_LSL_z_zi() {
    assert_eq!(Instruction::LSL_z_zi { tszh: 3, tszl: 3, imm3: 7, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::LSL_z_zi { tszh: 3, tszl: 3, imm3: 7, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_ADR_z_az_d_s32_scaled() {
    assert_eq!(Instruction::ADR_z_az_d_s32_scaled { Zm: 31, msz: 3, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::ADR_z_az_d_s32_scaled { Zm: 31, msz: 3, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FTSSEL_z_zz() {
    assert_eq!(Instruction::FTSSEL_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FTSSEL_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_ADR_z_az_d_u32_scaled() {
    assert_eq!(Instruction::ADR_z_az_d_u32_scaled { Zm: 31, msz: 3, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::ADR_z_az_d_u32_scaled { Zm: 31, msz: 3, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_DUP_z_zi() {
    assert_eq!(Instruction::DUP_z_zi { imm2: 3, tsz: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::DUP_z_zi { imm2: 3, tsz: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_MOV_dup_z_zi() {
    assert_eq!(Instruction::MOV_dup_z_zi { imm2: 3, tsz: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::MOV_dup_z_zi { imm2: 3, tsz: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_TBL_z_zz_1() {
    assert_eq!(Instruction::TBL_z_zz_1 { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::TBL_z_zz_1 { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_ZIP1_z_zz() {
    assert_eq!(Instruction::ZIP1_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::ZIP1_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_ZIP2_z_zz() {
    assert_eq!(Instruction::ZIP2_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::ZIP2_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UZP1_z_zz() {
    assert_eq!(Instruction::UZP1_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UZP1_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_UZP2_z_zz() {
    assert_eq!(Instruction::UZP2_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::UZP2_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_TRN1_z_zz() {
    assert_eq!(Instruction::TRN1_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::TRN1_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_TRN2_z_zz() {
    assert_eq!(Instruction::TRN2_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::TRN2_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_ST1_asisdlsop_SX1_r1s() {
    assert_eq!(Instruction::ST1_asisdlsop_SX1_r1s { Q: 1, Rm: 31, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlsop_SX1_r1s { Q: 1, Rm: 31, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST3_asisdlsop_SX3_r3s() {
    assert_eq!(Instruction::ST3_asisdlsop_SX3_r3s { Q: 1, Rm: 31, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST3_asisdlsop_SX3_r3s { Q: 1, Rm: 31, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST2_asisdlsop_SX2_r2s() {
    assert_eq!(Instruction::ST2_asisdlsop_SX2_r2s { Q: 1, Rm: 31, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST2_asisdlsop_SX2_r2s { Q: 1, Rm: 31, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST4_asisdlsop_SX4_r4s() {
    assert_eq!(Instruction::ST4_asisdlsop_SX4_r4s { Q: 1, Rm: 31, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST4_asisdlsop_SX4_r4s { Q: 1, Rm: 31, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlsop_SX1_r1s() {
    assert_eq!(Instruction::LD1_asisdlsop_SX1_r1s { Q: 1, Rm: 31, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlsop_SX1_r1s { Q: 1, Rm: 31, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3_asisdlsop_SX3_r3s() {
    assert_eq!(Instruction::LD3_asisdlsop_SX3_r3s { Q: 1, Rm: 31, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3_asisdlsop_SX3_r3s { Q: 1, Rm: 31, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2_asisdlsop_SX2_r2s() {
    assert_eq!(Instruction::LD2_asisdlsop_SX2_r2s { Q: 1, Rm: 31, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2_asisdlsop_SX2_r2s { Q: 1, Rm: 31, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4_asisdlsop_SX4_r4s() {
    assert_eq!(Instruction::LD4_asisdlsop_SX4_r4s { Q: 1, Rm: 31, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4_asisdlsop_SX4_r4s { Q: 1, Rm: 31, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_FMAXNM_asimdsame_only() {
    assert_eq!(Instruction::FMAXNM_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXNM_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLA_asimdsame_only() {
    assert_eq!(Instruction::FMLA_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLA_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FADD_asimdsame_only() {
    assert_eq!(Instruction::FADD_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FADD_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMULX_asimdsame_only() {
    assert_eq!(Instruction::FMULX_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMULX_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMEQ_asimdsame_only() {
    assert_eq!(Instruction::FCMEQ_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMEQ_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAX_asimdsame_only() {
    assert_eq!(Instruction::FMAX_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAX_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRECPS_asimdsame_only() {
    assert_eq!(Instruction::FRECPS_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRECPS_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINNM_asimdsame_only() {
    assert_eq!(Instruction::FMINNM_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINNM_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLS_asimdsame_only() {
    assert_eq!(Instruction::FMLS_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLS_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FSUB_asimdsame_only() {
    assert_eq!(Instruction::FSUB_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FSUB_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMIN_asimdsame_only() {
    assert_eq!(Instruction::FMIN_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMIN_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FRSQRTS_asimdsame_only() {
    assert_eq!(Instruction::FRSQRTS_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FRSQRTS_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_WHILELT_p_p_rr() {
    assert_eq!(Instruction::WHILELT_p_p_rr { size: 3, Rm: 31, sf: 1, Rn: 31, Pd: 15, }.encode().decode(), 
                Instruction::WHILELT_p_p_rr { size: 3, Rm: 31, sf: 1, Rn: 31, Pd: 15, })
}
#[test]
fn roundtrip_WHILELE_p_p_rr() {
    assert_eq!(Instruction::WHILELE_p_p_rr { size: 3, Rm: 31, sf: 1, Rn: 31, Pd: 15, }.encode().decode(), 
                Instruction::WHILELE_p_p_rr { size: 3, Rm: 31, sf: 1, Rn: 31, Pd: 15, })
}
#[test]
fn roundtrip_WHILELO_p_p_rr() {
    assert_eq!(Instruction::WHILELO_p_p_rr { size: 3, Rm: 31, sf: 1, Rn: 31, Pd: 15, }.encode().decode(), 
                Instruction::WHILELO_p_p_rr { size: 3, Rm: 31, sf: 1, Rn: 31, Pd: 15, })
}
#[test]
fn roundtrip_WHILELS_p_p_rr() {
    assert_eq!(Instruction::WHILELS_p_p_rr { size: 3, Rm: 31, sf: 1, Rn: 31, Pd: 15, }.encode().decode(), 
                Instruction::WHILELS_p_p_rr { size: 3, Rm: 31, sf: 1, Rn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FMAXNMP_asimdsame_only() {
    assert_eq!(Instruction::FMAXNMP_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXNMP_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FADDP_asimdsame_only() {
    assert_eq!(Instruction::FADDP_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FADDP_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMUL_asimdsame_only() {
    assert_eq!(Instruction::FMUL_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMUL_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMGE_asimdsame_only() {
    assert_eq!(Instruction::FCMGE_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMGE_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FACGE_asimdsame_only() {
    assert_eq!(Instruction::FACGE_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FACGE_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMAXP_asimdsame_only() {
    assert_eq!(Instruction::FMAXP_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMAXP_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FDIV_asimdsame_only() {
    assert_eq!(Instruction::FDIV_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FDIV_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINNMP_asimdsame_only() {
    assert_eq!(Instruction::FMINNMP_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINNMP_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FABD_asimdsame_only() {
    assert_eq!(Instruction::FABD_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FABD_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMGT_asimdsame_only() {
    assert_eq!(Instruction::FCMGT_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMGT_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FACGT_asimdsame_only() {
    assert_eq!(Instruction::FACGT_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FACGT_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMINP_asimdsame_only() {
    assert_eq!(Instruction::FMINP_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMINP_asimdsame_only { Q: 1, sz: 1, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOV_ORR_32_log_imm() {
    assert_eq!(Instruction::MOV_ORR_32_log_imm { immr: 63, imms: 63, Rd: 31, }.encode().decode(), 
                Instruction::MOV_ORR_32_log_imm { immr: 63, imms: 63, Rd: 31, })
}
#[test]
fn roundtrip_BFC_BFM_32M_bitfield() {
    assert_eq!(Instruction::BFC_BFM_32M_bitfield { immr: 63, imms: 63, Rd: 31, }.encode().decode(), 
                Instruction::BFC_BFM_32M_bitfield { immr: 63, imms: 63, Rd: 31, })
}
#[test]
fn roundtrip_SDOT_z_zzz() {
    assert_eq!(Instruction::SDOT_z_zzz { size: 3, Zm: 31, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::SDOT_z_zzz { size: 3, Zm: 31, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_UDOT_z_zzz() {
    assert_eq!(Instruction::UDOT_z_zzz { size: 3, Zm: 31, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::UDOT_z_zzz { size: 3, Zm: 31, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_SQADD_asisdsame_only() {
    assert_eq!(Instruction::SQADD_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQADD_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQSUB_asisdsame_only() {
    assert_eq!(Instruction::SQSUB_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQSUB_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMGT_asisdsame_only() {
    assert_eq!(Instruction::CMGT_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMGT_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMGE_asisdsame_only() {
    assert_eq!(Instruction::CMGE_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMGE_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SSHL_asisdsame_only() {
    assert_eq!(Instruction::SSHL_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SSHL_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQSHL_asisdsame_only() {
    assert_eq!(Instruction::SQSHL_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQSHL_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SRSHL_asisdsame_only() {
    assert_eq!(Instruction::SRSHL_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SRSHL_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQRSHL_asisdsame_only() {
    assert_eq!(Instruction::SQRSHL_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRSHL_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADD_asisdsame_only() {
    assert_eq!(Instruction::ADD_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADD_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMTST_asisdsame_only() {
    assert_eq!(Instruction::CMTST_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMTST_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQDMLAL_asisddiff_only() {
    assert_eq!(Instruction::SQDMLAL_asisddiff_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQDMLAL_asisddiff_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQDMLSL_asisddiff_only() {
    assert_eq!(Instruction::SQDMLSL_asisddiff_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQDMLSL_asisddiff_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQDMULH_asisdsame_only() {
    assert_eq!(Instruction::SQDMULH_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQDMULH_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQDMULL_asisddiff_only() {
    assert_eq!(Instruction::SQDMULL_asisddiff_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQDMULL_asisddiff_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLA_asisdelem_RH_H() {
    assert_eq!(Instruction::FMLA_asisdelem_RH_H { L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLA_asisdelem_RH_H { L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLS_asisdelem_RH_H() {
    assert_eq!(Instruction::FMLS_asisdelem_RH_H { L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLS_asisdelem_RH_H { L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMUL_asisdelem_RH_H() {
    assert_eq!(Instruction::FMUL_asisdelem_RH_H { L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMUL_asisdelem_RH_H { L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMLA_z_zzzi_h() {
    assert_eq!(Instruction::FCMLA_z_zzzi_h { i2: 3, Zm: 7, rot: 3, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::FCMLA_z_zzzi_h { i2: 3, Zm: 7, rot: 3, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_FCMLA_z_zzzi_s() {
    assert_eq!(Instruction::FCMLA_z_zzzi_s { i1: 1, Zm: 15, rot: 3, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::FCMLA_z_zzzi_s { i1: 1, Zm: 15, rot: 3, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_FADD_z_zz() {
    assert_eq!(Instruction::FADD_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FADD_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FSUB_z_zz() {
    assert_eq!(Instruction::FSUB_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FSUB_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FMUL_z_zz() {
    assert_eq!(Instruction::FMUL_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FMUL_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FTSMUL_z_zz() {
    assert_eq!(Instruction::FTSMUL_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FTSMUL_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FRECPS_z_zz() {
    assert_eq!(Instruction::FRECPS_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FRECPS_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_FRSQRTS_z_zz() {
    assert_eq!(Instruction::FRSQRTS_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::FRSQRTS_z_zz { size: 3, Zm: 31, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_TST_ANDS_32S_log_imm() {
    assert_eq!(Instruction::TST_ANDS_32S_log_imm { immr: 63, imms: 63, Rn: 31, }.encode().decode(), 
                Instruction::TST_ANDS_32S_log_imm { immr: 63, imms: 63, Rn: 31, })
}
#[test]
fn roundtrip_SQRDMLAH_asisdsame2_only() {
    assert_eq!(Instruction::SQRDMLAH_asisdsame2_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRDMLAH_asisdsame2_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQRDMLSH_asisdsame2_only() {
    assert_eq!(Instruction::SQRDMLSH_asisdsame2_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRDMLSH_asisdsame2_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UQADD_asisdsame_only() {
    assert_eq!(Instruction::UQADD_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UQADD_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UQSUB_asisdsame_only() {
    assert_eq!(Instruction::UQSUB_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UQSUB_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMHI_asisdsame_only() {
    assert_eq!(Instruction::CMHI_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMHI_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMHS_asisdsame_only() {
    assert_eq!(Instruction::CMHS_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMHS_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_USHL_asisdsame_only() {
    assert_eq!(Instruction::USHL_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::USHL_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UQSHL_asisdsame_only() {
    assert_eq!(Instruction::UQSHL_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UQSHL_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_URSHL_asisdsame_only() {
    assert_eq!(Instruction::URSHL_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::URSHL_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UQRSHL_asisdsame_only() {
    assert_eq!(Instruction::UQRSHL_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UQRSHL_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUB_asisdsame_only() {
    assert_eq!(Instruction::SUB_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUB_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMEQ_asisdsame_only() {
    assert_eq!(Instruction::CMEQ_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMEQ_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQRDMULH_asisdsame_only() {
    assert_eq!(Instruction::SQRDMULH_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRDMULH_asisdsame_only { size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMULX_asisdelem_RH_H() {
    assert_eq!(Instruction::FMULX_asisdelem_RH_H { L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMULX_asisdelem_RH_H { L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_PRFB_i_p_br_s() {
    assert_eq!(Instruction::PRFB_i_p_br_s { Rm: 31, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFB_i_p_br_s { Rm: 31, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFB_i_p_ai_s() {
    assert_eq!(Instruction::PRFB_i_p_ai_s { imm5: 31, Pg: 7, Zn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFB_i_p_ai_s { imm5: 31, Pg: 7, Zn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFH_i_p_br_s() {
    assert_eq!(Instruction::PRFH_i_p_br_s { Rm: 31, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFH_i_p_br_s { Rm: 31, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFH_i_p_ai_s() {
    assert_eq!(Instruction::PRFH_i_p_ai_s { imm5: 31, Pg: 7, Zn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFH_i_p_ai_s { imm5: 31, Pg: 7, Zn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFW_i_p_br_s() {
    assert_eq!(Instruction::PRFW_i_p_br_s { Rm: 31, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFW_i_p_br_s { Rm: 31, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFW_i_p_ai_s() {
    assert_eq!(Instruction::PRFW_i_p_ai_s { imm5: 31, Pg: 7, Zn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFW_i_p_ai_s { imm5: 31, Pg: 7, Zn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFD_i_p_br_s() {
    assert_eq!(Instruction::PRFD_i_p_br_s { Rm: 31, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFD_i_p_br_s { Rm: 31, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFD_i_p_ai_s() {
    assert_eq!(Instruction::PRFD_i_p_ai_s { imm5: 31, Pg: 7, Zn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFD_i_p_ai_s { imm5: 31, Pg: 7, Zn: 31, prfop: 15, })
}
#[test]
fn roundtrip_LD1RQB_z_p_bi_u8() {
    assert_eq!(Instruction::LD1RQB_z_p_bi_u8 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RQB_z_p_bi_u8 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1B_z_p_bi_u8() {
    assert_eq!(Instruction::LD1B_z_p_bi_u8 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1B_z_p_bi_u8 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNT1B_z_p_bi_contiguous() {
    assert_eq!(Instruction::LDNT1B_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNT1B_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNF1B_z_p_bi_u8() {
    assert_eq!(Instruction::LDNF1B_z_p_bi_u8 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNF1B_z_p_bi_u8 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1ROB_z_p_bi_u8() {
    assert_eq!(Instruction::LD1ROB_z_p_bi_u8 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1ROB_z_p_bi_u8 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1B_z_p_bi_u16() {
    assert_eq!(Instruction::LD1B_z_p_bi_u16 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1B_z_p_bi_u16 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD2B_z_p_bi_contiguous() {
    assert_eq!(Instruction::LD2B_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD2B_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNF1B_z_p_bi_u16() {
    assert_eq!(Instruction::LDNF1B_z_p_bi_u16 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNF1B_z_p_bi_u16 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1B_z_p_bi_u32() {
    assert_eq!(Instruction::LD1B_z_p_bi_u32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1B_z_p_bi_u32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD3B_z_p_bi_contiguous() {
    assert_eq!(Instruction::LD3B_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD3B_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNF1B_z_p_bi_u32() {
    assert_eq!(Instruction::LDNF1B_z_p_bi_u32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNF1B_z_p_bi_u32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1B_z_p_bi_u64() {
    assert_eq!(Instruction::LD1B_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1B_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD4B_z_p_bi_contiguous() {
    assert_eq!(Instruction::LD4B_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD4B_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNF1B_z_p_bi_u64() {
    assert_eq!(Instruction::LDNF1B_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNF1B_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RQH_z_p_bi_u16() {
    assert_eq!(Instruction::LD1RQH_z_p_bi_u16 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RQH_z_p_bi_u16 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SW_z_p_bi_s64() {
    assert_eq!(Instruction::LD1SW_z_p_bi_s64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SW_z_p_bi_s64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNT1H_z_p_bi_contiguous() {
    assert_eq!(Instruction::LDNT1H_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNT1H_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNF1SW_z_p_bi_s64() {
    assert_eq!(Instruction::LDNF1SW_z_p_bi_s64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNF1SW_z_p_bi_s64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1ROH_z_p_bi_u16() {
    assert_eq!(Instruction::LD1ROH_z_p_bi_u16 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1ROH_z_p_bi_u16 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1H_z_p_bi_u16() {
    assert_eq!(Instruction::LD1H_z_p_bi_u16 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1H_z_p_bi_u16 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD2H_z_p_bi_contiguous() {
    assert_eq!(Instruction::LD2H_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD2H_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNF1H_z_p_bi_u16() {
    assert_eq!(Instruction::LDNF1H_z_p_bi_u16 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNF1H_z_p_bi_u16 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1H_z_p_bi_u32() {
    assert_eq!(Instruction::LD1H_z_p_bi_u32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1H_z_p_bi_u32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD3H_z_p_bi_contiguous() {
    assert_eq!(Instruction::LD3H_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD3H_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNF1H_z_p_bi_u32() {
    assert_eq!(Instruction::LDNF1H_z_p_bi_u32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNF1H_z_p_bi_u32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1H_z_p_bi_u64() {
    assert_eq!(Instruction::LD1H_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1H_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD4H_z_p_bi_contiguous() {
    assert_eq!(Instruction::LD4H_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD4H_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNF1H_z_p_bi_u64() {
    assert_eq!(Instruction::LDNF1H_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNF1H_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RQW_z_p_bi_u32() {
    assert_eq!(Instruction::LD1RQW_z_p_bi_u32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RQW_z_p_bi_u32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SH_z_p_bi_s64() {
    assert_eq!(Instruction::LD1SH_z_p_bi_s64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SH_z_p_bi_s64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNT1W_z_p_bi_contiguous() {
    assert_eq!(Instruction::LDNT1W_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNT1W_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNF1SH_z_p_bi_s64() {
    assert_eq!(Instruction::LDNF1SH_z_p_bi_s64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNF1SH_z_p_bi_s64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1ROW_z_p_bi_u32() {
    assert_eq!(Instruction::LD1ROW_z_p_bi_u32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1ROW_z_p_bi_u32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SH_z_p_bi_s32() {
    assert_eq!(Instruction::LD1SH_z_p_bi_s32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SH_z_p_bi_s32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD2W_z_p_bi_contiguous() {
    assert_eq!(Instruction::LD2W_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD2W_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNF1SH_z_p_bi_s32() {
    assert_eq!(Instruction::LDNF1SH_z_p_bi_s32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNF1SH_z_p_bi_s32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1W_z_p_bi_u32() {
    assert_eq!(Instruction::LD1W_z_p_bi_u32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1W_z_p_bi_u32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD3W_z_p_bi_contiguous() {
    assert_eq!(Instruction::LD3W_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD3W_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNF1W_z_p_bi_u32() {
    assert_eq!(Instruction::LDNF1W_z_p_bi_u32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNF1W_z_p_bi_u32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1W_z_p_bi_u64() {
    assert_eq!(Instruction::LD1W_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1W_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD4W_z_p_bi_contiguous() {
    assert_eq!(Instruction::LD4W_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD4W_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNF1W_z_p_bi_u64() {
    assert_eq!(Instruction::LDNF1W_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNF1W_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RQD_z_p_bi_u64() {
    assert_eq!(Instruction::LD1RQD_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RQD_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SB_z_p_bi_s64() {
    assert_eq!(Instruction::LD1SB_z_p_bi_s64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SB_z_p_bi_s64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNT1D_z_p_bi_contiguous() {
    assert_eq!(Instruction::LDNT1D_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNT1D_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNF1SB_z_p_bi_s64() {
    assert_eq!(Instruction::LDNF1SB_z_p_bi_s64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNF1SB_z_p_bi_s64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1ROD_z_p_bi_u64() {
    assert_eq!(Instruction::LD1ROD_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1ROD_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SB_z_p_bi_s32() {
    assert_eq!(Instruction::LD1SB_z_p_bi_s32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SB_z_p_bi_s32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD2D_z_p_bi_contiguous() {
    assert_eq!(Instruction::LD2D_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD2D_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNF1SB_z_p_bi_s32() {
    assert_eq!(Instruction::LDNF1SB_z_p_bi_s32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNF1SB_z_p_bi_s32 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SB_z_p_bi_s16() {
    assert_eq!(Instruction::LD1SB_z_p_bi_s16 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SB_z_p_bi_s16 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD3D_z_p_bi_contiguous() {
    assert_eq!(Instruction::LD3D_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD3D_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNF1SB_z_p_bi_s16() {
    assert_eq!(Instruction::LDNF1SB_z_p_bi_s16 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNF1SB_z_p_bi_s16 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1D_z_p_bi_u64() {
    assert_eq!(Instruction::LD1D_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1D_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD4D_z_p_bi_contiguous() {
    assert_eq!(Instruction::LD4D_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD4D_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNF1D_z_p_bi_u64() {
    assert_eq!(Instruction::LDNF1D_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNF1D_z_p_bi_u64 { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_BFC_BFM_64M_bitfield() {
    assert_eq!(Instruction::BFC_BFM_64M_bitfield { immr: 63, imms: 63, Rd: 31, }.encode().decode(), 
                Instruction::BFC_BFM_64M_bitfield { immr: 63, imms: 63, Rd: 31, })
}
#[test]
fn roundtrip_PRFB_i_p_ai_d() {
    assert_eq!(Instruction::PRFB_i_p_ai_d { imm5: 31, Pg: 7, Zn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFB_i_p_ai_d { imm5: 31, Pg: 7, Zn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFB_i_p_bz_d_64_scaled() {
    assert_eq!(Instruction::PRFB_i_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFB_i_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFH_i_p_bz_d_64_scaled() {
    assert_eq!(Instruction::PRFH_i_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFH_i_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFW_i_p_bz_d_64_scaled() {
    assert_eq!(Instruction::PRFW_i_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFW_i_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFD_i_p_bz_d_64_scaled() {
    assert_eq!(Instruction::PRFD_i_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFD_i_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFH_i_p_ai_d() {
    assert_eq!(Instruction::PRFH_i_p_ai_d { imm5: 31, Pg: 7, Zn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFH_i_p_ai_d { imm5: 31, Pg: 7, Zn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFW_i_p_ai_d() {
    assert_eq!(Instruction::PRFW_i_p_ai_d { imm5: 31, Pg: 7, Zn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFW_i_p_ai_d { imm5: 31, Pg: 7, Zn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFD_i_p_ai_d() {
    assert_eq!(Instruction::PRFD_i_p_ai_d { imm5: 31, Pg: 7, Zn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFD_i_p_ai_d { imm5: 31, Pg: 7, Zn: 31, prfop: 15, })
}
#[test]
fn roundtrip_SM3TT1A_VVV4_crypto3_imm2() {
    assert_eq!(Instruction::SM3TT1A_VVV4_crypto3_imm2 { Rm: 31, imm2: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SM3TT1A_VVV4_crypto3_imm2 { Rm: 31, imm2: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SM3TT1B_VVV4_crypto3_imm2() {
    assert_eq!(Instruction::SM3TT1B_VVV4_crypto3_imm2 { Rm: 31, imm2: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SM3TT1B_VVV4_crypto3_imm2 { Rm: 31, imm2: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SM3TT2A_VVV4_crypto3_imm2() {
    assert_eq!(Instruction::SM3TT2A_VVV4_crypto3_imm2 { Rm: 31, imm2: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SM3TT2A_VVV4_crypto3_imm2 { Rm: 31, imm2: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SM3TT2B_VVV_crypto3_imm2() {
    assert_eq!(Instruction::SM3TT2B_VVV_crypto3_imm2 { Rm: 31, imm2: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SM3TT2B_VVV_crypto3_imm2 { Rm: 31, imm2: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_STNT1B_z_p_bi_contiguous() {
    assert_eq!(Instruction::STNT1B_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::STNT1B_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST2B_z_p_bi_contiguous() {
    assert_eq!(Instruction::ST2B_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST2B_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST3B_z_p_bi_contiguous() {
    assert_eq!(Instruction::ST3B_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST3B_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST4B_z_p_bi_contiguous() {
    assert_eq!(Instruction::ST4B_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST4B_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_STNT1H_z_p_bi_contiguous() {
    assert_eq!(Instruction::STNT1H_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::STNT1H_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST2H_z_p_bi_contiguous() {
    assert_eq!(Instruction::ST2H_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST2H_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST3H_z_p_bi_contiguous() {
    assert_eq!(Instruction::ST3H_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST3H_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST4H_z_p_bi_contiguous() {
    assert_eq!(Instruction::ST4H_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST4H_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_STNT1W_z_p_bi_contiguous() {
    assert_eq!(Instruction::STNT1W_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::STNT1W_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST2W_z_p_bi_contiguous() {
    assert_eq!(Instruction::ST2W_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST2W_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST3W_z_p_bi_contiguous() {
    assert_eq!(Instruction::ST3W_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST3W_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST4W_z_p_bi_contiguous() {
    assert_eq!(Instruction::ST4W_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST4W_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_STNT1D_z_p_bi_contiguous() {
    assert_eq!(Instruction::STNT1D_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::STNT1D_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST2D_z_p_bi_contiguous() {
    assert_eq!(Instruction::ST2D_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST2D_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST3D_z_p_bi_contiguous() {
    assert_eq!(Instruction::ST3D_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST3D_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST4D_z_p_bi_contiguous() {
    assert_eq!(Instruction::ST4D_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST4D_z_p_bi_contiguous { imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_NEGS_SUBS_32_addsub_shift() {
    assert_eq!(Instruction::NEGS_SUBS_32_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rd: 0, }.encode().decode(), 
                Instruction::NEGS_SUBS_32_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rd: 0, })
}
#[test]
fn roundtrip_NEGS_SUBS_64_addsub_shift() {
    assert_eq!(Instruction::NEGS_SUBS_64_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rd: 0, }.encode().decode(), 
                Instruction::NEGS_SUBS_64_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rd: 0, })
}
#[test]
fn roundtrip_SSHR_asimdshf_R() {
    assert_eq!(Instruction::SSHR_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SSHR_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SSRA_asimdshf_R() {
    assert_eq!(Instruction::SSRA_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SSRA_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SRSHR_asimdshf_R() {
    assert_eq!(Instruction::SRSHR_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SRSHR_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SRSRA_asimdshf_R() {
    assert_eq!(Instruction::SRSRA_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SRSRA_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHL_asimdshf_R() {
    assert_eq!(Instruction::SHL_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHL_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQSHL_asimdshf_R() {
    assert_eq!(Instruction::SQSHL_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQSHL_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHRN_asimdshf_N() {
    assert_eq!(Instruction::SHRN_asimdshf_N { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHRN_asimdshf_N { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_RSHRN_asimdshf_N() {
    assert_eq!(Instruction::RSHRN_asimdshf_N { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::RSHRN_asimdshf_N { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQSHRN_asimdshf_N() {
    assert_eq!(Instruction::SQSHRN_asimdshf_N { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQSHRN_asimdshf_N { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQRSHRN_asimdshf_N() {
    assert_eq!(Instruction::SQRSHRN_asimdshf_N { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRSHRN_asimdshf_N { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SSHLL_asimdshf_L() {
    assert_eq!(Instruction::SSHLL_asimdshf_L { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SSHLL_asimdshf_L { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SCVTF_asimdshf_C() {
    assert_eq!(Instruction::SCVTF_asimdshf_C { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SCVTF_asimdshf_C { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZS_asimdshf_C() {
    assert_eq!(Instruction::FCVTZS_asimdshf_C { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZS_asimdshf_C { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_USHR_asimdshf_R() {
    assert_eq!(Instruction::USHR_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::USHR_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_USRA_asimdshf_R() {
    assert_eq!(Instruction::USRA_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::USRA_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_URSHR_asimdshf_R() {
    assert_eq!(Instruction::URSHR_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::URSHR_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_URSRA_asimdshf_R() {
    assert_eq!(Instruction::URSRA_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::URSRA_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SRI_asimdshf_R() {
    assert_eq!(Instruction::SRI_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SRI_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SLI_asimdshf_R() {
    assert_eq!(Instruction::SLI_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SLI_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQSHLU_asimdshf_R() {
    assert_eq!(Instruction::SQSHLU_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQSHLU_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UQSHL_asimdshf_R() {
    assert_eq!(Instruction::UQSHL_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UQSHL_asimdshf_R { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQSHRUN_asimdshf_N() {
    assert_eq!(Instruction::SQSHRUN_asimdshf_N { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQSHRUN_asimdshf_N { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQRSHRUN_asimdshf_N() {
    assert_eq!(Instruction::SQRSHRUN_asimdshf_N { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRSHRUN_asimdshf_N { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UQSHRN_asimdshf_N() {
    assert_eq!(Instruction::UQSHRN_asimdshf_N { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UQSHRN_asimdshf_N { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UQRSHRN_asimdshf_N() {
    assert_eq!(Instruction::UQRSHRN_asimdshf_N { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UQRSHRN_asimdshf_N { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_USHLL_asimdshf_L() {
    assert_eq!(Instruction::USHLL_asimdshf_L { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::USHLL_asimdshf_L { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UCVTF_asimdshf_C() {
    assert_eq!(Instruction::UCVTF_asimdshf_C { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UCVTF_asimdshf_C { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCVTZU_asimdshf_C() {
    assert_eq!(Instruction::FCVTZU_asimdshf_C { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCVTZU_asimdshf_C { Q: 1, immh: 15, immb: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADR_z_az_sd_same_scaled() {
    assert_eq!(Instruction::ADR_z_az_sd_same_scaled { sz: 1, Zm: 31, msz: 3, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::ADR_z_az_sd_same_scaled { sz: 1, Zm: 31, msz: 3, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_ORN_orr_z_zi() {
    assert_eq!(Instruction::ORN_orr_z_zi { imm13: 8191, Zdn: 31, }.encode().decode(), 
                Instruction::ORN_orr_z_zi { imm13: 8191, Zdn: 31, })
}
#[test]
fn roundtrip_ORR_z_zi() {
    assert_eq!(Instruction::ORR_z_zi { imm13: 8191, Zdn: 31, }.encode().decode(), 
                Instruction::ORR_z_zi { imm13: 8191, Zdn: 31, })
}
#[test]
fn roundtrip_EXT_z_zi_des() {
    assert_eq!(Instruction::EXT_z_zi_des { imm8h: 31, imm8l: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::EXT_z_zi_des { imm8h: 31, imm8l: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_EON_eor_z_zi() {
    assert_eq!(Instruction::EON_eor_z_zi { imm13: 8191, Zdn: 31, }.encode().decode(), 
                Instruction::EON_eor_z_zi { imm13: 8191, Zdn: 31, })
}
#[test]
fn roundtrip_EOR_z_zi() {
    assert_eq!(Instruction::EOR_z_zi { imm13: 8191, Zdn: 31, }.encode().decode(), 
                Instruction::EOR_z_zi { imm13: 8191, Zdn: 31, })
}
#[test]
fn roundtrip_AND_z_zi() {
    assert_eq!(Instruction::AND_z_zi { imm13: 8191, Zdn: 31, }.encode().decode(), 
                Instruction::AND_z_zi { imm13: 8191, Zdn: 31, })
}
#[test]
fn roundtrip_BIC_and_z_zi() {
    assert_eq!(Instruction::BIC_and_z_zi { imm13: 8191, Zdn: 31, }.encode().decode(), 
                Instruction::BIC_and_z_zi { imm13: 8191, Zdn: 31, })
}
#[test]
fn roundtrip_DUPM_z_i() {
    assert_eq!(Instruction::DUPM_z_i { imm13: 8191, Zd: 31, }.encode().decode(), 
                Instruction::DUPM_z_i { imm13: 8191, Zd: 31, })
}
#[test]
fn roundtrip_MOV_dupm_z_i() {
    assert_eq!(Instruction::MOV_dupm_z_i { imm13: 8191, Zd: 31, }.encode().decode(), 
                Instruction::MOV_dupm_z_i { imm13: 8191, Zd: 31, })
}
#[test]
fn roundtrip_ST4_asisdlsep_R4_r() {
    assert_eq!(Instruction::ST4_asisdlsep_R4_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST4_asisdlsep_R4_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlsep_R4_r4() {
    assert_eq!(Instruction::ST1_asisdlsep_R4_r4 { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlsep_R4_r4 { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST3_asisdlsep_R3_r() {
    assert_eq!(Instruction::ST3_asisdlsep_R3_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST3_asisdlsep_R3_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlsep_R3_r3() {
    assert_eq!(Instruction::ST1_asisdlsep_R3_r3 { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlsep_R3_r3 { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlsep_R1_r1() {
    assert_eq!(Instruction::ST1_asisdlsep_R1_r1 { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlsep_R1_r1 { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST2_asisdlsep_R2_r() {
    assert_eq!(Instruction::ST2_asisdlsep_R2_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST2_asisdlsep_R2_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlsep_R2_r2() {
    assert_eq!(Instruction::ST1_asisdlsep_R2_r2 { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlsep_R2_r2 { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4_asisdlsep_R4_r() {
    assert_eq!(Instruction::LD4_asisdlsep_R4_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4_asisdlsep_R4_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlsep_R4_r4() {
    assert_eq!(Instruction::LD1_asisdlsep_R4_r4 { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlsep_R4_r4 { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3_asisdlsep_R3_r() {
    assert_eq!(Instruction::LD3_asisdlsep_R3_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3_asisdlsep_R3_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlsep_R3_r3() {
    assert_eq!(Instruction::LD1_asisdlsep_R3_r3 { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlsep_R3_r3 { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlsep_R1_r1() {
    assert_eq!(Instruction::LD1_asisdlsep_R1_r1 { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlsep_R1_r1 { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2_asisdlsep_R2_r() {
    assert_eq!(Instruction::LD2_asisdlsep_R2_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2_asisdlsep_R2_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlsep_R2_r2() {
    assert_eq!(Instruction::LD1_asisdlsep_R2_r2 { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlsep_R2_r2 { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST1_asisdlsop_HX1_r1h() {
    assert_eq!(Instruction::ST1_asisdlsop_HX1_r1h { Q: 1, Rm: 31, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlsop_HX1_r1h { Q: 1, Rm: 31, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST3_asisdlsop_HX3_r3h() {
    assert_eq!(Instruction::ST3_asisdlsop_HX3_r3h { Q: 1, Rm: 31, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST3_asisdlsop_HX3_r3h { Q: 1, Rm: 31, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST2_asisdlsop_HX2_r2h() {
    assert_eq!(Instruction::ST2_asisdlsop_HX2_r2h { Q: 1, Rm: 31, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST2_asisdlsop_HX2_r2h { Q: 1, Rm: 31, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST4_asisdlsop_HX4_r4h() {
    assert_eq!(Instruction::ST4_asisdlsop_HX4_r4h { Q: 1, Rm: 31, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST4_asisdlsop_HX4_r4h { Q: 1, Rm: 31, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlsop_HX1_r1h() {
    assert_eq!(Instruction::LD1_asisdlsop_HX1_r1h { Q: 1, Rm: 31, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlsop_HX1_r1h { Q: 1, Rm: 31, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3_asisdlsop_HX3_r3h() {
    assert_eq!(Instruction::LD3_asisdlsop_HX3_r3h { Q: 1, Rm: 31, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3_asisdlsop_HX3_r3h { Q: 1, Rm: 31, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1R_asisdlsop_RX1_r() {
    assert_eq!(Instruction::LD1R_asisdlsop_RX1_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1R_asisdlsop_RX1_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3R_asisdlsop_RX3_r() {
    assert_eq!(Instruction::LD3R_asisdlsop_RX3_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3R_asisdlsop_RX3_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2_asisdlsop_HX2_r2h() {
    assert_eq!(Instruction::LD2_asisdlsop_HX2_r2h { Q: 1, Rm: 31, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2_asisdlsop_HX2_r2h { Q: 1, Rm: 31, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4_asisdlsop_HX4_r4h() {
    assert_eq!(Instruction::LD4_asisdlsop_HX4_r4h { Q: 1, Rm: 31, S: 1, size: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4_asisdlsop_HX4_r4h { Q: 1, Rm: 31, S: 1, size: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2R_asisdlsop_RX2_r() {
    assert_eq!(Instruction::LD2R_asisdlsop_RX2_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2R_asisdlsop_RX2_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4R_asisdlsop_RX4_r() {
    assert_eq!(Instruction::LD4R_asisdlsop_RX4_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4R_asisdlsop_RX4_r { Q: 1, Rm: 31, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_UZP1_asimdperm_only() {
    assert_eq!(Instruction::UZP1_asimdperm_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UZP1_asimdperm_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_TRN1_asimdperm_only() {
    assert_eq!(Instruction::TRN1_asimdperm_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::TRN1_asimdperm_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ZIP1_asimdperm_only() {
    assert_eq!(Instruction::ZIP1_asimdperm_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ZIP1_asimdperm_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UZP2_asimdperm_only() {
    assert_eq!(Instruction::UZP2_asimdperm_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UZP2_asimdperm_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_TRN2_asimdperm_only() {
    assert_eq!(Instruction::TRN2_asimdperm_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::TRN2_asimdperm_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ZIP2_asimdperm_only() {
    assert_eq!(Instruction::ZIP2_asimdperm_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ZIP2_asimdperm_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SDOT_asimdsame2_D() {
    assert_eq!(Instruction::SDOT_asimdsame2_D { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SDOT_asimdsame2_D { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SADDL_asimddiff_L() {
    assert_eq!(Instruction::SADDL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SADDL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHADD_asimdsame_only() {
    assert_eq!(Instruction::SHADD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHADD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQADD_asimdsame_only() {
    assert_eq!(Instruction::SQADD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQADD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SADDW_asimddiff_W() {
    assert_eq!(Instruction::SADDW_asimddiff_W { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SADDW_asimddiff_W { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SRHADD_asimdsame_only() {
    assert_eq!(Instruction::SRHADD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SRHADD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SSUBL_asimddiff_L() {
    assert_eq!(Instruction::SSUBL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SSUBL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SHSUB_asimdsame_only() {
    assert_eq!(Instruction::SHSUB_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SHSUB_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQSUB_asimdsame_only() {
    assert_eq!(Instruction::SQSUB_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQSUB_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SSUBW_asimddiff_W() {
    assert_eq!(Instruction::SSUBW_asimddiff_W { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SSUBW_asimddiff_W { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMGT_asimdsame_only() {
    assert_eq!(Instruction::CMGT_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMGT_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMGE_asimdsame_only() {
    assert_eq!(Instruction::CMGE_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMGE_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADDHN_asimddiff_N() {
    assert_eq!(Instruction::ADDHN_asimddiff_N { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADDHN_asimddiff_N { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SSHL_asimdsame_only() {
    assert_eq!(Instruction::SSHL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SSHL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQSHL_asimdsame_only() {
    assert_eq!(Instruction::SQSHL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQSHL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SABAL_asimddiff_L() {
    assert_eq!(Instruction::SABAL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SABAL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SRSHL_asimdsame_only() {
    assert_eq!(Instruction::SRSHL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SRSHL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQRSHL_asimdsame_only() {
    assert_eq!(Instruction::SQRSHL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRSHL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUBHN_asimddiff_N() {
    assert_eq!(Instruction::SUBHN_asimddiff_N { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUBHN_asimddiff_N { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMAX_asimdsame_only() {
    assert_eq!(Instruction::SMAX_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMAX_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMIN_asimdsame_only() {
    assert_eq!(Instruction::SMIN_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMIN_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SABDL_asimddiff_L() {
    assert_eq!(Instruction::SABDL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SABDL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SABD_asimdsame_only() {
    assert_eq!(Instruction::SABD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SABD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SABA_asimdsame_only() {
    assert_eq!(Instruction::SABA_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SABA_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMLAL_asimddiff_L() {
    assert_eq!(Instruction::SMLAL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMLAL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADD_asimdsame_only() {
    assert_eq!(Instruction::ADD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMTST_asimdsame_only() {
    assert_eq!(Instruction::CMTST_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMTST_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQDMLAL_asimddiff_L() {
    assert_eq!(Instruction::SQDMLAL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQDMLAL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MLA_asimdsame_only() {
    assert_eq!(Instruction::MLA_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MLA_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MUL_asimdsame_only() {
    assert_eq!(Instruction::MUL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MUL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMLSL_asimddiff_L() {
    assert_eq!(Instruction::SMLSL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMLSL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMAXP_asimdsame_only() {
    assert_eq!(Instruction::SMAXP_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMAXP_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMINP_asimdsame_only() {
    assert_eq!(Instruction::SMINP_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMINP_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQDMLSL_asimddiff_L() {
    assert_eq!(Instruction::SQDMLSL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQDMLSL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQDMULH_asimdsame_only() {
    assert_eq!(Instruction::SQDMULH_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQDMULH_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADDP_asimdsame_only() {
    assert_eq!(Instruction::ADDP_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADDP_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMULL_asimddiff_L() {
    assert_eq!(Instruction::SMULL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMULL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQDMULL_asimddiff_L() {
    assert_eq!(Instruction::SQDMULL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQDMULL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_PMULL_asimddiff_L() {
    assert_eq!(Instruction::PMULL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::PMULL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLA_asimdelem_RH_H() {
    assert_eq!(Instruction::FMLA_asimdelem_RH_H { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLA_asimdelem_RH_H { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLS_asimdelem_RH_H() {
    assert_eq!(Instruction::FMLS_asimdelem_RH_H { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLS_asimdelem_RH_H { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMUL_asimdelem_RH_H() {
    assert_eq!(Instruction::FMUL_asimdelem_RH_H { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMUL_asimdelem_RH_H { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUDOT_asimdelem_D() {
    assert_eq!(Instruction::SUDOT_asimdelem_D { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUDOT_asimdelem_D { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BFDOT_asimdelem_E() {
    assert_eq!(Instruction::BFDOT_asimdelem_E { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BFDOT_asimdelem_E { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLAL_asimdelem_LH() {
    assert_eq!(Instruction::FMLAL_asimdelem_LH { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLAL_asimdelem_LH { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLSL_asimdelem_LH() {
    assert_eq!(Instruction::FMLSL_asimdelem_LH { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLSL_asimdelem_LH { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_USDOT_asimdelem_D() {
    assert_eq!(Instruction::USDOT_asimdelem_D { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::USDOT_asimdelem_D { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BFMLAL_asimdelem_F() {
    assert_eq!(Instruction::BFMLAL_asimdelem_F { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BFMLAL_asimdelem_F { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCCMP_S_floatccmp() {
    assert_eq!(Instruction::FCCMP_S_floatccmp { Rm: 31, cond: 15, Rn: 31, nzcv: 15, }.encode().decode(), 
                Instruction::FCCMP_S_floatccmp { Rm: 31, cond: 15, Rn: 31, nzcv: 15, })
}
#[test]
fn roundtrip_FCCMPE_S_floatccmp() {
    assert_eq!(Instruction::FCCMPE_S_floatccmp { Rm: 31, cond: 15, Rn: 31, nzcv: 15, }.encode().decode(), 
                Instruction::FCCMPE_S_floatccmp { Rm: 31, cond: 15, Rn: 31, nzcv: 15, })
}
#[test]
fn roundtrip_FCCMP_D_floatccmp() {
    assert_eq!(Instruction::FCCMP_D_floatccmp { Rm: 31, cond: 15, Rn: 31, nzcv: 15, }.encode().decode(), 
                Instruction::FCCMP_D_floatccmp { Rm: 31, cond: 15, Rn: 31, nzcv: 15, })
}
#[test]
fn roundtrip_FCCMPE_D_floatccmp() {
    assert_eq!(Instruction::FCCMPE_D_floatccmp { Rm: 31, cond: 15, Rn: 31, nzcv: 15, }.encode().decode(), 
                Instruction::FCCMPE_D_floatccmp { Rm: 31, cond: 15, Rn: 31, nzcv: 15, })
}
#[test]
fn roundtrip_FCCMP_H_floatccmp() {
    assert_eq!(Instruction::FCCMP_H_floatccmp { Rm: 31, cond: 15, Rn: 31, nzcv: 15, }.encode().decode(), 
                Instruction::FCCMP_H_floatccmp { Rm: 31, cond: 15, Rn: 31, nzcv: 15, })
}
#[test]
fn roundtrip_FCCMPE_H_floatccmp() {
    assert_eq!(Instruction::FCCMPE_H_floatccmp { Rm: 31, cond: 15, Rn: 31, nzcv: 15, }.encode().decode(), 
                Instruction::FCCMPE_H_floatccmp { Rm: 31, cond: 15, Rn: 31, nzcv: 15, })
}
#[test]
fn roundtrip_MVN_ORN_32_log_shift() {
    assert_eq!(Instruction::MVN_ORN_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rd: 31, }.encode().decode(), 
                Instruction::MVN_ORN_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rd: 31, })
}
#[test]
fn roundtrip_CMN_ADDS_32_addsub_shift() {
    assert_eq!(Instruction::CMN_ADDS_32_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, }.encode().decode(), 
                Instruction::CMN_ADDS_32_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, })
}
#[test]
fn roundtrip_SQRDMLAH_asimdsame2_only() {
    assert_eq!(Instruction::SQRDMLAH_asimdsame2_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRDMLAH_asimdsame2_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQRDMLSH_asimdsame2_only() {
    assert_eq!(Instruction::SQRDMLSH_asimdsame2_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRDMLSH_asimdsame2_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UDOT_asimdsame2_D() {
    assert_eq!(Instruction::UDOT_asimdsame2_D { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UDOT_asimdsame2_D { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UADDL_asimddiff_L() {
    assert_eq!(Instruction::UADDL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UADDL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UHADD_asimdsame_only() {
    assert_eq!(Instruction::UHADD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UHADD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UQADD_asimdsame_only() {
    assert_eq!(Instruction::UQADD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UQADD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UADDW_asimddiff_W() {
    assert_eq!(Instruction::UADDW_asimddiff_W { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UADDW_asimddiff_W { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_URHADD_asimdsame_only() {
    assert_eq!(Instruction::URHADD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::URHADD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_USUBL_asimddiff_L() {
    assert_eq!(Instruction::USUBL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::USUBL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UHSUB_asimdsame_only() {
    assert_eq!(Instruction::UHSUB_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UHSUB_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UQSUB_asimdsame_only() {
    assert_eq!(Instruction::UQSUB_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UQSUB_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_USUBW_asimddiff_W() {
    assert_eq!(Instruction::USUBW_asimddiff_W { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::USUBW_asimddiff_W { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMHI_asimdsame_only() {
    assert_eq!(Instruction::CMHI_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMHI_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMHS_asimdsame_only() {
    assert_eq!(Instruction::CMHS_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMHS_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_RADDHN_asimddiff_N() {
    assert_eq!(Instruction::RADDHN_asimddiff_N { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::RADDHN_asimddiff_N { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_USHL_asimdsame_only() {
    assert_eq!(Instruction::USHL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::USHL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UQSHL_asimdsame_only() {
    assert_eq!(Instruction::UQSHL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UQSHL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UABAL_asimddiff_L() {
    assert_eq!(Instruction::UABAL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UABAL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_URSHL_asimdsame_only() {
    assert_eq!(Instruction::URSHL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::URSHL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UQRSHL_asimdsame_only() {
    assert_eq!(Instruction::UQRSHL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UQRSHL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_RSUBHN_asimddiff_N() {
    assert_eq!(Instruction::RSUBHN_asimddiff_N { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::RSUBHN_asimddiff_N { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMAX_asimdsame_only() {
    assert_eq!(Instruction::UMAX_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMAX_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMIN_asimdsame_only() {
    assert_eq!(Instruction::UMIN_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMIN_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UABDL_asimddiff_L() {
    assert_eq!(Instruction::UABDL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UABDL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UABD_asimdsame_only() {
    assert_eq!(Instruction::UABD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UABD_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UABA_asimdsame_only() {
    assert_eq!(Instruction::UABA_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UABA_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMLAL_asimddiff_L() {
    assert_eq!(Instruction::UMLAL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMLAL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUB_asimdsame_only() {
    assert_eq!(Instruction::SUB_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUB_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMEQ_asimdsame_only() {
    assert_eq!(Instruction::CMEQ_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CMEQ_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MLS_asimdsame_only() {
    assert_eq!(Instruction::MLS_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MLS_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_PMUL_asimdsame_only() {
    assert_eq!(Instruction::PMUL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::PMUL_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMLSL_asimddiff_L() {
    assert_eq!(Instruction::UMLSL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMLSL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMAXP_asimdsame_only() {
    assert_eq!(Instruction::UMAXP_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMAXP_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMINP_asimdsame_only() {
    assert_eq!(Instruction::UMINP_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMINP_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQRDMULH_asimdsame_only() {
    assert_eq!(Instruction::SQRDMULH_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRDMULH_asimdsame_only { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMULL_asimddiff_L() {
    assert_eq!(Instruction::UMULL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMULL_asimddiff_L { Q: 1, size: 3, Rm: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMULX_asimdelem_RH_H() {
    assert_eq!(Instruction::FMULX_asimdelem_RH_H { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMULX_asimdelem_RH_H { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLAL2_asimdelem_LH() {
    assert_eq!(Instruction::FMLAL2_asimdelem_LH { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLAL2_asimdelem_LH { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLSL2_asimdelem_LH() {
    assert_eq!(Instruction::FMLSL2_asimdelem_LH { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLSL2_asimdelem_LH { Q: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMN_ADDS_32S_addsub_imm() {
    assert_eq!(Instruction::CMN_ADDS_32S_addsub_imm { sh: 1, imm12: 4095, Rn: 31, }.encode().decode(), 
                Instruction::CMN_ADDS_32S_addsub_imm { sh: 1, imm12: 4095, Rn: 31, })
}
#[test]
fn roundtrip_CCMN_32_condcmp_reg() {
    assert_eq!(Instruction::CCMN_32_condcmp_reg { Rm: 31, cond: 15, Rn: 31, nzcv: 15, }.encode().decode(), 
                Instruction::CCMN_32_condcmp_reg { Rm: 31, cond: 15, Rn: 31, nzcv: 15, })
}
#[test]
fn roundtrip_CCMN_32_condcmp_imm() {
    assert_eq!(Instruction::CCMN_32_condcmp_imm { imm5: 31, cond: 15, Rn: 31, nzcv: 15, }.encode().decode(), 
                Instruction::CCMN_32_condcmp_imm { imm5: 31, cond: 15, Rn: 31, nzcv: 15, })
}
#[test]
fn roundtrip_NEG_SUB_32_addsub_shift() {
    assert_eq!(Instruction::NEG_SUB_32_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rd: 31, }.encode().decode(), 
                Instruction::NEG_SUB_32_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rd: 31, })
}
#[test]
fn roundtrip_FMLA_asisdelem_R_SD() {
    assert_eq!(Instruction::FMLA_asisdelem_R_SD { sz: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLA_asisdelem_R_SD { sz: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLS_asisdelem_R_SD() {
    assert_eq!(Instruction::FMLS_asisdelem_R_SD { sz: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLS_asisdelem_R_SD { sz: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMUL_asisdelem_R_SD() {
    assert_eq!(Instruction::FMUL_asisdelem_R_SD { sz: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMUL_asisdelem_R_SD { sz: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_TST_ANDS_32_log_shift() {
    assert_eq!(Instruction::TST_ANDS_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, }.encode().decode(), 
                Instruction::TST_ANDS_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, })
}
#[test]
fn roundtrip_CMP_SUBS_32_addsub_shift() {
    assert_eq!(Instruction::CMP_SUBS_32_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, }.encode().decode(), 
                Instruction::CMP_SUBS_32_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, })
}
#[test]
fn roundtrip_CMP_SUBS_32S_addsub_imm() {
    assert_eq!(Instruction::CMP_SUBS_32S_addsub_imm { sh: 1, imm12: 4095, Rn: 31, }.encode().decode(), 
                Instruction::CMP_SUBS_32S_addsub_imm { sh: 1, imm12: 4095, Rn: 31, })
}
#[test]
fn roundtrip_CCMP_32_condcmp_reg() {
    assert_eq!(Instruction::CCMP_32_condcmp_reg { Rm: 31, cond: 15, Rn: 31, nzcv: 15, }.encode().decode(), 
                Instruction::CCMP_32_condcmp_reg { Rm: 31, cond: 15, Rn: 31, nzcv: 15, })
}
#[test]
fn roundtrip_CCMP_32_condcmp_imm() {
    assert_eq!(Instruction::CCMP_32_condcmp_imm { imm5: 31, cond: 15, Rn: 31, nzcv: 15, }.encode().decode(), 
                Instruction::CCMP_32_condcmp_imm { imm5: 31, cond: 15, Rn: 31, nzcv: 15, })
}
#[test]
fn roundtrip_FMULX_asisdelem_R_SD() {
    assert_eq!(Instruction::FMULX_asisdelem_R_SD { sz: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMULX_asisdelem_R_SD { sz: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_PRFB_i_p_bz_s_x32_scaled() {
    assert_eq!(Instruction::PRFB_i_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFB_i_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFH_i_p_bz_s_x32_scaled() {
    assert_eq!(Instruction::PRFH_i_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFH_i_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFW_i_p_bz_s_x32_scaled() {
    assert_eq!(Instruction::PRFW_i_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFW_i_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFD_i_p_bz_s_x32_scaled() {
    assert_eq!(Instruction::PRFD_i_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFD_i_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_LD1SB_z_p_ai_s() {
    assert_eq!(Instruction::LD1SB_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SB_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SB_z_p_ai_s() {
    assert_eq!(Instruction::LDFF1SB_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SB_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1B_z_p_ai_s() {
    assert_eq!(Instruction::LD1B_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1B_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1B_z_p_ai_s() {
    assert_eq!(Instruction::LDFF1B_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1B_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SH_z_p_ai_s() {
    assert_eq!(Instruction::LD1SH_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SH_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SH_z_p_ai_s() {
    assert_eq!(Instruction::LDFF1SH_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SH_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1H_z_p_ai_s() {
    assert_eq!(Instruction::LD1H_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1H_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1H_z_p_ai_s() {
    assert_eq!(Instruction::LDFF1H_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1H_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1W_z_p_ai_s() {
    assert_eq!(Instruction::LD1W_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1W_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1W_z_p_ai_s() {
    assert_eq!(Instruction::LDFF1W_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1W_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDR_p_bi() {
    assert_eq!(Instruction::LDR_p_bi { imm9h: 63, imm9l: 7, Rn: 31, Pt: 15, }.encode().decode(), 
                Instruction::LDR_p_bi { imm9h: 63, imm9l: 7, Rn: 31, Pt: 15, })
}
#[test]
fn roundtrip_PRFB_i_p_bi_s() {
    assert_eq!(Instruction::PRFB_i_p_bi_s { imm6: 63, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFB_i_p_bi_s { imm6: 63, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFH_i_p_bi_s() {
    assert_eq!(Instruction::PRFH_i_p_bi_s { imm6: 63, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFH_i_p_bi_s { imm6: 63, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFW_i_p_bi_s() {
    assert_eq!(Instruction::PRFW_i_p_bi_s { imm6: 63, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFW_i_p_bi_s { imm6: 63, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFD_i_p_bi_s() {
    assert_eq!(Instruction::PRFD_i_p_bi_s { imm6: 63, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFD_i_p_bi_s { imm6: 63, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_LD1RQB_z_p_br_contiguous() {
    assert_eq!(Instruction::LD1RQB_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RQB_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1B_z_p_br_u8() {
    assert_eq!(Instruction::LD1B_z_p_br_u8 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1B_z_p_br_u8 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1B_z_p_br_u8() {
    assert_eq!(Instruction::LDFF1B_z_p_br_u8 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1B_z_p_br_u8 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNT1B_z_p_br_contiguous() {
    assert_eq!(Instruction::LDNT1B_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNT1B_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1ROB_z_p_br_contiguous() {
    assert_eq!(Instruction::LD1ROB_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1ROB_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1B_z_p_br_u16() {
    assert_eq!(Instruction::LD1B_z_p_br_u16 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1B_z_p_br_u16 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1B_z_p_br_u16() {
    assert_eq!(Instruction::LDFF1B_z_p_br_u16 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1B_z_p_br_u16 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD2B_z_p_br_contiguous() {
    assert_eq!(Instruction::LD2B_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD2B_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1B_z_p_br_u32() {
    assert_eq!(Instruction::LD1B_z_p_br_u32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1B_z_p_br_u32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1B_z_p_br_u32() {
    assert_eq!(Instruction::LDFF1B_z_p_br_u32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1B_z_p_br_u32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD3B_z_p_br_contiguous() {
    assert_eq!(Instruction::LD3B_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD3B_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1B_z_p_br_u64() {
    assert_eq!(Instruction::LD1B_z_p_br_u64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1B_z_p_br_u64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1B_z_p_br_u64() {
    assert_eq!(Instruction::LDFF1B_z_p_br_u64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1B_z_p_br_u64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD4B_z_p_br_contiguous() {
    assert_eq!(Instruction::LD4B_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD4B_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RQH_z_p_br_contiguous() {
    assert_eq!(Instruction::LD1RQH_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RQH_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SW_z_p_br_s64() {
    assert_eq!(Instruction::LD1SW_z_p_br_s64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SW_z_p_br_s64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SW_z_p_br_s64() {
    assert_eq!(Instruction::LDFF1SW_z_p_br_s64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SW_z_p_br_s64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNT1H_z_p_br_contiguous() {
    assert_eq!(Instruction::LDNT1H_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNT1H_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1ROH_z_p_br_contiguous() {
    assert_eq!(Instruction::LD1ROH_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1ROH_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1H_z_p_br_u16() {
    assert_eq!(Instruction::LD1H_z_p_br_u16 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1H_z_p_br_u16 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1H_z_p_br_u16() {
    assert_eq!(Instruction::LDFF1H_z_p_br_u16 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1H_z_p_br_u16 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD2H_z_p_br_contiguous() {
    assert_eq!(Instruction::LD2H_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD2H_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1H_z_p_br_u32() {
    assert_eq!(Instruction::LD1H_z_p_br_u32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1H_z_p_br_u32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1H_z_p_br_u32() {
    assert_eq!(Instruction::LDFF1H_z_p_br_u32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1H_z_p_br_u32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD3H_z_p_br_contiguous() {
    assert_eq!(Instruction::LD3H_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD3H_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1H_z_p_br_u64() {
    assert_eq!(Instruction::LD1H_z_p_br_u64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1H_z_p_br_u64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1H_z_p_br_u64() {
    assert_eq!(Instruction::LDFF1H_z_p_br_u64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1H_z_p_br_u64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD4H_z_p_br_contiguous() {
    assert_eq!(Instruction::LD4H_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD4H_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RQW_z_p_br_contiguous() {
    assert_eq!(Instruction::LD1RQW_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RQW_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SH_z_p_br_s64() {
    assert_eq!(Instruction::LD1SH_z_p_br_s64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SH_z_p_br_s64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SH_z_p_br_s64() {
    assert_eq!(Instruction::LDFF1SH_z_p_br_s64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SH_z_p_br_s64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNT1W_z_p_br_contiguous() {
    assert_eq!(Instruction::LDNT1W_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNT1W_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1ROW_z_p_br_contiguous() {
    assert_eq!(Instruction::LD1ROW_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1ROW_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SH_z_p_br_s32() {
    assert_eq!(Instruction::LD1SH_z_p_br_s32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SH_z_p_br_s32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SH_z_p_br_s32() {
    assert_eq!(Instruction::LDFF1SH_z_p_br_s32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SH_z_p_br_s32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD2W_z_p_br_contiguous() {
    assert_eq!(Instruction::LD2W_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD2W_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1W_z_p_br_u32() {
    assert_eq!(Instruction::LD1W_z_p_br_u32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1W_z_p_br_u32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1W_z_p_br_u32() {
    assert_eq!(Instruction::LDFF1W_z_p_br_u32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1W_z_p_br_u32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD3W_z_p_br_contiguous() {
    assert_eq!(Instruction::LD3W_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD3W_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1W_z_p_br_u64() {
    assert_eq!(Instruction::LD1W_z_p_br_u64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1W_z_p_br_u64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1W_z_p_br_u64() {
    assert_eq!(Instruction::LDFF1W_z_p_br_u64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1W_z_p_br_u64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD4W_z_p_br_contiguous() {
    assert_eq!(Instruction::LD4W_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD4W_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RQD_z_p_br_contiguous() {
    assert_eq!(Instruction::LD1RQD_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RQD_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SB_z_p_br_s64() {
    assert_eq!(Instruction::LD1SB_z_p_br_s64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SB_z_p_br_s64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SB_z_p_br_s64() {
    assert_eq!(Instruction::LDFF1SB_z_p_br_s64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SB_z_p_br_s64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDNT1D_z_p_br_contiguous() {
    assert_eq!(Instruction::LDNT1D_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDNT1D_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1ROD_z_p_br_contiguous() {
    assert_eq!(Instruction::LD1ROD_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1ROD_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SB_z_p_br_s32() {
    assert_eq!(Instruction::LD1SB_z_p_br_s32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SB_z_p_br_s32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SB_z_p_br_s32() {
    assert_eq!(Instruction::LDFF1SB_z_p_br_s32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SB_z_p_br_s32 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD2D_z_p_br_contiguous() {
    assert_eq!(Instruction::LD2D_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD2D_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SB_z_p_br_s16() {
    assert_eq!(Instruction::LD1SB_z_p_br_s16 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SB_z_p_br_s16 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SB_z_p_br_s16() {
    assert_eq!(Instruction::LDFF1SB_z_p_br_s16 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SB_z_p_br_s16 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD3D_z_p_br_contiguous() {
    assert_eq!(Instruction::LD3D_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD3D_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1D_z_p_br_u64() {
    assert_eq!(Instruction::LD1D_z_p_br_u64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1D_z_p_br_u64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1D_z_p_br_u64() {
    assert_eq!(Instruction::LDFF1D_z_p_br_u64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1D_z_p_br_u64 { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD4D_z_p_br_contiguous() {
    assert_eq!(Instruction::LD4D_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD4D_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_MVN_ORN_64_log_shift() {
    assert_eq!(Instruction::MVN_ORN_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rd: 31, }.encode().decode(), 
                Instruction::MVN_ORN_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rd: 31, })
}
#[test]
fn roundtrip_CMN_ADDS_64_addsub_shift() {
    assert_eq!(Instruction::CMN_ADDS_64_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, }.encode().decode(), 
                Instruction::CMN_ADDS_64_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, })
}
#[test]
fn roundtrip_CMN_ADDS_64S_addsub_imm() {
    assert_eq!(Instruction::CMN_ADDS_64S_addsub_imm { sh: 1, imm12: 4095, Rn: 31, }.encode().decode(), 
                Instruction::CMN_ADDS_64S_addsub_imm { sh: 1, imm12: 4095, Rn: 31, })
}
#[test]
fn roundtrip_MOV_ORR_64_log_imm() {
    assert_eq!(Instruction::MOV_ORR_64_log_imm { N: 1, immr: 63, imms: 63, Rd: 31, }.encode().decode(), 
                Instruction::MOV_ORR_64_log_imm { N: 1, immr: 63, imms: 63, Rd: 31, })
}
#[test]
fn roundtrip_CCMN_64_condcmp_reg() {
    assert_eq!(Instruction::CCMN_64_condcmp_reg { Rm: 31, cond: 15, Rn: 31, nzcv: 15, }.encode().decode(), 
                Instruction::CCMN_64_condcmp_reg { Rm: 31, cond: 15, Rn: 31, nzcv: 15, })
}
#[test]
fn roundtrip_CCMN_64_condcmp_imm() {
    assert_eq!(Instruction::CCMN_64_condcmp_imm { imm5: 31, cond: 15, Rn: 31, nzcv: 15, }.encode().decode(), 
                Instruction::CCMN_64_condcmp_imm { imm5: 31, cond: 15, Rn: 31, nzcv: 15, })
}
#[test]
fn roundtrip_PRFB_i_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::PRFB_i_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFB_i_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFH_i_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::PRFH_i_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFH_i_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFW_i_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::PRFW_i_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFW_i_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_PRFD_i_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::PRFD_i_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, prfop: 15, }.encode().decode(), 
                Instruction::PRFD_i_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, prfop: 15, })
}
#[test]
fn roundtrip_LD1SB_z_p_ai_d() {
    assert_eq!(Instruction::LD1SB_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SB_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SB_z_p_ai_d() {
    assert_eq!(Instruction::LDFF1SB_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SB_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1B_z_p_ai_d() {
    assert_eq!(Instruction::LD1B_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1B_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1B_z_p_ai_d() {
    assert_eq!(Instruction::LDFF1B_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1B_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SB_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::LD1SB_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SB_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SB_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::LDFF1SB_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SB_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1B_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::LD1B_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1B_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1B_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::LDFF1B_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1B_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SH_z_p_ai_d() {
    assert_eq!(Instruction::LD1SH_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SH_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SH_z_p_ai_d() {
    assert_eq!(Instruction::LDFF1SH_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SH_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1H_z_p_ai_d() {
    assert_eq!(Instruction::LD1H_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1H_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1H_z_p_ai_d() {
    assert_eq!(Instruction::LDFF1H_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1H_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SH_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::LD1SH_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SH_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SH_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::LDFF1SH_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SH_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1H_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::LD1H_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1H_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1H_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::LDFF1H_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1H_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SH_z_p_bz_d_64_scaled() {
    assert_eq!(Instruction::LD1SH_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SH_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SH_z_p_bz_d_64_scaled() {
    assert_eq!(Instruction::LDFF1SH_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SH_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1H_z_p_bz_d_64_scaled() {
    assert_eq!(Instruction::LD1H_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1H_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1H_z_p_bz_d_64_scaled() {
    assert_eq!(Instruction::LDFF1H_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1H_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SW_z_p_ai_d() {
    assert_eq!(Instruction::LD1SW_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SW_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SW_z_p_ai_d() {
    assert_eq!(Instruction::LDFF1SW_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SW_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1W_z_p_ai_d() {
    assert_eq!(Instruction::LD1W_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1W_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1W_z_p_ai_d() {
    assert_eq!(Instruction::LDFF1W_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1W_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SW_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::LD1SW_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SW_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SW_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::LDFF1SW_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SW_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1W_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::LD1W_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1W_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1W_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::LDFF1W_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1W_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SW_z_p_bz_d_64_scaled() {
    assert_eq!(Instruction::LD1SW_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SW_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SW_z_p_bz_d_64_scaled() {
    assert_eq!(Instruction::LDFF1SW_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SW_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1W_z_p_bz_d_64_scaled() {
    assert_eq!(Instruction::LD1W_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1W_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1W_z_p_bz_d_64_scaled() {
    assert_eq!(Instruction::LDFF1W_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1W_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1D_z_p_ai_d() {
    assert_eq!(Instruction::LD1D_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1D_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1D_z_p_ai_d() {
    assert_eq!(Instruction::LDFF1D_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1D_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1D_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::LD1D_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1D_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1D_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::LDFF1D_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1D_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1D_z_p_bz_d_64_scaled() {
    assert_eq!(Instruction::LD1D_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1D_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1D_z_p_bz_d_64_scaled() {
    assert_eq!(Instruction::LDFF1D_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1D_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_NEG_SUB_64_addsub_shift() {
    assert_eq!(Instruction::NEG_SUB_64_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rd: 31, }.encode().decode(), 
                Instruction::NEG_SUB_64_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rd: 31, })
}
#[test]
fn roundtrip_STNT1B_z_p_br_contiguous() {
    assert_eq!(Instruction::STNT1B_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::STNT1B_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1B_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::ST1B_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1B_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST2B_z_p_br_contiguous() {
    assert_eq!(Instruction::ST2B_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST2B_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST3B_z_p_br_contiguous() {
    assert_eq!(Instruction::ST3B_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST3B_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1B_z_p_ai_d() {
    assert_eq!(Instruction::ST1B_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1B_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST4B_z_p_br_contiguous() {
    assert_eq!(Instruction::ST4B_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST4B_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1B_z_p_ai_s() {
    assert_eq!(Instruction::ST1B_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1B_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_STNT1H_z_p_br_contiguous() {
    assert_eq!(Instruction::STNT1H_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::STNT1H_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1H_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::ST1H_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1H_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST2H_z_p_br_contiguous() {
    assert_eq!(Instruction::ST2H_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST2H_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1H_z_p_bz_d_64_scaled() {
    assert_eq!(Instruction::ST1H_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1H_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST3H_z_p_br_contiguous() {
    assert_eq!(Instruction::ST3H_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST3H_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1H_z_p_ai_d() {
    assert_eq!(Instruction::ST1H_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1H_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST4H_z_p_br_contiguous() {
    assert_eq!(Instruction::ST4H_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST4H_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1H_z_p_ai_s() {
    assert_eq!(Instruction::ST1H_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1H_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_STNT1W_z_p_br_contiguous() {
    assert_eq!(Instruction::STNT1W_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::STNT1W_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1W_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::ST1W_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1W_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST2W_z_p_br_contiguous() {
    assert_eq!(Instruction::ST2W_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST2W_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1W_z_p_bz_d_64_scaled() {
    assert_eq!(Instruction::ST1W_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1W_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST3W_z_p_br_contiguous() {
    assert_eq!(Instruction::ST3W_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST3W_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1W_z_p_ai_d() {
    assert_eq!(Instruction::ST1W_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1W_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST4W_z_p_br_contiguous() {
    assert_eq!(Instruction::ST4W_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST4W_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1W_z_p_ai_s() {
    assert_eq!(Instruction::ST1W_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1W_z_p_ai_s { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_STR_p_bi() {
    assert_eq!(Instruction::STR_p_bi { imm9h: 63, imm9l: 7, Rn: 31, Pt: 15, }.encode().decode(), 
                Instruction::STR_p_bi { imm9h: 63, imm9l: 7, Rn: 31, Pt: 15, })
}
#[test]
fn roundtrip_STNT1D_z_p_br_contiguous() {
    assert_eq!(Instruction::STNT1D_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::STNT1D_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1D_z_p_bz_d_64_unscaled() {
    assert_eq!(Instruction::ST1D_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1D_z_p_bz_d_64_unscaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST2D_z_p_br_contiguous() {
    assert_eq!(Instruction::ST2D_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST2D_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1D_z_p_bz_d_64_scaled() {
    assert_eq!(Instruction::ST1D_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1D_z_p_bz_d_64_scaled { Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST3D_z_p_br_contiguous() {
    assert_eq!(Instruction::ST3D_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST3D_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1D_z_p_ai_d() {
    assert_eq!(Instruction::ST1D_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1D_z_p_ai_d { imm5: 31, Pg: 7, Zn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1D_z_p_br() {
    assert_eq!(Instruction::ST1D_z_p_br { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1D_z_p_br { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST4D_z_p_br_contiguous() {
    assert_eq!(Instruction::ST4D_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST4D_z_p_br_contiguous { Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_TST_ANDS_64_log_shift() {
    assert_eq!(Instruction::TST_ANDS_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, }.encode().decode(), 
                Instruction::TST_ANDS_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, })
}
#[test]
fn roundtrip_CMP_SUBS_64_addsub_shift() {
    assert_eq!(Instruction::CMP_SUBS_64_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, }.encode().decode(), 
                Instruction::CMP_SUBS_64_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, })
}
#[test]
fn roundtrip_CMP_SUBS_64S_addsub_imm() {
    assert_eq!(Instruction::CMP_SUBS_64S_addsub_imm { sh: 1, imm12: 4095, Rn: 31, }.encode().decode(), 
                Instruction::CMP_SUBS_64S_addsub_imm { sh: 1, imm12: 4095, Rn: 31, })
}
#[test]
fn roundtrip_TST_ANDS_64S_log_imm() {
    assert_eq!(Instruction::TST_ANDS_64S_log_imm { N: 1, immr: 63, imms: 63, Rn: 31, }.encode().decode(), 
                Instruction::TST_ANDS_64S_log_imm { N: 1, immr: 63, imms: 63, Rn: 31, })
}
#[test]
fn roundtrip_CCMP_64_condcmp_reg() {
    assert_eq!(Instruction::CCMP_64_condcmp_reg { Rm: 31, cond: 15, Rn: 31, nzcv: 15, }.encode().decode(), 
                Instruction::CCMP_64_condcmp_reg { Rm: 31, cond: 15, Rn: 31, nzcv: 15, })
}
#[test]
fn roundtrip_CCMP_64_condcmp_imm() {
    assert_eq!(Instruction::CCMP_64_condcmp_imm { imm5: 31, cond: 15, Rn: 31, nzcv: 15, }.encode().decode(), 
                Instruction::CCMP_64_condcmp_imm { imm5: 31, cond: 15, Rn: 31, nzcv: 15, })
}
#[test]
fn roundtrip_CINC_CSINC_32_condsel() {
    assert_eq!(Instruction::CINC_CSINC_32_condsel { Rm: 0, cond: 1, Rn: 0, Rd: 31, }.encode().decode(), 
                Instruction::CINC_CSINC_32_condsel { Rm: 0, cond: 1, Rn: 0, Rd: 31, })
}
#[test]
fn roundtrip_CINV_CSINV_32_condsel() {
    assert_eq!(Instruction::CINV_CSINV_32_condsel { Rm: 0, cond: 1, Rn: 0, Rd: 31, }.encode().decode(), 
                Instruction::CINV_CSINV_32_condsel { Rm: 0, cond: 1, Rn: 0, Rd: 31, })
}
#[test]
fn roundtrip_CINC_CSINC_64_condsel() {
    assert_eq!(Instruction::CINC_CSINC_64_condsel { Rm: 0, cond: 1, Rn: 0, Rd: 31, }.encode().decode(), 
                Instruction::CINC_CSINC_64_condsel { Rm: 0, cond: 1, Rn: 0, Rd: 31, })
}
#[test]
fn roundtrip_CINV_CSINV_64_condsel() {
    assert_eq!(Instruction::CINV_CSINV_64_condsel { Rm: 0, cond: 1, Rn: 0, Rd: 31, }.encode().decode(), 
                Instruction::CINV_CSINV_64_condsel { Rm: 0, cond: 1, Rn: 0, Rd: 31, })
}
#[test]
fn roundtrip_CNEG_CSNEG_32_condsel() {
    assert_eq!(Instruction::CNEG_CSNEG_32_condsel { Rm: 31, cond: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CNEG_CSNEG_32_condsel { Rm: 31, cond: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CNEG_CSNEG_64_condsel() {
    assert_eq!(Instruction::CNEG_CSNEG_64_condsel { Rm: 31, cond: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CNEG_CSNEG_64_condsel { Rm: 31, cond: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCPY_z_p_i() {
    assert_eq!(Instruction::FCPY_z_p_i { size: 3, Pg: 15, imm8: 255, Zd: 31, }.encode().decode(), 
                Instruction::FCPY_z_p_i { size: 3, Pg: 15, imm8: 255, Zd: 31, })
}
#[test]
fn roundtrip_FMOV_fcpy_z_p_i() {
    assert_eq!(Instruction::FMOV_fcpy_z_p_i { size: 3, Pg: 15, imm8: 255, Zd: 31, }.encode().decode(), 
                Instruction::FMOV_fcpy_z_p_i { size: 3, Pg: 15, imm8: 255, Zd: 31, })
}
#[test]
fn roundtrip_ST1_asisdlsop_BX1_r1b() {
    assert_eq!(Instruction::ST1_asisdlsop_BX1_r1b { Q: 1, Rm: 31, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST1_asisdlsop_BX1_r1b { Q: 1, Rm: 31, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST3_asisdlsop_BX3_r3b() {
    assert_eq!(Instruction::ST3_asisdlsop_BX3_r3b { Q: 1, Rm: 31, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST3_asisdlsop_BX3_r3b { Q: 1, Rm: 31, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST2_asisdlsop_BX2_r2b() {
    assert_eq!(Instruction::ST2_asisdlsop_BX2_r2b { Q: 1, Rm: 31, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST2_asisdlsop_BX2_r2b { Q: 1, Rm: 31, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ST4_asisdlsop_BX4_r4b() {
    assert_eq!(Instruction::ST4_asisdlsop_BX4_r4b { Q: 1, Rm: 31, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::ST4_asisdlsop_BX4_r4b { Q: 1, Rm: 31, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1_asisdlsop_BX1_r1b() {
    assert_eq!(Instruction::LD1_asisdlsop_BX1_r1b { Q: 1, Rm: 31, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD1_asisdlsop_BX1_r1b { Q: 1, Rm: 31, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD3_asisdlsop_BX3_r3b() {
    assert_eq!(Instruction::LD3_asisdlsop_BX3_r3b { Q: 1, Rm: 31, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD3_asisdlsop_BX3_r3b { Q: 1, Rm: 31, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD2_asisdlsop_BX2_r2b() {
    assert_eq!(Instruction::LD2_asisdlsop_BX2_r2b { Q: 1, Rm: 31, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD2_asisdlsop_BX2_r2b { Q: 1, Rm: 31, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD4_asisdlsop_BX4_r4b() {
    assert_eq!(Instruction::LD4_asisdlsop_BX4_r4b { Q: 1, Rm: 31, S: 1, size: 3, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LD4_asisdlsop_BX4_r4b { Q: 1, Rm: 31, S: 1, size: 3, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_FMLA_asimdelem_R_SD() {
    assert_eq!(Instruction::FMLA_asimdelem_R_SD { Q: 1, sz: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLA_asimdelem_R_SD { Q: 1, sz: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMLS_asimdelem_R_SD() {
    assert_eq!(Instruction::FMLS_asimdelem_R_SD { Q: 1, sz: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMLS_asimdelem_R_SD { Q: 1, sz: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMUL_asimdelem_R_SD() {
    assert_eq!(Instruction::FMUL_asimdelem_R_SD { Q: 1, sz: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMUL_asimdelem_R_SD { Q: 1, sz: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_STLURB_32_ldapstl_unscaled() {
    assert_eq!(Instruction::STLURB_32_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLURB_32_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAPURB_32_ldapstl_unscaled() {
    assert_eq!(Instruction::LDAPURB_32_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAPURB_32_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAPURSB_64_ldapstl_unscaled() {
    assert_eq!(Instruction::LDAPURSB_64_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAPURSB_64_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAPURSB_32_ldapstl_unscaled() {
    assert_eq!(Instruction::LDAPURSB_32_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAPURSB_32_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CSEL_32_condsel() {
    assert_eq!(Instruction::CSEL_32_condsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CSEL_32_condsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CSINC_32_condsel() {
    assert_eq!(Instruction::CSINC_32_condsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CSINC_32_condsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCSEL_S_floatsel() {
    assert_eq!(Instruction::FCSEL_S_floatsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCSEL_S_floatsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCSEL_D_floatsel() {
    assert_eq!(Instruction::FCSEL_D_floatsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCSEL_D_floatsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCSEL_H_floatsel() {
    assert_eq!(Instruction::FCSEL_H_floatsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCSEL_H_floatsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMPHS_p_p_zz() {
    assert_eq!(Instruction::CMPHS_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPHS_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPLS_cmphs_p_p_zz() {
    assert_eq!(Instruction::CMPLS_cmphs_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPLS_cmphs_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPHI_p_p_zz() {
    assert_eq!(Instruction::CMPHI_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPHI_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPLO_cmphi_p_p_zz() {
    assert_eq!(Instruction::CMPLO_cmphi_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPLO_cmphi_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPEQ_p_p_zw() {
    assert_eq!(Instruction::CMPEQ_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPEQ_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPNE_p_p_zw() {
    assert_eq!(Instruction::CMPNE_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPNE_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPGE_p_p_zw() {
    assert_eq!(Instruction::CMPGE_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPGE_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPGT_p_p_zw() {
    assert_eq!(Instruction::CMPGT_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPGT_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPLT_p_p_zw() {
    assert_eq!(Instruction::CMPLT_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPLT_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPLE_p_p_zw() {
    assert_eq!(Instruction::CMPLE_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPLE_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPGE_p_p_zz() {
    assert_eq!(Instruction::CMPGE_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPGE_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPLE_cmpge_p_p_zz() {
    assert_eq!(Instruction::CMPLE_cmpge_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPLE_cmpge_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPGT_p_p_zz() {
    assert_eq!(Instruction::CMPGT_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPGT_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPLT_cmpgt_p_p_zz() {
    assert_eq!(Instruction::CMPLT_cmpgt_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPLT_cmpgt_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPEQ_p_p_zz() {
    assert_eq!(Instruction::CMPEQ_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPEQ_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPNE_p_p_zz() {
    assert_eq!(Instruction::CMPNE_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPNE_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPHS_p_p_zw() {
    assert_eq!(Instruction::CMPHS_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPHS_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPHI_p_p_zw() {
    assert_eq!(Instruction::CMPHI_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPHI_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPLO_p_p_zw() {
    assert_eq!(Instruction::CMPLO_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPLO_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPLS_p_p_zw() {
    assert_eq!(Instruction::CMPLS_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPLS_p_p_zw { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPGE_p_p_zi() {
    assert_eq!(Instruction::CMPGE_p_p_zi { size: 3, imm5: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPGE_p_p_zi { size: 3, imm5: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPGT_p_p_zi() {
    assert_eq!(Instruction::CMPGT_p_p_zi { size: 3, imm5: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPGT_p_p_zi { size: 3, imm5: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPLT_p_p_zi() {
    assert_eq!(Instruction::CMPLT_p_p_zi { size: 3, imm5: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPLT_p_p_zi { size: 3, imm5: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPLE_p_p_zi() {
    assert_eq!(Instruction::CMPLE_p_p_zi { size: 3, imm5: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPLE_p_p_zi { size: 3, imm5: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPEQ_p_p_zi() {
    assert_eq!(Instruction::CMPEQ_p_p_zi { size: 3, imm5: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPEQ_p_p_zi { size: 3, imm5: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPNE_p_p_zi() {
    assert_eq!(Instruction::CMPNE_p_p_zi { size: 3, imm5: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPNE_p_p_zi { size: 3, imm5: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FCADD_asimdsame2_C() {
    assert_eq!(Instruction::FCADD_asimdsame2_C { Q: 1, size: 3, Rm: 31, rot: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCADD_asimdsame2_C { Q: 1, size: 3, Rm: 31, rot: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMULX_asimdelem_R_SD() {
    assert_eq!(Instruction::FMULX_asimdelem_R_SD { Q: 1, sz: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMULX_asimdelem_R_SD { Q: 1, sz: 1, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_STURB_32_ldst_unscaled() {
    assert_eq!(Instruction::STURB_32_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STURB_32_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STRB_32_ldst_immpost() {
    assert_eq!(Instruction::STRB_32_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STRB_32_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STTRB_32_ldst_unpriv() {
    assert_eq!(Instruction::STTRB_32_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STTRB_32_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STRB_32_ldst_immpre() {
    assert_eq!(Instruction::STRB_32_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STRB_32_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STRB_32B_ldst_regoff() {
    assert_eq!(Instruction::STRB_32B_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STRB_32B_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDURB_32_ldst_unscaled() {
    assert_eq!(Instruction::LDURB_32_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDURB_32_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRB_32_ldst_immpost() {
    assert_eq!(Instruction::LDRB_32_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRB_32_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDTRB_32_ldst_unpriv() {
    assert_eq!(Instruction::LDTRB_32_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDTRB_32_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRB_32_ldst_immpre() {
    assert_eq!(Instruction::LDRB_32_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRB_32_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRB_32B_ldst_regoff() {
    assert_eq!(Instruction::LDRB_32B_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRB_32B_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDURSB_64_ldst_unscaled() {
    assert_eq!(Instruction::LDURSB_64_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDURSB_64_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSB_64_ldst_immpost() {
    assert_eq!(Instruction::LDRSB_64_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSB_64_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDTRSB_64_ldst_unpriv() {
    assert_eq!(Instruction::LDTRSB_64_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDTRSB_64_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSB_64_ldst_immpre() {
    assert_eq!(Instruction::LDRSB_64_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSB_64_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSB_64B_ldst_regoff() {
    assert_eq!(Instruction::LDRSB_64B_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSB_64B_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDURSB_32_ldst_unscaled() {
    assert_eq!(Instruction::LDURSB_32_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDURSB_32_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSB_32_ldst_immpost() {
    assert_eq!(Instruction::LDRSB_32_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSB_32_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDTRSB_32_ldst_unpriv() {
    assert_eq!(Instruction::LDTRSB_32_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDTRSB_32_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSB_32_ldst_immpre() {
    assert_eq!(Instruction::LDRSB_32_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSB_32_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSB_32B_ldst_regoff() {
    assert_eq!(Instruction::LDRSB_32B_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSB_32B_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STUR_B_ldst_unscaled() {
    assert_eq!(Instruction::STUR_B_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STUR_B_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_B_ldst_immpost() {
    assert_eq!(Instruction::STR_B_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_B_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_B_ldst_immpre() {
    assert_eq!(Instruction::STR_B_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_B_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_B_ldst_regoff() {
    assert_eq!(Instruction::STR_B_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_B_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUR_B_ldst_unscaled() {
    assert_eq!(Instruction::LDUR_B_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUR_B_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_B_ldst_immpost() {
    assert_eq!(Instruction::LDR_B_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_B_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_B_ldst_immpre() {
    assert_eq!(Instruction::LDR_B_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_B_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_B_ldst_regoff() {
    assert_eq!(Instruction::LDR_B_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_B_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STUR_Q_ldst_unscaled() {
    assert_eq!(Instruction::STUR_Q_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STUR_Q_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_Q_ldst_immpost() {
    assert_eq!(Instruction::STR_Q_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_Q_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_Q_ldst_immpre() {
    assert_eq!(Instruction::STR_Q_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_Q_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_Q_ldst_regoff() {
    assert_eq!(Instruction::STR_Q_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_Q_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUR_Q_ldst_unscaled() {
    assert_eq!(Instruction::LDUR_Q_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUR_Q_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_Q_ldst_immpost() {
    assert_eq!(Instruction::LDR_Q_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_Q_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_Q_ldst_immpre() {
    assert_eq!(Instruction::LDR_Q_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_Q_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_Q_ldst_regoff() {
    assert_eq!(Instruction::LDR_Q_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_Q_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STLURH_32_ldapstl_unscaled() {
    assert_eq!(Instruction::STLURH_32_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLURH_32_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAPURH_32_ldapstl_unscaled() {
    assert_eq!(Instruction::LDAPURH_32_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAPURH_32_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAPURSH_64_ldapstl_unscaled() {
    assert_eq!(Instruction::LDAPURSH_64_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAPURSH_64_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAPURSH_32_ldapstl_unscaled() {
    assert_eq!(Instruction::LDAPURSH_32_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAPURSH_32_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CSINV_32_condsel() {
    assert_eq!(Instruction::CSINV_32_condsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CSINV_32_condsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CSNEG_32_condsel() {
    assert_eq!(Instruction::CSNEG_32_condsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CSNEG_32_condsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQDMLAL_asisdelem_L() {
    assert_eq!(Instruction::SQDMLAL_asisdelem_L { size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQDMLAL_asisdelem_L { size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQDMLSL_asisdelem_L() {
    assert_eq!(Instruction::SQDMLSL_asisdelem_L { size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQDMLSL_asisdelem_L { size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQDMULL_asisdelem_L() {
    assert_eq!(Instruction::SQDMULL_asisdelem_L { size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQDMULL_asisdelem_L { size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQDMULH_asisdelem_R() {
    assert_eq!(Instruction::SQDMULH_asisdelem_R { size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQDMULH_asisdelem_R { size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQRDMULH_asisdelem_R() {
    assert_eq!(Instruction::SQRDMULH_asisdelem_R { size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRDMULH_asisdelem_R { size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMGE_p_p_zz() {
    assert_eq!(Instruction::FCMGE_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FCMGE_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FCMLE_fcmge_p_p_zz() {
    assert_eq!(Instruction::FCMLE_fcmge_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FCMLE_fcmge_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FCMGT_p_p_zz() {
    assert_eq!(Instruction::FCMGT_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FCMGT_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FCMLT_fcmgt_p_p_zz() {
    assert_eq!(Instruction::FCMLT_fcmgt_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FCMLT_fcmgt_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FCMEQ_p_p_zz() {
    assert_eq!(Instruction::FCMEQ_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FCMEQ_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FCMNE_p_p_zz() {
    assert_eq!(Instruction::FCMNE_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FCMNE_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FCMUO_p_p_zz() {
    assert_eq!(Instruction::FCMUO_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FCMUO_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FACGE_p_p_zz() {
    assert_eq!(Instruction::FACGE_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FACGE_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FACLE_facge_p_p_zz() {
    assert_eq!(Instruction::FACLE_facge_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FACLE_facge_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FACGT_p_p_zz() {
    assert_eq!(Instruction::FACGT_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FACGT_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_FACLT_facgt_p_p_zz() {
    assert_eq!(Instruction::FACLT_facgt_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::FACLT_facgt_p_p_zz { size: 3, Zm: 31, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_INS_asimdins_IV_v() {
    assert_eq!(Instruction::INS_asimdins_IV_v { imm5: 31, imm4: 15, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::INS_asimdins_IV_v { imm5: 31, imm4: 15, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOV_INS_asimdins_IV_v() {
    assert_eq!(Instruction::MOV_INS_asimdins_IV_v { imm5: 31, imm4: 15, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MOV_INS_asimdins_IV_v { imm5: 31, imm4: 15, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_STURH_32_ldst_unscaled() {
    assert_eq!(Instruction::STURH_32_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STURH_32_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STRH_32_ldst_immpost() {
    assert_eq!(Instruction::STRH_32_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STRH_32_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STTRH_32_ldst_unpriv() {
    assert_eq!(Instruction::STTRH_32_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STTRH_32_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STRH_32_ldst_immpre() {
    assert_eq!(Instruction::STRH_32_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STRH_32_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STRH_32_ldst_regoff() {
    assert_eq!(Instruction::STRH_32_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STRH_32_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDURH_32_ldst_unscaled() {
    assert_eq!(Instruction::LDURH_32_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDURH_32_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRH_32_ldst_immpost() {
    assert_eq!(Instruction::LDRH_32_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRH_32_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDTRH_32_ldst_unpriv() {
    assert_eq!(Instruction::LDTRH_32_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDTRH_32_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRH_32_ldst_immpre() {
    assert_eq!(Instruction::LDRH_32_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRH_32_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRH_32_ldst_regoff() {
    assert_eq!(Instruction::LDRH_32_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRH_32_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDURSH_64_ldst_unscaled() {
    assert_eq!(Instruction::LDURSH_64_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDURSH_64_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSH_64_ldst_immpost() {
    assert_eq!(Instruction::LDRSH_64_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSH_64_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDTRSH_64_ldst_unpriv() {
    assert_eq!(Instruction::LDTRSH_64_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDTRSH_64_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSH_64_ldst_immpre() {
    assert_eq!(Instruction::LDRSH_64_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSH_64_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSH_64_ldst_regoff() {
    assert_eq!(Instruction::LDRSH_64_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSH_64_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDURSH_32_ldst_unscaled() {
    assert_eq!(Instruction::LDURSH_32_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDURSH_32_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSH_32_ldst_immpost() {
    assert_eq!(Instruction::LDRSH_32_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSH_32_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDTRSH_32_ldst_unpriv() {
    assert_eq!(Instruction::LDTRSH_32_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDTRSH_32_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSH_32_ldst_immpre() {
    assert_eq!(Instruction::LDRSH_32_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSH_32_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSH_32_ldst_regoff() {
    assert_eq!(Instruction::LDRSH_32_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSH_32_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STUR_H_ldst_unscaled() {
    assert_eq!(Instruction::STUR_H_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STUR_H_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_H_ldst_immpost() {
    assert_eq!(Instruction::STR_H_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_H_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_H_ldst_immpre() {
    assert_eq!(Instruction::STR_H_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_H_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_H_ldst_regoff() {
    assert_eq!(Instruction::STR_H_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_H_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUR_H_ldst_unscaled() {
    assert_eq!(Instruction::LDUR_H_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUR_H_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_H_ldst_immpost() {
    assert_eq!(Instruction::LDR_H_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_H_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_H_ldst_immpre() {
    assert_eq!(Instruction::LDR_H_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_H_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_H_ldst_regoff() {
    assert_eq!(Instruction::LDR_H_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_H_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SQRDMLAH_asisdelem_R() {
    assert_eq!(Instruction::SQRDMLAH_asisdelem_R { size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRDMLAH_asisdelem_R { size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQRDMLSH_asisdelem_R() {
    assert_eq!(Instruction::SQRDMLSH_asisdelem_R { size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRDMLSH_asisdelem_R { size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_LD1SB_z_p_bz_s_x32_unscaled() {
    assert_eq!(Instruction::LD1SB_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SB_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SB_z_p_bz_s_x32_unscaled() {
    assert_eq!(Instruction::LDFF1SB_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SB_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1B_z_p_bz_s_x32_unscaled() {
    assert_eq!(Instruction::LD1B_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1B_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1B_z_p_bz_s_x32_unscaled() {
    assert_eq!(Instruction::LDFF1B_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1B_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RB_z_p_bi_u8() {
    assert_eq!(Instruction::LD1RB_z_p_bi_u8 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RB_z_p_bi_u8 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RB_z_p_bi_u16() {
    assert_eq!(Instruction::LD1RB_z_p_bi_u16 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RB_z_p_bi_u16 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RB_z_p_bi_u32() {
    assert_eq!(Instruction::LD1RB_z_p_bi_u32 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RB_z_p_bi_u32 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RB_z_p_bi_u64() {
    assert_eq!(Instruction::LD1RB_z_p_bi_u64 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RB_z_p_bi_u64 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SH_z_p_bz_s_x32_unscaled() {
    assert_eq!(Instruction::LD1SH_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SH_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SH_z_p_bz_s_x32_unscaled() {
    assert_eq!(Instruction::LDFF1SH_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SH_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1H_z_p_bz_s_x32_unscaled() {
    assert_eq!(Instruction::LD1H_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1H_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1H_z_p_bz_s_x32_unscaled() {
    assert_eq!(Instruction::LDFF1H_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1H_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SH_z_p_bz_s_x32_scaled() {
    assert_eq!(Instruction::LD1SH_z_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SH_z_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SH_z_p_bz_s_x32_scaled() {
    assert_eq!(Instruction::LDFF1SH_z_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SH_z_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1H_z_p_bz_s_x32_scaled() {
    assert_eq!(Instruction::LD1H_z_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1H_z_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1H_z_p_bz_s_x32_scaled() {
    assert_eq!(Instruction::LDFF1H_z_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1H_z_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RSW_z_p_bi_s64() {
    assert_eq!(Instruction::LD1RSW_z_p_bi_s64 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RSW_z_p_bi_s64 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RH_z_p_bi_u16() {
    assert_eq!(Instruction::LD1RH_z_p_bi_u16 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RH_z_p_bi_u16 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RH_z_p_bi_u32() {
    assert_eq!(Instruction::LD1RH_z_p_bi_u32 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RH_z_p_bi_u32 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RH_z_p_bi_u64() {
    assert_eq!(Instruction::LD1RH_z_p_bi_u64 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RH_z_p_bi_u64 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1W_z_p_bz_s_x32_unscaled() {
    assert_eq!(Instruction::LD1W_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1W_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1W_z_p_bz_s_x32_unscaled() {
    assert_eq!(Instruction::LDFF1W_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1W_z_p_bz_s_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1W_z_p_bz_s_x32_scaled() {
    assert_eq!(Instruction::LD1W_z_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1W_z_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1W_z_p_bz_s_x32_scaled() {
    assert_eq!(Instruction::LDFF1W_z_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1W_z_p_bz_s_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RSH_z_p_bi_s64() {
    assert_eq!(Instruction::LD1RSH_z_p_bi_s64 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RSH_z_p_bi_s64 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RSH_z_p_bi_s32() {
    assert_eq!(Instruction::LD1RSH_z_p_bi_s32 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RSH_z_p_bi_s32 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RW_z_p_bi_u32() {
    assert_eq!(Instruction::LD1RW_z_p_bi_u32 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RW_z_p_bi_u32 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RW_z_p_bi_u64() {
    assert_eq!(Instruction::LD1RW_z_p_bi_u64 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RW_z_p_bi_u64 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDR_z_bi() {
    assert_eq!(Instruction::LDR_z_bi { imm9h: 63, imm9l: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDR_z_bi { imm9h: 63, imm9l: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RSB_z_p_bi_s64() {
    assert_eq!(Instruction::LD1RSB_z_p_bi_s64 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RSB_z_p_bi_s64 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RSB_z_p_bi_s32() {
    assert_eq!(Instruction::LD1RSB_z_p_bi_s32 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RSB_z_p_bi_s32 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RSB_z_p_bi_s16() {
    assert_eq!(Instruction::LD1RSB_z_p_bi_s16 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RSB_z_p_bi_s16 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1RD_z_p_bi_u64() {
    assert_eq!(Instruction::LD1RD_z_p_bi_u64 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1RD_z_p_bi_u64 { imm6: 63, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_STLUR_32_ldapstl_unscaled() {
    assert_eq!(Instruction::STLUR_32_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLUR_32_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAPUR_32_ldapstl_unscaled() {
    assert_eq!(Instruction::LDAPUR_32_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAPUR_32_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAPURSW_64_ldapstl_unscaled() {
    assert_eq!(Instruction::LDAPURSW_64_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAPURSW_64_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_CSEL_64_condsel() {
    assert_eq!(Instruction::CSEL_64_condsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CSEL_64_condsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CSINC_64_condsel() {
    assert_eq!(Instruction::CSINC_64_condsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CSINC_64_condsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_STUR_32_ldst_unscaled() {
    assert_eq!(Instruction::STUR_32_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STUR_32_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_32_ldst_immpost() {
    assert_eq!(Instruction::STR_32_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_32_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STTR_32_ldst_unpriv() {
    assert_eq!(Instruction::STTR_32_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STTR_32_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_32_ldst_immpre() {
    assert_eq!(Instruction::STR_32_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_32_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_32_ldst_regoff() {
    assert_eq!(Instruction::STR_32_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_32_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUR_32_ldst_unscaled() {
    assert_eq!(Instruction::LDUR_32_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUR_32_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_32_ldst_immpost() {
    assert_eq!(Instruction::LDR_32_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_32_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDTR_32_ldst_unpriv() {
    assert_eq!(Instruction::LDTR_32_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDTR_32_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_32_ldst_immpre() {
    assert_eq!(Instruction::LDR_32_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_32_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_32_ldst_regoff() {
    assert_eq!(Instruction::LDR_32_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_32_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDURSW_64_ldst_unscaled() {
    assert_eq!(Instruction::LDURSW_64_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDURSW_64_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSW_64_ldst_immpost() {
    assert_eq!(Instruction::LDRSW_64_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSW_64_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDTRSW_64_ldst_unpriv() {
    assert_eq!(Instruction::LDTRSW_64_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDTRSW_64_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSW_64_ldst_immpre() {
    assert_eq!(Instruction::LDRSW_64_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSW_64_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSW_64_ldst_regoff() {
    assert_eq!(Instruction::LDRSW_64_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSW_64_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STUR_S_ldst_unscaled() {
    assert_eq!(Instruction::STUR_S_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STUR_S_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_S_ldst_immpost() {
    assert_eq!(Instruction::STR_S_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_S_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_S_ldst_immpre() {
    assert_eq!(Instruction::STR_S_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_S_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_S_ldst_regoff() {
    assert_eq!(Instruction::STR_S_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_S_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUR_S_ldst_unscaled() {
    assert_eq!(Instruction::LDUR_S_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUR_S_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_S_ldst_immpost() {
    assert_eq!(Instruction::LDR_S_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_S_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_S_ldst_immpre() {
    assert_eq!(Instruction::LDR_S_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_S_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_S_ldst_regoff() {
    assert_eq!(Instruction::LDR_S_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_S_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LD1SB_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::LD1SB_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SB_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SB_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::LDFF1SB_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SB_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1B_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::LD1B_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1B_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1B_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::LDFF1B_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1B_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SH_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::LD1SH_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SH_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SH_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::LDFF1SH_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SH_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1H_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::LD1H_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1H_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1H_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::LDFF1H_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1H_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SH_z_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::LD1SH_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SH_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SH_z_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::LDFF1SH_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SH_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1H_z_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::LD1H_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1H_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1H_z_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::LDFF1H_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1H_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SW_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::LD1SW_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SW_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SW_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::LDFF1SW_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SW_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1W_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::LD1W_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1W_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1W_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::LDFF1W_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1W_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1SW_z_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::LD1SW_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1SW_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1SW_z_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::LDFF1SW_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1SW_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1W_z_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::LD1W_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1W_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1W_z_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::LDFF1W_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1W_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1D_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::LD1D_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1D_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1D_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::LDFF1D_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1D_z_p_bz_d_x32_unscaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LD1D_z_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::LD1D_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LD1D_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDFF1D_z_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::LDFF1D_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::LDFF1D_z_p_bz_d_x32_scaled { xs: 1, Zm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_SYS_CR_systeminstrs() {
    assert_eq!(Instruction::SYS_CR_systeminstrs { op1: 7, CRn: 15, CRm: 15, op2: 7, Rt: 31, }.encode().decode(), 
                Instruction::SYS_CR_systeminstrs { op1: 7, CRn: 15, CRm: 15, op2: 7, Rt: 31, })
}
#[test]
fn roundtrip_SYSL_RC_systeminstrs() {
    assert_eq!(Instruction::SYSL_RC_systeminstrs { op1: 7, CRn: 15, CRm: 15, op2: 7, Rt: 31, }.encode().decode(), 
                Instruction::SYSL_RC_systeminstrs { op1: 7, CRn: 15, CRm: 15, op2: 7, Rt: 31, })
}
#[test]
fn roundtrip_STLUR_64_ldapstl_unscaled() {
    assert_eq!(Instruction::STLUR_64_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLUR_64_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STG_64Spost_ldsttags() {
    assert_eq!(Instruction::STG_64Spost_ldsttags { imm9: 511, Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::STG_64Spost_ldsttags { imm9: 511, Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_STG_64Soffset_ldsttags() {
    assert_eq!(Instruction::STG_64Soffset_ldsttags { imm9: 511, Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::STG_64Soffset_ldsttags { imm9: 511, Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_STG_64Spre_ldsttags() {
    assert_eq!(Instruction::STG_64Spre_ldsttags { imm9: 511, Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::STG_64Spre_ldsttags { imm9: 511, Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_LDAPUR_64_ldapstl_unscaled() {
    assert_eq!(Instruction::LDAPUR_64_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAPUR_64_ldapstl_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDG_64Loffset_ldsttags() {
    assert_eq!(Instruction::LDG_64Loffset_ldsttags { imm9: 511, Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::LDG_64Loffset_ldsttags { imm9: 511, Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_STZG_64Spost_ldsttags() {
    assert_eq!(Instruction::STZG_64Spost_ldsttags { imm9: 511, Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::STZG_64Spost_ldsttags { imm9: 511, Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_STZG_64Soffset_ldsttags() {
    assert_eq!(Instruction::STZG_64Soffset_ldsttags { imm9: 511, Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::STZG_64Soffset_ldsttags { imm9: 511, Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_STZG_64Spre_ldsttags() {
    assert_eq!(Instruction::STZG_64Spre_ldsttags { imm9: 511, Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::STZG_64Spre_ldsttags { imm9: 511, Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_ST2G_64Spost_ldsttags() {
    assert_eq!(Instruction::ST2G_64Spost_ldsttags { imm9: 511, Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::ST2G_64Spost_ldsttags { imm9: 511, Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_ST2G_64Soffset_ldsttags() {
    assert_eq!(Instruction::ST2G_64Soffset_ldsttags { imm9: 511, Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::ST2G_64Soffset_ldsttags { imm9: 511, Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_ST2G_64Spre_ldsttags() {
    assert_eq!(Instruction::ST2G_64Spre_ldsttags { imm9: 511, Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::ST2G_64Spre_ldsttags { imm9: 511, Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_STZ2G_64Spost_ldsttags() {
    assert_eq!(Instruction::STZ2G_64Spost_ldsttags { imm9: 511, Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::STZ2G_64Spost_ldsttags { imm9: 511, Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_STZ2G_64Soffset_ldsttags() {
    assert_eq!(Instruction::STZ2G_64Soffset_ldsttags { imm9: 511, Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::STZ2G_64Soffset_ldsttags { imm9: 511, Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_STZ2G_64Spre_ldsttags() {
    assert_eq!(Instruction::STZ2G_64Spre_ldsttags { imm9: 511, Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::STZ2G_64Spre_ldsttags { imm9: 511, Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_CSINV_64_condsel() {
    assert_eq!(Instruction::CSINV_64_condsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CSINV_64_condsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CSNEG_64_condsel() {
    assert_eq!(Instruction::CSNEG_64_condsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::CSNEG_64_condsel { Rm: 31, cond: 15, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ST1B_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::ST1B_z_p_bz_d_x32_unscaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1B_z_p_bz_d_x32_unscaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1B_z_p_bi() {
    assert_eq!(Instruction::ST1B_z_p_bi { size: 3, imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1B_z_p_bi { size: 3, imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1B_z_p_bz_s_x32_unscaled() {
    assert_eq!(Instruction::ST1B_z_p_bz_s_x32_unscaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1B_z_p_bz_s_x32_unscaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1H_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::ST1H_z_p_bz_d_x32_unscaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1H_z_p_bz_d_x32_unscaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1H_z_p_bi() {
    assert_eq!(Instruction::ST1H_z_p_bi { size: 3, imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1H_z_p_bi { size: 3, imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1H_z_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::ST1H_z_p_bz_d_x32_scaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1H_z_p_bz_d_x32_scaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1H_z_p_bz_s_x32_unscaled() {
    assert_eq!(Instruction::ST1H_z_p_bz_s_x32_unscaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1H_z_p_bz_s_x32_unscaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1H_z_p_bz_s_x32_scaled() {
    assert_eq!(Instruction::ST1H_z_p_bz_s_x32_scaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1H_z_p_bz_s_x32_scaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1W_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::ST1W_z_p_bz_d_x32_unscaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1W_z_p_bz_d_x32_unscaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1W_z_p_bi() {
    assert_eq!(Instruction::ST1W_z_p_bi { size: 3, imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1W_z_p_bi { size: 3, imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1W_z_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::ST1W_z_p_bz_d_x32_scaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1W_z_p_bz_d_x32_scaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1W_z_p_bz_s_x32_unscaled() {
    assert_eq!(Instruction::ST1W_z_p_bz_s_x32_unscaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1W_z_p_bz_s_x32_unscaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1W_z_p_bz_s_x32_scaled() {
    assert_eq!(Instruction::ST1W_z_p_bz_s_x32_scaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1W_z_p_bz_s_x32_scaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_STR_z_bi() {
    assert_eq!(Instruction::STR_z_bi { imm9h: 63, imm9l: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::STR_z_bi { imm9h: 63, imm9l: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1D_z_p_bz_d_x32_unscaled() {
    assert_eq!(Instruction::ST1D_z_p_bz_d_x32_unscaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1D_z_p_bz_d_x32_unscaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1D_z_p_bi() {
    assert_eq!(Instruction::ST1D_z_p_bi { size: 3, imm4: 15, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1D_z_p_bi { size: 3, imm4: 15, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1D_z_p_bz_d_x32_scaled() {
    assert_eq!(Instruction::ST1D_z_p_bz_d_x32_scaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1D_z_p_bz_d_x32_scaled { Zm: 31, xs: 1, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_STUR_64_ldst_unscaled() {
    assert_eq!(Instruction::STUR_64_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STUR_64_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_64_ldst_immpost() {
    assert_eq!(Instruction::STR_64_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_64_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STTR_64_ldst_unpriv() {
    assert_eq!(Instruction::STTR_64_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STTR_64_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_64_ldst_immpre() {
    assert_eq!(Instruction::STR_64_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_64_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_64_ldst_regoff() {
    assert_eq!(Instruction::STR_64_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_64_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUR_64_ldst_unscaled() {
    assert_eq!(Instruction::LDUR_64_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUR_64_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_64_ldst_immpost() {
    assert_eq!(Instruction::LDR_64_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_64_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDTR_64_ldst_unpriv() {
    assert_eq!(Instruction::LDTR_64_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDTR_64_ldst_unpriv { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_64_ldst_immpre() {
    assert_eq!(Instruction::LDR_64_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_64_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_64_ldst_regoff() {
    assert_eq!(Instruction::LDR_64_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_64_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_PRFUM_P_ldst_unscaled() {
    assert_eq!(Instruction::PRFUM_P_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::PRFUM_P_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_PRFM_P_ldst_regoff() {
    assert_eq!(Instruction::PRFM_P_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::PRFM_P_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STUR_D_ldst_unscaled() {
    assert_eq!(Instruction::STUR_D_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STUR_D_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_D_ldst_immpost() {
    assert_eq!(Instruction::STR_D_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_D_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_D_ldst_immpre() {
    assert_eq!(Instruction::STR_D_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_D_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_D_ldst_regoff() {
    assert_eq!(Instruction::STR_D_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_D_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDUR_D_ldst_unscaled() {
    assert_eq!(Instruction::LDUR_D_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDUR_D_ldst_unscaled { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_D_ldst_immpost() {
    assert_eq!(Instruction::LDR_D_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_D_ldst_immpost { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_D_ldst_immpre() {
    assert_eq!(Instruction::LDR_D_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_D_ldst_immpre { imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_D_ldst_regoff() {
    assert_eq!(Instruction::LDR_D_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_D_ldst_regoff { Rm: 31, option: 7, S: 1, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_MLA_z_p_zzz() {
    assert_eq!(Instruction::MLA_z_p_zzz { size: 3, Zm: 31, Pg: 7, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::MLA_z_p_zzz { size: 3, Zm: 31, Pg: 7, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_MLS_z_p_zzz() {
    assert_eq!(Instruction::MLS_z_p_zzz { size: 3, Zm: 31, Pg: 7, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::MLS_z_p_zzz { size: 3, Zm: 31, Pg: 7, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_MAD_z_p_zzz() {
    assert_eq!(Instruction::MAD_z_p_zzz { size: 3, Zm: 31, Pg: 7, Za: 31, Zdn: 31, }.encode().decode(), 
                Instruction::MAD_z_p_zzz { size: 3, Zm: 31, Pg: 7, Za: 31, Zdn: 31, })
}
#[test]
fn roundtrip_MSB_z_p_zzz() {
    assert_eq!(Instruction::MSB_z_p_zzz { size: 3, Zm: 31, Pg: 7, Za: 31, Zdn: 31, }.encode().decode(), 
                Instruction::MSB_z_p_zzz { size: 3, Zm: 31, Pg: 7, Za: 31, Zdn: 31, })
}
#[test]
fn roundtrip_CPY_z_o_i() {
    assert_eq!(Instruction::CPY_z_o_i { size: 3, Pg: 15, sh: 1, imm8: 255, Zd: 31, }.encode().decode(), 
                Instruction::CPY_z_o_i { size: 3, Pg: 15, sh: 1, imm8: 255, Zd: 31, })
}
#[test]
fn roundtrip_MOV_cpy_z_o_i() {
    assert_eq!(Instruction::MOV_cpy_z_o_i { size: 3, Pg: 15, sh: 1, imm8: 255, Zd: 31, }.encode().decode(), 
                Instruction::MOV_cpy_z_o_i { size: 3, Pg: 15, sh: 1, imm8: 255, Zd: 31, })
}
#[test]
fn roundtrip_CPY_z_p_i() {
    assert_eq!(Instruction::CPY_z_p_i { size: 3, Pg: 15, sh: 1, imm8: 255, Zd: 31, }.encode().decode(), 
                Instruction::CPY_z_p_i { size: 3, Pg: 15, sh: 1, imm8: 255, Zd: 31, })
}
#[test]
fn roundtrip_MOV_cpy_z_p_i() {
    assert_eq!(Instruction::MOV_cpy_z_p_i { size: 3, Pg: 15, sh: 1, imm8: 255, Zd: 31, }.encode().decode(), 
                Instruction::MOV_cpy_z_p_i { size: 3, Pg: 15, sh: 1, imm8: 255, Zd: 31, })
}
#[test]
fn roundtrip_STXRB_SR32_ldstexcl() {
    assert_eq!(Instruction::STXRB_SR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STXRB_SR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STLXRB_SR32_ldstexcl() {
    assert_eq!(Instruction::STLXRB_SR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLXRB_SR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDXRB_LR32_ldstexcl() {
    assert_eq!(Instruction::LDXRB_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDXRB_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAXRB_LR32_ldstexcl() {
    assert_eq!(Instruction::LDAXRB_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAXRB_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STLLRB_SL32_ldstexcl() {
    assert_eq!(Instruction::STLLRB_SL32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLLRB_SL32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STLRB_SL32_ldstexcl() {
    assert_eq!(Instruction::STLRB_SL32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLRB_SL32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDLARB_LR32_ldstexcl() {
    assert_eq!(Instruction::LDLARB_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDLARB_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDARB_LR32_ldstexcl() {
    assert_eq!(Instruction::LDARB_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDARB_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SMLAL_asimdelem_L() {
    assert_eq!(Instruction::SMLAL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMLAL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQDMLAL_asimdelem_L() {
    assert_eq!(Instruction::SQDMLAL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQDMLAL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMLSL_asimdelem_L() {
    assert_eq!(Instruction::SMLSL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMLSL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQDMLSL_asimdelem_L() {
    assert_eq!(Instruction::SQDMLSL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQDMLSL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MUL_asimdelem_R() {
    assert_eq!(Instruction::MUL_asimdelem_R { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MUL_asimdelem_R { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMULL_asimdelem_L() {
    assert_eq!(Instruction::SMULL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMULL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQDMULL_asimdelem_L() {
    assert_eq!(Instruction::SQDMULL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQDMULL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQDMULH_asimdelem_R() {
    assert_eq!(Instruction::SQDMULH_asimdelem_R { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQDMULH_asimdelem_R { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQRDMULH_asimdelem_R() {
    assert_eq!(Instruction::SQRDMULH_asimdelem_R { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRDMULH_asimdelem_R { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SDOT_asimdelem_D() {
    assert_eq!(Instruction::SDOT_asimdelem_D { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SDOT_asimdelem_D { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_EXTR_32_extract() {
    assert_eq!(Instruction::EXTR_32_extract { Rm: 31, imms: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::EXTR_32_extract { Rm: 31, imms: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ROR_EXTR_32_extract() {
    assert_eq!(Instruction::ROR_EXTR_32_extract { Rm: 31, imms: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ROR_EXTR_32_extract { Rm: 31, imms: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MADD_32A_dp_3src() {
    assert_eq!(Instruction::MADD_32A_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MADD_32A_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MSUB_32A_dp_3src() {
    assert_eq!(Instruction::MSUB_32A_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MSUB_32A_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMADD_S_floatdp3() {
    assert_eq!(Instruction::FMADD_S_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMADD_S_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMSUB_S_floatdp3() {
    assert_eq!(Instruction::FMSUB_S_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMSUB_S_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FNMADD_S_floatdp3() {
    assert_eq!(Instruction::FNMADD_S_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FNMADD_S_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FNMSUB_S_floatdp3() {
    assert_eq!(Instruction::FNMSUB_S_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FNMSUB_S_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMADD_D_floatdp3() {
    assert_eq!(Instruction::FMADD_D_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMADD_D_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMSUB_D_floatdp3() {
    assert_eq!(Instruction::FMSUB_D_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMSUB_D_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FNMADD_D_floatdp3() {
    assert_eq!(Instruction::FNMADD_D_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FNMADD_D_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FNMSUB_D_floatdp3() {
    assert_eq!(Instruction::FNMSUB_D_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FNMSUB_D_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMADD_H_floatdp3() {
    assert_eq!(Instruction::FMADD_H_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMADD_H_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FMSUB_H_floatdp3() {
    assert_eq!(Instruction::FMSUB_H_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FMSUB_H_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FNMADD_H_floatdp3() {
    assert_eq!(Instruction::FNMADD_H_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FNMADD_H_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FNMSUB_H_floatdp3() {
    assert_eq!(Instruction::FNMSUB_H_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FNMSUB_H_floatdp3 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_EXT_asimdext_only() {
    assert_eq!(Instruction::EXT_asimdext_only { Q: 1, Rm: 31, imm4: 15, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::EXT_asimdext_only { Q: 1, Rm: 31, imm4: 15, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMLA_asimdsame2_C() {
    assert_eq!(Instruction::FCMLA_asimdsame2_C { Q: 1, size: 3, Rm: 31, rot: 3, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMLA_asimdsame2_C { Q: 1, size: 3, Rm: 31, rot: 3, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MLA_asimdelem_R() {
    assert_eq!(Instruction::MLA_asimdelem_R { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MLA_asimdelem_R { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMLAL_asimdelem_L() {
    assert_eq!(Instruction::UMLAL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMLAL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MLS_asimdelem_R() {
    assert_eq!(Instruction::MLS_asimdelem_R { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MLS_asimdelem_R { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMLSL_asimdelem_L() {
    assert_eq!(Instruction::UMLSL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMLSL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMULL_asimdelem_L() {
    assert_eq!(Instruction::UMULL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMULL_asimdelem_L { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQRDMLAH_asimdelem_R() {
    assert_eq!(Instruction::SQRDMLAH_asimdelem_R { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRDMLAH_asimdelem_R { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UDOT_asimdelem_D() {
    assert_eq!(Instruction::UDOT_asimdelem_D { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UDOT_asimdelem_D { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SQRDMLSH_asimdelem_R() {
    assert_eq!(Instruction::SQRDMLSH_asimdelem_R { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SQRDMLSH_asimdelem_R { Q: 1, size: 3, L: 1, M: 1, Rm: 15, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMLA_asimdelem_C_H() {
    assert_eq!(Instruction::FCMLA_asimdelem_C_H { Q: 1, L: 1, M: 1, Rm: 15, rot: 3, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMLA_asimdelem_C_H { Q: 1, L: 1, M: 1, Rm: 15, rot: 3, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMLA_asimdelem_C_S() {
    assert_eq!(Instruction::FCMLA_asimdelem_C_S { Q: 1, L: 1, M: 1, Rm: 15, rot: 3, H: 1, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::FCMLA_asimdelem_C_S { Q: 1, L: 1, M: 1, Rm: 15, rot: 3, H: 1, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_STXRH_SR32_ldstexcl() {
    assert_eq!(Instruction::STXRH_SR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STXRH_SR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STLXRH_SR32_ldstexcl() {
    assert_eq!(Instruction::STLXRH_SR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLXRH_SR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDXRH_LR32_ldstexcl() {
    assert_eq!(Instruction::LDXRH_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDXRH_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAXRH_LR32_ldstexcl() {
    assert_eq!(Instruction::LDAXRH_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAXRH_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STLLRH_SL32_ldstexcl() {
    assert_eq!(Instruction::STLLRH_SL32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLLRH_SL32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STLRH_SL32_ldstexcl() {
    assert_eq!(Instruction::STLRH_SL32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLRH_SL32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDLARH_LR32_ldstexcl() {
    assert_eq!(Instruction::LDLARH_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDLARH_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDARH_LR32_ldstexcl() {
    assert_eq!(Instruction::LDARH_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDARH_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_FMLA_z_p_zzz() {
    assert_eq!(Instruction::FMLA_z_p_zzz { size: 3, Zm: 31, Pg: 7, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::FMLA_z_p_zzz { size: 3, Zm: 31, Pg: 7, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_FMLS_z_p_zzz() {
    assert_eq!(Instruction::FMLS_z_p_zzz { size: 3, Zm: 31, Pg: 7, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::FMLS_z_p_zzz { size: 3, Zm: 31, Pg: 7, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_FNMLA_z_p_zzz() {
    assert_eq!(Instruction::FNMLA_z_p_zzz { size: 3, Zm: 31, Pg: 7, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::FNMLA_z_p_zzz { size: 3, Zm: 31, Pg: 7, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_FNMLS_z_p_zzz() {
    assert_eq!(Instruction::FNMLS_z_p_zzz { size: 3, Zm: 31, Pg: 7, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::FNMLS_z_p_zzz { size: 3, Zm: 31, Pg: 7, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_FMAD_z_p_zzz() {
    assert_eq!(Instruction::FMAD_z_p_zzz { size: 3, Za: 31, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FMAD_z_p_zzz { size: 3, Za: 31, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FMSB_z_p_zzz() {
    assert_eq!(Instruction::FMSB_z_p_zzz { size: 3, Za: 31, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FMSB_z_p_zzz { size: 3, Za: 31, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FNMAD_z_p_zzz() {
    assert_eq!(Instruction::FNMAD_z_p_zzz { size: 3, Za: 31, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FNMAD_z_p_zzz { size: 3, Za: 31, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_FNMSB_z_p_zzz() {
    assert_eq!(Instruction::FNMSB_z_p_zzz { size: 3, Za: 31, Pg: 7, Zm: 31, Zdn: 31, }.encode().decode(), 
                Instruction::FNMSB_z_p_zzz { size: 3, Za: 31, Pg: 7, Zm: 31, Zdn: 31, })
}
#[test]
fn roundtrip_STXR_SR32_ldstexcl() {
    assert_eq!(Instruction::STXR_SR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STXR_SR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STLXR_SR32_ldstexcl() {
    assert_eq!(Instruction::STLXR_SR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLXR_SR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STXP_SP32_ldstexcl() {
    assert_eq!(Instruction::STXP_SP32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STXP_SP32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STLXP_SP32_ldstexcl() {
    assert_eq!(Instruction::STLXP_SP32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLXP_SP32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDXR_LR32_ldstexcl() {
    assert_eq!(Instruction::LDXR_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDXR_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAXR_LR32_ldstexcl() {
    assert_eq!(Instruction::LDAXR_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAXR_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDXP_LP32_ldstexcl() {
    assert_eq!(Instruction::LDXP_LP32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDXP_LP32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAXP_LP32_ldstexcl() {
    assert_eq!(Instruction::LDAXP_LP32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAXP_LP32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STLLR_SL32_ldstexcl() {
    assert_eq!(Instruction::STLLR_SL32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLLR_SL32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STLR_SL32_ldstexcl() {
    assert_eq!(Instruction::STLR_SL32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLR_SL32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDLAR_LR32_ldstexcl() {
    assert_eq!(Instruction::LDLAR_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDLAR_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAR_LR32_ldstexcl() {
    assert_eq!(Instruction::LDAR_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAR_LR32_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_MADD_64A_dp_3src() {
    assert_eq!(Instruction::MADD_64A_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MADD_64A_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MSUB_64A_dp_3src() {
    assert_eq!(Instruction::MSUB_64A_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::MSUB_64A_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMADDL_64WA_dp_3src() {
    assert_eq!(Instruction::SMADDL_64WA_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMADDL_64WA_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMSUBL_64WA_dp_3src() {
    assert_eq!(Instruction::SMSUBL_64WA_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMSUBL_64WA_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SMULH_64_dp_3src() {
    assert_eq!(Instruction::SMULH_64_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SMULH_64_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMADDL_64WA_dp_3src() {
    assert_eq!(Instruction::UMADDL_64WA_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMADDL_64WA_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMSUBL_64WA_dp_3src() {
    assert_eq!(Instruction::UMSUBL_64WA_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMSUBL_64WA_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UMULH_64_dp_3src() {
    assert_eq!(Instruction::UMULH_64_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UMULH_64_dp_3src { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_STXR_SR64_ldstexcl() {
    assert_eq!(Instruction::STXR_SR64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STXR_SR64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STLXR_SR64_ldstexcl() {
    assert_eq!(Instruction::STLXR_SR64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLXR_SR64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STXP_SP64_ldstexcl() {
    assert_eq!(Instruction::STXP_SP64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STXP_SP64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STLXP_SP64_ldstexcl() {
    assert_eq!(Instruction::STLXP_SP64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLXP_SP64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDXR_LR64_ldstexcl() {
    assert_eq!(Instruction::LDXR_LR64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDXR_LR64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAXR_LR64_ldstexcl() {
    assert_eq!(Instruction::LDAXR_LR64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAXR_LR64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDXP_LP64_ldstexcl() {
    assert_eq!(Instruction::LDXP_LP64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDXP_LP64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAXP_LP64_ldstexcl() {
    assert_eq!(Instruction::LDAXP_LP64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAXP_LP64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STLLR_SL64_ldstexcl() {
    assert_eq!(Instruction::STLLR_SL64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLLR_SL64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STLR_SL64_ldstexcl() {
    assert_eq!(Instruction::STLR_SL64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STLR_SL64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDLAR_LR64_ldstexcl() {
    assert_eq!(Instruction::LDLAR_LR64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDLAR_LR64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDAR_LR64_ldstexcl() {
    assert_eq!(Instruction::LDAR_LR64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDAR_LR64_ldstexcl { Rs: 31, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_EOR3_VVV16_crypto4() {
    assert_eq!(Instruction::EOR3_VVV16_crypto4 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::EOR3_VVV16_crypto4 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BCAX_VVV16_crypto4() {
    assert_eq!(Instruction::BCAX_VVV16_crypto4 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BCAX_VVV16_crypto4 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SM3SS1_VVV4_crypto4() {
    assert_eq!(Instruction::SM3SS1_VVV4_crypto4 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SM3SS1_VVV4_crypto4 { Rm: 31, Ra: 31, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MSR_SR_systemmove() {
    assert_eq!(Instruction::MSR_SR_systemmove { o0: 1, op1: 7, CRn: 15, CRm: 15, op2: 7, Rt: 31, }.encode().decode(), 
                Instruction::MSR_SR_systemmove { o0: 1, op1: 7, CRn: 15, CRm: 15, op2: 7, Rt: 31, })
}
#[test]
fn roundtrip_MRS_RS_systemmove() {
    assert_eq!(Instruction::MRS_RS_systemmove { o0: 1, op1: 7, CRn: 15, CRm: 15, op2: 7, Rt: 31, }.encode().decode(), 
                Instruction::MRS_RS_systemmove { o0: 1, op1: 7, CRn: 15, CRm: 15, op2: 7, Rt: 31, })
}
#[test]
fn roundtrip_ST1B_z_p_br() {
    assert_eq!(Instruction::ST1B_z_p_br { size: 3, Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1B_z_p_br { size: 3, Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1H_z_p_br() {
    assert_eq!(Instruction::ST1H_z_p_br { size: 3, Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1H_z_p_br { size: 3, Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_ST1W_z_p_br() {
    assert_eq!(Instruction::ST1W_z_p_br { size: 3, Rm: 31, Pg: 7, Rn: 31, Zt: 31, }.encode().decode(), 
                Instruction::ST1W_z_p_br { size: 3, Rm: 31, Pg: 7, Rn: 31, Zt: 31, })
}
#[test]
fn roundtrip_LDRAA_64_ldst_pac() {
    assert_eq!(Instruction::LDRAA_64_ldst_pac { S: 1, imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRAA_64_ldst_pac { S: 1, imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRAA_64W_ldst_pac() {
    assert_eq!(Instruction::LDRAA_64W_ldst_pac { S: 1, imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRAA_64W_ldst_pac { S: 1, imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRAB_64_ldst_pac() {
    assert_eq!(Instruction::LDRAB_64_ldst_pac { S: 1, imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRAB_64_ldst_pac { S: 1, imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRAB_64W_ldst_pac() {
    assert_eq!(Instruction::LDRAB_64W_ldst_pac { S: 1, imm9: 511, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRAB_64W_ldst_pac { S: 1, imm9: 511, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_MOV_sel_z_p_zz() {
    assert_eq!(Instruction::MOV_sel_z_p_zz { size: 3, Zm: 31, Pg: 15, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::MOV_sel_z_p_zz { size: 3, Zm: 31, Pg: 15, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_SEL_z_p_zz() {
    assert_eq!(Instruction::SEL_z_p_zz { size: 3, Zm: 31, Pg: 15, Zn: 31, Zd: 31, }.encode().decode(), 
                Instruction::SEL_z_p_zz { size: 3, Zm: 31, Pg: 15, Zn: 31, Zd: 31, })
}
#[test]
fn roundtrip_ADD_32_addsub_ext() {
    assert_eq!(Instruction::ADD_32_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADD_32_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_CMPHS_p_p_zi() {
    assert_eq!(Instruction::CMPHS_p_p_zi { size: 3, imm7: 127, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPHS_p_p_zi { size: 3, imm7: 127, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPHI_p_p_zi() {
    assert_eq!(Instruction::CMPHI_p_p_zi { size: 3, imm7: 127, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPHI_p_p_zi { size: 3, imm7: 127, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPLO_p_p_zi() {
    assert_eq!(Instruction::CMPLO_p_p_zi { size: 3, imm7: 127, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPLO_p_p_zi { size: 3, imm7: 127, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_CMPLS_p_p_zi() {
    assert_eq!(Instruction::CMPLS_p_p_zi { size: 3, imm7: 127, Pg: 7, Zn: 31, Pd: 15, }.encode().decode(), 
                Instruction::CMPLS_p_p_zi { size: 3, imm7: 127, Pg: 7, Zn: 31, Pd: 15, })
}
#[test]
fn roundtrip_ADDS_32S_addsub_ext() {
    assert_eq!(Instruction::ADDS_32S_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADDS_32S_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUB_32_addsub_ext() {
    assert_eq!(Instruction::SUB_32_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUB_32_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUBS_32S_addsub_ext() {
    assert_eq!(Instruction::SUBS_32S_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUBS_32S_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADD_64_addsub_ext() {
    assert_eq!(Instruction::ADD_64_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADD_64_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_EXTR_64_extract() {
    assert_eq!(Instruction::EXTR_64_extract { Rm: 31, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::EXTR_64_extract { Rm: 31, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ROR_EXTR_64_extract() {
    assert_eq!(Instruction::ROR_EXTR_64_extract { Rm: 31, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ROR_EXTR_64_extract { Rm: 31, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADDS_64S_addsub_ext() {
    assert_eq!(Instruction::ADDS_64S_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADDS_64S_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUB_64_addsub_ext() {
    assert_eq!(Instruction::SUB_64_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUB_64_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_XAR_VVV2_crypto3_imm6() {
    assert_eq!(Instruction::XAR_VVV2_crypto3_imm6 { Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::XAR_VVV2_crypto3_imm6 { Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUBS_64S_addsub_ext() {
    assert_eq!(Instruction::SUBS_64S_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUBS_64S_addsub_ext { Rm: 31, option: 7, imm3: 7, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BFI_BFM_32M_bitfield() {
    assert_eq!(Instruction::BFI_BFM_32M_bitfield { immr: 63, imms: 63, Rn: 0, Rd: 31, }.encode().decode(), 
                Instruction::BFI_BFM_32M_bitfield { immr: 63, imms: 63, Rn: 0, Rd: 31, })
}
#[test]
fn roundtrip_LSL_UBFM_32M_bitfield() {
    assert_eq!(Instruction::LSL_UBFM_32M_bitfield { immr: 63, imms: 32, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::LSL_UBFM_32M_bitfield { immr: 63, imms: 32, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BFI_BFM_64M_bitfield() {
    assert_eq!(Instruction::BFI_BFM_64M_bitfield { immr: 63, imms: 63, Rn: 0, Rd: 31, }.encode().decode(), 
                Instruction::BFI_BFM_64M_bitfield { immr: 63, imms: 63, Rn: 0, Rd: 31, })
}
#[test]
fn roundtrip_LSL_UBFM_64M_bitfield() {
    assert_eq!(Instruction::LSL_UBFM_64M_bitfield { immr: 63, imms: 32, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::LSL_UBFM_64M_bitfield { immr: 63, imms: 32, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_AND_32_log_imm() {
    assert_eq!(Instruction::AND_32_log_imm { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::AND_32_log_imm { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOV_MOVN_32_movewide() {
    assert_eq!(Instruction::MOV_MOVN_32_movewide { hw: 1, imm16: 65535, Rd: 31, }.encode().decode(), 
                Instruction::MOV_MOVN_32_movewide { hw: 1, imm16: 65535, Rd: 31, })
}
#[test]
fn roundtrip_MOVN_32_movewide() {
    assert_eq!(Instruction::MOVN_32_movewide { hw: 1, imm16: 65535, Rd: 31, }.encode().decode(), 
                Instruction::MOVN_32_movewide { hw: 1, imm16: 65535, Rd: 31, })
}
#[test]
fn roundtrip_SBFIZ_SBFM_32M_bitfield() {
    assert_eq!(Instruction::SBFIZ_SBFM_32M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SBFIZ_SBFM_32M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SBFM_32M_bitfield() {
    assert_eq!(Instruction::SBFM_32M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SBFM_32M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SBFX_SBFM_32M_bitfield() {
    assert_eq!(Instruction::SBFX_SBFM_32M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SBFX_SBFM_32M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_STNP_32_ldstnapair_offs() {
    assert_eq!(Instruction::STNP_32_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STNP_32_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDNP_32_ldstnapair_offs() {
    assert_eq!(Instruction::LDNP_32_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDNP_32_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STP_32_ldstpair_post() {
    assert_eq!(Instruction::STP_32_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STP_32_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDP_32_ldstpair_post() {
    assert_eq!(Instruction::LDP_32_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDP_32_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STP_32_ldstpair_off() {
    assert_eq!(Instruction::STP_32_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STP_32_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDP_32_ldstpair_off() {
    assert_eq!(Instruction::LDP_32_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDP_32_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STP_32_ldstpair_pre() {
    assert_eq!(Instruction::STP_32_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STP_32_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDP_32_ldstpair_pre() {
    assert_eq!(Instruction::LDP_32_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDP_32_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STNP_S_ldstnapair_offs() {
    assert_eq!(Instruction::STNP_S_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STNP_S_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDNP_S_ldstnapair_offs() {
    assert_eq!(Instruction::LDNP_S_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDNP_S_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STP_S_ldstpair_post() {
    assert_eq!(Instruction::STP_S_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STP_S_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDP_S_ldstpair_post() {
    assert_eq!(Instruction::LDP_S_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDP_S_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STP_S_ldstpair_off() {
    assert_eq!(Instruction::STP_S_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STP_S_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDP_S_ldstpair_off() {
    assert_eq!(Instruction::LDP_S_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDP_S_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STP_S_ldstpair_pre() {
    assert_eq!(Instruction::STP_S_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STP_S_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDP_S_ldstpair_pre() {
    assert_eq!(Instruction::LDP_S_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDP_S_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ORR_32_log_imm() {
    assert_eq!(Instruction::ORR_32_log_imm { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ORR_32_log_imm { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BFM_32M_bitfield() {
    assert_eq!(Instruction::BFM_32M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BFM_32M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BFXIL_BFM_32M_bitfield() {
    assert_eq!(Instruction::BFXIL_BFM_32M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BFXIL_BFM_32M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_STRB_32_ldst_pos() {
    assert_eq!(Instruction::STRB_32_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STRB_32_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRB_32_ldst_pos() {
    assert_eq!(Instruction::LDRB_32_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRB_32_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSB_64_ldst_pos() {
    assert_eq!(Instruction::LDRSB_64_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSB_64_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSB_32_ldst_pos() {
    assert_eq!(Instruction::LDRSB_32_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSB_32_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_B_ldst_pos() {
    assert_eq!(Instruction::STR_B_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_B_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_B_ldst_pos() {
    assert_eq!(Instruction::LDR_B_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_B_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_Q_ldst_pos() {
    assert_eq!(Instruction::STR_Q_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_Q_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_Q_ldst_pos() {
    assert_eq!(Instruction::LDR_Q_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_Q_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_EOR_32_log_imm() {
    assert_eq!(Instruction::EOR_32_log_imm { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::EOR_32_log_imm { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOV_MOVZ_32_movewide() {
    assert_eq!(Instruction::MOV_MOVZ_32_movewide { hw: 1, imm16: 65535, Rd: 31, }.encode().decode(), 
                Instruction::MOV_MOVZ_32_movewide { hw: 1, imm16: 65535, Rd: 31, })
}
#[test]
fn roundtrip_MOVZ_32_movewide() {
    assert_eq!(Instruction::MOVZ_32_movewide { hw: 1, imm16: 65535, Rd: 31, }.encode().decode(), 
                Instruction::MOVZ_32_movewide { hw: 1, imm16: 65535, Rd: 31, })
}
#[test]
fn roundtrip_UBFIZ_UBFM_32M_bitfield() {
    assert_eq!(Instruction::UBFIZ_UBFM_32M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UBFIZ_UBFM_32M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UBFM_32M_bitfield() {
    assert_eq!(Instruction::UBFM_32M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UBFM_32M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UBFX_UBFM_32M_bitfield() {
    assert_eq!(Instruction::UBFX_UBFM_32M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UBFX_UBFM_32M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_FCMLA_z_p_zzz() {
    assert_eq!(Instruction::FCMLA_z_p_zzz { size: 3, Zm: 31, rot: 3, Pg: 7, Zn: 31, Zda: 31, }.encode().decode(), 
                Instruction::FCMLA_z_p_zzz { size: 3, Zm: 31, rot: 3, Pg: 7, Zn: 31, Zda: 31, })
}
#[test]
fn roundtrip_STGP_64_ldstpair_post() {
    assert_eq!(Instruction::STGP_64_ldstpair_post { simm7: 127, Xt2: 31, Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::STGP_64_ldstpair_post { simm7: 127, Xt2: 31, Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_LDPSW_64_ldstpair_post() {
    assert_eq!(Instruction::LDPSW_64_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDPSW_64_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STGP_64_ldstpair_off() {
    assert_eq!(Instruction::STGP_64_ldstpair_off { simm7: 127, Xt2: 31, Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::STGP_64_ldstpair_off { simm7: 127, Xt2: 31, Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_LDPSW_64_ldstpair_off() {
    assert_eq!(Instruction::LDPSW_64_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDPSW_64_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STGP_64_ldstpair_pre() {
    assert_eq!(Instruction::STGP_64_ldstpair_pre { simm7: 127, Xt2: 31, Xn: 31, Xt: 31, }.encode().decode(), 
                Instruction::STGP_64_ldstpair_pre { simm7: 127, Xt2: 31, Xn: 31, Xt: 31, })
}
#[test]
fn roundtrip_LDPSW_64_ldstpair_pre() {
    assert_eq!(Instruction::LDPSW_64_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDPSW_64_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STNP_D_ldstnapair_offs() {
    assert_eq!(Instruction::STNP_D_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STNP_D_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDNP_D_ldstnapair_offs() {
    assert_eq!(Instruction::LDNP_D_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDNP_D_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STP_D_ldstpair_post() {
    assert_eq!(Instruction::STP_D_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STP_D_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDP_D_ldstpair_post() {
    assert_eq!(Instruction::LDP_D_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDP_D_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STP_D_ldstpair_off() {
    assert_eq!(Instruction::STP_D_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STP_D_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDP_D_ldstpair_off() {
    assert_eq!(Instruction::LDP_D_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDP_D_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STP_D_ldstpair_pre() {
    assert_eq!(Instruction::STP_D_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STP_D_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDP_D_ldstpair_pre() {
    assert_eq!(Instruction::LDP_D_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDP_D_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ANDS_32S_log_imm() {
    assert_eq!(Instruction::ANDS_32S_log_imm { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ANDS_32S_log_imm { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOVK_32_movewide() {
    assert_eq!(Instruction::MOVK_32_movewide { hw: 1, imm16: 65535, Rd: 31, }.encode().decode(), 
                Instruction::MOVK_32_movewide { hw: 1, imm16: 65535, Rd: 31, })
}
#[test]
fn roundtrip_STRH_32_ldst_pos() {
    assert_eq!(Instruction::STRH_32_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STRH_32_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRH_32_ldst_pos() {
    assert_eq!(Instruction::LDRH_32_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRH_32_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSH_64_ldst_pos() {
    assert_eq!(Instruction::LDRSH_64_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSH_64_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSH_32_ldst_pos() {
    assert_eq!(Instruction::LDRSH_32_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSH_32_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_H_ldst_pos() {
    assert_eq!(Instruction::STR_H_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_H_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_H_ldst_pos() {
    assert_eq!(Instruction::LDR_H_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_H_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_ADDG_64_addsub_immtags() {
    assert_eq!(Instruction::ADDG_64_addsub_immtags { uimm6: 63, op3: 3, uimm4: 15, Xn: 31, Xd: 31, }.encode().decode(), 
                Instruction::ADDG_64_addsub_immtags { uimm6: 63, op3: 3, uimm4: 15, Xn: 31, Xd: 31, })
}
#[test]
fn roundtrip_SBFIZ_SBFM_64M_bitfield() {
    assert_eq!(Instruction::SBFIZ_SBFM_64M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SBFIZ_SBFM_64M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SBFM_64M_bitfield() {
    assert_eq!(Instruction::SBFM_64M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SBFM_64M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SBFX_SBFM_64M_bitfield() {
    assert_eq!(Instruction::SBFX_SBFM_64M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SBFX_SBFM_64M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_STNP_64_ldstnapair_offs() {
    assert_eq!(Instruction::STNP_64_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STNP_64_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDNP_64_ldstnapair_offs() {
    assert_eq!(Instruction::LDNP_64_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDNP_64_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STP_64_ldstpair_post() {
    assert_eq!(Instruction::STP_64_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STP_64_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDP_64_ldstpair_post() {
    assert_eq!(Instruction::LDP_64_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDP_64_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STP_64_ldstpair_off() {
    assert_eq!(Instruction::STP_64_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STP_64_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDP_64_ldstpair_off() {
    assert_eq!(Instruction::LDP_64_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDP_64_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STP_64_ldstpair_pre() {
    assert_eq!(Instruction::STP_64_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STP_64_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDP_64_ldstpair_pre() {
    assert_eq!(Instruction::LDP_64_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDP_64_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STNP_Q_ldstnapair_offs() {
    assert_eq!(Instruction::STNP_Q_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STNP_Q_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDNP_Q_ldstnapair_offs() {
    assert_eq!(Instruction::LDNP_Q_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDNP_Q_ldstnapair_offs { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STP_Q_ldstpair_post() {
    assert_eq!(Instruction::STP_Q_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STP_Q_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDP_Q_ldstpair_post() {
    assert_eq!(Instruction::LDP_Q_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDP_Q_ldstpair_post { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STP_Q_ldstpair_off() {
    assert_eq!(Instruction::STP_Q_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STP_Q_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDP_Q_ldstpair_off() {
    assert_eq!(Instruction::LDP_Q_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDP_Q_ldstpair_off { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STP_Q_ldstpair_pre() {
    assert_eq!(Instruction::STP_Q_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STP_Q_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDP_Q_ldstpair_pre() {
    assert_eq!(Instruction::LDP_Q_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDP_Q_ldstpair_pre { imm7: 127, Rt2: 31, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_BFM_64M_bitfield() {
    assert_eq!(Instruction::BFM_64M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BFM_64M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BFXIL_BFM_64M_bitfield() {
    assert_eq!(Instruction::BFXIL_BFM_64M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BFXIL_BFM_64M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_STR_32_ldst_pos() {
    assert_eq!(Instruction::STR_32_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_32_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_32_ldst_pos() {
    assert_eq!(Instruction::LDR_32_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_32_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDRSW_64_ldst_pos() {
    assert_eq!(Instruction::LDRSW_64_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDRSW_64_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_S_ldst_pos() {
    assert_eq!(Instruction::STR_S_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_S_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_S_ldst_pos() {
    assert_eq!(Instruction::LDR_S_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_S_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_SUBG_64_addsub_immtags() {
    assert_eq!(Instruction::SUBG_64_addsub_immtags { uimm6: 63, op3: 3, uimm4: 15, Xn: 31, Xd: 31, }.encode().decode(), 
                Instruction::SUBG_64_addsub_immtags { uimm6: 63, op3: 3, uimm4: 15, Xn: 31, Xd: 31, })
}
#[test]
fn roundtrip_UBFIZ_UBFM_64M_bitfield() {
    assert_eq!(Instruction::UBFIZ_UBFM_64M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UBFIZ_UBFM_64M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UBFM_64M_bitfield() {
    assert_eq!(Instruction::UBFM_64M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UBFM_64M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_UBFX_UBFM_64M_bitfield() {
    assert_eq!(Instruction::UBFX_UBFM_64M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::UBFX_UBFM_64M_bitfield { immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_STR_64_ldst_pos() {
    assert_eq!(Instruction::STR_64_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_64_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_64_ldst_pos() {
    assert_eq!(Instruction::LDR_64_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_64_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_PRFM_P_ldst_pos() {
    assert_eq!(Instruction::PRFM_P_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::PRFM_P_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_STR_D_ldst_pos() {
    assert_eq!(Instruction::STR_D_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::STR_D_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_LDR_D_ldst_pos() {
    assert_eq!(Instruction::LDR_D_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, }.encode().decode(), 
                Instruction::LDR_D_ldst_pos { imm12: 4095, Rn: 31, Rt: 31, })
}
#[test]
fn roundtrip_AND_32_log_shift() {
    assert_eq!(Instruction::AND_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::AND_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BIC_32_log_shift() {
    assert_eq!(Instruction::BIC_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BIC_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADD_32_addsub_shift() {
    assert_eq!(Instruction::ADD_32_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADD_32_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADD_32_addsub_imm() {
    assert_eq!(Instruction::ADD_32_addsub_imm { sh: 1, imm12: 4095, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADD_32_addsub_imm { sh: 1, imm12: 4095, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ORR_32_log_shift() {
    assert_eq!(Instruction::ORR_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ORR_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ORN_32_log_shift() {
    assert_eq!(Instruction::ORN_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ORN_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADDS_32_addsub_shift() {
    assert_eq!(Instruction::ADDS_32_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADDS_32_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADDS_32S_addsub_imm() {
    assert_eq!(Instruction::ADDS_32S_addsub_imm { sh: 1, imm12: 4095, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADDS_32S_addsub_imm { sh: 1, imm12: 4095, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_EOR_32_log_shift() {
    assert_eq!(Instruction::EOR_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::EOR_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_EON_32_log_shift() {
    assert_eq!(Instruction::EON_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::EON_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUB_32_addsub_shift() {
    assert_eq!(Instruction::SUB_32_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUB_32_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUB_32_addsub_imm() {
    assert_eq!(Instruction::SUB_32_addsub_imm { sh: 1, imm12: 4095, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUB_32_addsub_imm { sh: 1, imm12: 4095, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_B_only_condbranch() {
    assert_eq!(Instruction::B_only_condbranch { imm19: 524287, cond: 15, }.encode().decode(), 
                Instruction::B_only_condbranch { imm19: 524287, cond: 15, })
}
#[test]
fn roundtrip_ANDS_32_log_shift() {
    assert_eq!(Instruction::ANDS_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ANDS_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BICS_32_log_shift() {
    assert_eq!(Instruction::BICS_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BICS_32_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUBS_32_addsub_shift() {
    assert_eq!(Instruction::SUBS_32_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUBS_32_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUBS_32S_addsub_imm() {
    assert_eq!(Instruction::SUBS_32S_addsub_imm { sh: 1, imm12: 4095, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUBS_32S_addsub_imm { sh: 1, imm12: 4095, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_AND_64_log_shift() {
    assert_eq!(Instruction::AND_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::AND_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BIC_64_log_shift() {
    assert_eq!(Instruction::BIC_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BIC_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADD_64_addsub_shift() {
    assert_eq!(Instruction::ADD_64_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADD_64_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADD_64_addsub_imm() {
    assert_eq!(Instruction::ADD_64_addsub_imm { sh: 1, imm12: 4095, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADD_64_addsub_imm { sh: 1, imm12: 4095, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_AND_64_log_imm() {
    assert_eq!(Instruction::AND_64_log_imm { N: 1, immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::AND_64_log_imm { N: 1, immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOV_MOVN_64_movewide() {
    assert_eq!(Instruction::MOV_MOVN_64_movewide { hw: 3, imm16: 65535, Rd: 31, }.encode().decode(), 
                Instruction::MOV_MOVN_64_movewide { hw: 3, imm16: 65535, Rd: 31, })
}
#[test]
fn roundtrip_MOVN_64_movewide() {
    assert_eq!(Instruction::MOVN_64_movewide { hw: 3, imm16: 65535, Rd: 31, }.encode().decode(), 
                Instruction::MOVN_64_movewide { hw: 3, imm16: 65535, Rd: 31, })
}
#[test]
fn roundtrip_ORR_64_log_shift() {
    assert_eq!(Instruction::ORR_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ORR_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ORN_64_log_shift() {
    assert_eq!(Instruction::ORN_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ORN_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADDS_64_addsub_shift() {
    assert_eq!(Instruction::ADDS_64_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADDS_64_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ADDS_64S_addsub_imm() {
    assert_eq!(Instruction::ADDS_64S_addsub_imm { sh: 1, imm12: 4095, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ADDS_64S_addsub_imm { sh: 1, imm12: 4095, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ORR_64_log_imm() {
    assert_eq!(Instruction::ORR_64_log_imm { N: 1, immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ORR_64_log_imm { N: 1, immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_EOR_64_log_shift() {
    assert_eq!(Instruction::EOR_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::EOR_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_EON_64_log_shift() {
    assert_eq!(Instruction::EON_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::EON_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUB_64_addsub_shift() {
    assert_eq!(Instruction::SUB_64_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUB_64_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUB_64_addsub_imm() {
    assert_eq!(Instruction::SUB_64_addsub_imm { sh: 1, imm12: 4095, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUB_64_addsub_imm { sh: 1, imm12: 4095, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_EOR_64_log_imm() {
    assert_eq!(Instruction::EOR_64_log_imm { N: 1, immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::EOR_64_log_imm { N: 1, immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOV_MOVZ_64_movewide() {
    assert_eq!(Instruction::MOV_MOVZ_64_movewide { hw: 3, imm16: 65535, Rd: 31, }.encode().decode(), 
                Instruction::MOV_MOVZ_64_movewide { hw: 3, imm16: 65535, Rd: 31, })
}
#[test]
fn roundtrip_MOVZ_64_movewide() {
    assert_eq!(Instruction::MOVZ_64_movewide { hw: 3, imm16: 65535, Rd: 31, }.encode().decode(), 
                Instruction::MOVZ_64_movewide { hw: 3, imm16: 65535, Rd: 31, })
}
#[test]
fn roundtrip_ANDS_64_log_shift() {
    assert_eq!(Instruction::ANDS_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ANDS_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_BICS_64_log_shift() {
    assert_eq!(Instruction::BICS_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::BICS_64_log_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUBS_64_addsub_shift() {
    assert_eq!(Instruction::SUBS_64_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUBS_64_addsub_shift { shift: 3, Rm: 31, imm6: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_SUBS_64S_addsub_imm() {
    assert_eq!(Instruction::SUBS_64S_addsub_imm { sh: 1, imm12: 4095, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::SUBS_64S_addsub_imm { sh: 1, imm12: 4095, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_ANDS_64S_log_imm() {
    assert_eq!(Instruction::ANDS_64S_log_imm { N: 1, immr: 63, imms: 63, Rn: 31, Rd: 31, }.encode().decode(), 
                Instruction::ANDS_64S_log_imm { N: 1, immr: 63, imms: 63, Rn: 31, Rd: 31, })
}
#[test]
fn roundtrip_MOVK_64_movewide() {
    assert_eq!(Instruction::MOVK_64_movewide { hw: 3, imm16: 65535, Rd: 31, }.encode().decode(), 
                Instruction::MOVK_64_movewide { hw: 3, imm16: 65535, Rd: 31, })
}
#[test]
fn roundtrip_LDR_32_loadlit() {
    assert_eq!(Instruction::LDR_32_loadlit { imm19: 524287, Rt: 31, }.encode().decode(), 
                Instruction::LDR_32_loadlit { imm19: 524287, Rt: 31, })
}
#[test]
fn roundtrip_LDR_S_loadlit() {
    assert_eq!(Instruction::LDR_S_loadlit { imm19: 524287, Rt: 31, }.encode().decode(), 
                Instruction::LDR_S_loadlit { imm19: 524287, Rt: 31, })
}
#[test]
fn roundtrip_CBZ_32_compbranch() {
    assert_eq!(Instruction::CBZ_32_compbranch { imm19: 524287, Rt: 31, }.encode().decode(), 
                Instruction::CBZ_32_compbranch { imm19: 524287, Rt: 31, })
}
#[test]
fn roundtrip_CBNZ_32_compbranch() {
    assert_eq!(Instruction::CBNZ_32_compbranch { imm19: 524287, Rt: 31, }.encode().decode(), 
                Instruction::CBNZ_32_compbranch { imm19: 524287, Rt: 31, })
}
#[test]
fn roundtrip_LDR_64_loadlit() {
    assert_eq!(Instruction::LDR_64_loadlit { imm19: 524287, Rt: 31, }.encode().decode(), 
                Instruction::LDR_64_loadlit { imm19: 524287, Rt: 31, })
}
#[test]
fn roundtrip_LDR_D_loadlit() {
    assert_eq!(Instruction::LDR_D_loadlit { imm19: 524287, Rt: 31, }.encode().decode(), 
                Instruction::LDR_D_loadlit { imm19: 524287, Rt: 31, })
}
#[test]
fn roundtrip_LDRSW_64_loadlit() {
    assert_eq!(Instruction::LDRSW_64_loadlit { imm19: 524287, Rt: 31, }.encode().decode(), 
                Instruction::LDRSW_64_loadlit { imm19: 524287, Rt: 31, })
}
#[test]
fn roundtrip_LDR_Q_loadlit() {
    assert_eq!(Instruction::LDR_Q_loadlit { imm19: 524287, Rt: 31, }.encode().decode(), 
                Instruction::LDR_Q_loadlit { imm19: 524287, Rt: 31, })
}
#[test]
fn roundtrip_CBZ_64_compbranch() {
    assert_eq!(Instruction::CBZ_64_compbranch { imm19: 524287, Rt: 31, }.encode().decode(), 
                Instruction::CBZ_64_compbranch { imm19: 524287, Rt: 31, })
}
#[test]
fn roundtrip_CBNZ_64_compbranch() {
    assert_eq!(Instruction::CBNZ_64_compbranch { imm19: 524287, Rt: 31, }.encode().decode(), 
                Instruction::CBNZ_64_compbranch { imm19: 524287, Rt: 31, })
}
#[test]
fn roundtrip_PRFM_P_loadlit() {
    assert_eq!(Instruction::PRFM_P_loadlit { imm19: 524287, Rt: 31, }.encode().decode(), 
                Instruction::PRFM_P_loadlit { imm19: 524287, Rt: 31, })
}
#[test]
fn roundtrip_TBZ_only_testbranch() {
    assert_eq!(Instruction::TBZ_only_testbranch { b5: 1, b40: 31, imm14: 16383, Rt: 31, }.encode().decode(), 
                Instruction::TBZ_only_testbranch { b5: 1, b40: 31, imm14: 16383, Rt: 31, })
}
#[test]
fn roundtrip_TBNZ_only_testbranch() {
    assert_eq!(Instruction::TBNZ_only_testbranch { b5: 1, b40: 31, imm14: 16383, Rt: 31, }.encode().decode(), 
                Instruction::TBNZ_only_testbranch { b5: 1, b40: 31, imm14: 16383, Rt: 31, })
}
#[test]
fn roundtrip_ADR_only_pcreladdr() {
    assert_eq!(Instruction::ADR_only_pcreladdr { immlo: 3, immhi: 524287, Rd: 31, }.encode().decode(), 
                Instruction::ADR_only_pcreladdr { immlo: 3, immhi: 524287, Rd: 31, })
}
#[test]
fn roundtrip_B_only_branch_imm() {
    assert_eq!(Instruction::B_only_branch_imm { imm26: 67108863, }.encode().decode(), 
                Instruction::B_only_branch_imm { imm26: 67108863, })
}
#[test]
fn roundtrip_ADRP_only_pcreladdr() {
    assert_eq!(Instruction::ADRP_only_pcreladdr { immlo: 3, immhi: 524287, Rd: 31, }.encode().decode(), 
                Instruction::ADRP_only_pcreladdr { immlo: 3, immhi: 524287, Rd: 31, })
}
#[test]
fn roundtrip_BL_only_branch_imm() {
    assert_eq!(Instruction::BL_only_branch_imm { imm26: 67108863, }.encode().decode(), 
                Instruction::BL_only_branch_imm { imm26: 67108863, })
}
