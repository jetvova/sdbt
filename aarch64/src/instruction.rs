// @generated
// This file was automatically generated by extracting instruction names, parameters, and bit
// patterns from the Armv8-A 2020-12, A64 Instruction Set Architecture documentation provided 
// in XML format. I believe this consitutes fair use for research and educational purposes.
// https://developer.arm.com/architectures/cpu-architecture/a-profile/exploration-tools

// Please note that the A64 instruction set is property and copyrighted material of Arm Ltd.

#![rustfmt::skip]

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub enum Instruction {
    SETFFR_f,
    NOP_HI_hints,
    YIELD_HI_hints,
    WFE_HI_hints,
    WFI_HI_hints,
    SEV_HI_hints,
    SEVL_HI_hints,
    DGH_HI_hints,
    XPACLRI_HI_hints,
    PACIA1716_HI_hints,
    PACIB1716_HI_hints,
    AUTIA1716_HI_hints,
    AUTIB1716_HI_hints,
    ESB_HI_hints,
    PSB_HC_hints,
    TSB_HC_hints,
    CSDB_HI_hints,
    PACIAZ_HI_hints,
    PACIASP_HI_hints,
    PACIBZ_HI_hints,
    PACIBSP_HI_hints,
    AUTIAZ_HI_hints,
    AUTIASP_HI_hints,
    AUTIBZ_HI_hints,
    AUTIBSP_HI_hints,
    SSBB_only_barriers,
    PSSBB_only_barriers,
    RETAA_64E_branch_reg,
    RETAB_64E_branch_reg,
    ERET_64E_branch_reg,
    ERETAA_64E_branch_reg,
    ERETAB_64E_branch_reg,
    DRPS_64E_branch_reg,
    PFALSE_p,
    RDFFR_p_f,
    WFET_only_systeminstrswithreg,
    WFIT_only_systeminstrswithreg,
    CFP_SYS_CR_systeminstrs,
    DVP_SYS_CR_systeminstrs,
    CPP_SYS_CR_systeminstrs,
    PACIZA_64Z_dp_1src,
    PACIZB_64Z_dp_1src,
    PACDZA_64Z_dp_1src,
    PACDZB_64Z_dp_1src,
    AUTIZA_64Z_dp_1src,
    AUTIZB_64Z_dp_1src,
    AUTDZA_64Z_dp_1src,
    AUTDZB_64Z_dp_1src,
    XPACI_64Z_dp_1src,
    XPACD_64Z_dp_1src,
    BTI_HB_hints,
    WRFFR_f_p,
    PUNPKLO_p_p,
    PUNPKHI_p_p,
    RDFFR_p_p_f,
    PFIRST_p_p_p,
    RDFFRS_p_p_f,
    SETF8_only_setf,
    SETF16_only_setf,
    BR_64_branch_reg,
    BRAAZ_64_branch_reg,
    BRABZ_64_branch_reg,
    BLR_64_branch_reg,
    BLRAAZ_64_branch_reg,
    BLRABZ_64_branch_reg,
    RET_64R_branch_reg,
    MOVPRFX_z_z,
    MOV_ADD_32_addsub_imm,
    SXTB_SBFM_32M_bitfield,
    SXTH_SBFM_32M_bitfield,
    FCVTNS_32S_float2int,
    FMOV_S_floatdp1,
    FABS_S_floatdp1,
    FCVTNU_32S_float2int,
    FNEG_S_floatdp1,
    FSQRT_S_floatdp1,
    SCVTF_S32_float2int,
    FCVT_DS_floatdp1,
    UCVTF_S32_float2int,
    FCVT_HS_floatdp1,
    FCVTAS_32S_float2int,
    FRINTN_S_floatdp1,
    FRINTP_S_floatdp1,
    FCVTAU_32S_float2int,
    FRINTM_S_floatdp1,
    FRINTZ_S_floatdp1,
    FMOV_32S_float2int,
    FRINTA_S_floatdp1,
    FMOV_S32_float2int,
    FRINTX_S_floatdp1,
    FRINTI_S_floatdp1,
    FCVTPS_32S_float2int,
    FRINT32Z_S_floatdp1,
    FRINT32X_S_floatdp1,
    FCVTPU_32S_float2int,
    FRINT64Z_S_floatdp1,
    FRINT64X_S_floatdp1,
    FCVTMS_32S_float2int,
    FCVTMU_32S_float2int,
    FCVTZS_32S_float2int,
    FCVTZU_32S_float2int,
    FCVTNS_32D_float2int,
    FMOV_D_floatdp1,
    FABS_D_floatdp1,
    FCVTNU_32D_float2int,
    FNEG_D_floatdp1,
    FSQRT_D_floatdp1,
    SCVTF_D32_float2int,
    FCVT_SD_floatdp1,
    UCVTF_D32_float2int,
    BFCVT_BS_floatdp1,
    FCVT_HD_floatdp1,
    FCVTAS_32D_float2int,
    FRINTN_D_floatdp1,
    FRINTP_D_floatdp1,
    FCVTAU_32D_float2int,
    FRINTM_D_floatdp1,
    FRINTZ_D_floatdp1,
    FRINTA_D_floatdp1,
    FRINTX_D_floatdp1,
    FRINTI_D_floatdp1,
    FCVTPS_32D_float2int,
    FRINT32Z_D_floatdp1,
    FRINT32X_D_floatdp1,
    FCVTPU_32D_float2int,
    FRINT64Z_D_floatdp1,
    FRINT64X_D_floatdp1,
    FCVTMS_32D_float2int,
    FCVTMU_32D_float2int,
    FCVTZS_32D_float2int,
    FCVTZU_32D_float2int,
    FJCVTZS_32D_float2int,
    FCVTNS_32H_float2int,
    FMOV_H_floatdp1,
    FABS_H_floatdp1,
    FCVTNU_32H_float2int,
    FNEG_H_floatdp1,
    FSQRT_H_floatdp1,
    SCVTF_H32_float2int,
    FCVT_SH_floatdp1,
    FCVT_DH_floatdp1,
    UCVTF_H32_float2int,
    FCVTAS_32H_float2int,
    FRINTN_H_floatdp1,
    FRINTP_H_floatdp1,
    FCVTAU_32H_float2int,
    FRINTM_H_floatdp1,
    FRINTZ_H_floatdp1,
    FMOV_32H_float2int,
    FRINTA_H_floatdp1,
    FMOV_H32_float2int,
    FRINTX_H_floatdp1,
    FRINTI_H_floatdp1,
    FCVTPS_32H_float2int,
    FCVTPU_32H_float2int,
    FCVTMS_32H_float2int,
    FCVTMU_32H_float2int,
    FCVTZS_32H_float2int,
    FCVTZU_32H_float2int,
    AESE_B_cryptoaes,
    AESD_B_cryptoaes,
    AESMC_B_cryptoaes,
    AESIMC_B_cryptoaes,
    UXTB_UBFM_32M_bitfield,
    UXTH_UBFM_32M_bitfield,
    RBIT_32_dp_1src,
    REV16_32_dp_1src,
    REV_32_dp_1src,
    CLZ_32_dp_1src,
    CLS_32_dp_1src,
    SHA1H_SS_cryptosha2,
    SHA1SU1_VV_cryptosha2,
    SHA256SU0_VV_cryptosha2,
    FCVTNS_asisdmiscfp16_R,
    FCVTMS_asisdmiscfp16_R,
    FCVTAS_asisdmiscfp16_R,
    SCVTF_asisdmiscfp16_R,
    FCMGT_asisdmiscfp16_FZ,
    FCMEQ_asisdmiscfp16_FZ,
    FCMLT_asisdmiscfp16_FZ,
    FCVTPS_asisdmiscfp16_R,
    FCVTZS_asisdmiscfp16_R,
    FRECPE_asisdmiscfp16_R,
    FRECPX_asisdmiscfp16_R,
    FCVTNU_asisdmiscfp16_R,
    FCVTMU_asisdmiscfp16_R,
    FCVTAU_asisdmiscfp16_R,
    UCVTF_asisdmiscfp16_R,
    FCMGE_asisdmiscfp16_FZ,
    FCMLE_asisdmiscfp16_FZ,
    FCVTPU_asisdmiscfp16_R,
    FCVTZU_asisdmiscfp16_R,
    FRSQRTE_asisdmiscfp16_R,
    MOV_ADD_64_addsub_imm,
    SXTB_SBFM_64M_bitfield,
    SXTH_SBFM_64M_bitfield,
    SXTW_SBFM_64M_bitfield,
    FCVTNS_64S_float2int,
    FCVTNU_64S_float2int,
    SCVTF_S64_float2int,
    UCVTF_S64_float2int,
    FCVTAS_64S_float2int,
    FCVTAU_64S_float2int,
    FCVTPS_64S_float2int,
    FCVTPU_64S_float2int,
    FCVTMS_64S_float2int,
    FCVTMU_64S_float2int,
    FCVTZS_64S_float2int,
    FCVTZU_64S_float2int,
    FCVTNS_64D_float2int,
    FCVTNU_64D_float2int,
    SCVTF_D64_float2int,
    UCVTF_D64_float2int,
    FCVTAS_64D_float2int,
    FCVTAU_64D_float2int,
    FMOV_64D_float2int,
    FMOV_D64_float2int,
    FCVTPS_64D_float2int,
    FCVTPU_64D_float2int,
    FCVTMS_64D_float2int,
    FCVTMU_64D_float2int,
    FCVTZS_64D_float2int,
    FCVTZU_64D_float2int,
    FMOV_64VX_float2int,
    FMOV_V64I_float2int,
    FCVTNS_64H_float2int,
    FCVTNU_64H_float2int,
    SCVTF_H64_float2int,
    UCVTF_H64_float2int,
    FCVTAS_64H_float2int,
    FCVTAU_64H_float2int,
    FMOV_64H_float2int,
    FMOV_H64_float2int,
    FCVTPS_64H_float2int,
    FCVTPU_64H_float2int,
    FCVTMS_64H_float2int,
    FCVTMU_64H_float2int,
    FCVTZS_64H_float2int,
    FCVTZU_64H_float2int,
    SHA512SU0_VV2_cryptosha512_2,
    SM4E_VV4_cryptosha512_2,
    BRAA_64P_branch_reg,
    BRAB_64P_branch_reg,
    BLRAA_64P_branch_reg,
    BLRAB_64P_branch_reg,
    STZGM_64bulk_ldsttags,
    STGM_64bulk_ldsttags,
    LDGM_64bulk_ldsttags,
    RBIT_64_dp_1src,
    REV16_64_dp_1src,
    REV32_64_dp_1src,
    REV_64_dp_1src,
    REV64_REV_64_dp_1src,
    CLZ_64_dp_1src,
    CLS_64_dp_1src,
    PACIA_64P_dp_1src,
    PACIB_64P_dp_1src,
    PACDA_64P_dp_1src,
    PACDB_64P_dp_1src,
    AUTIA_64P_dp_1src,
    AUTIB_64P_dp_1src,
    AUTDA_64P_dp_1src,
    AUTDB_64P_dp_1src,
    ST64B_64L_memop,
    LD64B_64L_memop,
    RDVL_r_i,
    DSB_BOn_barriers,
    CFINV_M_pstate,
    XAFLAG_M_pstate,
    AXFLAG_M_pstate,
    CLREX_BN_barriers,
    DSB_BO_barriers,
    DMB_BO_barriers,
    ISB_BI_barriers,
    SB_only_barriers,
    HINT_HM_hints,
    BFCVTNT_z_p_z_s2bf,
    SCVTF_z_p_z_h2fp16,
    UCVTF_z_p_z_h2fp16,
    SCVTF_z_p_z_w2fp16,
    UCVTF_z_p_z_w2fp16,
    SCVTF_z_p_z_x2fp16,
    UCVTF_z_p_z_x2fp16,
    FCVTZS_z_p_z_fp162h,
    FCVTZU_z_p_z_fp162h,
    FCVTZS_z_p_z_fp162w,
    FCVTZU_z_p_z_fp162w,
    FCVTZS_z_p_z_fp162x,
    FCVTZU_z_p_z_fp162x,
    FCVT_z_p_z_s2h,
    FCVT_z_p_z_h2s,
    BFCVT_z_p_z_s2bf,
    SCVTF_z_p_z_w2s,
    UCVTF_z_p_z_w2s,
    FCVTZS_z_p_z_s2w,
    FCVTZU_z_p_z_s2w,
    FCVT_z_p_z_d2h,
    FCVT_z_p_z_h2d,
    FCVT_z_p_z_d2s,
    FCVT_z_p_z_s2d,
    SCVTF_z_p_z_w2d,
    UCVTF_z_p_z_w2d,
    SCVTF_z_p_z_x2s,
    UCVTF_z_p_z_x2s,
    SCVTF_z_p_z_x2d,
    UCVTF_z_p_z_x2d,
    FCVTZS_z_p_z_d2w,
    FCVTZU_z_p_z_d2w,
    FCVTZS_z_p_z_s2x,
    FCVTZU_z_p_z_s2x,
    FCVTZS_z_p_z_d2x,
    FCVTZU_z_p_z_d2x,
    PTEST_p_p,
    BRKN_p_p_pp,
    BRKAS_p_p_p_z,
    BRKNS_p_p_pp,
    BRKBS_p_p_p_z,
    BRKA_p_p_p,
    BRKB_p_p_p,
    CSET_CSINC_32_condsel,
    CSETM_CSINV_32_condsel,
    CSET_CSINC_64_condsel,
    CSETM_CSINV_64_condsel,
    UDF_only_perm_undef,
    SCVTF_S32_float2fix,
    UCVTF_S32_float2fix,
    FCVTZS_32S_float2fix,
    FCVTZU_32S_float2fix,
    SCVTF_D32_float2fix,
    UCVTF_D32_float2fix,
    FCVTZS_32D_float2fix,
    FCVTZU_32D_float2fix,
    SCVTF_H32_float2fix,
    UCVTF_H32_float2fix,
    FCVTZS_32H_float2fix,
    FCVTZU_32H_float2fix,
    SCVTF_S64_float2fix,
    UCVTF_S64_float2fix,
    FCVTZS_64S_float2fix,
    FCVTZU_64S_float2fix,
    SCVTF_D64_float2fix,
    UCVTF_D64_float2fix,
    FCVTZS_64D_float2fix,
    FCVTZU_64D_float2fix,
    SCVTF_H64_float2fix,
    UCVTF_H64_float2fix,
    FCVTZS_64H_float2fix,
    FCVTZU_64H_float2fix,
    ORN_orr_z_zi,
    ORR_z_zi,
    EON_eor_z_zi,
    EOR_z_zi,
    AND_z_zi,
    BIC_and_z_zi,
    DUPM_z_i,
    MOV_dupm_z_i,
    AT_SYS_CR_systeminstrs,
    MOVI_asimdimm_D_ds,
    MOVI_asimdimm_D2_d,
    FMOV_asimdimm_D2_d,
    MSR_SI_pstate,
    DC_SYS_CR_systeminstrs,
    IC_SYS_CR_systeminstrs,
    TLBI_SYS_CR_systeminstrs,
    SYS_CR_systeminstrs,
    SYSL_RC_systeminstrs,
    CNTB_r_s,
    SQINCB_r_rs_sx,
    UQINCB_r_rs_uw,
    SQDECB_r_rs_sx,
    UQDECB_r_rs_uw,
    INCB_r_rs,
    DECB_r_rs,
    SQINCB_r_rs_x,
    UQINCB_r_rs_x,
    SQDECB_r_rs_x,
    UQDECB_r_rs_x,
    SQINCH_z_zs,
    UQINCH_z_zs,
    SQDECH_z_zs,
    UQDECH_z_zs,
    CNTH_r_s,
    SQINCH_r_rs_sx,
    UQINCH_r_rs_uw,
    SQDECH_r_rs_sx,
    UQDECH_r_rs_uw,
    INCH_z_zs,
    DECH_z_zs,
    INCH_r_rs,
    DECH_r_rs,
    SQINCH_r_rs_x,
    UQINCH_r_rs_x,
    SQDECH_r_rs_x,
    UQDECH_r_rs_x,
    SQINCW_z_zs,
    UQINCW_z_zs,
    SQDECW_z_zs,
    UQDECW_z_zs,
    CNTW_r_s,
    SQINCW_r_rs_sx,
    UQINCW_r_rs_uw,
    SQDECW_r_rs_sx,
    UQDECW_r_rs_uw,
    INCW_z_zs,
    DECW_z_zs,
    INCW_r_rs,
    DECW_r_rs,
    SQINCW_r_rs_x,
    UQINCW_r_rs_x,
    SQDECW_r_rs_x,
    UQDECW_r_rs_x,
    SQINCD_z_zs,
    UQINCD_z_zs,
    SQDECD_z_zs,
    UQDECD_z_zs,
    CNTD_r_s,
    SQINCD_r_rs_sx,
    UQINCD_r_rs_uw,
    SQDECD_r_rs_sx,
    UQDECD_r_rs_uw,
    INCD_z_zs,
    DECD_z_zs,
    INCD_r_rs,
    DECD_r_rs,
    SQINCD_r_rs_x,
    UQINCD_r_rs_x,
    SQDECD_r_rs_x,
    UQDECD_r_rs_x,
    LD1RQB_z_p_bi_u8,
    LD1B_z_p_bi_u8,
    LDNT1B_z_p_bi_contiguous,
    LDNF1B_z_p_bi_u8,
    LD1ROB_z_p_bi_u8,
    LD1B_z_p_bi_u16,
    LD2B_z_p_bi_contiguous,
    LDNF1B_z_p_bi_u16,
    LD1B_z_p_bi_u32,
    LD3B_z_p_bi_contiguous,
    LDNF1B_z_p_bi_u32,
    LD1B_z_p_bi_u64,
    LD4B_z_p_bi_contiguous,
    LDNF1B_z_p_bi_u64,
    LD1RQH_z_p_bi_u16,
    LD1SW_z_p_bi_s64,
    LDNT1H_z_p_bi_contiguous,
    LDNF1SW_z_p_bi_s64,
    LD1ROH_z_p_bi_u16,
    LD1H_z_p_bi_u16,
    LD2H_z_p_bi_contiguous,
    LDNF1H_z_p_bi_u16,
    LD1H_z_p_bi_u32,
    LD3H_z_p_bi_contiguous,
    LDNF1H_z_p_bi_u32,
    LD1H_z_p_bi_u64,
    LD4H_z_p_bi_contiguous,
    LDNF1H_z_p_bi_u64,
    LD1RQW_z_p_bi_u32,
    LD1SH_z_p_bi_s64,
    LDNT1W_z_p_bi_contiguous,
    LDNF1SH_z_p_bi_s64,
    LD1ROW_z_p_bi_u32,
    LD1SH_z_p_bi_s32,
    LD2W_z_p_bi_contiguous,
    LDNF1SH_z_p_bi_s32,
    LD1W_z_p_bi_u32,
    LD3W_z_p_bi_contiguous,
    LDNF1W_z_p_bi_u32,
    LD1W_z_p_bi_u64,
    LD4W_z_p_bi_contiguous,
    LDNF1W_z_p_bi_u64,
    LD1RQD_z_p_bi_u64,
    LD1SB_z_p_bi_s64,
    LDNT1D_z_p_bi_contiguous,
    LDNF1SB_z_p_bi_s64,
    LD1ROD_z_p_bi_u64,
    LD1SB_z_p_bi_s32,
    LD2D_z_p_bi_contiguous,
    LDNF1SB_z_p_bi_s32,
    LD1SB_z_p_bi_s16,
    LD3D_z_p_bi_contiguous,
    LDNF1SB_z_p_bi_s16,
    LD1D_z_p_bi_u64,
    LD4D_z_p_bi_contiguous,
    LDNF1D_z_p_bi_u64,
    STNT1B_z_p_bi_contiguous,
    ST2B_z_p_bi_contiguous,
    ST3B_z_p_bi_contiguous,
    ST4B_z_p_bi_contiguous,
    STNT1H_z_p_bi_contiguous,
    ST2H_z_p_bi_contiguous,
    ST3H_z_p_bi_contiguous,
    ST4H_z_p_bi_contiguous,
    STNT1W_z_p_bi_contiguous,
    ST2W_z_p_bi_contiguous,
    ST3W_z_p_bi_contiguous,
    ST4W_z_p_bi_contiguous,
    STNT1D_z_p_bi_contiguous,
    ST2D_z_p_bi_contiguous,
    ST3D_z_p_bi_contiguous,
    ST4D_z_p_bi_contiguous,
    AND_p_p_pp_z,
    MOV_and_p_p_pp_z,
    BIC_p_p_pp_z,
    EOR_p_p_pp_z,
    NOT_eor_p_p_pp_z,
    MOV_sel_p_p_pp,
    SEL_p_p_pp,
    BRKPA_p_p_pp,
    BRKPB_p_p_pp,
    ANDS_p_p_pp_z,
    MOVS_ands_p_p_pp_z,
    BICS_p_p_pp_z,
    EORS_p_p_pp_z,
    NOTS_eors_p_p_pp_z,
    BRKPAS_p_p_pp,
    BRKPBS_p_p_pp,
    MOV_orr_p_p_pp_z,
    ORR_p_p_pp_z,
    ORN_p_p_pp_z,
    NOR_p_p_pp_z,
    NAND_p_p_pp_z,
    MOVS_orrs_p_p_pp_z,
    ORRS_p_p_pp_z,
    ORNS_p_p_pp_z,
    NORS_p_p_pp_z,
    NANDS_p_p_pp_z,
    MSR_SR_systemmove,
    MRS_RS_systemmove,
    MOV_UMOV_asimdins_X_x,
    UMOV_asimdins_X_x,
    MOV_UMOV_asimdins_W_w,
    MOV_ORR_32_log_shift,
    NGC_SBC_32_addsub_carry,
    NGCS_SBCS_32_addsub_carry,
    MOV_ORR_64_log_shift,
    NGC_SBC_64_addsub_carry,
    NGCS_SBCS_64_addsub_carry,
    FCMP_S_floatcmp,
    FCMP_SZ_floatcmp,
    FCMPE_S_floatcmp,
    FCMPE_SZ_floatcmp,
    FCMP_D_floatcmp,
    FCMP_DZ_floatcmp,
    FCMPE_D_floatcmp,
    FCMPE_DZ_floatcmp,
    FCMP_H_floatcmp,
    FCMP_HZ_floatcmp,
    FCMPE_H_floatcmp,
    FCMPE_HZ_floatcmp,
    STADDB_LDADDB_32_memop,
    STCLRB_LDCLRB_32_memop,
    STEORB_LDEORB_32_memop,
    STSETB_LDSETB_32_memop,
    STSMAXB_LDSMAXB_32_memop,
    STSMINB_LDSMINB_32_memop,
    STUMAXB_LDUMAXB_32_memop,
    STUMINB_LDUMINB_32_memop,
    STADDLB_LDADDLB_32_memop,
    STCLRLB_LDCLRLB_32_memop,
    STEORLB_LDEORLB_32_memop,
    STSETLB_LDSETLB_32_memop,
    STSMAXLB_LDSMAXLB_32_memop,
    STSMINLB_LDSMINLB_32_memop,
    STUMAXLB_LDUMAXLB_32_memop,
    STUMINLB_LDUMINLB_32_memop,
    STADDH_LDADDH_32_memop,
    STCLRH_LDCLRH_32_memop,
    STEORH_LDEORH_32_memop,
    STSETH_LDSETH_32_memop,
    STSMAXH_LDSMAXH_32_memop,
    STSMINH_LDSMINH_32_memop,
    STUMAXH_LDUMAXH_32_memop,
    STUMINH_LDUMINH_32_memop,
    STADDLH_LDADDLH_32_memop,
    STCLRLH_LDCLRLH_32_memop,
    STEORLH_LDEORLH_32_memop,
    STSETLH_LDSETLH_32_memop,
    STSMAXLH_LDSMAXLH_32_memop,
    STSMINLH_LDSMINLH_32_memop,
    STUMAXLH_LDUMAXLH_32_memop,
    STUMINLH_LDUMINLH_32_memop,
    STADD_LDADD_32_memop,
    STCLR_LDCLR_32_memop,
    STEOR_LDEOR_32_memop,
    STSET_LDSET_32_memop,
    STSMAX_LDSMAX_32_memop,
    STSMIN_LDSMIN_32_memop,
    STUMAX_LDUMAX_32_memop,
    STUMIN_LDUMIN_32_memop,
    STADDL_LDADDL_32_memop,
    STCLRL_LDCLRL_32_memop,
    STEORL_LDEORL_32_memop,
    STSETL_LDSETL_32_memop,
    STSMAXL_LDSMAXL_32_memop,
    STSMINL_LDSMINL_32_memop,
    STUMAXL_LDUMAXL_32_memop,
    STUMINL_LDUMINL_32_memop,
    CMPP_SUBPS_64S_dp_2src,
    STADD_LDADD_64_memop,
    STCLR_LDCLR_64_memop,
    STEOR_LDEOR_64_memop,
    STSET_LDSET_64_memop,
    STSMAX_LDSMAX_64_memop,
    STSMIN_LDSMIN_64_memop,
    STUMAX_LDUMAX_64_memop,
    STUMIN_LDUMIN_64_memop,
    STADDL_LDADDL_64_memop,
    STCLRL_LDCLRL_64_memop,
    STEORL_LDEORL_64_memop,
    STSETL_LDSETL_64_memop,
    STSMAXL_LDSMAXL_64_memop,
    STSMINL_LDSMINL_64_memop,
    STUMAXL_LDUMAXL_64_memop,
    STUMINL_LDUMINL_64_memop,
    AND_z_zz,
    MOV_orr_z_zz,
    ORR_z_zz,
    EOR_z_zz,
    BIC_z_zz,
    ZIP1_z_zz_q,
    ZIP2_z_zz_q,
    UZP1_z_zz_q,
    UZP2_z_zz_q,
    TRN1_z_zz_q,
    TRN2_z_zz_q,
    CASP_CP32_ldstexcl,
    CASPL_CP32_ldstexcl,
    CASPA_CP32_ldstexcl,
    CASPAL_CP32_ldstexcl,
    CASB_C32_ldstexcl,
    CASLB_C32_ldstexcl,
    CASAB_C32_ldstexcl,
    CASALB_C32_ldstexcl,
    SMOV_asimdins_W_w,
    UMOV_asimdins_W_w,
    ADC_32_addsub_carry,
    UDIV_32_dp_2src,
    SDIV_32_dp_2src,
    LSL_LSLV_32_dp_2src,
    LSLV_32_dp_2src,
    LSR_LSRV_32_dp_2src,
    LSRV_32_dp_2src,
    ASR_ASRV_32_dp_2src,
    ASRV_32_dp_2src,
    ROR_RORV_32_dp_2src,
    RORV_32_dp_2src,
    CRC32B_32C_dp_2src,
    CRC32H_32C_dp_2src,
    CRC32W_32C_dp_2src,
    CRC32CB_32C_dp_2src,
    CRC32CH_32C_dp_2src,
    CRC32CW_32C_dp_2src,
    MUL_MADD_32A_dp_3src,
    MNEG_MSUB_32A_dp_3src,
    FMUL_S_floatdp2,
    FDIV_S_floatdp2,
    FADD_S_floatdp2,
    FSUB_S_floatdp2,
    FMAX_S_floatdp2,
    FMIN_S_floatdp2,
    FMAXNM_S_floatdp2,
    FMINNM_S_floatdp2,
    FNMUL_S_floatdp2,
    FMUL_D_floatdp2,
    FDIV_D_floatdp2,
    FADD_D_floatdp2,
    FSUB_D_floatdp2,
    FMAX_D_floatdp2,
    FMIN_D_floatdp2,
    FMAXNM_D_floatdp2,
    FMINNM_D_floatdp2,
    FNMUL_D_floatdp2,
    FMUL_H_floatdp2,
    FDIV_H_floatdp2,
    FADD_H_floatdp2,
    FSUB_H_floatdp2,
    FMAX_H_floatdp2,
    FMIN_H_floatdp2,
    FMAXNM_H_floatdp2,
    FMINNM_H_floatdp2,
    FNMUL_H_floatdp2,
    LDADDB_32_memop,
    LDCLRB_32_memop,
    LDEORB_32_memop,
    LDSETB_32_memop,
    LDSMAXB_32_memop,
    LDSMINB_32_memop,
    LDUMAXB_32_memop,
    LDUMINB_32_memop,
    SWPB_32_memop,
    LDADDLB_32_memop,
    LDCLRLB_32_memop,
    LDEORLB_32_memop,
    LDSETLB_32_memop,
    LDSMAXLB_32_memop,
    LDSMINLB_32_memop,
    LDUMAXLB_32_memop,
    LDUMINLB_32_memop,
    SWPLB_32_memop,
    LDADDAB_32_memop,
    LDCLRAB_32_memop,
    LDEORAB_32_memop,
    LDSETAB_32_memop,
    LDSMAXAB_32_memop,
    LDSMINAB_32_memop,
    LDUMAXAB_32_memop,
    LDUMINAB_32_memop,
    SWPAB_32_memop,
    LDAPRB_32L_memop,
    LDADDALB_32_memop,
    LDCLRALB_32_memop,
    LDEORALB_32_memop,
    LDSETALB_32_memop,
    LDSMAXALB_32_memop,
    LDSMINALB_32_memop,
    LDUMAXALB_32_memop,
    LDUMINALB_32_memop,
    SWPALB_32_memop,
    ADCS_32_addsub_carry,
    USDOT_z_zzz_s,
    SDOT_z_zzzi_s,
    UDOT_z_zzzi_s,
    USDOT_z_zzzi_s,
    SUDOT_z_zzzi_s,
    SDOT_z_zzzi_d,
    UDOT_z_zzzi_d,
    SMMLA_z_zzz,
    USMMLA_z_zzz,
    UMMLA_z_zzz,
    CASP_CP64_ldstexcl,
    CASPL_CP64_ldstexcl,
    CASPA_CP64_ldstexcl,
    CASPAL_CP64_ldstexcl,
    CASH_C32_ldstexcl,
    CASLH_C32_ldstexcl,
    CASAH_C32_ldstexcl,
    CASALH_C32_ldstexcl,
    INS_asimdins_IR_r,
    MOV_INS_asimdins_IR_r,
    SMOV_asimdins_X_x,
    SMMLA_asimdsame2_G,
    USMMLA_asimdsame2_G,
    SBC_32_addsub_carry,
    SHA1C_QSV_cryptosha3,
    DUP_asisdone_only,
    MOV_DUP_asisdone_only,
    SHA1P_QSV_cryptosha3,
    SHA1M_QSV_cryptosha3,
    SHA1SU0_VVV_cryptosha3,
    SHA256H_QQV_cryptosha3,
    SHA256H2_QQV_cryptosha3,
    SHA256SU1_VVV_cryptosha3,
    FMULX_asisdsamefp16_only,
    FCMEQ_asisdsamefp16_only,
    FRECPS_asisdsamefp16_only,
    FRSQRTS_asisdsamefp16_only,
    BFDOT_z_zzzi,
    BFDOT_z_zzz,
    BFMMLA_z_zzz,
    FMLA_z_zzzi_s,
    FMLS_z_zzzi_s,
    FMUL_z_zzi_s,
    FMMLA_z_zzz_s,
    FMLA_z_zzzi_d,
    FMLS_z_zzzi_d,
    FMUL_z_zzi_d,
    BFMLALB_z_zzz,
    BFMLALT_z_zzz,
    FMMLA_z_zzz_d,
    BFMMLA_asimdsame2_E,
    UMMLA_asimdsame2_G,
    LDADDH_32_memop,
    LDCLRH_32_memop,
    LDEORH_32_memop,
    LDSETH_32_memop,
    LDSMAXH_32_memop,
    LDSMINH_32_memop,
    LDUMAXH_32_memop,
    LDUMINH_32_memop,
    SWPH_32_memop,
    LDADDLH_32_memop,
    LDCLRLH_32_memop,
    LDEORLH_32_memop,
    LDSETLH_32_memop,
    LDSMAXLH_32_memop,
    LDSMINLH_32_memop,
    LDUMAXLH_32_memop,
    LDUMINLH_32_memop,
    SWPLH_32_memop,
    LDADDAH_32_memop,
    LDCLRAH_32_memop,
    LDEORAH_32_memop,
    LDSETAH_32_memop,
    LDSMAXAH_32_memop,
    LDSMINAH_32_memop,
    LDUMAXAH_32_memop,
    LDUMINAH_32_memop,
    SWPAH_32_memop,
    LDAPRH_32L_memop,
    LDADDALH_32_memop,
    LDCLRALH_32_memop,
    LDEORALH_32_memop,
    LDSETALH_32_memop,
    LDSMAXALH_32_memop,
    LDSMINALH_32_memop,
    LDUMAXALH_32_memop,
    LDUMINALH_32_memop,
    SWPALH_32_memop,
    SBCS_32_addsub_carry,
    FCMGE_asisdsamefp16_only,
    FACGE_asisdsamefp16_only,
    FABD_asisdsamefp16_only,
    FCMGT_asisdsamefp16_only,
    FACGT_asisdsamefp16_only,
    CAS_C32_ldstexcl,
    CASL_C32_ldstexcl,
    CASA_C32_ldstexcl,
    CASAL_C32_ldstexcl,
    ADC_64_addsub_carry,
    SUBP_64S_dp_2src,
    UDIV_64_dp_2src,
    SDIV_64_dp_2src,
    IRG_64I_dp_2src,
    GMI_64G_dp_2src,
    LSL_LSLV_64_dp_2src,
    LSLV_64_dp_2src,
    LSR_LSRV_64_dp_2src,
    LSRV_64_dp_2src,
    ASR_ASRV_64_dp_2src,
    ASRV_64_dp_2src,
    ROR_RORV_64_dp_2src,
    RORV_64_dp_2src,
    PACGA_64P_dp_2src,
    CRC32X_64C_dp_2src,
    CRC32CX_64C_dp_2src,
    MUL_MADD_64A_dp_3src,
    MNEG_MSUB_64A_dp_3src,
    SMULL_SMADDL_64WA_dp_3src,
    SMNEGL_SMSUBL_64WA_dp_3src,
    UMULL_UMADDL_64WA_dp_3src,
    UMNEGL_UMSUBL_64WA_dp_3src,
    LDADD_32_memop,
    LDCLR_32_memop,
    LDEOR_32_memop,
    LDSET_32_memop,
    LDSMAX_32_memop,
    LDSMIN_32_memop,
    LDUMAX_32_memop,
    LDUMIN_32_memop,
    SWP_32_memop,
    LDADDL_32_memop,
    LDCLRL_32_memop,
    LDEORL_32_memop,
    LDSETL_32_memop,
    LDSMAXL_32_memop,
    LDSMINL_32_memop,
    LDUMAXL_32_memop,
    LDUMINL_32_memop,
    SWPL_32_memop,
    LDADDA_32_memop,
    LDCLRA_32_memop,
    LDEORA_32_memop,
    LDSETA_32_memop,
    LDSMAXA_32_memop,
    LDSMINA_32_memop,
    LDUMAXA_32_memop,
    LDUMINA_32_memop,
    SWPA_32_memop,
    LDAPR_32L_memop,
    LDADDAL_32_memop,
    LDCLRAL_32_memop,
    LDEORAL_32_memop,
    LDSETAL_32_memop,
    LDSMAXAL_32_memop,
    LDSMINAL_32_memop,
    LDUMAXAL_32_memop,
    LDUMINAL_32_memop,
    SWPAL_32_memop,
    ADCS_64_addsub_carry,
    SUBPS_64S_dp_2src,
    CAS_C64_ldstexcl,
    CASL_C64_ldstexcl,
    CASA_C64_ldstexcl,
    CASAL_C64_ldstexcl,
    SHA512H_QQV_cryptosha512_3,
    SHA512H2_QQV_cryptosha512_3,
    SHA512SU1_VVV2_cryptosha512_3,
    RAX1_VVV2_cryptosha512_3,
    SM3PARTW1_VVV4_cryptosha512_3,
    SM3PARTW2_VVV4_cryptosha512_3,
    SM4EKEY_VVV4_cryptosha512_3,
    SBC_64_addsub_carry,
    LDADD_64_memop,
    LDCLR_64_memop,
    LDEOR_64_memop,
    LDSET_64_memop,
    LDSMAX_64_memop,
    LDSMIN_64_memop,
    LDUMAX_64_memop,
    LDUMIN_64_memop,
    SWP_64_memop,
    ST64BV0_64_memop,
    ST64BV_64_memop,
    LDADDL_64_memop,
    LDCLRL_64_memop,
    LDEORL_64_memop,
    LDSETL_64_memop,
    LDSMAXL_64_memop,
    LDSMINL_64_memop,
    LDUMAXL_64_memop,
    LDUMINL_64_memop,
    SWPL_64_memop,
    LDADDA_64_memop,
    LDCLRA_64_memop,
    LDEORA_64_memop,
    LDSETA_64_memop,
    LDSMAXA_64_memop,
    LDSMINA_64_memop,
    LDUMAXA_64_memop,
    LDUMINA_64_memop,
    SWPA_64_memop,
    LDAPR_64L_memop,
    LDADDAL_64_memop,
    LDCLRAL_64_memop,
    LDEORAL_64_memop,
    LDSETAL_64_memop,
    LDSMAXAL_64_memop,
    LDSMINAL_64_memop,
    LDUMAXAL_64_memop,
    LDUMINAL_64_memop,
    SWPAL_64_memop,
    SBCS_64_addsub_carry,
    ADDVL_r_ri,
    ADDPL_r_ri,
    BFMLALB_z_zzzi,
    BFMLALT_z_zzzi,
    ADR_z_az_d_s32_scaled,
    ADR_z_az_d_u32_scaled,
    FCMLA_z_zzzi_h,
    FCMLA_z_zzzi_s,
    STRB_32BL_ldst_regoff,
    LDRB_32BL_ldst_regoff,
    LDRSB_64BL_ldst_regoff,
    LDRSB_32BL_ldst_regoff,
    STR_BL_ldst_regoff,
    LDR_BL_ldst_regoff,
    PRFB_i_p_br_s,
    PRFB_i_p_ai_s,
    PRFH_i_p_br_s,
    PRFH_i_p_ai_s,
    PRFW_i_p_br_s,
    PRFW_i_p_ai_s,
    PRFD_i_p_br_s,
    PRFD_i_p_ai_s,
    PRFB_i_p_ai_d,
    PRFB_i_p_bz_d_64_scaled,
    PRFH_i_p_bz_d_64_scaled,
    PRFW_i_p_bz_d_64_scaled,
    PRFD_i_p_bz_d_64_scaled,
    PRFH_i_p_ai_d,
    PRFW_i_p_ai_d,
    PRFD_i_p_ai_d,
    EXT_z_zi_des,
    LD1SB_z_p_ai_s,
    LDFF1SB_z_p_ai_s,
    LD1B_z_p_ai_s,
    LDFF1B_z_p_ai_s,
    LD1SH_z_p_ai_s,
    LDFF1SH_z_p_ai_s,
    LD1H_z_p_ai_s,
    LDFF1H_z_p_ai_s,
    LD1W_z_p_ai_s,
    LDFF1W_z_p_ai_s,
    LD1RQB_z_p_br_contiguous,
    LD1B_z_p_br_u8,
    LDFF1B_z_p_br_u8,
    LDNT1B_z_p_br_contiguous,
    LD1ROB_z_p_br_contiguous,
    LD1B_z_p_br_u16,
    LDFF1B_z_p_br_u16,
    LD2B_z_p_br_contiguous,
    LD1B_z_p_br_u32,
    LDFF1B_z_p_br_u32,
    LD3B_z_p_br_contiguous,
    LD1B_z_p_br_u64,
    LDFF1B_z_p_br_u64,
    LD4B_z_p_br_contiguous,
    LD1RQH_z_p_br_contiguous,
    LD1SW_z_p_br_s64,
    LDFF1SW_z_p_br_s64,
    LDNT1H_z_p_br_contiguous,
    LD1ROH_z_p_br_contiguous,
    LD1H_z_p_br_u16,
    LDFF1H_z_p_br_u16,
    LD2H_z_p_br_contiguous,
    LD1H_z_p_br_u32,
    LDFF1H_z_p_br_u32,
    LD3H_z_p_br_contiguous,
    LD1H_z_p_br_u64,
    LDFF1H_z_p_br_u64,
    LD4H_z_p_br_contiguous,
    LD1RQW_z_p_br_contiguous,
    LD1SH_z_p_br_s64,
    LDFF1SH_z_p_br_s64,
    LDNT1W_z_p_br_contiguous,
    LD1ROW_z_p_br_contiguous,
    LD1SH_z_p_br_s32,
    LDFF1SH_z_p_br_s32,
    LD2W_z_p_br_contiguous,
    LD1W_z_p_br_u32,
    LDFF1W_z_p_br_u32,
    LD3W_z_p_br_contiguous,
    LD1W_z_p_br_u64,
    LDFF1W_z_p_br_u64,
    LD4W_z_p_br_contiguous,
    LD1RQD_z_p_br_contiguous,
    LD1SB_z_p_br_s64,
    LDFF1SB_z_p_br_s64,
    LDNT1D_z_p_br_contiguous,
    LD1ROD_z_p_br_contiguous,
    LD1SB_z_p_br_s32,
    LDFF1SB_z_p_br_s32,
    LD2D_z_p_br_contiguous,
    LD1SB_z_p_br_s16,
    LDFF1SB_z_p_br_s16,
    LD3D_z_p_br_contiguous,
    LD1D_z_p_br_u64,
    LDFF1D_z_p_br_u64,
    LD4D_z_p_br_contiguous,
    LD1SB_z_p_ai_d,
    LDFF1SB_z_p_ai_d,
    LD1B_z_p_ai_d,
    LDFF1B_z_p_ai_d,
    LD1SB_z_p_bz_d_64_unscaled,
    LDFF1SB_z_p_bz_d_64_unscaled,
    LD1B_z_p_bz_d_64_unscaled,
    LDFF1B_z_p_bz_d_64_unscaled,
    LD1SH_z_p_ai_d,
    LDFF1SH_z_p_ai_d,
    LD1H_z_p_ai_d,
    LDFF1H_z_p_ai_d,
    LD1SH_z_p_bz_d_64_unscaled,
    LDFF1SH_z_p_bz_d_64_unscaled,
    LD1H_z_p_bz_d_64_unscaled,
    LDFF1H_z_p_bz_d_64_unscaled,
    LD1SH_z_p_bz_d_64_scaled,
    LDFF1SH_z_p_bz_d_64_scaled,
    LD1H_z_p_bz_d_64_scaled,
    LDFF1H_z_p_bz_d_64_scaled,
    LD1SW_z_p_ai_d,
    LDFF1SW_z_p_ai_d,
    LD1W_z_p_ai_d,
    LDFF1W_z_p_ai_d,
    LD1SW_z_p_bz_d_64_unscaled,
    LDFF1SW_z_p_bz_d_64_unscaled,
    LD1W_z_p_bz_d_64_unscaled,
    LDFF1W_z_p_bz_d_64_unscaled,
    LD1SW_z_p_bz_d_64_scaled,
    LDFF1SW_z_p_bz_d_64_scaled,
    LD1W_z_p_bz_d_64_scaled,
    LDFF1W_z_p_bz_d_64_scaled,
    LD1D_z_p_ai_d,
    LDFF1D_z_p_ai_d,
    LD1D_z_p_bz_d_64_unscaled,
    LDFF1D_z_p_bz_d_64_unscaled,
    LD1D_z_p_bz_d_64_scaled,
    LDFF1D_z_p_bz_d_64_scaled,
    STNT1B_z_p_br_contiguous,
    ST1B_z_p_bz_d_64_unscaled,
    ST2B_z_p_br_contiguous,
    ST3B_z_p_br_contiguous,
    ST1B_z_p_ai_d,
    ST4B_z_p_br_contiguous,
    ST1B_z_p_ai_s,
    STNT1H_z_p_br_contiguous,
    ST1H_z_p_bz_d_64_unscaled,
    ST2H_z_p_br_contiguous,
    ST1H_z_p_bz_d_64_scaled,
    ST3H_z_p_br_contiguous,
    ST1H_z_p_ai_d,
    ST4H_z_p_br_contiguous,
    ST1H_z_p_ai_s,
    STNT1W_z_p_br_contiguous,
    ST1W_z_p_bz_d_64_unscaled,
    ST2W_z_p_br_contiguous,
    ST1W_z_p_bz_d_64_scaled,
    ST3W_z_p_br_contiguous,
    ST1W_z_p_ai_d,
    ST4W_z_p_br_contiguous,
    ST1W_z_p_ai_s,
    STNT1D_z_p_br_contiguous,
    ST1D_z_p_bz_d_64_unscaled,
    ST2D_z_p_br_contiguous,
    ST1D_z_p_bz_d_64_scaled,
    ST3D_z_p_br_contiguous,
    ST1D_z_p_ai_d,
    ST1D_z_p_br,
    ST4D_z_p_br_contiguous,
    SM3TT1A_VVV4_crypto3_imm2,
    SM3TT1B_VVV4_crypto3_imm2,
    SM3TT2A_VVV4_crypto3_imm2,
    SM3TT2B_VVV_crypto3_imm2,
    ST1B_z_p_bz_d_x32_unscaled,
    ST1B_z_p_bz_s_x32_unscaled,
    ST1H_z_p_bz_d_x32_unscaled,
    ST1H_z_p_bz_d_x32_scaled,
    ST1H_z_p_bz_s_x32_unscaled,
    ST1H_z_p_bz_s_x32_scaled,
    ST1W_z_p_bz_d_x32_unscaled,
    ST1W_z_p_bz_d_x32_scaled,
    ST1W_z_p_bz_s_x32_unscaled,
    ST1W_z_p_bz_s_x32_scaled,
    ST1D_z_p_bz_d_x32_unscaled,
    ST1D_z_p_bz_d_x32_scaled,
    INS_asimdins_IV_v,
    MOV_INS_asimdins_IV_v,
    STXRB_SR32_ldstexcl,
    STLXRB_SR32_ldstexcl,
    LDXRB_LR32_ldstexcl,
    LDAXRB_LR32_ldstexcl,
    STLLRB_SL32_ldstexcl,
    STLRB_SL32_ldstexcl,
    LDLARB_LR32_ldstexcl,
    LDARB_LR32_ldstexcl,
    EXTR_32_extract,
    ROR_EXTR_32_extract,
    MADD_32A_dp_3src,
    MSUB_32A_dp_3src,
    FMADD_S_floatdp3,
    FMSUB_S_floatdp3,
    FNMADD_S_floatdp3,
    FNMSUB_S_floatdp3,
    FMADD_D_floatdp3,
    FMSUB_D_floatdp3,
    FNMADD_D_floatdp3,
    FNMSUB_D_floatdp3,
    FMADD_H_floatdp3,
    FMSUB_H_floatdp3,
    FNMADD_H_floatdp3,
    FNMSUB_H_floatdp3,
    STXRH_SR32_ldstexcl,
    STLXRH_SR32_ldstexcl,
    LDXRH_LR32_ldstexcl,
    LDAXRH_LR32_ldstexcl,
    STLLRH_SL32_ldstexcl,
    STLRH_SL32_ldstexcl,
    LDLARH_LR32_ldstexcl,
    LDARH_LR32_ldstexcl,
    STXR_SR32_ldstexcl,
    STLXR_SR32_ldstexcl,
    STXP_SP32_ldstexcl,
    STLXP_SP32_ldstexcl,
    LDXR_LR32_ldstexcl,
    LDAXR_LR32_ldstexcl,
    LDXP_LP32_ldstexcl,
    LDAXP_LP32_ldstexcl,
    STLLR_SL32_ldstexcl,
    STLR_SL32_ldstexcl,
    LDLAR_LR32_ldstexcl,
    LDAR_LR32_ldstexcl,
    MADD_64A_dp_3src,
    MSUB_64A_dp_3src,
    SMADDL_64WA_dp_3src,
    SMSUBL_64WA_dp_3src,
    SMULH_64_dp_3src,
    UMADDL_64WA_dp_3src,
    UMSUBL_64WA_dp_3src,
    UMULH_64_dp_3src,
    STXR_SR64_ldstexcl,
    STLXR_SR64_ldstexcl,
    STXP_SP64_ldstexcl,
    STLXP_SP64_ldstexcl,
    LDXR_LR64_ldstexcl,
    LDAXR_LR64_ldstexcl,
    LDXP_LP64_ldstexcl,
    LDAXP_LP64_ldstexcl,
    STLLR_SL64_ldstexcl,
    STLR_SL64_ldstexcl,
    LDLAR_LR64_ldstexcl,
    LDAR_LR64_ldstexcl,
    EOR3_VVV16_crypto4,
    BCAX_VVV16_crypto4,
    SM3SS1_VVV4_crypto4,
    RMIF_only_rmif,
    FMOV_S_floatimm,
    FMOV_D_floatimm,
    FMOV_H_floatimm,
    FCCMP_S_floatccmp,
    FCCMPE_S_floatccmp,
    FCCMP_D_floatccmp,
    FCCMPE_D_floatccmp,
    FCCMP_H_floatccmp,
    FCCMPE_H_floatccmp,
    CCMN_32_condcmp_reg,
    CCMN_32_condcmp_imm,
    CCMP_32_condcmp_reg,
    CCMP_32_condcmp_imm,
    CCMN_64_condcmp_reg,
    CCMN_64_condcmp_imm,
    CCMP_64_condcmp_reg,
    CCMP_64_condcmp_imm,
    STLURB_32_ldapstl_unscaled,
    LDAPURB_32_ldapstl_unscaled,
    LDAPURSB_64_ldapstl_unscaled,
    LDAPURSB_32_ldapstl_unscaled,
    CSEL_32_condsel,
    CINC_CSINC_32_condsel,
    CSINC_32_condsel,
    FCSEL_S_floatsel,
    FCSEL_D_floatsel,
    FCSEL_H_floatsel,
    STURB_32_ldst_unscaled,
    STRB_32_ldst_immpost,
    STTRB_32_ldst_unpriv,
    STRB_32_ldst_immpre,
    STRB_32B_ldst_regoff,
    LDURB_32_ldst_unscaled,
    LDRB_32_ldst_immpost,
    LDTRB_32_ldst_unpriv,
    LDRB_32_ldst_immpre,
    LDRB_32B_ldst_regoff,
    LDURSB_64_ldst_unscaled,
    LDRSB_64_ldst_immpost,
    LDTRSB_64_ldst_unpriv,
    LDRSB_64_ldst_immpre,
    LDRSB_64B_ldst_regoff,
    LDURSB_32_ldst_unscaled,
    LDRSB_32_ldst_immpost,
    LDTRSB_32_ldst_unpriv,
    LDRSB_32_ldst_immpre,
    LDRSB_32B_ldst_regoff,
    STUR_B_ldst_unscaled,
    STR_B_ldst_immpost,
    STR_B_ldst_immpre,
    STR_B_ldst_regoff,
    LDUR_B_ldst_unscaled,
    LDR_B_ldst_immpost,
    LDR_B_ldst_immpre,
    LDR_B_ldst_regoff,
    STUR_Q_ldst_unscaled,
    STR_Q_ldst_immpost,
    STR_Q_ldst_immpre,
    STR_Q_ldst_regoff,
    LDUR_Q_ldst_unscaled,
    LDR_Q_ldst_immpost,
    LDR_Q_ldst_immpre,
    LDR_Q_ldst_regoff,
    STLURH_32_ldapstl_unscaled,
    LDAPURH_32_ldapstl_unscaled,
    LDAPURSH_64_ldapstl_unscaled,
    LDAPURSH_32_ldapstl_unscaled,
    CINV_CSINV_32_condsel,
    CSINV_32_condsel,
    CNEG_CSNEG_32_condsel,
    CSNEG_32_condsel,
    STURH_32_ldst_unscaled,
    STRH_32_ldst_immpost,
    STTRH_32_ldst_unpriv,
    STRH_32_ldst_immpre,
    STRH_32_ldst_regoff,
    LDURH_32_ldst_unscaled,
    LDRH_32_ldst_immpost,
    LDTRH_32_ldst_unpriv,
    LDRH_32_ldst_immpre,
    LDRH_32_ldst_regoff,
    LDURSH_64_ldst_unscaled,
    LDRSH_64_ldst_immpost,
    LDTRSH_64_ldst_unpriv,
    LDRSH_64_ldst_immpre,
    LDRSH_64_ldst_regoff,
    LDURSH_32_ldst_unscaled,
    LDRSH_32_ldst_immpost,
    LDTRSH_32_ldst_unpriv,
    LDRSH_32_ldst_immpre,
    LDRSH_32_ldst_regoff,
    STUR_H_ldst_unscaled,
    STR_H_ldst_immpost,
    STR_H_ldst_immpre,
    STR_H_ldst_regoff,
    LDUR_H_ldst_unscaled,
    LDR_H_ldst_immpost,
    LDR_H_ldst_immpre,
    LDR_H_ldst_regoff,
    STLUR_32_ldapstl_unscaled,
    LDAPUR_32_ldapstl_unscaled,
    LDAPURSW_64_ldapstl_unscaled,
    CSEL_64_condsel,
    CINC_CSINC_64_condsel,
    CSINC_64_condsel,
    STUR_32_ldst_unscaled,
    STR_32_ldst_immpost,
    STTR_32_ldst_unpriv,
    STR_32_ldst_immpre,
    STR_32_ldst_regoff,
    LDUR_32_ldst_unscaled,
    LDR_32_ldst_immpost,
    LDTR_32_ldst_unpriv,
    LDR_32_ldst_immpre,
    LDR_32_ldst_regoff,
    LDURSW_64_ldst_unscaled,
    LDRSW_64_ldst_immpost,
    LDTRSW_64_ldst_unpriv,
    LDRSW_64_ldst_immpre,
    LDRSW_64_ldst_regoff,
    STUR_S_ldst_unscaled,
    STR_S_ldst_immpost,
    STR_S_ldst_immpre,
    STR_S_ldst_regoff,
    LDUR_S_ldst_unscaled,
    LDR_S_ldst_immpost,
    LDR_S_ldst_immpre,
    LDR_S_ldst_regoff,
    STLUR_64_ldapstl_unscaled,
    STG_64Spost_ldsttags,
    STG_64Soffset_ldsttags,
    STG_64Spre_ldsttags,
    LDAPUR_64_ldapstl_unscaled,
    LDG_64Loffset_ldsttags,
    STZG_64Spost_ldsttags,
    STZG_64Soffset_ldsttags,
    STZG_64Spre_ldsttags,
    ST2G_64Spost_ldsttags,
    ST2G_64Soffset_ldsttags,
    ST2G_64Spre_ldsttags,
    STZ2G_64Spost_ldsttags,
    STZ2G_64Soffset_ldsttags,
    STZ2G_64Spre_ldsttags,
    CINV_CSINV_64_condsel,
    CSINV_64_condsel,
    CNEG_CSNEG_64_condsel,
    CSNEG_64_condsel,
    STUR_64_ldst_unscaled,
    STR_64_ldst_immpost,
    STTR_64_ldst_unpriv,
    STR_64_ldst_immpre,
    STR_64_ldst_regoff,
    LDUR_64_ldst_unscaled,
    LDR_64_ldst_immpost,
    LDTR_64_ldst_unpriv,
    LDR_64_ldst_immpre,
    LDR_64_ldst_regoff,
    PRFUM_P_ldst_unscaled,
    PRFM_P_ldst_regoff,
    STUR_D_ldst_unscaled,
    STR_D_ldst_immpost,
    STR_D_ldst_immpre,
    STR_D_ldst_regoff,
    LDUR_D_ldst_unscaled,
    LDR_D_ldst_immpost,
    LDR_D_ldst_immpre,
    LDR_D_ldst_regoff,
    CMN_ADDS_32S_addsub_ext,
    CMP_SUBS_32S_addsub_ext,
    CMN_ADDS_64S_addsub_ext,
    SVC_EX_exception,
    HVC_EX_exception,
    SMC_EX_exception,
    BRK_EX_exception,
    HLT_EX_exception,
    DCPS1_DC_exception,
    DCPS2_DC_exception,
    DCPS3_DC_exception,
    CMP_SUBS_64S_addsub_ext,
    ADD_32_addsub_ext,
    ADDS_32S_addsub_ext,
    SUB_32_addsub_ext,
    SUBS_32S_addsub_ext,
    ADD_64_addsub_ext,
    EXTR_64_extract,
    ROR_EXTR_64_extract,
    ADDS_64S_addsub_ext,
    SUB_64_addsub_ext,
    XAR_VVV2_crypto3_imm6,
    SUBS_64S_addsub_ext,
    ASR_SBFM_32M_bitfield,
    LSR_UBFM_32M_bitfield,
    ASR_SBFM_64M_bitfield,
    LSR_UBFM_64M_bitfield,
    FMLA_asisdelem_RH_H,
    FMLS_asisdelem_RH_H,
    FMUL_asisdelem_RH_H,
    FMULX_asisdelem_RH_H,
    LDR_p_bi,
    PRFB_i_p_bi_s,
    PRFH_i_p_bi_s,
    PRFW_i_p_bi_s,
    PRFD_i_p_bi_s,
    STR_p_bi,
    LD1RB_z_p_bi_u8,
    LD1RB_z_p_bi_u16,
    LD1RB_z_p_bi_u32,
    LD1RB_z_p_bi_u64,
    LD1RSW_z_p_bi_s64,
    LD1RH_z_p_bi_u16,
    LD1RH_z_p_bi_u32,
    LD1RH_z_p_bi_u64,
    LD1RSH_z_p_bi_s64,
    LD1RSH_z_p_bi_s32,
    LD1RW_z_p_bi_u32,
    LD1RW_z_p_bi_u64,
    LDR_z_bi,
    LD1RSB_z_p_bi_s64,
    LD1RSB_z_p_bi_s32,
    LD1RSB_z_p_bi_s16,
    LD1RD_z_p_bi_u64,
    STR_z_bi,
    MOV_ORR_32_log_imm,
    BFC_BFM_32M_bitfield,
    BFC_BFM_64M_bitfield,
    TST_ANDS_32S_log_imm,
    AND_32_log_imm,
    MOV_MOVN_32_movewide,
    MOVN_32_movewide,
    SBFIZ_SBFM_32M_bitfield,
    SBFM_32M_bitfield,
    SBFX_SBFM_32M_bitfield,
    STNP_32_ldstnapair_offs,
    LDNP_32_ldstnapair_offs,
    STP_32_ldstpair_post,
    LDP_32_ldstpair_post,
    STP_32_ldstpair_off,
    LDP_32_ldstpair_off,
    STP_32_ldstpair_pre,
    LDP_32_ldstpair_pre,
    STNP_S_ldstnapair_offs,
    LDNP_S_ldstnapair_offs,
    STP_S_ldstpair_post,
    LDP_S_ldstpair_post,
    STP_S_ldstpair_off,
    LDP_S_ldstpair_off,
    STP_S_ldstpair_pre,
    LDP_S_ldstpair_pre,
    ORR_32_log_imm,
    BFI_BFM_32M_bitfield,
    BFM_32M_bitfield,
    BFXIL_BFM_32M_bitfield,
    STRB_32_ldst_pos,
    LDRB_32_ldst_pos,
    LDRSB_64_ldst_pos,
    LDRSB_32_ldst_pos,
    STR_B_ldst_pos,
    LDR_B_ldst_pos,
    STR_Q_ldst_pos,
    LDR_Q_ldst_pos,
    EOR_32_log_imm,
    MOV_MOVZ_32_movewide,
    MOVZ_32_movewide,
    LSL_UBFM_32M_bitfield,
    UBFIZ_UBFM_32M_bitfield,
    UBFM_32M_bitfield,
    UBFX_UBFM_32M_bitfield,
    STGP_64_ldstpair_post,
    LDPSW_64_ldstpair_post,
    STGP_64_ldstpair_off,
    LDPSW_64_ldstpair_off,
    STGP_64_ldstpair_pre,
    LDPSW_64_ldstpair_pre,
    STNP_D_ldstnapair_offs,
    LDNP_D_ldstnapair_offs,
    STP_D_ldstpair_post,
    LDP_D_ldstpair_post,
    STP_D_ldstpair_off,
    LDP_D_ldstpair_off,
    STP_D_ldstpair_pre,
    LDP_D_ldstpair_pre,
    ANDS_32S_log_imm,
    MOVK_32_movewide,
    STRH_32_ldst_pos,
    LDRH_32_ldst_pos,
    LDRSH_64_ldst_pos,
    LDRSH_32_ldst_pos,
    STR_H_ldst_pos,
    LDR_H_ldst_pos,
    ADDG_64_addsub_immtags,
    SBFIZ_SBFM_64M_bitfield,
    SBFM_64M_bitfield,
    SBFX_SBFM_64M_bitfield,
    STNP_64_ldstnapair_offs,
    LDNP_64_ldstnapair_offs,
    STP_64_ldstpair_post,
    LDP_64_ldstpair_post,
    STP_64_ldstpair_off,
    LDP_64_ldstpair_off,
    STP_64_ldstpair_pre,
    LDP_64_ldstpair_pre,
    STNP_Q_ldstnapair_offs,
    LDNP_Q_ldstnapair_offs,
    STP_Q_ldstpair_post,
    LDP_Q_ldstpair_post,
    STP_Q_ldstpair_off,
    LDP_Q_ldstpair_off,
    STP_Q_ldstpair_pre,
    LDP_Q_ldstpair_pre,
    BFI_BFM_64M_bitfield,
    BFM_64M_bitfield,
    BFXIL_BFM_64M_bitfield,
    STR_32_ldst_pos,
    LDR_32_ldst_pos,
    LDRSW_64_ldst_pos,
    STR_S_ldst_pos,
    LDR_S_ldst_pos,
    SUBG_64_addsub_immtags,
    LSL_UBFM_64M_bitfield,
    UBFIZ_UBFM_64M_bitfield,
    UBFM_64M_bitfield,
    UBFX_UBFM_64M_bitfield,
    STR_64_ldst_pos,
    LDR_64_ldst_pos,
    PRFM_P_ldst_pos,
    STR_D_ldst_pos,
    LDR_D_ldst_pos,
    FCVTNS_asisdmisc_R,
    FCVTMS_asisdmisc_R,
    FCVTAS_asisdmisc_R,
    SCVTF_asisdmisc_R,
    FMAXNMP_asisdpair_only_H,
    FADDP_asisdpair_only_H,
    FMAXP_asisdpair_only_H,
    FCMGT_asisdmisc_FZ,
    FCMEQ_asisdmisc_FZ,
    FCMLT_asisdmisc_FZ,
    FCVTPS_asisdmisc_R,
    FCVTZS_asisdmisc_R,
    FRECPE_asisdmisc_R,
    FRECPX_asisdmisc_R,
    FMINNMP_asisdpair_only_H,
    FMINP_asisdpair_only_H,
    FCVTXN_asisdmisc_N,
    FCVTNU_asisdmisc_R,
    FCVTMU_asisdmisc_R,
    FCVTAU_asisdmisc_R,
    UCVTF_asisdmisc_R,
    FMAXNMP_asisdpair_only_SD,
    FADDP_asisdpair_only_SD,
    FMAXP_asisdpair_only_SD,
    FCMGE_asisdmisc_FZ,
    FCMLE_asisdmisc_FZ,
    FCVTPU_asisdmisc_R,
    FCVTZU_asisdmisc_R,
    FRSQRTE_asisdmisc_R,
    FMINNMP_asisdpair_only_SD,
    FMINP_asisdpair_only_SD,
    CTERMEQ_rr,
    CTERMNE_rr,
    FMULX_asisdsame_only,
    FCMEQ_asisdsame_only,
    FRECPS_asisdsame_only,
    FRSQRTS_asisdsame_only,
    FMLA_z_zzzi_h,
    FMLS_z_zzzi_h,
    FMUL_z_zzi_h,
    FCMGE_asisdsame_only,
    FACGE_asisdsame_only,
    FABD_asisdsame_only,
    FCMGT_asisdsame_only,
    FACGT_asisdsame_only,
    ADR_z_az_sd_same_scaled,
    PRFB_i_p_bz_s_x32_scaled,
    PRFH_i_p_bz_s_x32_scaled,
    PRFW_i_p_bz_s_x32_scaled,
    PRFD_i_p_bz_s_x32_scaled,
    PRFB_i_p_bz_d_x32_scaled,
    PRFH_i_p_bz_d_x32_scaled,
    PRFW_i_p_bz_d_x32_scaled,
    PRFD_i_p_bz_d_x32_scaled,
    LD1SB_z_p_bz_s_x32_unscaled,
    LDFF1SB_z_p_bz_s_x32_unscaled,
    LD1B_z_p_bz_s_x32_unscaled,
    LDFF1B_z_p_bz_s_x32_unscaled,
    LD1SH_z_p_bz_s_x32_unscaled,
    LDFF1SH_z_p_bz_s_x32_unscaled,
    LD1H_z_p_bz_s_x32_unscaled,
    LDFF1H_z_p_bz_s_x32_unscaled,
    LD1SH_z_p_bz_s_x32_scaled,
    LDFF1SH_z_p_bz_s_x32_scaled,
    LD1H_z_p_bz_s_x32_scaled,
    LDFF1H_z_p_bz_s_x32_scaled,
    LD1W_z_p_bz_s_x32_unscaled,
    LDFF1W_z_p_bz_s_x32_unscaled,
    LD1W_z_p_bz_s_x32_scaled,
    LDFF1W_z_p_bz_s_x32_scaled,
    LD1SB_z_p_bz_d_x32_unscaled,
    LDFF1SB_z_p_bz_d_x32_unscaled,
    LD1B_z_p_bz_d_x32_unscaled,
    LDFF1B_z_p_bz_d_x32_unscaled,
    LD1SH_z_p_bz_d_x32_unscaled,
    LDFF1SH_z_p_bz_d_x32_unscaled,
    LD1H_z_p_bz_d_x32_unscaled,
    LDFF1H_z_p_bz_d_x32_unscaled,
    LD1SH_z_p_bz_d_x32_scaled,
    LDFF1SH_z_p_bz_d_x32_scaled,
    LD1H_z_p_bz_d_x32_scaled,
    LDFF1H_z_p_bz_d_x32_scaled,
    LD1SW_z_p_bz_d_x32_unscaled,
    LDFF1SW_z_p_bz_d_x32_unscaled,
    LD1W_z_p_bz_d_x32_unscaled,
    LDFF1W_z_p_bz_d_x32_unscaled,
    LD1SW_z_p_bz_d_x32_scaled,
    LDFF1SW_z_p_bz_d_x32_scaled,
    LD1W_z_p_bz_d_x32_scaled,
    LDFF1W_z_p_bz_d_x32_scaled,
    LD1D_z_p_bz_d_x32_unscaled,
    LDFF1D_z_p_bz_d_x32_unscaled,
    LD1D_z_p_bz_d_x32_scaled,
    LDFF1D_z_p_bz_d_x32_scaled,
    LDRAA_64_ldst_pac,
    LDRAA_64W_ldst_pac,
    LDRAB_64_ldst_pac,
    LDRAB_64W_ldst_pac,
    ST1B_z_p_bi,
    ST1H_z_p_bi,
    ST1W_z_p_bi,
    ST1D_z_p_bi,
    SSHR_asisdshf_R,
    SSRA_asisdshf_R,
    SRSHR_asisdshf_R,
    SRSRA_asisdshf_R,
    SHL_asisdshf_R,
    SQSHL_asisdshf_R,
    SQSHRN_asisdshf_N,
    SQRSHRN_asisdshf_N,
    SCVTF_asisdshf_C,
    FCVTZS_asisdshf_C,
    USHR_asisdshf_R,
    USRA_asisdshf_R,
    URSHR_asisdshf_R,
    URSRA_asisdshf_R,
    SRI_asisdshf_R,
    SLI_asisdshf_R,
    SQSHLU_asisdshf_R,
    UQSHL_asisdshf_R,
    SQSHRUN_asisdshf_N,
    SQRSHRUN_asisdshf_N,
    UQSHRN_asisdshf_N,
    UQRSHRN_asisdshf_N,
    UCVTF_asisdshf_C,
    FCVTZU_asisdshf_C,
    FMLA_asisdelem_R_SD,
    FMLS_asisdelem_R_SD,
    FMUL_asisdelem_R_SD,
    FMULX_asisdelem_R_SD,
    ST1B_z_p_br,
    ST1H_z_p_br,
    ST1W_z_p_br,
    MOV_ORR_64_log_imm,
    CMN_ADDS_32S_addsub_imm,
    CMP_SUBS_32S_addsub_imm,
    CMN_ADDS_64S_addsub_imm,
    CMP_SUBS_64S_addsub_imm,
    TST_ANDS_64S_log_imm,
    ADD_32_addsub_imm,
    ADDS_32S_addsub_imm,
    SUB_32_addsub_imm,
    SUBS_32S_addsub_imm,
    ADD_64_addsub_imm,
    AND_64_log_imm,
    MOV_MOVN_64_movewide,
    MOVN_64_movewide,
    ADDS_64S_addsub_imm,
    ORR_64_log_imm,
    SUB_64_addsub_imm,
    EOR_64_log_imm,
    MOV_MOVZ_64_movewide,
    MOVZ_64_movewide,
    SUBS_64S_addsub_imm,
    ANDS_64S_log_imm,
    MOVK_64_movewide,
    FMOV_dup_z_i,
    REV_p_p,
    PNEXT_p_p_p,
    SQINCP_z_p_z,
    SQINCP_r_p_r_sx,
    SQINCP_r_p_r_x,
    UQINCP_z_p_z,
    UQINCP_r_p_r_uw,
    UQINCP_r_p_r_x,
    SQDECP_z_p_z,
    SQDECP_r_p_r_sx,
    SQDECP_r_p_r_x,
    UQDECP_z_p_z,
    UQDECP_r_p_r_uw,
    UQDECP_r_p_r_x,
    INCP_z_p_z,
    INCP_r_p_r,
    DECP_z_p_z,
    DECP_r_p_r,
    PTRUE_p_s,
    PTRUES_p_s,
    FEXPA_z_z,
    DUP_z_r,
    MOV_dup_z_r,
    INSR_z_r,
    SUNPKLO_z_z,
    SUNPKHI_z_z,
    UUNPKLO_z_z,
    UUNPKHI_z_z,
    INSR_z_v,
    REV_z_z,
    SUQADD_asisdmisc_R,
    SQABS_asisdmisc_R,
    CMGT_asisdmisc_Z,
    CMEQ_asisdmisc_Z,
    CMLT_asisdmisc_Z,
    ABS_asisdmisc_R,
    SQXTN_asisdmisc_N,
    ADDP_asisdpair_only,
    FRECPE_z_z,
    FRSQRTE_z_z,
    USQADD_asisdmisc_R,
    SQNEG_asisdmisc_R,
    CMGE_asisdmisc_Z,
    CMLE_asisdmisc_Z,
    NEG_asisdmisc_R,
    SQXTUN_asisdmisc_N,
    UQXTN_asisdmisc_N,
    FADD_z_p_zs,
    FSUB_z_p_zs,
    FMUL_z_p_zs,
    FSUBR_z_p_zs,
    FMAXNM_z_p_zs,
    FMINNM_z_p_zs,
    FMAX_z_p_zs,
    FMIN_z_p_zs,
    FCMGE_p_p_z0,
    FCMGT_p_p_z0,
    FCMLT_p_p_z0,
    FCMLE_p_p_z0,
    FCMEQ_p_p_z0,
    FCMNE_p_p_z0,
    ADD_z_p_zz,
    SADDV_r_p_z,
    ASR_z_p_zi,
    SUB_z_p_zz,
    UADDV_r_p_z,
    LSR_z_p_zi,
    SUBR_z_p_zz,
    LSL_z_p_zi,
    ASRD_z_p_zi,
    SMAX_z_p_zz,
    SMAXV_r_p_z,
    UMAX_z_p_zz,
    UMAXV_r_p_z,
    SMIN_z_p_zz,
    SMINV_r_p_z,
    UMIN_z_p_zz,
    UMINV_r_p_z,
    SABD_z_p_zz,
    UABD_z_p_zz,
    MUL_z_p_zz,
    ASR_z_p_zz,
    SXTB_z_p_z,
    LSR_z_p_zz,
    UXTB_z_p_z,
    SMULH_z_p_zz,
    SXTH_z_p_z,
    UMULH_z_p_zz,
    LSL_z_p_zz,
    UXTH_z_p_z,
    SDIV_z_p_zz,
    ASRR_z_p_zz,
    SXTW_z_p_z,
    UDIV_z_p_zz,
    LSRR_z_p_zz,
    UXTW_z_p_z,
    SDIVR_z_p_zz,
    ABS_z_p_z,
    UDIVR_z_p_zz,
    LSLR_z_p_zz,
    NEG_z_p_z,
    ORR_z_p_zz,
    ORV_r_p_z,
    ASR_z_p_zw,
    CLS_z_p_z,
    EOR_z_p_zz,
    EORV_r_p_z,
    LSR_z_p_zw,
    CLZ_z_p_z,
    AND_z_p_zz,
    ANDV_r_p_z,
    CNT_z_p_z,
    BIC_z_p_zz,
    LSL_z_p_zw,
    CNOT_z_p_z,
    FABS_z_p_z,
    FNEG_z_p_z,
    NOT_z_p_z,
    CPY_z_p_v,
    MOV_cpy_z_p_v,
    LASTA_r_p_z,
    COMPACT_z_p_z,
    LASTB_r_p_z,
    LASTA_v_p_z,
    LASTB_v_p_z,
    REVB_z_z,
    REVH_z_z,
    REVW_z_z,
    RBIT_z_p_z,
    CLASTA_z_p_zz,
    CPY_z_p_r,
    MOV_cpy_z_p_r,
    CLASTB_z_p_zz,
    CLASTA_v_p_z,
    CLASTB_v_p_z,
    SPLICE_z_p_zz_des,
    CLASTA_r_p_z,
    CLASTB_r_p_z,
    SMAX_z_zi,
    UMAX_z_zi,
    SMIN_z_zi,
    UMIN_z_zi,
    MUL_z_zi,
    FDUP_z_i,
    FMOV_fdup_z_i,
    FADDV_v_p_z,
    FADD_z_p_zz,
    FRINTN_z_p_z,
    FSUB_z_p_zz,
    FRINTP_z_p_z,
    FMUL_z_p_zz,
    FRINTM_z_p_z,
    FSUBR_z_p_zz,
    FRINTZ_z_p_z,
    FMAXNMV_v_p_z,
    FMAXNM_z_p_zz,
    FRINTA_z_p_z,
    FMINNMV_v_p_z,
    FMINNM_z_p_zz,
    FMAXV_v_p_z,
    FMAX_z_p_zz,
    FRINTX_z_p_z,
    FMINV_v_p_z,
    FMIN_z_p_zz,
    FRINTI_z_p_z,
    FABD_z_p_zz,
    FSCALE_z_p_zz,
    FMULX_z_p_zz,
    FDIVR_z_p_zz,
    FRECPX_z_p_z,
    FDIV_z_p_zz,
    FSQRT_z_p_z,
    FADDA_v_p_z,
    CNTP_r_p_p,
    ADD_z_zi,
    SUB_z_zi,
    SUBR_z_zi,
    SQADD_z_zi,
    UQADD_z_zi,
    SQSUB_z_zi,
    UQSUB_z_zi,
    DUP_z_i,
    MOV_dup_z_i,
    MOVPRFX_z_p_z,
    FCADD_z_p_zz,
    FTMAD_z_zzi,
    FMOV_cpy_z_p_i,
    ZIP1_p_pp,
    ZIP2_p_pp,
    UZP1_p_pp,
    UZP2_p_pp,
    TRN1_p_pp,
    TRN2_p_pp,
    FCPY_z_p_i,
    FMOV_fcpy_z_p_i,
    CPY_z_o_i,
    MOV_cpy_z_o_i,
    CPY_z_p_i,
    MOV_cpy_z_p_i,
    ADD_z_zz,
    SUB_z_zz,
    SQADD_z_zz,
    UQADD_z_zz,
    SQSUB_z_zz,
    UQSUB_z_zz,
    INDEX_z_ii,
    INDEX_z_ri,
    INDEX_z_ir,
    INDEX_z_rr,
    ASR_z_zw,
    LSR_z_zw,
    LSL_z_zw,
    ASR_z_zi,
    LSR_z_zi,
    LSL_z_zi,
    FTSSEL_z_zz,
    DUP_z_zi,
    MOV_dup_z_zi,
    TBL_z_zz_1,
    ZIP1_z_zz,
    ZIP2_z_zz,
    UZP1_z_zz,
    UZP2_z_zz,
    TRN1_z_zz,
    TRN2_z_zz,
    SDOT_z_zzz,
    UDOT_z_zzz,
    SQADD_asisdsame_only,
    SQSUB_asisdsame_only,
    CMGT_asisdsame_only,
    CMGE_asisdsame_only,
    SSHL_asisdsame_only,
    SQSHL_asisdsame_only,
    SRSHL_asisdsame_only,
    SQRSHL_asisdsame_only,
    ADD_asisdsame_only,
    CMTST_asisdsame_only,
    SQDMLAL_asisddiff_only,
    SQDMLSL_asisddiff_only,
    SQDMULH_asisdsame_only,
    SQDMULL_asisddiff_only,
    FADD_z_zz,
    FSUB_z_zz,
    FMUL_z_zz,
    FTSMUL_z_zz,
    FRECPS_z_zz,
    FRSQRTS_z_zz,
    SQRDMLAH_asisdsame2_only,
    SQRDMLSH_asisdsame2_only,
    UQADD_asisdsame_only,
    UQSUB_asisdsame_only,
    CMHI_asisdsame_only,
    CMHS_asisdsame_only,
    USHL_asisdsame_only,
    UQSHL_asisdsame_only,
    URSHL_asisdsame_only,
    UQRSHL_asisdsame_only,
    SUB_asisdsame_only,
    CMEQ_asisdsame_only,
    SQRDMULH_asisdsame_only,
    WHILELT_p_p_rr,
    WHILELE_p_p_rr,
    WHILELO_p_p_rr,
    WHILELS_p_p_rr,
    CMPHS_p_p_zz,
    CMPLS_cmphs_p_p_zz,
    CMPHI_p_p_zz,
    CMPLO_cmphi_p_p_zz,
    CMPEQ_p_p_zw,
    CMPNE_p_p_zw,
    CMPGE_p_p_zw,
    CMPGT_p_p_zw,
    CMPLT_p_p_zw,
    CMPLE_p_p_zw,
    CMPGE_p_p_zz,
    CMPLE_cmpge_p_p_zz,
    CMPGT_p_p_zz,
    CMPLT_cmpgt_p_p_zz,
    CMPEQ_p_p_zz,
    CMPNE_p_p_zz,
    CMPHS_p_p_zw,
    CMPHI_p_p_zw,
    CMPLO_p_p_zw,
    CMPLS_p_p_zw,
    CMPGE_p_p_zi,
    CMPGT_p_p_zi,
    CMPLT_p_p_zi,
    CMPLE_p_p_zi,
    CMPEQ_p_p_zi,
    CMPNE_p_p_zi,
    FCMGE_p_p_zz,
    FCMLE_fcmge_p_p_zz,
    FCMGT_p_p_zz,
    FCMLT_fcmgt_p_p_zz,
    FCMEQ_p_p_zz,
    FCMNE_p_p_zz,
    FCMUO_p_p_zz,
    FACGE_p_p_zz,
    FACLE_facge_p_p_zz,
    FACGT_p_p_zz,
    FACLT_facgt_p_p_zz,
    MLA_z_p_zzz,
    MLS_z_p_zzz,
    MAD_z_p_zzz,
    MSB_z_p_zzz,
    FMLA_z_p_zzz,
    FMLS_z_p_zzz,
    FNMLA_z_p_zzz,
    FNMLS_z_p_zzz,
    FMAD_z_p_zzz,
    FMSB_z_p_zzz,
    FNMAD_z_p_zzz,
    FNMSB_z_p_zzz,
    MOV_sel_z_p_zz,
    SEL_z_p_zz,
    FCMLA_z_p_zzz,
    CMPHS_p_p_zi,
    CMPHI_p_p_zi,
    CMPLO_p_p_zi,
    CMPLS_p_p_zi,
    MVN_ORN_32_log_shift,
    NEG_SUB_32_addsub_shift,
    NEGS_SUBS_32_addsub_shift,
    MVN_ORN_64_log_shift,
    NEG_SUB_64_addsub_shift,
    NEGS_SUBS_64_addsub_shift,
    CMN_ADDS_32_addsub_shift,
    TST_ANDS_32_log_shift,
    CMP_SUBS_32_addsub_shift,
    CMN_ADDS_64_addsub_shift,
    TST_ANDS_64_log_shift,
    CMP_SUBS_64_addsub_shift,
    AND_32_log_shift,
    BIC_32_log_shift,
    ADD_32_addsub_shift,
    ORR_32_log_shift,
    ORN_32_log_shift,
    ADDS_32_addsub_shift,
    EOR_32_log_shift,
    EON_32_log_shift,
    SUB_32_addsub_shift,
    ANDS_32_log_shift,
    BICS_32_log_shift,
    SUBS_32_addsub_shift,
    AND_64_log_shift,
    BIC_64_log_shift,
    ADD_64_addsub_shift,
    ORR_64_log_shift,
    ORN_64_log_shift,
    ADDS_64_addsub_shift,
    EOR_64_log_shift,
    EON_64_log_shift,
    SUB_64_addsub_shift,
    ANDS_64_log_shift,
    BICS_64_log_shift,
    SUBS_64_addsub_shift,
    SQDMLAL_asisdelem_L,
    SQDMLSL_asisdelem_L,
    SQDMULL_asisdelem_L,
    SQDMULH_asisdelem_R,
    SQRDMULH_asisdelem_R,
    SQRDMLAH_asisdelem_R,
    SQRDMLSH_asisdelem_R,
    B_only_condbranch,
    LDR_32_loadlit,
    LDR_S_loadlit,
    CBZ_32_compbranch,
    CBNZ_32_compbranch,
    LDR_64_loadlit,
    LDR_D_loadlit,
    LDRSW_64_loadlit,
    LDR_Q_loadlit,
    CBZ_64_compbranch,
    CBNZ_64_compbranch,
    PRFM_P_loadlit,
    B_only_branch_imm,
    BL_only_branch_imm,
    ST1_asisdlso_D1_1d,
    ST3_asisdlso_D3_3d,
    ST2_asisdlso_D2_2d,
    ST4_asisdlso_D4_4d,
    LD1_asisdlso_D1_1d,
    LD3_asisdlso_D3_3d,
    LD2_asisdlso_D2_2d,
    LD4_asisdlso_D4_4d,
    ST1_asisdlsop_D1_i1d,
    ST3_asisdlsop_D3_i3d,
    ST2_asisdlsop_D2_i2d,
    ST4_asisdlsop_D4_i4d,
    LD1_asisdlsop_D1_i1d,
    LD3_asisdlsop_D3_i3d,
    LD2_asisdlsop_D2_i2d,
    LD4_asisdlsop_D4_i4d,
    FMAXNMV_asimdall_only_H,
    FMAXV_asimdall_only_H,
    FRINTN_asimdmiscfp16_R,
    FRINTM_asimdmiscfp16_R,
    FCVTNS_asimdmiscfp16_R,
    FCVTMS_asimdmiscfp16_R,
    FCVTAS_asimdmiscfp16_R,
    SCVTF_asimdmiscfp16_R,
    BFCVTN_asimdmisc_4S,
    FMINNMV_asimdall_only_H,
    FMINV_asimdall_only_H,
    FCMGT_asimdmiscfp16_FZ,
    FCMEQ_asimdmiscfp16_FZ,
    FCMLT_asimdmiscfp16_FZ,
    FABS_asimdmiscfp16_R,
    FRINTP_asimdmiscfp16_R,
    FRINTZ_asimdmiscfp16_R,
    FCVTPS_asimdmiscfp16_R,
    FCVTZS_asimdmiscfp16_R,
    FRECPE_asimdmiscfp16_R,
    MVN_NOT_asimdmisc_R,
    NOT_asimdmisc_R,
    RBIT_asimdmisc_R,
    FRINTA_asimdmiscfp16_R,
    FRINTX_asimdmiscfp16_R,
    FCVTNU_asimdmiscfp16_R,
    FCVTMU_asimdmiscfp16_R,
    FCVTAU_asimdmiscfp16_R,
    UCVTF_asimdmiscfp16_R,
    FCMGE_asimdmiscfp16_FZ,
    FCMLE_asimdmiscfp16_FZ,
    FNEG_asimdmiscfp16_R,
    FRINTI_asimdmiscfp16_R,
    FCVTPU_asimdmiscfp16_R,
    FCVTZU_asimdmiscfp16_R,
    FRSQRTE_asimdmiscfp16_R,
    FSQRT_asimdmiscfp16_R,
    ST4_asisdlse_R4,
    ST1_asisdlse_R4_4v,
    ST3_asisdlse_R3,
    ST1_asisdlse_R3_3v,
    ST1_asisdlse_R1_1v,
    ST2_asisdlse_R2,
    ST1_asisdlse_R2_2v,
    LD4_asisdlse_R4,
    LD1_asisdlse_R4_4v,
    LD3_asisdlse_R3,
    LD1_asisdlse_R3_3v,
    LD1_asisdlse_R1_1v,
    LD2_asisdlse_R2,
    LD1_asisdlse_R2_2v,
    ST4_asisdlsep_I4_i,
    ST1_asisdlsep_I4_i4,
    ST3_asisdlsep_I3_i,
    ST1_asisdlsep_I3_i3,
    ST1_asisdlsep_I1_i1,
    ST2_asisdlsep_I2_i,
    ST1_asisdlsep_I2_i2,
    LD4_asisdlsep_I4_i,
    LD1_asisdlsep_I4_i4,
    LD3_asisdlsep_I3_i,
    LD1_asisdlsep_I3_i3,
    LD1_asisdlsep_I1_i1,
    LD2_asisdlsep_I2_i,
    LD1_asisdlsep_I2_i2,
    LD1R_asisdlso_R1,
    LD3R_asisdlso_R3,
    LD2R_asisdlso_R2,
    LD4R_asisdlso_R4,
    LD1R_asisdlsop_R1_i,
    LD3R_asisdlsop_R3_i,
    LD2R_asisdlsop_R2_i,
    LD4R_asisdlsop_R4_i,
    ST1_asisdlso_S1_1s,
    ST3_asisdlso_S3_3s,
    ST2_asisdlso_S2_2s,
    ST4_asisdlso_S4_4s,
    LD1_asisdlso_S1_1s,
    LD3_asisdlso_S3_3s,
    LD2_asisdlso_S2_2s,
    LD4_asisdlso_S4_4s,
    ST1_asisdlsop_S1_i1s,
    ST3_asisdlsop_S3_i3s,
    ST2_asisdlsop_S2_i2s,
    ST4_asisdlsop_S4_i4s,
    LD1_asisdlsop_S1_i1s,
    LD3_asisdlsop_S3_i3s,
    LD2_asisdlsop_S2_i2s,
    LD4_asisdlsop_S4_i4s,
    ST1_asisdlso_H1_1h,
    ST3_asisdlso_H3_3h,
    ST2_asisdlso_H2_2h,
    ST4_asisdlso_H4_4h,
    LD1_asisdlso_H1_1h,
    LD3_asisdlso_H3_3h,
    LD2_asisdlso_H2_2h,
    LD4_asisdlso_H4_4h,
    ST1_asisdlsop_H1_i1h,
    ST3_asisdlsop_H3_i3h,
    ST2_asisdlsop_H2_i2h,
    ST4_asisdlsop_H4_i4h,
    LD1_asisdlsop_H1_i1h,
    LD3_asisdlsop_H3_i3h,
    LD2_asisdlsop_H2_i2h,
    LD4_asisdlsop_H4_i4h,
    ST1_asisdlso_B1_1b,
    ST3_asisdlso_B3_3b,
    ST2_asisdlso_B2_2b,
    ST4_asisdlso_B4_4b,
    LD1_asisdlso_B1_1b,
    LD3_asisdlso_B3_3b,
    LD2_asisdlso_B2_2b,
    LD4_asisdlso_B4_4b,
    ST1_asisdlsop_B1_i1b,
    ST3_asisdlsop_B3_i3b,
    ST2_asisdlsop_B2_i2b,
    ST4_asisdlsop_B4_i4b,
    LD1_asisdlsop_B1_i1b,
    LD3_asisdlsop_B3_i3b,
    LD2_asisdlsop_B2_i2b,
    LD4_asisdlsop_B4_i4b,
    MOVI_asimdimm_N_b,
    FMOV_asimdimm_S_s,
    FMOV_asimdimm_H_h,
    MOVI_asimdimm_M_sm,
    MVNI_asimdimm_M_sm,
    MOVI_asimdimm_L_hl,
    ORR_asimdimm_L_hl,
    MVNI_asimdimm_L_hl,
    BIC_asimdimm_L_hl,
    MOVI_asimdimm_L_sl,
    ORR_asimdimm_L_sl,
    MVNI_asimdimm_L_sl,
    BIC_asimdimm_L_sl,
    ST1_asisdlsop_DX1_r1d,
    ST3_asisdlsop_DX3_r3d,
    ST2_asisdlsop_DX2_r2d,
    ST4_asisdlsop_DX4_r4d,
    LD1_asisdlsop_DX1_r1d,
    LD3_asisdlsop_DX3_r3d,
    LD2_asisdlsop_DX2_r2d,
    LD4_asisdlsop_DX4_r4d,
    TBL_asimdtbl_L1_1,
    DUP_asimdins_DV_v,
    DUP_asimdins_DR_r,
    TBX_asimdtbl_L1_1,
    TBL_asimdtbl_L2_2,
    TBX_asimdtbl_L2_2,
    TBL_asimdtbl_L3_3,
    TBX_asimdtbl_L3_3,
    TBL_asimdtbl_L4_4,
    TBX_asimdtbl_L4_4,
    AND_asimdsame_only,
    FMLAL_asimdsame_F,
    FMAXNM_asimdsamefp16_only,
    FMLA_asimdsamefp16_only,
    FADD_asimdsamefp16_only,
    FMULX_asimdsamefp16_only,
    FCMEQ_asimdsamefp16_only,
    FMAX_asimdsamefp16_only,
    FRECPS_asimdsamefp16_only,
    BIC_asimdsame_only,
    USDOT_asimdsame2_D,
    MOV_ORR_asimdsame_only,
    ORR_asimdsame_only,
    FMLSL_asimdsame_F,
    FMINNM_asimdsamefp16_only,
    FMLS_asimdsamefp16_only,
    FSUB_asimdsamefp16_only,
    FMIN_asimdsamefp16_only,
    FRSQRTS_asimdsamefp16_only,
    ORN_asimdsame_only,
    EOR_asimdsame_only,
    FMLAL2_asimdsame_F,
    FMAXNMP_asimdsamefp16_only,
    FADDP_asimdsamefp16_only,
    FMUL_asimdsamefp16_only,
    FCMGE_asimdsamefp16_only,
    FACGE_asimdsamefp16_only,
    FMAXP_asimdsamefp16_only,
    FDIV_asimdsamefp16_only,
    BFDOT_asimdsame2_D,
    BSL_asimdsame_only,
    BIT_asimdsame_only,
    FMLSL2_asimdsame_F,
    FMINNMP_asimdsamefp16_only,
    FABD_asimdsamefp16_only,
    FCMGT_asimdsamefp16_only,
    FACGT_asimdsamefp16_only,
    FMINP_asimdsamefp16_only,
    BFMLAL_asimdsame2_F,
    BIF_asimdsame_only,
    ST4_asisdlsep_R4_r,
    ST1_asisdlsep_R4_r4,
    ST3_asisdlsep_R3_r,
    ST1_asisdlsep_R3_r3,
    ST1_asisdlsep_R1_r1,
    ST2_asisdlsep_R2_r,
    ST1_asisdlsep_R2_r2,
    LD4_asisdlsep_R4_r,
    LD1_asisdlsep_R4_r4,
    LD3_asisdlsep_R3_r,
    LD1_asisdlsep_R3_r3,
    LD1_asisdlsep_R1_r1,
    LD2_asisdlsep_R2_r,
    LD1_asisdlsep_R2_r2,
    LD1R_asisdlsop_RX1_r,
    LD3R_asisdlsop_RX3_r,
    LD2R_asisdlsop_RX2_r,
    LD4R_asisdlsop_RX4_r,
    ST1_asisdlsop_SX1_r1s,
    ST3_asisdlsop_SX3_r3s,
    ST2_asisdlsop_SX2_r2s,
    ST4_asisdlsop_SX4_r4s,
    LD1_asisdlsop_SX1_r1s,
    LD3_asisdlsop_SX3_r3s,
    LD2_asisdlsop_SX2_r2s,
    LD4_asisdlsop_SX4_r4s,
    ST1_asisdlsop_HX1_r1h,
    ST3_asisdlsop_HX3_r3h,
    ST2_asisdlsop_HX2_r2h,
    ST4_asisdlsop_HX4_r4h,
    LD1_asisdlsop_HX1_r1h,
    LD3_asisdlsop_HX3_r3h,
    LD2_asisdlsop_HX2_r2h,
    LD4_asisdlsop_HX4_r4h,
    ST1_asisdlsop_BX1_r1b,
    ST3_asisdlsop_BX3_r3b,
    ST2_asisdlsop_BX2_r2b,
    ST4_asisdlsop_BX4_r4b,
    LD1_asisdlsop_BX1_r1b,
    LD3_asisdlsop_BX3_r3b,
    LD2_asisdlsop_BX2_r2b,
    LD4_asisdlsop_BX4_r4b,
    EXT_asimdext_only,
    FMLA_asimdelem_RH_H,
    FMLS_asimdelem_RH_H,
    FMUL_asimdelem_RH_H,
    SUDOT_asimdelem_D,
    BFDOT_asimdelem_E,
    FMLAL_asimdelem_LH,
    FMLSL_asimdelem_LH,
    USDOT_asimdelem_D,
    BFMLAL_asimdelem_F,
    FMULX_asimdelem_RH_H,
    FMLAL2_asimdelem_LH,
    FMLSL2_asimdelem_LH,
    FCMLA_asimdelem_C_H,
    FCMLA_asimdelem_C_S,
    FCVTN_asimdmisc_N,
    FCVTL_asimdmisc_L,
    FRINTN_asimdmisc_R,
    FRINTM_asimdmisc_R,
    FCVTNS_asimdmisc_R,
    FCVTMS_asimdmisc_R,
    FCVTAS_asimdmisc_R,
    SCVTF_asimdmisc_R,
    FRINT32Z_asimdmisc_R,
    FRINT64Z_asimdmisc_R,
    FCMGT_asimdmisc_FZ,
    FCMEQ_asimdmisc_FZ,
    FCMLT_asimdmisc_FZ,
    FABS_asimdmisc_R,
    FRINTP_asimdmisc_R,
    FRINTZ_asimdmisc_R,
    FCVTPS_asimdmisc_R,
    FCVTZS_asimdmisc_R,
    URECPE_asimdmisc_R,
    FRECPE_asimdmisc_R,
    FCVTXN_asimdmisc_N,
    FRINTA_asimdmisc_R,
    FRINTX_asimdmisc_R,
    FCVTNU_asimdmisc_R,
    FCVTMU_asimdmisc_R,
    FCVTAU_asimdmisc_R,
    UCVTF_asimdmisc_R,
    FRINT32X_asimdmisc_R,
    FRINT64X_asimdmisc_R,
    FMAXNMV_asimdall_only_SD,
    FMAXV_asimdall_only_SD,
    FCMGE_asimdmisc_FZ,
    FCMLE_asimdmisc_FZ,
    FNEG_asimdmisc_R,
    FRINTI_asimdmisc_R,
    FCVTPU_asimdmisc_R,
    FCVTZU_asimdmisc_R,
    URSQRTE_asimdmisc_R,
    FRSQRTE_asimdmisc_R,
    FSQRT_asimdmisc_R,
    FMINNMV_asimdall_only_SD,
    FMINV_asimdall_only_SD,
    FMAXNM_asimdsame_only,
    FMLA_asimdsame_only,
    FADD_asimdsame_only,
    FMULX_asimdsame_only,
    FCMEQ_asimdsame_only,
    FMAX_asimdsame_only,
    FRECPS_asimdsame_only,
    FMINNM_asimdsame_only,
    FMLS_asimdsame_only,
    FSUB_asimdsame_only,
    FMIN_asimdsame_only,
    FRSQRTS_asimdsame_only,
    FMAXNMP_asimdsame_only,
    FADDP_asimdsame_only,
    FMUL_asimdsame_only,
    FCMGE_asimdsame_only,
    FACGE_asimdsame_only,
    FMAXP_asimdsame_only,
    FDIV_asimdsame_only,
    FMINNMP_asimdsame_only,
    FABD_asimdsame_only,
    FCMGT_asimdsame_only,
    FACGT_asimdsame_only,
    FMINP_asimdsame_only,
    SXTL_SSHLL_asimdshf_L,
    UXTL_USHLL_asimdshf_L,
    SSHR_asimdshf_R,
    SSRA_asimdshf_R,
    SRSHR_asimdshf_R,
    SRSRA_asimdshf_R,
    SHL_asimdshf_R,
    SQSHL_asimdshf_R,
    SHRN_asimdshf_N,
    RSHRN_asimdshf_N,
    SQSHRN_asimdshf_N,
    SQRSHRN_asimdshf_N,
    SSHLL_asimdshf_L,
    SCVTF_asimdshf_C,
    FCVTZS_asimdshf_C,
    USHR_asimdshf_R,
    USRA_asimdshf_R,
    URSHR_asimdshf_R,
    URSRA_asimdshf_R,
    SRI_asimdshf_R,
    SLI_asimdshf_R,
    SQSHLU_asimdshf_R,
    UQSHL_asimdshf_R,
    SQSHRUN_asimdshf_N,
    SQRSHRUN_asimdshf_N,
    UQSHRN_asimdshf_N,
    UQRSHRN_asimdshf_N,
    USHLL_asimdshf_L,
    UCVTF_asimdshf_C,
    FCVTZU_asimdshf_C,
    FMLA_asimdelem_R_SD,
    FMLS_asimdelem_R_SD,
    FMUL_asimdelem_R_SD,
    FMULX_asimdelem_R_SD,
    REV64_asimdmisc_R,
    REV16_asimdmisc_R,
    SADDLP_asimdmisc_P,
    SUQADD_asimdmisc_R,
    CLS_asimdmisc_R,
    CNT_asimdmisc_R,
    SADALP_asimdmisc_P,
    SQABS_asimdmisc_R,
    CMGT_asimdmisc_Z,
    CMEQ_asimdmisc_Z,
    CMLT_asimdmisc_Z,
    ABS_asimdmisc_R,
    XTN_asimdmisc_N,
    SQXTN_asimdmisc_N,
    SADDLV_asimdall_only,
    SMAXV_asimdall_only,
    SMINV_asimdall_only,
    ADDV_asimdall_only,
    REV32_asimdmisc_R,
    UADDLP_asimdmisc_P,
    USQADD_asimdmisc_R,
    CLZ_asimdmisc_R,
    UADALP_asimdmisc_P,
    SQNEG_asimdmisc_R,
    CMGE_asimdmisc_Z,
    CMLE_asimdmisc_Z,
    NEG_asimdmisc_R,
    SQXTUN_asimdmisc_N,
    SHLL_asimdmisc_S,
    UQXTN_asimdmisc_N,
    UADDLV_asimdall_only,
    UMAXV_asimdall_only,
    UMINV_asimdall_only,
    UZP1_asimdperm_only,
    TRN1_asimdperm_only,
    ZIP1_asimdperm_only,
    UZP2_asimdperm_only,
    TRN2_asimdperm_only,
    ZIP2_asimdperm_only,
    SDOT_asimdsame2_D,
    SADDL_asimddiff_L,
    SHADD_asimdsame_only,
    SQADD_asimdsame_only,
    SADDW_asimddiff_W,
    SRHADD_asimdsame_only,
    SSUBL_asimddiff_L,
    SHSUB_asimdsame_only,
    SQSUB_asimdsame_only,
    SSUBW_asimddiff_W,
    CMGT_asimdsame_only,
    CMGE_asimdsame_only,
    ADDHN_asimddiff_N,
    SSHL_asimdsame_only,
    SQSHL_asimdsame_only,
    SABAL_asimddiff_L,
    SRSHL_asimdsame_only,
    SQRSHL_asimdsame_only,
    SUBHN_asimddiff_N,
    SMAX_asimdsame_only,
    SMIN_asimdsame_only,
    SABDL_asimddiff_L,
    SABD_asimdsame_only,
    SABA_asimdsame_only,
    SMLAL_asimddiff_L,
    ADD_asimdsame_only,
    CMTST_asimdsame_only,
    SQDMLAL_asimddiff_L,
    MLA_asimdsame_only,
    MUL_asimdsame_only,
    SMLSL_asimddiff_L,
    SMAXP_asimdsame_only,
    SMINP_asimdsame_only,
    SQDMLSL_asimddiff_L,
    SQDMULH_asimdsame_only,
    ADDP_asimdsame_only,
    SMULL_asimddiff_L,
    SQDMULL_asimddiff_L,
    PMULL_asimddiff_L,
    SQRDMLAH_asimdsame2_only,
    SQRDMLSH_asimdsame2_only,
    UDOT_asimdsame2_D,
    UADDL_asimddiff_L,
    UHADD_asimdsame_only,
    UQADD_asimdsame_only,
    UADDW_asimddiff_W,
    URHADD_asimdsame_only,
    USUBL_asimddiff_L,
    UHSUB_asimdsame_only,
    UQSUB_asimdsame_only,
    USUBW_asimddiff_W,
    CMHI_asimdsame_only,
    CMHS_asimdsame_only,
    RADDHN_asimddiff_N,
    USHL_asimdsame_only,
    UQSHL_asimdsame_only,
    UABAL_asimddiff_L,
    URSHL_asimdsame_only,
    UQRSHL_asimdsame_only,
    RSUBHN_asimddiff_N,
    UMAX_asimdsame_only,
    UMIN_asimdsame_only,
    UABDL_asimddiff_L,
    UABD_asimdsame_only,
    UABA_asimdsame_only,
    UMLAL_asimddiff_L,
    SUB_asimdsame_only,
    CMEQ_asimdsame_only,
    MLS_asimdsame_only,
    PMUL_asimdsame_only,
    UMLSL_asimddiff_L,
    UMAXP_asimdsame_only,
    UMINP_asimdsame_only,
    SQRDMULH_asimdsame_only,
    UMULL_asimddiff_L,
    FCADD_asimdsame2_C,
    FCMLA_asimdsame2_C,
    SMLAL_asimdelem_L,
    SQDMLAL_asimdelem_L,
    SMLSL_asimdelem_L,
    SQDMLSL_asimdelem_L,
    MUL_asimdelem_R,
    SMULL_asimdelem_L,
    SQDMULL_asimdelem_L,
    SQDMULH_asimdelem_R,
    SQRDMULH_asimdelem_R,
    SDOT_asimdelem_D,
    MLA_asimdelem_R,
    UMLAL_asimdelem_L,
    MLS_asimdelem_R,
    UMLSL_asimdelem_L,
    UMULL_asimdelem_L,
    SQRDMLAH_asimdelem_R,
    UDOT_asimdelem_D,
    SQRDMLSH_asimdelem_R,
    ADR_only_pcreladdr,
    ADRP_only_pcreladdr,
    TBZ_only_testbranch,
    TBNZ_only_testbranch,
    UNKNOWN(u32),
}

impl Instruction {
    // Primitive decoding mechanism through repetetive if checking. To be improved later
    pub fn decode(opcode: u32) -> Self {
        if opcode & 0xffffffff == 0x252c9000 {
            return Self::SETFFR_f;
        }
        if opcode & 0xffffffff == 0xd503201f {
            return Self::NOP_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503203f {
            return Self::YIELD_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503205f {
            return Self::WFE_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503207f {
            return Self::WFI_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503209f {
            return Self::SEV_HI_hints;
        }
        if opcode & 0xffffffff == 0xd50320bf {
            return Self::SEVL_HI_hints;
        }
        if opcode & 0xffffffff == 0xd50320df {
            return Self::DGH_HI_hints;
        }
        if opcode & 0xffffffff == 0xd50320ff {
            return Self::XPACLRI_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503211f {
            return Self::PACIA1716_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503215f {
            return Self::PACIB1716_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503219f {
            return Self::AUTIA1716_HI_hints;
        }
        if opcode & 0xffffffff == 0xd50321df {
            return Self::AUTIB1716_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503221f {
            return Self::ESB_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503223f {
            return Self::PSB_HC_hints;
        }
        if opcode & 0xffffffff == 0xd503225f {
            return Self::TSB_HC_hints;
        }
        if opcode & 0xffffffff == 0xd503229f {
            return Self::CSDB_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503231f {
            return Self::PACIAZ_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503233f {
            return Self::PACIASP_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503235f {
            return Self::PACIBZ_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503237f {
            return Self::PACIBSP_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503239f {
            return Self::AUTIAZ_HI_hints;
        }
        if opcode & 0xffffffff == 0xd50323bf {
            return Self::AUTIASP_HI_hints;
        }
        if opcode & 0xffffffff == 0xd50323df {
            return Self::AUTIBZ_HI_hints;
        }
        if opcode & 0xffffffff == 0xd50323ff {
            return Self::AUTIBSP_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503309f {
            return Self::SSBB_only_barriers;
        }
        if opcode & 0xffffffff == 0xd503349f {
            return Self::PSSBB_only_barriers;
        }
        if opcode & 0xffffffff == 0xd65f0bff {
            return Self::RETAA_64E_branch_reg;
        }
        if opcode & 0xffffffff == 0xd65f0fff {
            return Self::RETAB_64E_branch_reg;
        }
        if opcode & 0xffffffff == 0xd69f03e0 {
            return Self::ERET_64E_branch_reg;
        }
        if opcode & 0xffffffff == 0xd69f0bff {
            return Self::ERETAA_64E_branch_reg;
        }
        if opcode & 0xffffffff == 0xd69f0fff {
            return Self::ERETAB_64E_branch_reg;
        }
        if opcode & 0xffffffff == 0xd6bf03e0 {
            return Self::DRPS_64E_branch_reg;
        }
        if opcode & 0xfffffff0 == 0x2518e400 {
            return Self::PFALSE_p;
        }
        if opcode & 0xfffffff0 == 0x2519f000 {
            return Self::RDFFR_p_f;
        }
        if opcode & 0xffffffe0 == 0xd5031000 {
            return Self::WFET_only_systeminstrswithreg;
        }
        if opcode & 0xffffffe0 == 0xd5031020 {
            return Self::WFIT_only_systeminstrswithreg;
        }
        if opcode & 0xffffffe0 == 0xd50b7380 {
            return Self::CFP_SYS_CR_systeminstrs;
        }
        if opcode & 0xffffffe0 == 0xd50b73a0 {
            return Self::DVP_SYS_CR_systeminstrs;
        }
        if opcode & 0xffffffe0 == 0xd50b73e0 {
            return Self::CPP_SYS_CR_systeminstrs;
        }
        if opcode & 0xffffffe0 == 0xdac123e0 {
            return Self::PACIZA_64Z_dp_1src;
        }
        if opcode & 0xffffffe0 == 0xdac127e0 {
            return Self::PACIZB_64Z_dp_1src;
        }
        if opcode & 0xffffffe0 == 0xdac12be0 {
            return Self::PACDZA_64Z_dp_1src;
        }
        if opcode & 0xffffffe0 == 0xdac12fe0 {
            return Self::PACDZB_64Z_dp_1src;
        }
        if opcode & 0xffffffe0 == 0xdac133e0 {
            return Self::AUTIZA_64Z_dp_1src;
        }
        if opcode & 0xffffffe0 == 0xdac137e0 {
            return Self::AUTIZB_64Z_dp_1src;
        }
        if opcode & 0xffffffe0 == 0xdac13be0 {
            return Self::AUTDZA_64Z_dp_1src;
        }
        if opcode & 0xffffffe0 == 0xdac13fe0 {
            return Self::AUTDZB_64Z_dp_1src;
        }
        if opcode & 0xffffffe0 == 0xdac143e0 {
            return Self::XPACI_64Z_dp_1src;
        }
        if opcode & 0xffffffe0 == 0xdac147e0 {
            return Self::XPACD_64Z_dp_1src;
        }
        if opcode & 0xffffff3f == 0xd503241f {
            return Self::BTI_HB_hints;
        }
        if opcode & 0xfffffe1f == 0x25289000 {
            return Self::WRFFR_f_p;
        }
        if opcode & 0xfffffe10 == 0x5304000 {
            return Self::PUNPKLO_p_p;
        }
        if opcode & 0xfffffe10 == 0x5314000 {
            return Self::PUNPKHI_p_p;
        }
        if opcode & 0xfffffe10 == 0x2518f000 {
            return Self::RDFFR_p_p_f;
        }
        if opcode & 0xfffffe10 == 0x2558c000 {
            return Self::PFIRST_p_p_p;
        }
        if opcode & 0xfffffe10 == 0x2558f000 {
            return Self::RDFFRS_p_p_f;
        }
        if opcode & 0xfffffc1f == 0x3a00080d {
            return Self::SETF8_only_setf;
        }
        if opcode & 0xfffffc1f == 0x3a00480d {
            return Self::SETF16_only_setf;
        }
        if opcode & 0xfffffc1f == 0xd61f0000 {
            return Self::BR_64_branch_reg;
        }
        if opcode & 0xfffffc1f == 0xd61f081f {
            return Self::BRAAZ_64_branch_reg;
        }
        if opcode & 0xfffffc1f == 0xd61f0c1f {
            return Self::BRABZ_64_branch_reg;
        }
        if opcode & 0xfffffc1f == 0xd63f0000 {
            return Self::BLR_64_branch_reg;
        }
        if opcode & 0xfffffc1f == 0xd63f081f {
            return Self::BLRAAZ_64_branch_reg;
        }
        if opcode & 0xfffffc1f == 0xd63f0c1f {
            return Self::BLRABZ_64_branch_reg;
        }
        if opcode & 0xfffffc1f == 0xd65f0000 {
            return Self::RET_64R_branch_reg;
        }
        if opcode & 0xfffffc00 == 0x420bc00 {
            return Self::MOVPRFX_z_z;
        }
        if opcode & 0xfffffc00 == 0x11000000 {
            return Self::MOV_ADD_32_addsub_imm;
        }
        if opcode & 0xfffffc00 == 0x13001c00 {
            return Self::SXTB_SBFM_32M_bitfield;
        }
        if opcode & 0xfffffc00 == 0x13003c00 {
            return Self::SXTH_SBFM_32M_bitfield;
        }
        if opcode & 0xfffffc00 == 0x1e200000 {
            return Self::FCVTNS_32S_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e204000 {
            return Self::FMOV_S_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e20c000 {
            return Self::FABS_S_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e210000 {
            return Self::FCVTNU_32S_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e214000 {
            return Self::FNEG_S_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e21c000 {
            return Self::FSQRT_S_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e220000 {
            return Self::SCVTF_S32_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e22c000 {
            return Self::FCVT_DS_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e230000 {
            return Self::UCVTF_S32_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e23c000 {
            return Self::FCVT_HS_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e240000 {
            return Self::FCVTAS_32S_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e244000 {
            return Self::FRINTN_S_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e24c000 {
            return Self::FRINTP_S_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e250000 {
            return Self::FCVTAU_32S_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e254000 {
            return Self::FRINTM_S_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e25c000 {
            return Self::FRINTZ_S_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e260000 {
            return Self::FMOV_32S_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e264000 {
            return Self::FRINTA_S_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e270000 {
            return Self::FMOV_S32_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e274000 {
            return Self::FRINTX_S_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e27c000 {
            return Self::FRINTI_S_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e280000 {
            return Self::FCVTPS_32S_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e284000 {
            return Self::FRINT32Z_S_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e28c000 {
            return Self::FRINT32X_S_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e290000 {
            return Self::FCVTPU_32S_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e294000 {
            return Self::FRINT64Z_S_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e29c000 {
            return Self::FRINT64X_S_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e300000 {
            return Self::FCVTMS_32S_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e310000 {
            return Self::FCVTMU_32S_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e380000 {
            return Self::FCVTZS_32S_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e390000 {
            return Self::FCVTZU_32S_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e600000 {
            return Self::FCVTNS_32D_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e604000 {
            return Self::FMOV_D_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e60c000 {
            return Self::FABS_D_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e610000 {
            return Self::FCVTNU_32D_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e614000 {
            return Self::FNEG_D_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e61c000 {
            return Self::FSQRT_D_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e620000 {
            return Self::SCVTF_D32_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e624000 {
            return Self::FCVT_SD_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e630000 {
            return Self::UCVTF_D32_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e634000 {
            return Self::BFCVT_BS_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e63c000 {
            return Self::FCVT_HD_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e640000 {
            return Self::FCVTAS_32D_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e644000 {
            return Self::FRINTN_D_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e64c000 {
            return Self::FRINTP_D_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e650000 {
            return Self::FCVTAU_32D_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e654000 {
            return Self::FRINTM_D_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e65c000 {
            return Self::FRINTZ_D_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e664000 {
            return Self::FRINTA_D_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e674000 {
            return Self::FRINTX_D_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e67c000 {
            return Self::FRINTI_D_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e680000 {
            return Self::FCVTPS_32D_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e684000 {
            return Self::FRINT32Z_D_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e68c000 {
            return Self::FRINT32X_D_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e690000 {
            return Self::FCVTPU_32D_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e694000 {
            return Self::FRINT64Z_D_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e69c000 {
            return Self::FRINT64X_D_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1e700000 {
            return Self::FCVTMS_32D_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e710000 {
            return Self::FCVTMU_32D_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e780000 {
            return Self::FCVTZS_32D_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e790000 {
            return Self::FCVTZU_32D_float2int;
        }
        if opcode & 0xfffffc00 == 0x1e7e0000 {
            return Self::FJCVTZS_32D_float2int;
        }
        if opcode & 0xfffffc00 == 0x1ee00000 {
            return Self::FCVTNS_32H_float2int;
        }
        if opcode & 0xfffffc00 == 0x1ee04000 {
            return Self::FMOV_H_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1ee0c000 {
            return Self::FABS_H_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1ee10000 {
            return Self::FCVTNU_32H_float2int;
        }
        if opcode & 0xfffffc00 == 0x1ee14000 {
            return Self::FNEG_H_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1ee1c000 {
            return Self::FSQRT_H_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1ee20000 {
            return Self::SCVTF_H32_float2int;
        }
        if opcode & 0xfffffc00 == 0x1ee24000 {
            return Self::FCVT_SH_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1ee2c000 {
            return Self::FCVT_DH_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1ee30000 {
            return Self::UCVTF_H32_float2int;
        }
        if opcode & 0xfffffc00 == 0x1ee40000 {
            return Self::FCVTAS_32H_float2int;
        }
        if opcode & 0xfffffc00 == 0x1ee44000 {
            return Self::FRINTN_H_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1ee4c000 {
            return Self::FRINTP_H_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1ee50000 {
            return Self::FCVTAU_32H_float2int;
        }
        if opcode & 0xfffffc00 == 0x1ee54000 {
            return Self::FRINTM_H_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1ee5c000 {
            return Self::FRINTZ_H_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1ee60000 {
            return Self::FMOV_32H_float2int;
        }
        if opcode & 0xfffffc00 == 0x1ee64000 {
            return Self::FRINTA_H_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1ee70000 {
            return Self::FMOV_H32_float2int;
        }
        if opcode & 0xfffffc00 == 0x1ee74000 {
            return Self::FRINTX_H_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1ee7c000 {
            return Self::FRINTI_H_floatdp1;
        }
        if opcode & 0xfffffc00 == 0x1ee80000 {
            return Self::FCVTPS_32H_float2int;
        }
        if opcode & 0xfffffc00 == 0x1ee90000 {
            return Self::FCVTPU_32H_float2int;
        }
        if opcode & 0xfffffc00 == 0x1ef00000 {
            return Self::FCVTMS_32H_float2int;
        }
        if opcode & 0xfffffc00 == 0x1ef10000 {
            return Self::FCVTMU_32H_float2int;
        }
        if opcode & 0xfffffc00 == 0x1ef80000 {
            return Self::FCVTZS_32H_float2int;
        }
        if opcode & 0xfffffc00 == 0x1ef90000 {
            return Self::FCVTZU_32H_float2int;
        }
        if opcode & 0xfffffc00 == 0x4e284800 {
            return Self::AESE_B_cryptoaes;
        }
        if opcode & 0xfffffc00 == 0x4e285800 {
            return Self::AESD_B_cryptoaes;
        }
        if opcode & 0xfffffc00 == 0x4e286800 {
            return Self::AESMC_B_cryptoaes;
        }
        if opcode & 0xfffffc00 == 0x4e287800 {
            return Self::AESIMC_B_cryptoaes;
        }
        if opcode & 0xfffffc00 == 0x53001c00 {
            return Self::UXTB_UBFM_32M_bitfield;
        }
        if opcode & 0xfffffc00 == 0x53003c00 {
            return Self::UXTH_UBFM_32M_bitfield;
        }
        if opcode & 0xfffffc00 == 0x5ac00000 {
            return Self::RBIT_32_dp_1src;
        }
        if opcode & 0xfffffc00 == 0x5ac00400 {
            return Self::REV16_32_dp_1src;
        }
        if opcode & 0xfffffc00 == 0x5ac00800 {
            return Self::REV_32_dp_1src;
        }
        if opcode & 0xfffffc00 == 0x5ac01000 {
            return Self::CLZ_32_dp_1src;
        }
        if opcode & 0xfffffc00 == 0x5ac01400 {
            return Self::CLS_32_dp_1src;
        }
        if opcode & 0xfffffc00 == 0x5e280800 {
            return Self::SHA1H_SS_cryptosha2;
        }
        if opcode & 0xfffffc00 == 0x5e281800 {
            return Self::SHA1SU1_VV_cryptosha2;
        }
        if opcode & 0xfffffc00 == 0x5e282800 {
            return Self::SHA256SU0_VV_cryptosha2;
        }
        if opcode & 0xfffffc00 == 0x5e79a800 {
            return Self::FCVTNS_asisdmiscfp16_R;
        }
        if opcode & 0xfffffc00 == 0x5e79b800 {
            return Self::FCVTMS_asisdmiscfp16_R;
        }
        if opcode & 0xfffffc00 == 0x5e79c800 {
            return Self::FCVTAS_asisdmiscfp16_R;
        }
        if opcode & 0xfffffc00 == 0x5e79d800 {
            return Self::SCVTF_asisdmiscfp16_R;
        }
        if opcode & 0xfffffc00 == 0x5ef8c800 {
            return Self::FCMGT_asisdmiscfp16_FZ;
        }
        if opcode & 0xfffffc00 == 0x5ef8d800 {
            return Self::FCMEQ_asisdmiscfp16_FZ;
        }
        if opcode & 0xfffffc00 == 0x5ef8e800 {
            return Self::FCMLT_asisdmiscfp16_FZ;
        }
        if opcode & 0xfffffc00 == 0x5ef9a800 {
            return Self::FCVTPS_asisdmiscfp16_R;
        }
        if opcode & 0xfffffc00 == 0x5ef9b800 {
            return Self::FCVTZS_asisdmiscfp16_R;
        }
        if opcode & 0xfffffc00 == 0x5ef9d800 {
            return Self::FRECPE_asisdmiscfp16_R;
        }
        if opcode & 0xfffffc00 == 0x5ef9f800 {
            return Self::FRECPX_asisdmiscfp16_R;
        }
        if opcode & 0xfffffc00 == 0x7e79a800 {
            return Self::FCVTNU_asisdmiscfp16_R;
        }
        if opcode & 0xfffffc00 == 0x7e79b800 {
            return Self::FCVTMU_asisdmiscfp16_R;
        }
        if opcode & 0xfffffc00 == 0x7e79c800 {
            return Self::FCVTAU_asisdmiscfp16_R;
        }
        if opcode & 0xfffffc00 == 0x7e79d800 {
            return Self::UCVTF_asisdmiscfp16_R;
        }
        if opcode & 0xfffffc00 == 0x7ef8c800 {
            return Self::FCMGE_asisdmiscfp16_FZ;
        }
        if opcode & 0xfffffc00 == 0x7ef8d800 {
            return Self::FCMLE_asisdmiscfp16_FZ;
        }
        if opcode & 0xfffffc00 == 0x7ef9a800 {
            return Self::FCVTPU_asisdmiscfp16_R;
        }
        if opcode & 0xfffffc00 == 0x7ef9b800 {
            return Self::FCVTZU_asisdmiscfp16_R;
        }
        if opcode & 0xfffffc00 == 0x7ef9d800 {
            return Self::FRSQRTE_asisdmiscfp16_R;
        }
        if opcode & 0xfffffc00 == 0x91000000 {
            return Self::MOV_ADD_64_addsub_imm;
        }
        if opcode & 0xfffffc00 == 0x93401c00 {
            return Self::SXTB_SBFM_64M_bitfield;
        }
        if opcode & 0xfffffc00 == 0x93403c00 {
            return Self::SXTH_SBFM_64M_bitfield;
        }
        if opcode & 0xfffffc00 == 0x93407c00 {
            return Self::SXTW_SBFM_64M_bitfield;
        }
        if opcode & 0xfffffc00 == 0x9e200000 {
            return Self::FCVTNS_64S_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e210000 {
            return Self::FCVTNU_64S_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e220000 {
            return Self::SCVTF_S64_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e230000 {
            return Self::UCVTF_S64_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e240000 {
            return Self::FCVTAS_64S_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e250000 {
            return Self::FCVTAU_64S_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e280000 {
            return Self::FCVTPS_64S_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e290000 {
            return Self::FCVTPU_64S_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e300000 {
            return Self::FCVTMS_64S_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e310000 {
            return Self::FCVTMU_64S_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e380000 {
            return Self::FCVTZS_64S_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e390000 {
            return Self::FCVTZU_64S_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e600000 {
            return Self::FCVTNS_64D_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e610000 {
            return Self::FCVTNU_64D_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e620000 {
            return Self::SCVTF_D64_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e630000 {
            return Self::UCVTF_D64_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e640000 {
            return Self::FCVTAS_64D_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e650000 {
            return Self::FCVTAU_64D_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e660000 {
            return Self::FMOV_64D_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e670000 {
            return Self::FMOV_D64_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e680000 {
            return Self::FCVTPS_64D_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e690000 {
            return Self::FCVTPU_64D_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e700000 {
            return Self::FCVTMS_64D_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e710000 {
            return Self::FCVTMU_64D_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e780000 {
            return Self::FCVTZS_64D_float2int;
        }
        if opcode & 0xfffffc00 == 0x9e790000 {
            return Self::FCVTZU_64D_float2int;
        }
        if opcode & 0xfffffc00 == 0x9eae0000 {
            return Self::FMOV_64VX_float2int;
        }
        if opcode & 0xfffffc00 == 0x9eaf0000 {
            return Self::FMOV_V64I_float2int;
        }
        if opcode & 0xfffffc00 == 0x9ee00000 {
            return Self::FCVTNS_64H_float2int;
        }
        if opcode & 0xfffffc00 == 0x9ee10000 {
            return Self::FCVTNU_64H_float2int;
        }
        if opcode & 0xfffffc00 == 0x9ee20000 {
            return Self::SCVTF_H64_float2int;
        }
        if opcode & 0xfffffc00 == 0x9ee30000 {
            return Self::UCVTF_H64_float2int;
        }
        if opcode & 0xfffffc00 == 0x9ee40000 {
            return Self::FCVTAS_64H_float2int;
        }
        if opcode & 0xfffffc00 == 0x9ee50000 {
            return Self::FCVTAU_64H_float2int;
        }
        if opcode & 0xfffffc00 == 0x9ee60000 {
            return Self::FMOV_64H_float2int;
        }
        if opcode & 0xfffffc00 == 0x9ee70000 {
            return Self::FMOV_H64_float2int;
        }
        if opcode & 0xfffffc00 == 0x9ee80000 {
            return Self::FCVTPS_64H_float2int;
        }
        if opcode & 0xfffffc00 == 0x9ee90000 {
            return Self::FCVTPU_64H_float2int;
        }
        if opcode & 0xfffffc00 == 0x9ef00000 {
            return Self::FCVTMS_64H_float2int;
        }
        if opcode & 0xfffffc00 == 0x9ef10000 {
            return Self::FCVTMU_64H_float2int;
        }
        if opcode & 0xfffffc00 == 0x9ef80000 {
            return Self::FCVTZS_64H_float2int;
        }
        if opcode & 0xfffffc00 == 0x9ef90000 {
            return Self::FCVTZU_64H_float2int;
        }
        if opcode & 0xfffffc00 == 0xcec08000 {
            return Self::SHA512SU0_VV2_cryptosha512_2;
        }
        if opcode & 0xfffffc00 == 0xcec08400 {
            return Self::SM4E_VV4_cryptosha512_2;
        }
        if opcode & 0xfffffc00 == 0xd71f0800 {
            return Self::BRAA_64P_branch_reg;
        }
        if opcode & 0xfffffc00 == 0xd71f0c00 {
            return Self::BRAB_64P_branch_reg;
        }
        if opcode & 0xfffffc00 == 0xd73f0800 {
            return Self::BLRAA_64P_branch_reg;
        }
        if opcode & 0xfffffc00 == 0xd73f0c00 {
            return Self::BLRAB_64P_branch_reg;
        }
        if opcode & 0xfffffc00 == 0xd9200000 {
            return Self::STZGM_64bulk_ldsttags;
        }
        if opcode & 0xfffffc00 == 0xd9a00000 {
            return Self::STGM_64bulk_ldsttags;
        }
        if opcode & 0xfffffc00 == 0xd9e00000 {
            return Self::LDGM_64bulk_ldsttags;
        }
        if opcode & 0xfffffc00 == 0xdac00000 {
            return Self::RBIT_64_dp_1src;
        }
        if opcode & 0xfffffc00 == 0xdac00400 {
            return Self::REV16_64_dp_1src;
        }
        if opcode & 0xfffffc00 == 0xdac00800 {
            return Self::REV32_64_dp_1src;
        }
        if opcode & 0xfffffc00 == 0xdac00c00 {
            return Self::REV_64_dp_1src;
        }
        if opcode & 0xfffffc00 == 0xdac00c00 {
            return Self::REV64_REV_64_dp_1src;
        }
        if opcode & 0xfffffc00 == 0xdac01000 {
            return Self::CLZ_64_dp_1src;
        }
        if opcode & 0xfffffc00 == 0xdac01400 {
            return Self::CLS_64_dp_1src;
        }
        if opcode & 0xfffffc00 == 0xdac10000 {
            return Self::PACIA_64P_dp_1src;
        }
        if opcode & 0xfffffc00 == 0xdac10400 {
            return Self::PACIB_64P_dp_1src;
        }
        if opcode & 0xfffffc00 == 0xdac10800 {
            return Self::PACDA_64P_dp_1src;
        }
        if opcode & 0xfffffc00 == 0xdac10c00 {
            return Self::PACDB_64P_dp_1src;
        }
        if opcode & 0xfffffc00 == 0xdac11000 {
            return Self::AUTIA_64P_dp_1src;
        }
        if opcode & 0xfffffc00 == 0xdac11400 {
            return Self::AUTIB_64P_dp_1src;
        }
        if opcode & 0xfffffc00 == 0xdac11800 {
            return Self::AUTDA_64P_dp_1src;
        }
        if opcode & 0xfffffc00 == 0xdac11c00 {
            return Self::AUTDB_64P_dp_1src;
        }
        if opcode & 0xfffffc00 == 0xf83f9000 {
            return Self::ST64B_64L_memop;
        }
        if opcode & 0xfffffc00 == 0xf83fd000 {
            return Self::LD64B_64L_memop;
        }
        if opcode & 0xfffff800 == 0x4bf5000 {
            return Self::RDVL_r_i;
        }
        if opcode & 0xfffff3ff == 0xd503323f {
            return Self::DSB_BOn_barriers;
        }
        if opcode & 0xfffff0ff == 0xd500401f {
            return Self::CFINV_M_pstate;
        }
        if opcode & 0xfffff0ff == 0xd500403f {
            return Self::XAFLAG_M_pstate;
        }
        if opcode & 0xfffff0ff == 0xd500405f {
            return Self::AXFLAG_M_pstate;
        }
        if opcode & 0xfffff0ff == 0xd503305f {
            return Self::CLREX_BN_barriers;
        }
        if opcode & 0xfffff0ff == 0xd503309f {
            return Self::DSB_BO_barriers;
        }
        if opcode & 0xfffff0ff == 0xd50330bf {
            return Self::DMB_BO_barriers;
        }
        if opcode & 0xfffff0ff == 0xd50330df {
            return Self::ISB_BI_barriers;
        }
        if opcode & 0xfffff0ff == 0xd50330ff {
            return Self::SB_only_barriers;
        }
        if opcode & 0xfffff01f == 0xd503201f {
            return Self::HINT_HM_hints;
        }
        if opcode & 0xffffe000 == 0x648aa000 {
            return Self::BFCVTNT_z_p_z_s2bf;
        }
        if opcode & 0xffffe000 == 0x6552a000 {
            return Self::SCVTF_z_p_z_h2fp16;
        }
        if opcode & 0xffffe000 == 0x6553a000 {
            return Self::UCVTF_z_p_z_h2fp16;
        }
        if opcode & 0xffffe000 == 0x6554a000 {
            return Self::SCVTF_z_p_z_w2fp16;
        }
        if opcode & 0xffffe000 == 0x6555a000 {
            return Self::UCVTF_z_p_z_w2fp16;
        }
        if opcode & 0xffffe000 == 0x6556a000 {
            return Self::SCVTF_z_p_z_x2fp16;
        }
        if opcode & 0xffffe000 == 0x6557a000 {
            return Self::UCVTF_z_p_z_x2fp16;
        }
        if opcode & 0xffffe000 == 0x655aa000 {
            return Self::FCVTZS_z_p_z_fp162h;
        }
        if opcode & 0xffffe000 == 0x655ba000 {
            return Self::FCVTZU_z_p_z_fp162h;
        }
        if opcode & 0xffffe000 == 0x655ca000 {
            return Self::FCVTZS_z_p_z_fp162w;
        }
        if opcode & 0xffffe000 == 0x655da000 {
            return Self::FCVTZU_z_p_z_fp162w;
        }
        if opcode & 0xffffe000 == 0x655ea000 {
            return Self::FCVTZS_z_p_z_fp162x;
        }
        if opcode & 0xffffe000 == 0x655fa000 {
            return Self::FCVTZU_z_p_z_fp162x;
        }
        if opcode & 0xffffe000 == 0x6588a000 {
            return Self::FCVT_z_p_z_s2h;
        }
        if opcode & 0xffffe000 == 0x6589a000 {
            return Self::FCVT_z_p_z_h2s;
        }
        if opcode & 0xffffe000 == 0x658aa000 {
            return Self::BFCVT_z_p_z_s2bf;
        }
        if opcode & 0xffffe000 == 0x6594a000 {
            return Self::SCVTF_z_p_z_w2s;
        }
        if opcode & 0xffffe000 == 0x6595a000 {
            return Self::UCVTF_z_p_z_w2s;
        }
        if opcode & 0xffffe000 == 0x659ca000 {
            return Self::FCVTZS_z_p_z_s2w;
        }
        if opcode & 0xffffe000 == 0x659da000 {
            return Self::FCVTZU_z_p_z_s2w;
        }
        if opcode & 0xffffe000 == 0x65c8a000 {
            return Self::FCVT_z_p_z_d2h;
        }
        if opcode & 0xffffe000 == 0x65c9a000 {
            return Self::FCVT_z_p_z_h2d;
        }
        if opcode & 0xffffe000 == 0x65caa000 {
            return Self::FCVT_z_p_z_d2s;
        }
        if opcode & 0xffffe000 == 0x65cba000 {
            return Self::FCVT_z_p_z_s2d;
        }
        if opcode & 0xffffe000 == 0x65d0a000 {
            return Self::SCVTF_z_p_z_w2d;
        }
        if opcode & 0xffffe000 == 0x65d1a000 {
            return Self::UCVTF_z_p_z_w2d;
        }
        if opcode & 0xffffe000 == 0x65d4a000 {
            return Self::SCVTF_z_p_z_x2s;
        }
        if opcode & 0xffffe000 == 0x65d5a000 {
            return Self::UCVTF_z_p_z_x2s;
        }
        if opcode & 0xffffe000 == 0x65d6a000 {
            return Self::SCVTF_z_p_z_x2d;
        }
        if opcode & 0xffffe000 == 0x65d7a000 {
            return Self::UCVTF_z_p_z_x2d;
        }
        if opcode & 0xffffe000 == 0x65d8a000 {
            return Self::FCVTZS_z_p_z_d2w;
        }
        if opcode & 0xffffe000 == 0x65d9a000 {
            return Self::FCVTZU_z_p_z_d2w;
        }
        if opcode & 0xffffe000 == 0x65dca000 {
            return Self::FCVTZS_z_p_z_s2x;
        }
        if opcode & 0xffffe000 == 0x65dda000 {
            return Self::FCVTZU_z_p_z_s2x;
        }
        if opcode & 0xffffe000 == 0x65dea000 {
            return Self::FCVTZS_z_p_z_d2x;
        }
        if opcode & 0xffffe000 == 0x65dfa000 {
            return Self::FCVTZU_z_p_z_d2x;
        }
        if opcode & 0xffffc21f == 0x2550c000 {
            return Self::PTEST_p_p;
        }
        if opcode & 0xffffc210 == 0x25184000 {
            return Self::BRKN_p_p_pp;
        }
        if opcode & 0xffffc210 == 0x25504000 {
            return Self::BRKAS_p_p_p_z;
        }
        if opcode & 0xffffc210 == 0x25584000 {
            return Self::BRKNS_p_p_pp;
        }
        if opcode & 0xffffc210 == 0x25d04000 {
            return Self::BRKBS_p_p_p_z;
        }
        if opcode & 0xffffc200 == 0x25104000 {
            return Self::BRKA_p_p_p;
        }
        if opcode & 0xffffc200 == 0x25904000 {
            return Self::BRKB_p_p_p;
        }
        if opcode & 0xffff0fe0 == 0x1a9f07e0 {
            return Self::CSET_CSINC_32_condsel;
        }
        if opcode & 0xffff0fe0 == 0x5a9f03e0 {
            return Self::CSETM_CSINV_32_condsel;
        }
        if opcode & 0xffff0fe0 == 0x9a9f07e0 {
            return Self::CSET_CSINC_64_condsel;
        }
        if opcode & 0xffff0fe0 == 0xda9f03e0 {
            return Self::CSETM_CSINV_64_condsel;
        }
        if opcode & 0xffff0000 == 0x0 {
            return Self::UDF_only_perm_undef;
        }
        if opcode & 0xffff0000 == 0x1e020000 {
            return Self::SCVTF_S32_float2fix;
        }
        if opcode & 0xffff0000 == 0x1e030000 {
            return Self::UCVTF_S32_float2fix;
        }
        if opcode & 0xffff0000 == 0x1e180000 {
            return Self::FCVTZS_32S_float2fix;
        }
        if opcode & 0xffff0000 == 0x1e190000 {
            return Self::FCVTZU_32S_float2fix;
        }
        if opcode & 0xffff0000 == 0x1e420000 {
            return Self::SCVTF_D32_float2fix;
        }
        if opcode & 0xffff0000 == 0x1e430000 {
            return Self::UCVTF_D32_float2fix;
        }
        if opcode & 0xffff0000 == 0x1e580000 {
            return Self::FCVTZS_32D_float2fix;
        }
        if opcode & 0xffff0000 == 0x1e590000 {
            return Self::FCVTZU_32D_float2fix;
        }
        if opcode & 0xffff0000 == 0x1ec20000 {
            return Self::SCVTF_H32_float2fix;
        }
        if opcode & 0xffff0000 == 0x1ec30000 {
            return Self::UCVTF_H32_float2fix;
        }
        if opcode & 0xffff0000 == 0x1ed80000 {
            return Self::FCVTZS_32H_float2fix;
        }
        if opcode & 0xffff0000 == 0x1ed90000 {
            return Self::FCVTZU_32H_float2fix;
        }
        if opcode & 0xffff0000 == 0x9e020000 {
            return Self::SCVTF_S64_float2fix;
        }
        if opcode & 0xffff0000 == 0x9e030000 {
            return Self::UCVTF_S64_float2fix;
        }
        if opcode & 0xffff0000 == 0x9e180000 {
            return Self::FCVTZS_64S_float2fix;
        }
        if opcode & 0xffff0000 == 0x9e190000 {
            return Self::FCVTZU_64S_float2fix;
        }
        if opcode & 0xffff0000 == 0x9e420000 {
            return Self::SCVTF_D64_float2fix;
        }
        if opcode & 0xffff0000 == 0x9e430000 {
            return Self::UCVTF_D64_float2fix;
        }
        if opcode & 0xffff0000 == 0x9e580000 {
            return Self::FCVTZS_64D_float2fix;
        }
        if opcode & 0xffff0000 == 0x9e590000 {
            return Self::FCVTZU_64D_float2fix;
        }
        if opcode & 0xffff0000 == 0x9ec20000 {
            return Self::SCVTF_H64_float2fix;
        }
        if opcode & 0xffff0000 == 0x9ec30000 {
            return Self::UCVTF_H64_float2fix;
        }
        if opcode & 0xffff0000 == 0x9ed80000 {
            return Self::FCVTZS_64H_float2fix;
        }
        if opcode & 0xffff0000 == 0x9ed90000 {
            return Self::FCVTZU_64H_float2fix;
        }
        if opcode & 0xfffc0000 == 0x5000000 {
            return Self::ORN_orr_z_zi;
        }
        if opcode & 0xfffc0000 == 0x5000000 {
            return Self::ORR_z_zi;
        }
        if opcode & 0xfffc0000 == 0x5400000 {
            return Self::EON_eor_z_zi;
        }
        if opcode & 0xfffc0000 == 0x5400000 {
            return Self::EOR_z_zi;
        }
        if opcode & 0xfffc0000 == 0x5800000 {
            return Self::AND_z_zi;
        }
        if opcode & 0xfffc0000 == 0x5800000 {
            return Self::BIC_and_z_zi;
        }
        if opcode & 0xfffc0000 == 0x5c00000 {
            return Self::DUPM_z_i;
        }
        if opcode & 0xfffc0000 == 0x5c00000 {
            return Self::MOV_dupm_z_i;
        }
        if opcode & 0xfff8fe00 == 0xd5087800 {
            return Self::AT_SYS_CR_systeminstrs;
        }
        if opcode & 0xfff8fc00 == 0x2f00e400 {
            return Self::MOVI_asimdimm_D_ds;
        }
        if opcode & 0xfff8fc00 == 0x6f00e400 {
            return Self::MOVI_asimdimm_D2_d;
        }
        if opcode & 0xfff8fc00 == 0x6f00f400 {
            return Self::FMOV_asimdimm_D2_d;
        }
        if opcode & 0xfff8f01f == 0xd500401f {
            return Self::MSR_SI_pstate;
        }
        if opcode & 0xfff8f000 == 0xd5087000 {
            return Self::DC_SYS_CR_systeminstrs;
        }
        if opcode & 0xfff8f000 == 0xd5087000 {
            return Self::IC_SYS_CR_systeminstrs;
        }
        if opcode & 0xfff8f000 == 0xd5088000 {
            return Self::TLBI_SYS_CR_systeminstrs;
        }
        if opcode & 0xfff80000 == 0xd5080000 {
            return Self::SYS_CR_systeminstrs;
        }
        if opcode & 0xfff80000 == 0xd5280000 {
            return Self::SYSL_RC_systeminstrs;
        }
        if opcode & 0xfff0fc00 == 0x420e000 {
            return Self::CNTB_r_s;
        }
        if opcode & 0xfff0fc00 == 0x420f000 {
            return Self::SQINCB_r_rs_sx;
        }
        if opcode & 0xfff0fc00 == 0x420f400 {
            return Self::UQINCB_r_rs_uw;
        }
        if opcode & 0xfff0fc00 == 0x420f800 {
            return Self::SQDECB_r_rs_sx;
        }
        if opcode & 0xfff0fc00 == 0x420fc00 {
            return Self::UQDECB_r_rs_uw;
        }
        if opcode & 0xfff0fc00 == 0x430e000 {
            return Self::INCB_r_rs;
        }
        if opcode & 0xfff0fc00 == 0x430e400 {
            return Self::DECB_r_rs;
        }
        if opcode & 0xfff0fc00 == 0x430f000 {
            return Self::SQINCB_r_rs_x;
        }
        if opcode & 0xfff0fc00 == 0x430f400 {
            return Self::UQINCB_r_rs_x;
        }
        if opcode & 0xfff0fc00 == 0x430f800 {
            return Self::SQDECB_r_rs_x;
        }
        if opcode & 0xfff0fc00 == 0x430fc00 {
            return Self::UQDECB_r_rs_x;
        }
        if opcode & 0xfff0fc00 == 0x460c000 {
            return Self::SQINCH_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x460c400 {
            return Self::UQINCH_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x460c800 {
            return Self::SQDECH_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x460cc00 {
            return Self::UQDECH_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x460e000 {
            return Self::CNTH_r_s;
        }
        if opcode & 0xfff0fc00 == 0x460f000 {
            return Self::SQINCH_r_rs_sx;
        }
        if opcode & 0xfff0fc00 == 0x460f400 {
            return Self::UQINCH_r_rs_uw;
        }
        if opcode & 0xfff0fc00 == 0x460f800 {
            return Self::SQDECH_r_rs_sx;
        }
        if opcode & 0xfff0fc00 == 0x460fc00 {
            return Self::UQDECH_r_rs_uw;
        }
        if opcode & 0xfff0fc00 == 0x470c000 {
            return Self::INCH_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x470c400 {
            return Self::DECH_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x470e000 {
            return Self::INCH_r_rs;
        }
        if opcode & 0xfff0fc00 == 0x470e400 {
            return Self::DECH_r_rs;
        }
        if opcode & 0xfff0fc00 == 0x470f000 {
            return Self::SQINCH_r_rs_x;
        }
        if opcode & 0xfff0fc00 == 0x470f400 {
            return Self::UQINCH_r_rs_x;
        }
        if opcode & 0xfff0fc00 == 0x470f800 {
            return Self::SQDECH_r_rs_x;
        }
        if opcode & 0xfff0fc00 == 0x470fc00 {
            return Self::UQDECH_r_rs_x;
        }
        if opcode & 0xfff0fc00 == 0x4a0c000 {
            return Self::SQINCW_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x4a0c400 {
            return Self::UQINCW_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x4a0c800 {
            return Self::SQDECW_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x4a0cc00 {
            return Self::UQDECW_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x4a0e000 {
            return Self::CNTW_r_s;
        }
        if opcode & 0xfff0fc00 == 0x4a0f000 {
            return Self::SQINCW_r_rs_sx;
        }
        if opcode & 0xfff0fc00 == 0x4a0f400 {
            return Self::UQINCW_r_rs_uw;
        }
        if opcode & 0xfff0fc00 == 0x4a0f800 {
            return Self::SQDECW_r_rs_sx;
        }
        if opcode & 0xfff0fc00 == 0x4a0fc00 {
            return Self::UQDECW_r_rs_uw;
        }
        if opcode & 0xfff0fc00 == 0x4b0c000 {
            return Self::INCW_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x4b0c400 {
            return Self::DECW_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x4b0e000 {
            return Self::INCW_r_rs;
        }
        if opcode & 0xfff0fc00 == 0x4b0e400 {
            return Self::DECW_r_rs;
        }
        if opcode & 0xfff0fc00 == 0x4b0f000 {
            return Self::SQINCW_r_rs_x;
        }
        if opcode & 0xfff0fc00 == 0x4b0f400 {
            return Self::UQINCW_r_rs_x;
        }
        if opcode & 0xfff0fc00 == 0x4b0f800 {
            return Self::SQDECW_r_rs_x;
        }
        if opcode & 0xfff0fc00 == 0x4b0fc00 {
            return Self::UQDECW_r_rs_x;
        }
        if opcode & 0xfff0fc00 == 0x4e0c000 {
            return Self::SQINCD_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x4e0c400 {
            return Self::UQINCD_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x4e0c800 {
            return Self::SQDECD_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x4e0cc00 {
            return Self::UQDECD_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x4e0e000 {
            return Self::CNTD_r_s;
        }
        if opcode & 0xfff0fc00 == 0x4e0f000 {
            return Self::SQINCD_r_rs_sx;
        }
        if opcode & 0xfff0fc00 == 0x4e0f400 {
            return Self::UQINCD_r_rs_uw;
        }
        if opcode & 0xfff0fc00 == 0x4e0f800 {
            return Self::SQDECD_r_rs_sx;
        }
        if opcode & 0xfff0fc00 == 0x4e0fc00 {
            return Self::UQDECD_r_rs_uw;
        }
        if opcode & 0xfff0fc00 == 0x4f0c000 {
            return Self::INCD_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x4f0c400 {
            return Self::DECD_z_zs;
        }
        if opcode & 0xfff0fc00 == 0x4f0e000 {
            return Self::INCD_r_rs;
        }
        if opcode & 0xfff0fc00 == 0x4f0e400 {
            return Self::DECD_r_rs;
        }
        if opcode & 0xfff0fc00 == 0x4f0f000 {
            return Self::SQINCD_r_rs_x;
        }
        if opcode & 0xfff0fc00 == 0x4f0f400 {
            return Self::UQINCD_r_rs_x;
        }
        if opcode & 0xfff0fc00 == 0x4f0f800 {
            return Self::SQDECD_r_rs_x;
        }
        if opcode & 0xfff0fc00 == 0x4f0fc00 {
            return Self::UQDECD_r_rs_x;
        }
        if opcode & 0xfff0e000 == 0xa4002000 {
            return Self::LD1RQB_z_p_bi_u8;
        }
        if opcode & 0xfff0e000 == 0xa400a000 {
            return Self::LD1B_z_p_bi_u8;
        }
        if opcode & 0xfff0e000 == 0xa400e000 {
            return Self::LDNT1B_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xa410a000 {
            return Self::LDNF1B_z_p_bi_u8;
        }
        if opcode & 0xfff0e000 == 0xa4202000 {
            return Self::LD1ROB_z_p_bi_u8;
        }
        if opcode & 0xfff0e000 == 0xa420a000 {
            return Self::LD1B_z_p_bi_u16;
        }
        if opcode & 0xfff0e000 == 0xa420e000 {
            return Self::LD2B_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xa430a000 {
            return Self::LDNF1B_z_p_bi_u16;
        }
        if opcode & 0xfff0e000 == 0xa440a000 {
            return Self::LD1B_z_p_bi_u32;
        }
        if opcode & 0xfff0e000 == 0xa440e000 {
            return Self::LD3B_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xa450a000 {
            return Self::LDNF1B_z_p_bi_u32;
        }
        if opcode & 0xfff0e000 == 0xa460a000 {
            return Self::LD1B_z_p_bi_u64;
        }
        if opcode & 0xfff0e000 == 0xa460e000 {
            return Self::LD4B_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xa470a000 {
            return Self::LDNF1B_z_p_bi_u64;
        }
        if opcode & 0xfff0e000 == 0xa4802000 {
            return Self::LD1RQH_z_p_bi_u16;
        }
        if opcode & 0xfff0e000 == 0xa480a000 {
            return Self::LD1SW_z_p_bi_s64;
        }
        if opcode & 0xfff0e000 == 0xa480e000 {
            return Self::LDNT1H_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xa490a000 {
            return Self::LDNF1SW_z_p_bi_s64;
        }
        if opcode & 0xfff0e000 == 0xa4a02000 {
            return Self::LD1ROH_z_p_bi_u16;
        }
        if opcode & 0xfff0e000 == 0xa4a0a000 {
            return Self::LD1H_z_p_bi_u16;
        }
        if opcode & 0xfff0e000 == 0xa4a0e000 {
            return Self::LD2H_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xa4b0a000 {
            return Self::LDNF1H_z_p_bi_u16;
        }
        if opcode & 0xfff0e000 == 0xa4c0a000 {
            return Self::LD1H_z_p_bi_u32;
        }
        if opcode & 0xfff0e000 == 0xa4c0e000 {
            return Self::LD3H_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xa4d0a000 {
            return Self::LDNF1H_z_p_bi_u32;
        }
        if opcode & 0xfff0e000 == 0xa4e0a000 {
            return Self::LD1H_z_p_bi_u64;
        }
        if opcode & 0xfff0e000 == 0xa4e0e000 {
            return Self::LD4H_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xa4f0a000 {
            return Self::LDNF1H_z_p_bi_u64;
        }
        if opcode & 0xfff0e000 == 0xa5002000 {
            return Self::LD1RQW_z_p_bi_u32;
        }
        if opcode & 0xfff0e000 == 0xa500a000 {
            return Self::LD1SH_z_p_bi_s64;
        }
        if opcode & 0xfff0e000 == 0xa500e000 {
            return Self::LDNT1W_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xa510a000 {
            return Self::LDNF1SH_z_p_bi_s64;
        }
        if opcode & 0xfff0e000 == 0xa5202000 {
            return Self::LD1ROW_z_p_bi_u32;
        }
        if opcode & 0xfff0e000 == 0xa520a000 {
            return Self::LD1SH_z_p_bi_s32;
        }
        if opcode & 0xfff0e000 == 0xa520e000 {
            return Self::LD2W_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xa530a000 {
            return Self::LDNF1SH_z_p_bi_s32;
        }
        if opcode & 0xfff0e000 == 0xa540a000 {
            return Self::LD1W_z_p_bi_u32;
        }
        if opcode & 0xfff0e000 == 0xa540e000 {
            return Self::LD3W_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xa550a000 {
            return Self::LDNF1W_z_p_bi_u32;
        }
        if opcode & 0xfff0e000 == 0xa560a000 {
            return Self::LD1W_z_p_bi_u64;
        }
        if opcode & 0xfff0e000 == 0xa560e000 {
            return Self::LD4W_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xa570a000 {
            return Self::LDNF1W_z_p_bi_u64;
        }
        if opcode & 0xfff0e000 == 0xa5802000 {
            return Self::LD1RQD_z_p_bi_u64;
        }
        if opcode & 0xfff0e000 == 0xa580a000 {
            return Self::LD1SB_z_p_bi_s64;
        }
        if opcode & 0xfff0e000 == 0xa580e000 {
            return Self::LDNT1D_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xa590a000 {
            return Self::LDNF1SB_z_p_bi_s64;
        }
        if opcode & 0xfff0e000 == 0xa5a02000 {
            return Self::LD1ROD_z_p_bi_u64;
        }
        if opcode & 0xfff0e000 == 0xa5a0a000 {
            return Self::LD1SB_z_p_bi_s32;
        }
        if opcode & 0xfff0e000 == 0xa5a0e000 {
            return Self::LD2D_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xa5b0a000 {
            return Self::LDNF1SB_z_p_bi_s32;
        }
        if opcode & 0xfff0e000 == 0xa5c0a000 {
            return Self::LD1SB_z_p_bi_s16;
        }
        if opcode & 0xfff0e000 == 0xa5c0e000 {
            return Self::LD3D_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xa5d0a000 {
            return Self::LDNF1SB_z_p_bi_s16;
        }
        if opcode & 0xfff0e000 == 0xa5e0a000 {
            return Self::LD1D_z_p_bi_u64;
        }
        if opcode & 0xfff0e000 == 0xa5e0e000 {
            return Self::LD4D_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xa5f0a000 {
            return Self::LDNF1D_z_p_bi_u64;
        }
        if opcode & 0xfff0e000 == 0xe410e000 {
            return Self::STNT1B_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xe430e000 {
            return Self::ST2B_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xe450e000 {
            return Self::ST3B_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xe470e000 {
            return Self::ST4B_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xe490e000 {
            return Self::STNT1H_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xe4b0e000 {
            return Self::ST2H_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xe4d0e000 {
            return Self::ST3H_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xe4f0e000 {
            return Self::ST4H_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xe510e000 {
            return Self::STNT1W_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xe530e000 {
            return Self::ST2W_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xe550e000 {
            return Self::ST3W_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xe570e000 {
            return Self::ST4W_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xe590e000 {
            return Self::STNT1D_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xe5b0e000 {
            return Self::ST2D_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xe5d0e000 {
            return Self::ST3D_z_p_bi_contiguous;
        }
        if opcode & 0xfff0e000 == 0xe5f0e000 {
            return Self::ST4D_z_p_bi_contiguous;
        }
        if opcode & 0xfff0c210 == 0x25004000 {
            return Self::AND_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25004000 {
            return Self::MOV_and_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25004010 {
            return Self::BIC_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25004200 {
            return Self::EOR_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25004200 {
            return Self::NOT_eor_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25004210 {
            return Self::MOV_sel_p_p_pp;
        }
        if opcode & 0xfff0c210 == 0x25004210 {
            return Self::SEL_p_p_pp;
        }
        if opcode & 0xfff0c210 == 0x2500c000 {
            return Self::BRKPA_p_p_pp;
        }
        if opcode & 0xfff0c210 == 0x2500c010 {
            return Self::BRKPB_p_p_pp;
        }
        if opcode & 0xfff0c210 == 0x25404000 {
            return Self::ANDS_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25404000 {
            return Self::MOVS_ands_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25404010 {
            return Self::BICS_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25404200 {
            return Self::EORS_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25404200 {
            return Self::NOTS_eors_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x2540c000 {
            return Self::BRKPAS_p_p_pp;
        }
        if opcode & 0xfff0c210 == 0x2540c010 {
            return Self::BRKPBS_p_p_pp;
        }
        if opcode & 0xfff0c210 == 0x25804000 {
            return Self::MOV_orr_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25804000 {
            return Self::ORR_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25804010 {
            return Self::ORN_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25804200 {
            return Self::NOR_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25804210 {
            return Self::NAND_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25c04000 {
            return Self::MOVS_orrs_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25c04000 {
            return Self::ORRS_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25c04010 {
            return Self::ORNS_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25c04200 {
            return Self::NORS_p_p_pp_z;
        }
        if opcode & 0xfff0c210 == 0x25c04210 {
            return Self::NANDS_p_p_pp_z;
        }
        if opcode & 0xfff00000 == 0xd5100000 {
            return Self::MSR_SR_systemmove;
        }
        if opcode & 0xfff00000 == 0xd5300000 {
            return Self::MRS_RS_systemmove;
        }
        if opcode & 0xffeffc00 == 0x4e083c00 {
            return Self::MOV_UMOV_asimdins_X_x;
        }
        if opcode & 0xffeffc00 == 0x4e083c00 {
            return Self::UMOV_asimdins_X_x;
        }
        if opcode & 0xffe7fc00 == 0xe043c00 {
            return Self::MOV_UMOV_asimdins_W_w;
        }
        if opcode & 0xffe0ffe0 == 0x2a0003e0 {
            return Self::MOV_ORR_32_log_shift;
        }
        if opcode & 0xffe0ffe0 == 0x5a0003e0 {
            return Self::NGC_SBC_32_addsub_carry;
        }
        if opcode & 0xffe0ffe0 == 0x7a0003e0 {
            return Self::NGCS_SBCS_32_addsub_carry;
        }
        if opcode & 0xffe0ffe0 == 0xaa0003e0 {
            return Self::MOV_ORR_64_log_shift;
        }
        if opcode & 0xffe0ffe0 == 0xda0003e0 {
            return Self::NGC_SBC_64_addsub_carry;
        }
        if opcode & 0xffe0ffe0 == 0xfa0003e0 {
            return Self::NGCS_SBCS_64_addsub_carry;
        }
        if opcode & 0xffe0fc1f == 0x1e202000 {
            return Self::FCMP_S_floatcmp;
        }
        if opcode & 0xffe0fc1f == 0x1e202008 {
            return Self::FCMP_SZ_floatcmp;
        }
        if opcode & 0xffe0fc1f == 0x1e202010 {
            return Self::FCMPE_S_floatcmp;
        }
        if opcode & 0xffe0fc1f == 0x1e202018 {
            return Self::FCMPE_SZ_floatcmp;
        }
        if opcode & 0xffe0fc1f == 0x1e602000 {
            return Self::FCMP_D_floatcmp;
        }
        if opcode & 0xffe0fc1f == 0x1e602008 {
            return Self::FCMP_DZ_floatcmp;
        }
        if opcode & 0xffe0fc1f == 0x1e602010 {
            return Self::FCMPE_D_floatcmp;
        }
        if opcode & 0xffe0fc1f == 0x1e602018 {
            return Self::FCMPE_DZ_floatcmp;
        }
        if opcode & 0xffe0fc1f == 0x1ee02000 {
            return Self::FCMP_H_floatcmp;
        }
        if opcode & 0xffe0fc1f == 0x1ee02008 {
            return Self::FCMP_HZ_floatcmp;
        }
        if opcode & 0xffe0fc1f == 0x1ee02010 {
            return Self::FCMPE_H_floatcmp;
        }
        if opcode & 0xffe0fc1f == 0x1ee02018 {
            return Self::FCMPE_HZ_floatcmp;
        }
        if opcode & 0xffe0fc1f == 0x3820001f {
            return Self::STADDB_LDADDB_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x3820101f {
            return Self::STCLRB_LDCLRB_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x3820201f {
            return Self::STEORB_LDEORB_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x3820301f {
            return Self::STSETB_LDSETB_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x3820401f {
            return Self::STSMAXB_LDSMAXB_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x3820501f {
            return Self::STSMINB_LDSMINB_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x3820601f {
            return Self::STUMAXB_LDUMAXB_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x3820701f {
            return Self::STUMINB_LDUMINB_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x3860001f {
            return Self::STADDLB_LDADDLB_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x3860101f {
            return Self::STCLRLB_LDCLRLB_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x3860201f {
            return Self::STEORLB_LDEORLB_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x3860301f {
            return Self::STSETLB_LDSETLB_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x3860401f {
            return Self::STSMAXLB_LDSMAXLB_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x3860501f {
            return Self::STSMINLB_LDSMINLB_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x3860601f {
            return Self::STUMAXLB_LDUMAXLB_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x3860701f {
            return Self::STUMINLB_LDUMINLB_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x7820001f {
            return Self::STADDH_LDADDH_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x7820101f {
            return Self::STCLRH_LDCLRH_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x7820201f {
            return Self::STEORH_LDEORH_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x7820301f {
            return Self::STSETH_LDSETH_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x7820401f {
            return Self::STSMAXH_LDSMAXH_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x7820501f {
            return Self::STSMINH_LDSMINH_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x7820601f {
            return Self::STUMAXH_LDUMAXH_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x7820701f {
            return Self::STUMINH_LDUMINH_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x7860001f {
            return Self::STADDLH_LDADDLH_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x7860101f {
            return Self::STCLRLH_LDCLRLH_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x7860201f {
            return Self::STEORLH_LDEORLH_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x7860301f {
            return Self::STSETLH_LDSETLH_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x7860401f {
            return Self::STSMAXLH_LDSMAXLH_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x7860501f {
            return Self::STSMINLH_LDSMINLH_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x7860601f {
            return Self::STUMAXLH_LDUMAXLH_32_memop;
        }
        if opcode & 0xffe0fc1f == 0x7860701f {
            return Self::STUMINLH_LDUMINLH_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xb820001f {
            return Self::STADD_LDADD_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xb820101f {
            return Self::STCLR_LDCLR_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xb820201f {
            return Self::STEOR_LDEOR_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xb820301f {
            return Self::STSET_LDSET_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xb820401f {
            return Self::STSMAX_LDSMAX_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xb820501f {
            return Self::STSMIN_LDSMIN_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xb820601f {
            return Self::STUMAX_LDUMAX_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xb820701f {
            return Self::STUMIN_LDUMIN_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xb860001f {
            return Self::STADDL_LDADDL_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xb860101f {
            return Self::STCLRL_LDCLRL_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xb860201f {
            return Self::STEORL_LDEORL_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xb860301f {
            return Self::STSETL_LDSETL_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xb860401f {
            return Self::STSMAXL_LDSMAXL_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xb860501f {
            return Self::STSMINL_LDSMINL_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xb860601f {
            return Self::STUMAXL_LDUMAXL_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xb860701f {
            return Self::STUMINL_LDUMINL_32_memop;
        }
        if opcode & 0xffe0fc1f == 0xbac0001f {
            return Self::CMPP_SUBPS_64S_dp_2src;
        }
        if opcode & 0xffe0fc1f == 0xf820001f {
            return Self::STADD_LDADD_64_memop;
        }
        if opcode & 0xffe0fc1f == 0xf820101f {
            return Self::STCLR_LDCLR_64_memop;
        }
        if opcode & 0xffe0fc1f == 0xf820201f {
            return Self::STEOR_LDEOR_64_memop;
        }
        if opcode & 0xffe0fc1f == 0xf820301f {
            return Self::STSET_LDSET_64_memop;
        }
        if opcode & 0xffe0fc1f == 0xf820401f {
            return Self::STSMAX_LDSMAX_64_memop;
        }
        if opcode & 0xffe0fc1f == 0xf820501f {
            return Self::STSMIN_LDSMIN_64_memop;
        }
        if opcode & 0xffe0fc1f == 0xf820601f {
            return Self::STUMAX_LDUMAX_64_memop;
        }
        if opcode & 0xffe0fc1f == 0xf820701f {
            return Self::STUMIN_LDUMIN_64_memop;
        }
        if opcode & 0xffe0fc1f == 0xf860001f {
            return Self::STADDL_LDADDL_64_memop;
        }
        if opcode & 0xffe0fc1f == 0xf860101f {
            return Self::STCLRL_LDCLRL_64_memop;
        }
        if opcode & 0xffe0fc1f == 0xf860201f {
            return Self::STEORL_LDEORL_64_memop;
        }
        if opcode & 0xffe0fc1f == 0xf860301f {
            return Self::STSETL_LDSETL_64_memop;
        }
        if opcode & 0xffe0fc1f == 0xf860401f {
            return Self::STSMAXL_LDSMAXL_64_memop;
        }
        if opcode & 0xffe0fc1f == 0xf860501f {
            return Self::STSMINL_LDSMINL_64_memop;
        }
        if opcode & 0xffe0fc1f == 0xf860601f {
            return Self::STUMAXL_LDUMAXL_64_memop;
        }
        if opcode & 0xffe0fc1f == 0xf860701f {
            return Self::STUMINL_LDUMINL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0x4203000 {
            return Self::AND_z_zz;
        }
        if opcode & 0xffe0fc00 == 0x4603000 {
            return Self::MOV_orr_z_zz;
        }
        if opcode & 0xffe0fc00 == 0x4603000 {
            return Self::ORR_z_zz;
        }
        if opcode & 0xffe0fc00 == 0x4a03000 {
            return Self::EOR_z_zz;
        }
        if opcode & 0xffe0fc00 == 0x4e03000 {
            return Self::BIC_z_zz;
        }
        if opcode & 0xffe0fc00 == 0x5a00000 {
            return Self::ZIP1_z_zz_q;
        }
        if opcode & 0xffe0fc00 == 0x5a00400 {
            return Self::ZIP2_z_zz_q;
        }
        if opcode & 0xffe0fc00 == 0x5a00800 {
            return Self::UZP1_z_zz_q;
        }
        if opcode & 0xffe0fc00 == 0x5a00c00 {
            return Self::UZP2_z_zz_q;
        }
        if opcode & 0xffe0fc00 == 0x5a01800 {
            return Self::TRN1_z_zz_q;
        }
        if opcode & 0xffe0fc00 == 0x5a01c00 {
            return Self::TRN2_z_zz_q;
        }
        if opcode & 0xffe0fc00 == 0x8207c00 {
            return Self::CASP_CP32_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x820fc00 {
            return Self::CASPL_CP32_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x8607c00 {
            return Self::CASPA_CP32_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x860fc00 {
            return Self::CASPAL_CP32_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x8a07c00 {
            return Self::CASB_C32_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x8a0fc00 {
            return Self::CASLB_C32_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x8e07c00 {
            return Self::CASAB_C32_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x8e0fc00 {
            return Self::CASALB_C32_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0xe002c00 {
            return Self::SMOV_asimdins_W_w;
        }
        if opcode & 0xffe0fc00 == 0xe003c00 {
            return Self::UMOV_asimdins_W_w;
        }
        if opcode & 0xffe0fc00 == 0x1a000000 {
            return Self::ADC_32_addsub_carry;
        }
        if opcode & 0xffe0fc00 == 0x1ac00800 {
            return Self::UDIV_32_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x1ac00c00 {
            return Self::SDIV_32_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x1ac02000 {
            return Self::LSL_LSLV_32_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x1ac02000 {
            return Self::LSLV_32_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x1ac02400 {
            return Self::LSR_LSRV_32_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x1ac02400 {
            return Self::LSRV_32_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x1ac02800 {
            return Self::ASR_ASRV_32_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x1ac02800 {
            return Self::ASRV_32_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x1ac02c00 {
            return Self::ROR_RORV_32_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x1ac02c00 {
            return Self::RORV_32_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x1ac04000 {
            return Self::CRC32B_32C_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x1ac04400 {
            return Self::CRC32H_32C_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x1ac04800 {
            return Self::CRC32W_32C_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x1ac05000 {
            return Self::CRC32CB_32C_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x1ac05400 {
            return Self::CRC32CH_32C_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x1ac05800 {
            return Self::CRC32CW_32C_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x1b007c00 {
            return Self::MUL_MADD_32A_dp_3src;
        }
        if opcode & 0xffe0fc00 == 0x1b00fc00 {
            return Self::MNEG_MSUB_32A_dp_3src;
        }
        if opcode & 0xffe0fc00 == 0x1e200800 {
            return Self::FMUL_S_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e201800 {
            return Self::FDIV_S_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e202800 {
            return Self::FADD_S_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e203800 {
            return Self::FSUB_S_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e204800 {
            return Self::FMAX_S_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e205800 {
            return Self::FMIN_S_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e206800 {
            return Self::FMAXNM_S_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e207800 {
            return Self::FMINNM_S_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e208800 {
            return Self::FNMUL_S_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e600800 {
            return Self::FMUL_D_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e601800 {
            return Self::FDIV_D_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e602800 {
            return Self::FADD_D_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e603800 {
            return Self::FSUB_D_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e604800 {
            return Self::FMAX_D_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e605800 {
            return Self::FMIN_D_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e606800 {
            return Self::FMAXNM_D_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e607800 {
            return Self::FMINNM_D_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1e608800 {
            return Self::FNMUL_D_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1ee00800 {
            return Self::FMUL_H_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1ee01800 {
            return Self::FDIV_H_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1ee02800 {
            return Self::FADD_H_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1ee03800 {
            return Self::FSUB_H_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1ee04800 {
            return Self::FMAX_H_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1ee05800 {
            return Self::FMIN_H_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1ee06800 {
            return Self::FMAXNM_H_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1ee07800 {
            return Self::FMINNM_H_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x1ee08800 {
            return Self::FNMUL_H_floatdp2;
        }
        if opcode & 0xffe0fc00 == 0x38200000 {
            return Self::LDADDB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38201000 {
            return Self::LDCLRB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38202000 {
            return Self::LDEORB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38203000 {
            return Self::LDSETB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38204000 {
            return Self::LDSMAXB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38205000 {
            return Self::LDSMINB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38206000 {
            return Self::LDUMAXB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38207000 {
            return Self::LDUMINB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38208000 {
            return Self::SWPB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38600000 {
            return Self::LDADDLB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38601000 {
            return Self::LDCLRLB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38602000 {
            return Self::LDEORLB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38603000 {
            return Self::LDSETLB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38604000 {
            return Self::LDSMAXLB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38605000 {
            return Self::LDSMINLB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38606000 {
            return Self::LDUMAXLB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38607000 {
            return Self::LDUMINLB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38608000 {
            return Self::SWPLB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38a00000 {
            return Self::LDADDAB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38a01000 {
            return Self::LDCLRAB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38a02000 {
            return Self::LDEORAB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38a03000 {
            return Self::LDSETAB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38a04000 {
            return Self::LDSMAXAB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38a05000 {
            return Self::LDSMINAB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38a06000 {
            return Self::LDUMAXAB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38a07000 {
            return Self::LDUMINAB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38a08000 {
            return Self::SWPAB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38a0c000 {
            return Self::LDAPRB_32L_memop;
        }
        if opcode & 0xffe0fc00 == 0x38e00000 {
            return Self::LDADDALB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38e01000 {
            return Self::LDCLRALB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38e02000 {
            return Self::LDEORALB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38e03000 {
            return Self::LDSETALB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38e04000 {
            return Self::LDSMAXALB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38e05000 {
            return Self::LDSMINALB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38e06000 {
            return Self::LDUMAXALB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38e07000 {
            return Self::LDUMINALB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x38e08000 {
            return Self::SWPALB_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x3a000000 {
            return Self::ADCS_32_addsub_carry;
        }
        if opcode & 0xffe0fc00 == 0x44807800 {
            return Self::USDOT_z_zzz_s;
        }
        if opcode & 0xffe0fc00 == 0x44a00000 {
            return Self::SDOT_z_zzzi_s;
        }
        if opcode & 0xffe0fc00 == 0x44a00400 {
            return Self::UDOT_z_zzzi_s;
        }
        if opcode & 0xffe0fc00 == 0x44a01800 {
            return Self::USDOT_z_zzzi_s;
        }
        if opcode & 0xffe0fc00 == 0x44a01c00 {
            return Self::SUDOT_z_zzzi_s;
        }
        if opcode & 0xffe0fc00 == 0x44e00000 {
            return Self::SDOT_z_zzzi_d;
        }
        if opcode & 0xffe0fc00 == 0x44e00400 {
            return Self::UDOT_z_zzzi_d;
        }
        if opcode & 0xffe0fc00 == 0x45009800 {
            return Self::SMMLA_z_zzz;
        }
        if opcode & 0xffe0fc00 == 0x45809800 {
            return Self::USMMLA_z_zzz;
        }
        if opcode & 0xffe0fc00 == 0x45c09800 {
            return Self::UMMLA_z_zzz;
        }
        if opcode & 0xffe0fc00 == 0x48207c00 {
            return Self::CASP_CP64_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x4820fc00 {
            return Self::CASPL_CP64_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x48607c00 {
            return Self::CASPA_CP64_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x4860fc00 {
            return Self::CASPAL_CP64_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x48a07c00 {
            return Self::CASH_C32_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x48a0fc00 {
            return Self::CASLH_C32_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x48e07c00 {
            return Self::CASAH_C32_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x48e0fc00 {
            return Self::CASALH_C32_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x4e001c00 {
            return Self::INS_asimdins_IR_r;
        }
        if opcode & 0xffe0fc00 == 0x4e001c00 {
            return Self::MOV_INS_asimdins_IR_r;
        }
        if opcode & 0xffe0fc00 == 0x4e002c00 {
            return Self::SMOV_asimdins_X_x;
        }
        if opcode & 0xffe0fc00 == 0x4e80a400 {
            return Self::SMMLA_asimdsame2_G;
        }
        if opcode & 0xffe0fc00 == 0x4e80ac00 {
            return Self::USMMLA_asimdsame2_G;
        }
        if opcode & 0xffe0fc00 == 0x5a000000 {
            return Self::SBC_32_addsub_carry;
        }
        if opcode & 0xffe0fc00 == 0x5e000000 {
            return Self::SHA1C_QSV_cryptosha3;
        }
        if opcode & 0xffe0fc00 == 0x5e000400 {
            return Self::DUP_asisdone_only;
        }
        if opcode & 0xffe0fc00 == 0x5e000400 {
            return Self::MOV_DUP_asisdone_only;
        }
        if opcode & 0xffe0fc00 == 0x5e001000 {
            return Self::SHA1P_QSV_cryptosha3;
        }
        if opcode & 0xffe0fc00 == 0x5e002000 {
            return Self::SHA1M_QSV_cryptosha3;
        }
        if opcode & 0xffe0fc00 == 0x5e003000 {
            return Self::SHA1SU0_VVV_cryptosha3;
        }
        if opcode & 0xffe0fc00 == 0x5e004000 {
            return Self::SHA256H_QQV_cryptosha3;
        }
        if opcode & 0xffe0fc00 == 0x5e005000 {
            return Self::SHA256H2_QQV_cryptosha3;
        }
        if opcode & 0xffe0fc00 == 0x5e006000 {
            return Self::SHA256SU1_VVV_cryptosha3;
        }
        if opcode & 0xffe0fc00 == 0x5e401c00 {
            return Self::FMULX_asisdsamefp16_only;
        }
        if opcode & 0xffe0fc00 == 0x5e402400 {
            return Self::FCMEQ_asisdsamefp16_only;
        }
        if opcode & 0xffe0fc00 == 0x5e403c00 {
            return Self::FRECPS_asisdsamefp16_only;
        }
        if opcode & 0xffe0fc00 == 0x5ec03c00 {
            return Self::FRSQRTS_asisdsamefp16_only;
        }
        if opcode & 0xffe0fc00 == 0x64604000 {
            return Self::BFDOT_z_zzzi;
        }
        if opcode & 0xffe0fc00 == 0x64608000 {
            return Self::BFDOT_z_zzz;
        }
        if opcode & 0xffe0fc00 == 0x6460e400 {
            return Self::BFMMLA_z_zzz;
        }
        if opcode & 0xffe0fc00 == 0x64a00000 {
            return Self::FMLA_z_zzzi_s;
        }
        if opcode & 0xffe0fc00 == 0x64a00400 {
            return Self::FMLS_z_zzzi_s;
        }
        if opcode & 0xffe0fc00 == 0x64a02000 {
            return Self::FMUL_z_zzi_s;
        }
        if opcode & 0xffe0fc00 == 0x64a0e400 {
            return Self::FMMLA_z_zzz_s;
        }
        if opcode & 0xffe0fc00 == 0x64e00000 {
            return Self::FMLA_z_zzzi_d;
        }
        if opcode & 0xffe0fc00 == 0x64e00400 {
            return Self::FMLS_z_zzzi_d;
        }
        if opcode & 0xffe0fc00 == 0x64e02000 {
            return Self::FMUL_z_zzi_d;
        }
        if opcode & 0xffe0fc00 == 0x64e08000 {
            return Self::BFMLALB_z_zzz;
        }
        if opcode & 0xffe0fc00 == 0x64e08400 {
            return Self::BFMLALT_z_zzz;
        }
        if opcode & 0xffe0fc00 == 0x64e0e400 {
            return Self::FMMLA_z_zzz_d;
        }
        if opcode & 0xffe0fc00 == 0x6e40ec00 {
            return Self::BFMMLA_asimdsame2_E;
        }
        if opcode & 0xffe0fc00 == 0x6e80a400 {
            return Self::UMMLA_asimdsame2_G;
        }
        if opcode & 0xffe0fc00 == 0x78200000 {
            return Self::LDADDH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78201000 {
            return Self::LDCLRH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78202000 {
            return Self::LDEORH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78203000 {
            return Self::LDSETH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78204000 {
            return Self::LDSMAXH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78205000 {
            return Self::LDSMINH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78206000 {
            return Self::LDUMAXH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78207000 {
            return Self::LDUMINH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78208000 {
            return Self::SWPH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78600000 {
            return Self::LDADDLH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78601000 {
            return Self::LDCLRLH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78602000 {
            return Self::LDEORLH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78603000 {
            return Self::LDSETLH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78604000 {
            return Self::LDSMAXLH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78605000 {
            return Self::LDSMINLH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78606000 {
            return Self::LDUMAXLH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78607000 {
            return Self::LDUMINLH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78608000 {
            return Self::SWPLH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78a00000 {
            return Self::LDADDAH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78a01000 {
            return Self::LDCLRAH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78a02000 {
            return Self::LDEORAH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78a03000 {
            return Self::LDSETAH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78a04000 {
            return Self::LDSMAXAH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78a05000 {
            return Self::LDSMINAH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78a06000 {
            return Self::LDUMAXAH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78a07000 {
            return Self::LDUMINAH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78a08000 {
            return Self::SWPAH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78a0c000 {
            return Self::LDAPRH_32L_memop;
        }
        if opcode & 0xffe0fc00 == 0x78e00000 {
            return Self::LDADDALH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78e01000 {
            return Self::LDCLRALH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78e02000 {
            return Self::LDEORALH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78e03000 {
            return Self::LDSETALH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78e04000 {
            return Self::LDSMAXALH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78e05000 {
            return Self::LDSMINALH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78e06000 {
            return Self::LDUMAXALH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78e07000 {
            return Self::LDUMINALH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x78e08000 {
            return Self::SWPALH_32_memop;
        }
        if opcode & 0xffe0fc00 == 0x7a000000 {
            return Self::SBCS_32_addsub_carry;
        }
        if opcode & 0xffe0fc00 == 0x7e402400 {
            return Self::FCMGE_asisdsamefp16_only;
        }
        if opcode & 0xffe0fc00 == 0x7e402c00 {
            return Self::FACGE_asisdsamefp16_only;
        }
        if opcode & 0xffe0fc00 == 0x7ec01400 {
            return Self::FABD_asisdsamefp16_only;
        }
        if opcode & 0xffe0fc00 == 0x7ec02400 {
            return Self::FCMGT_asisdsamefp16_only;
        }
        if opcode & 0xffe0fc00 == 0x7ec02c00 {
            return Self::FACGT_asisdsamefp16_only;
        }
        if opcode & 0xffe0fc00 == 0x88a07c00 {
            return Self::CAS_C32_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x88a0fc00 {
            return Self::CASL_C32_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x88e07c00 {
            return Self::CASA_C32_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x88e0fc00 {
            return Self::CASAL_C32_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0x9a000000 {
            return Self::ADC_64_addsub_carry;
        }
        if opcode & 0xffe0fc00 == 0x9ac00000 {
            return Self::SUBP_64S_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x9ac00800 {
            return Self::UDIV_64_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x9ac00c00 {
            return Self::SDIV_64_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x9ac01000 {
            return Self::IRG_64I_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x9ac01400 {
            return Self::GMI_64G_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x9ac02000 {
            return Self::LSL_LSLV_64_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x9ac02000 {
            return Self::LSLV_64_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x9ac02400 {
            return Self::LSR_LSRV_64_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x9ac02400 {
            return Self::LSRV_64_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x9ac02800 {
            return Self::ASR_ASRV_64_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x9ac02800 {
            return Self::ASRV_64_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x9ac02c00 {
            return Self::ROR_RORV_64_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x9ac02c00 {
            return Self::RORV_64_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x9ac03000 {
            return Self::PACGA_64P_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x9ac04c00 {
            return Self::CRC32X_64C_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x9ac05c00 {
            return Self::CRC32CX_64C_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0x9b007c00 {
            return Self::MUL_MADD_64A_dp_3src;
        }
        if opcode & 0xffe0fc00 == 0x9b00fc00 {
            return Self::MNEG_MSUB_64A_dp_3src;
        }
        if opcode & 0xffe0fc00 == 0x9b207c00 {
            return Self::SMULL_SMADDL_64WA_dp_3src;
        }
        if opcode & 0xffe0fc00 == 0x9b20fc00 {
            return Self::SMNEGL_SMSUBL_64WA_dp_3src;
        }
        if opcode & 0xffe0fc00 == 0x9ba07c00 {
            return Self::UMULL_UMADDL_64WA_dp_3src;
        }
        if opcode & 0xffe0fc00 == 0x9ba0fc00 {
            return Self::UMNEGL_UMSUBL_64WA_dp_3src;
        }
        if opcode & 0xffe0fc00 == 0xb8200000 {
            return Self::LDADD_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8201000 {
            return Self::LDCLR_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8202000 {
            return Self::LDEOR_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8203000 {
            return Self::LDSET_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8204000 {
            return Self::LDSMAX_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8205000 {
            return Self::LDSMIN_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8206000 {
            return Self::LDUMAX_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8207000 {
            return Self::LDUMIN_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8208000 {
            return Self::SWP_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8600000 {
            return Self::LDADDL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8601000 {
            return Self::LDCLRL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8602000 {
            return Self::LDEORL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8603000 {
            return Self::LDSETL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8604000 {
            return Self::LDSMAXL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8605000 {
            return Self::LDSMINL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8606000 {
            return Self::LDUMAXL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8607000 {
            return Self::LDUMINL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8608000 {
            return Self::SWPL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8a00000 {
            return Self::LDADDA_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8a01000 {
            return Self::LDCLRA_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8a02000 {
            return Self::LDEORA_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8a03000 {
            return Self::LDSETA_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8a04000 {
            return Self::LDSMAXA_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8a05000 {
            return Self::LDSMINA_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8a06000 {
            return Self::LDUMAXA_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8a07000 {
            return Self::LDUMINA_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8a08000 {
            return Self::SWPA_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8a0c000 {
            return Self::LDAPR_32L_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8e00000 {
            return Self::LDADDAL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8e01000 {
            return Self::LDCLRAL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8e02000 {
            return Self::LDEORAL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8e03000 {
            return Self::LDSETAL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8e04000 {
            return Self::LDSMAXAL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8e05000 {
            return Self::LDSMINAL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8e06000 {
            return Self::LDUMAXAL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8e07000 {
            return Self::LDUMINAL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xb8e08000 {
            return Self::SWPAL_32_memop;
        }
        if opcode & 0xffe0fc00 == 0xba000000 {
            return Self::ADCS_64_addsub_carry;
        }
        if opcode & 0xffe0fc00 == 0xbac00000 {
            return Self::SUBPS_64S_dp_2src;
        }
        if opcode & 0xffe0fc00 == 0xc8a07c00 {
            return Self::CAS_C64_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0xc8a0fc00 {
            return Self::CASL_C64_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0xc8e07c00 {
            return Self::CASA_C64_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0xc8e0fc00 {
            return Self::CASAL_C64_ldstexcl;
        }
        if opcode & 0xffe0fc00 == 0xce608000 {
            return Self::SHA512H_QQV_cryptosha512_3;
        }
        if opcode & 0xffe0fc00 == 0xce608400 {
            return Self::SHA512H2_QQV_cryptosha512_3;
        }
        if opcode & 0xffe0fc00 == 0xce608800 {
            return Self::SHA512SU1_VVV2_cryptosha512_3;
        }
        if opcode & 0xffe0fc00 == 0xce608c00 {
            return Self::RAX1_VVV2_cryptosha512_3;
        }
        if opcode & 0xffe0fc00 == 0xce60c000 {
            return Self::SM3PARTW1_VVV4_cryptosha512_3;
        }
        if opcode & 0xffe0fc00 == 0xce60c400 {
            return Self::SM3PARTW2_VVV4_cryptosha512_3;
        }
        if opcode & 0xffe0fc00 == 0xce60c800 {
            return Self::SM4EKEY_VVV4_cryptosha512_3;
        }
        if opcode & 0xffe0fc00 == 0xda000000 {
            return Self::SBC_64_addsub_carry;
        }
        if opcode & 0xffe0fc00 == 0xf8200000 {
            return Self::LDADD_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8201000 {
            return Self::LDCLR_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8202000 {
            return Self::LDEOR_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8203000 {
            return Self::LDSET_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8204000 {
            return Self::LDSMAX_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8205000 {
            return Self::LDSMIN_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8206000 {
            return Self::LDUMAX_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8207000 {
            return Self::LDUMIN_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8208000 {
            return Self::SWP_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf820a000 {
            return Self::ST64BV0_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf820b000 {
            return Self::ST64BV_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8600000 {
            return Self::LDADDL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8601000 {
            return Self::LDCLRL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8602000 {
            return Self::LDEORL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8603000 {
            return Self::LDSETL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8604000 {
            return Self::LDSMAXL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8605000 {
            return Self::LDSMINL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8606000 {
            return Self::LDUMAXL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8607000 {
            return Self::LDUMINL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8608000 {
            return Self::SWPL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8a00000 {
            return Self::LDADDA_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8a01000 {
            return Self::LDCLRA_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8a02000 {
            return Self::LDEORA_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8a03000 {
            return Self::LDSETA_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8a04000 {
            return Self::LDSMAXA_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8a05000 {
            return Self::LDSMINA_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8a06000 {
            return Self::LDUMAXA_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8a07000 {
            return Self::LDUMINA_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8a08000 {
            return Self::SWPA_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8a0c000 {
            return Self::LDAPR_64L_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8e00000 {
            return Self::LDADDAL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8e01000 {
            return Self::LDCLRAL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8e02000 {
            return Self::LDEORAL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8e03000 {
            return Self::LDSETAL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8e04000 {
            return Self::LDSMAXAL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8e05000 {
            return Self::LDSMINAL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8e06000 {
            return Self::LDUMAXAL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8e07000 {
            return Self::LDUMINAL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xf8e08000 {
            return Self::SWPAL_64_memop;
        }
        if opcode & 0xffe0fc00 == 0xfa000000 {
            return Self::SBCS_64_addsub_carry;
        }
        if opcode & 0xffe0f800 == 0x4205000 {
            return Self::ADDVL_r_ri;
        }
        if opcode & 0xffe0f800 == 0x4605000 {
            return Self::ADDPL_r_ri;
        }
        if opcode & 0xffe0f400 == 0x64e04000 {
            return Self::BFMLALB_z_zzzi;
        }
        if opcode & 0xffe0f400 == 0x64e04400 {
            return Self::BFMLALT_z_zzzi;
        }
        if opcode & 0xffe0f000 == 0x420a000 {
            return Self::ADR_z_az_d_s32_scaled;
        }
        if opcode & 0xffe0f000 == 0x460a000 {
            return Self::ADR_z_az_d_u32_scaled;
        }
        if opcode & 0xffe0f000 == 0x64a01000 {
            return Self::FCMLA_z_zzzi_h;
        }
        if opcode & 0xffe0f000 == 0x64e01000 {
            return Self::FCMLA_z_zzzi_s;
        }
        if opcode & 0xffe0ec00 == 0x38206800 {
            return Self::STRB_32BL_ldst_regoff;
        }
        if opcode & 0xffe0ec00 == 0x38606800 {
            return Self::LDRB_32BL_ldst_regoff;
        }
        if opcode & 0xffe0ec00 == 0x38a06800 {
            return Self::LDRSB_64BL_ldst_regoff;
        }
        if opcode & 0xffe0ec00 == 0x38e06800 {
            return Self::LDRSB_32BL_ldst_regoff;
        }
        if opcode & 0xffe0ec00 == 0x3c206800 {
            return Self::STR_BL_ldst_regoff;
        }
        if opcode & 0xffe0ec00 == 0x3c606800 {
            return Self::LDR_BL_ldst_regoff;
        }
        if opcode & 0xffe0e010 == 0x8400c000 {
            return Self::PRFB_i_p_br_s;
        }
        if opcode & 0xffe0e010 == 0x8400e000 {
            return Self::PRFB_i_p_ai_s;
        }
        if opcode & 0xffe0e010 == 0x8480c000 {
            return Self::PRFH_i_p_br_s;
        }
        if opcode & 0xffe0e010 == 0x8480e000 {
            return Self::PRFH_i_p_ai_s;
        }
        if opcode & 0xffe0e010 == 0x8500c000 {
            return Self::PRFW_i_p_br_s;
        }
        if opcode & 0xffe0e010 == 0x8500e000 {
            return Self::PRFW_i_p_ai_s;
        }
        if opcode & 0xffe0e010 == 0x8580c000 {
            return Self::PRFD_i_p_br_s;
        }
        if opcode & 0xffe0e010 == 0x8580e000 {
            return Self::PRFD_i_p_ai_s;
        }
        if opcode & 0xffe0e010 == 0xc400e000 {
            return Self::PRFB_i_p_ai_d;
        }
        if opcode & 0xffe0e010 == 0xc4608000 {
            return Self::PRFB_i_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e010 == 0xc460a000 {
            return Self::PRFH_i_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e010 == 0xc460c000 {
            return Self::PRFW_i_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e010 == 0xc460e000 {
            return Self::PRFD_i_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e010 == 0xc480e000 {
            return Self::PRFH_i_p_ai_d;
        }
        if opcode & 0xffe0e010 == 0xc500e000 {
            return Self::PRFW_i_p_ai_d;
        }
        if opcode & 0xffe0e010 == 0xc580e000 {
            return Self::PRFD_i_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0x5200000 {
            return Self::EXT_z_zi_des;
        }
        if opcode & 0xffe0e000 == 0x84208000 {
            return Self::LD1SB_z_p_ai_s;
        }
        if opcode & 0xffe0e000 == 0x8420a000 {
            return Self::LDFF1SB_z_p_ai_s;
        }
        if opcode & 0xffe0e000 == 0x8420c000 {
            return Self::LD1B_z_p_ai_s;
        }
        if opcode & 0xffe0e000 == 0x8420e000 {
            return Self::LDFF1B_z_p_ai_s;
        }
        if opcode & 0xffe0e000 == 0x84a08000 {
            return Self::LD1SH_z_p_ai_s;
        }
        if opcode & 0xffe0e000 == 0x84a0a000 {
            return Self::LDFF1SH_z_p_ai_s;
        }
        if opcode & 0xffe0e000 == 0x84a0c000 {
            return Self::LD1H_z_p_ai_s;
        }
        if opcode & 0xffe0e000 == 0x84a0e000 {
            return Self::LDFF1H_z_p_ai_s;
        }
        if opcode & 0xffe0e000 == 0x8520c000 {
            return Self::LD1W_z_p_ai_s;
        }
        if opcode & 0xffe0e000 == 0x8520e000 {
            return Self::LDFF1W_z_p_ai_s;
        }
        if opcode & 0xffe0e000 == 0xa4000000 {
            return Self::LD1RQB_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa4004000 {
            return Self::LD1B_z_p_br_u8;
        }
        if opcode & 0xffe0e000 == 0xa4006000 {
            return Self::LDFF1B_z_p_br_u8;
        }
        if opcode & 0xffe0e000 == 0xa400c000 {
            return Self::LDNT1B_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa4200000 {
            return Self::LD1ROB_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa4204000 {
            return Self::LD1B_z_p_br_u16;
        }
        if opcode & 0xffe0e000 == 0xa4206000 {
            return Self::LDFF1B_z_p_br_u16;
        }
        if opcode & 0xffe0e000 == 0xa420c000 {
            return Self::LD2B_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa4404000 {
            return Self::LD1B_z_p_br_u32;
        }
        if opcode & 0xffe0e000 == 0xa4406000 {
            return Self::LDFF1B_z_p_br_u32;
        }
        if opcode & 0xffe0e000 == 0xa440c000 {
            return Self::LD3B_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa4604000 {
            return Self::LD1B_z_p_br_u64;
        }
        if opcode & 0xffe0e000 == 0xa4606000 {
            return Self::LDFF1B_z_p_br_u64;
        }
        if opcode & 0xffe0e000 == 0xa460c000 {
            return Self::LD4B_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa4800000 {
            return Self::LD1RQH_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa4804000 {
            return Self::LD1SW_z_p_br_s64;
        }
        if opcode & 0xffe0e000 == 0xa4806000 {
            return Self::LDFF1SW_z_p_br_s64;
        }
        if opcode & 0xffe0e000 == 0xa480c000 {
            return Self::LDNT1H_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa4a00000 {
            return Self::LD1ROH_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa4a04000 {
            return Self::LD1H_z_p_br_u16;
        }
        if opcode & 0xffe0e000 == 0xa4a06000 {
            return Self::LDFF1H_z_p_br_u16;
        }
        if opcode & 0xffe0e000 == 0xa4a0c000 {
            return Self::LD2H_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa4c04000 {
            return Self::LD1H_z_p_br_u32;
        }
        if opcode & 0xffe0e000 == 0xa4c06000 {
            return Self::LDFF1H_z_p_br_u32;
        }
        if opcode & 0xffe0e000 == 0xa4c0c000 {
            return Self::LD3H_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa4e04000 {
            return Self::LD1H_z_p_br_u64;
        }
        if opcode & 0xffe0e000 == 0xa4e06000 {
            return Self::LDFF1H_z_p_br_u64;
        }
        if opcode & 0xffe0e000 == 0xa4e0c000 {
            return Self::LD4H_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa5000000 {
            return Self::LD1RQW_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa5004000 {
            return Self::LD1SH_z_p_br_s64;
        }
        if opcode & 0xffe0e000 == 0xa5006000 {
            return Self::LDFF1SH_z_p_br_s64;
        }
        if opcode & 0xffe0e000 == 0xa500c000 {
            return Self::LDNT1W_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa5200000 {
            return Self::LD1ROW_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa5204000 {
            return Self::LD1SH_z_p_br_s32;
        }
        if opcode & 0xffe0e000 == 0xa5206000 {
            return Self::LDFF1SH_z_p_br_s32;
        }
        if opcode & 0xffe0e000 == 0xa520c000 {
            return Self::LD2W_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa5404000 {
            return Self::LD1W_z_p_br_u32;
        }
        if opcode & 0xffe0e000 == 0xa5406000 {
            return Self::LDFF1W_z_p_br_u32;
        }
        if opcode & 0xffe0e000 == 0xa540c000 {
            return Self::LD3W_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa5604000 {
            return Self::LD1W_z_p_br_u64;
        }
        if opcode & 0xffe0e000 == 0xa5606000 {
            return Self::LDFF1W_z_p_br_u64;
        }
        if opcode & 0xffe0e000 == 0xa560c000 {
            return Self::LD4W_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa5800000 {
            return Self::LD1RQD_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa5804000 {
            return Self::LD1SB_z_p_br_s64;
        }
        if opcode & 0xffe0e000 == 0xa5806000 {
            return Self::LDFF1SB_z_p_br_s64;
        }
        if opcode & 0xffe0e000 == 0xa580c000 {
            return Self::LDNT1D_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa5a00000 {
            return Self::LD1ROD_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa5a04000 {
            return Self::LD1SB_z_p_br_s32;
        }
        if opcode & 0xffe0e000 == 0xa5a06000 {
            return Self::LDFF1SB_z_p_br_s32;
        }
        if opcode & 0xffe0e000 == 0xa5a0c000 {
            return Self::LD2D_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa5c04000 {
            return Self::LD1SB_z_p_br_s16;
        }
        if opcode & 0xffe0e000 == 0xa5c06000 {
            return Self::LDFF1SB_z_p_br_s16;
        }
        if opcode & 0xffe0e000 == 0xa5c0c000 {
            return Self::LD3D_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xa5e04000 {
            return Self::LD1D_z_p_br_u64;
        }
        if opcode & 0xffe0e000 == 0xa5e06000 {
            return Self::LDFF1D_z_p_br_u64;
        }
        if opcode & 0xffe0e000 == 0xa5e0c000 {
            return Self::LD4D_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xc4208000 {
            return Self::LD1SB_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xc420a000 {
            return Self::LDFF1SB_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xc420c000 {
            return Self::LD1B_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xc420e000 {
            return Self::LDFF1B_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xc4408000 {
            return Self::LD1SB_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xc440a000 {
            return Self::LDFF1SB_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xc440c000 {
            return Self::LD1B_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xc440e000 {
            return Self::LDFF1B_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xc4a08000 {
            return Self::LD1SH_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xc4a0a000 {
            return Self::LDFF1SH_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xc4a0c000 {
            return Self::LD1H_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xc4a0e000 {
            return Self::LDFF1H_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xc4c08000 {
            return Self::LD1SH_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xc4c0a000 {
            return Self::LDFF1SH_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xc4c0c000 {
            return Self::LD1H_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xc4c0e000 {
            return Self::LDFF1H_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xc4e08000 {
            return Self::LD1SH_z_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e000 == 0xc4e0a000 {
            return Self::LDFF1SH_z_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e000 == 0xc4e0c000 {
            return Self::LD1H_z_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e000 == 0xc4e0e000 {
            return Self::LDFF1H_z_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e000 == 0xc5208000 {
            return Self::LD1SW_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xc520a000 {
            return Self::LDFF1SW_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xc520c000 {
            return Self::LD1W_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xc520e000 {
            return Self::LDFF1W_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xc5408000 {
            return Self::LD1SW_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xc540a000 {
            return Self::LDFF1SW_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xc540c000 {
            return Self::LD1W_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xc540e000 {
            return Self::LDFF1W_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xc5608000 {
            return Self::LD1SW_z_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e000 == 0xc560a000 {
            return Self::LDFF1SW_z_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e000 == 0xc560c000 {
            return Self::LD1W_z_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e000 == 0xc560e000 {
            return Self::LDFF1W_z_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e000 == 0xc5a0c000 {
            return Self::LD1D_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xc5a0e000 {
            return Self::LDFF1D_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xc5c0c000 {
            return Self::LD1D_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xc5c0e000 {
            return Self::LDFF1D_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xc5e0c000 {
            return Self::LD1D_z_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e000 == 0xc5e0e000 {
            return Self::LDFF1D_z_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e000 == 0xe4006000 {
            return Self::STNT1B_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xe400a000 {
            return Self::ST1B_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xe4206000 {
            return Self::ST2B_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xe4406000 {
            return Self::ST3B_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xe440a000 {
            return Self::ST1B_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xe4606000 {
            return Self::ST4B_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xe460a000 {
            return Self::ST1B_z_p_ai_s;
        }
        if opcode & 0xffe0e000 == 0xe4806000 {
            return Self::STNT1H_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xe480a000 {
            return Self::ST1H_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xe4a06000 {
            return Self::ST2H_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xe4a0a000 {
            return Self::ST1H_z_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e000 == 0xe4c06000 {
            return Self::ST3H_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xe4c0a000 {
            return Self::ST1H_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xe4e06000 {
            return Self::ST4H_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xe4e0a000 {
            return Self::ST1H_z_p_ai_s;
        }
        if opcode & 0xffe0e000 == 0xe5006000 {
            return Self::STNT1W_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xe500a000 {
            return Self::ST1W_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xe5206000 {
            return Self::ST2W_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xe520a000 {
            return Self::ST1W_z_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e000 == 0xe5406000 {
            return Self::ST3W_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xe540a000 {
            return Self::ST1W_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xe5606000 {
            return Self::ST4W_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xe560a000 {
            return Self::ST1W_z_p_ai_s;
        }
        if opcode & 0xffe0e000 == 0xe5806000 {
            return Self::STNT1D_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xe580a000 {
            return Self::ST1D_z_p_bz_d_64_unscaled;
        }
        if opcode & 0xffe0e000 == 0xe5a06000 {
            return Self::ST2D_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xe5a0a000 {
            return Self::ST1D_z_p_bz_d_64_scaled;
        }
        if opcode & 0xffe0e000 == 0xe5c06000 {
            return Self::ST3D_z_p_br_contiguous;
        }
        if opcode & 0xffe0e000 == 0xe5c0a000 {
            return Self::ST1D_z_p_ai_d;
        }
        if opcode & 0xffe0e000 == 0xe5e04000 {
            return Self::ST1D_z_p_br;
        }
        if opcode & 0xffe0e000 == 0xe5e06000 {
            return Self::ST4D_z_p_br_contiguous;
        }
        if opcode & 0xffe0cc00 == 0xce408000 {
            return Self::SM3TT1A_VVV4_crypto3_imm2;
        }
        if opcode & 0xffe0cc00 == 0xce408400 {
            return Self::SM3TT1B_VVV4_crypto3_imm2;
        }
        if opcode & 0xffe0cc00 == 0xce408800 {
            return Self::SM3TT2A_VVV4_crypto3_imm2;
        }
        if opcode & 0xffe0cc00 == 0xce408c00 {
            return Self::SM3TT2B_VVV_crypto3_imm2;
        }
        if opcode & 0xffe0a000 == 0xe4008000 {
            return Self::ST1B_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffe0a000 == 0xe4408000 {
            return Self::ST1B_z_p_bz_s_x32_unscaled;
        }
        if opcode & 0xffe0a000 == 0xe4808000 {
            return Self::ST1H_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffe0a000 == 0xe4a08000 {
            return Self::ST1H_z_p_bz_d_x32_scaled;
        }
        if opcode & 0xffe0a000 == 0xe4c08000 {
            return Self::ST1H_z_p_bz_s_x32_unscaled;
        }
        if opcode & 0xffe0a000 == 0xe4e08000 {
            return Self::ST1H_z_p_bz_s_x32_scaled;
        }
        if opcode & 0xffe0a000 == 0xe5008000 {
            return Self::ST1W_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffe0a000 == 0xe5208000 {
            return Self::ST1W_z_p_bz_d_x32_scaled;
        }
        if opcode & 0xffe0a000 == 0xe5408000 {
            return Self::ST1W_z_p_bz_s_x32_unscaled;
        }
        if opcode & 0xffe0a000 == 0xe5608000 {
            return Self::ST1W_z_p_bz_s_x32_scaled;
        }
        if opcode & 0xffe0a000 == 0xe5808000 {
            return Self::ST1D_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffe0a000 == 0xe5a08000 {
            return Self::ST1D_z_p_bz_d_x32_scaled;
        }
        if opcode & 0xffe08400 == 0x6e000400 {
            return Self::INS_asimdins_IV_v;
        }
        if opcode & 0xffe08400 == 0x6e000400 {
            return Self::MOV_INS_asimdins_IV_v;
        }
        if opcode & 0xffe08000 == 0x8000000 {
            return Self::STXRB_SR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x8008000 {
            return Self::STLXRB_SR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x8400000 {
            return Self::LDXRB_LR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x8408000 {
            return Self::LDAXRB_LR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x8800000 {
            return Self::STLLRB_SL32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x8808000 {
            return Self::STLRB_SL32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x8c00000 {
            return Self::LDLARB_LR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x8c08000 {
            return Self::LDARB_LR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x13800000 {
            return Self::EXTR_32_extract;
        }
        if opcode & 0xffe08000 == 0x13800000 {
            return Self::ROR_EXTR_32_extract;
        }
        if opcode & 0xffe08000 == 0x1b000000 {
            return Self::MADD_32A_dp_3src;
        }
        if opcode & 0xffe08000 == 0x1b008000 {
            return Self::MSUB_32A_dp_3src;
        }
        if opcode & 0xffe08000 == 0x1f000000 {
            return Self::FMADD_S_floatdp3;
        }
        if opcode & 0xffe08000 == 0x1f008000 {
            return Self::FMSUB_S_floatdp3;
        }
        if opcode & 0xffe08000 == 0x1f200000 {
            return Self::FNMADD_S_floatdp3;
        }
        if opcode & 0xffe08000 == 0x1f208000 {
            return Self::FNMSUB_S_floatdp3;
        }
        if opcode & 0xffe08000 == 0x1f400000 {
            return Self::FMADD_D_floatdp3;
        }
        if opcode & 0xffe08000 == 0x1f408000 {
            return Self::FMSUB_D_floatdp3;
        }
        if opcode & 0xffe08000 == 0x1f600000 {
            return Self::FNMADD_D_floatdp3;
        }
        if opcode & 0xffe08000 == 0x1f608000 {
            return Self::FNMSUB_D_floatdp3;
        }
        if opcode & 0xffe08000 == 0x1fc00000 {
            return Self::FMADD_H_floatdp3;
        }
        if opcode & 0xffe08000 == 0x1fc08000 {
            return Self::FMSUB_H_floatdp3;
        }
        if opcode & 0xffe08000 == 0x1fe00000 {
            return Self::FNMADD_H_floatdp3;
        }
        if opcode & 0xffe08000 == 0x1fe08000 {
            return Self::FNMSUB_H_floatdp3;
        }
        if opcode & 0xffe08000 == 0x48000000 {
            return Self::STXRH_SR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x48008000 {
            return Self::STLXRH_SR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x48400000 {
            return Self::LDXRH_LR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x48408000 {
            return Self::LDAXRH_LR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x48800000 {
            return Self::STLLRH_SL32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x48808000 {
            return Self::STLRH_SL32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x48c00000 {
            return Self::LDLARH_LR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x48c08000 {
            return Self::LDARH_LR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x88000000 {
            return Self::STXR_SR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x88008000 {
            return Self::STLXR_SR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x88200000 {
            return Self::STXP_SP32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x88208000 {
            return Self::STLXP_SP32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x88400000 {
            return Self::LDXR_LR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x88408000 {
            return Self::LDAXR_LR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x88600000 {
            return Self::LDXP_LP32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x88608000 {
            return Self::LDAXP_LP32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x88800000 {
            return Self::STLLR_SL32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x88808000 {
            return Self::STLR_SL32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x88c00000 {
            return Self::LDLAR_LR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x88c08000 {
            return Self::LDAR_LR32_ldstexcl;
        }
        if opcode & 0xffe08000 == 0x9b000000 {
            return Self::MADD_64A_dp_3src;
        }
        if opcode & 0xffe08000 == 0x9b008000 {
            return Self::MSUB_64A_dp_3src;
        }
        if opcode & 0xffe08000 == 0x9b200000 {
            return Self::SMADDL_64WA_dp_3src;
        }
        if opcode & 0xffe08000 == 0x9b208000 {
            return Self::SMSUBL_64WA_dp_3src;
        }
        if opcode & 0xffe08000 == 0x9b400000 {
            return Self::SMULH_64_dp_3src;
        }
        if opcode & 0xffe08000 == 0x9ba00000 {
            return Self::UMADDL_64WA_dp_3src;
        }
        if opcode & 0xffe08000 == 0x9ba08000 {
            return Self::UMSUBL_64WA_dp_3src;
        }
        if opcode & 0xffe08000 == 0x9bc00000 {
            return Self::UMULH_64_dp_3src;
        }
        if opcode & 0xffe08000 == 0xc8000000 {
            return Self::STXR_SR64_ldstexcl;
        }
        if opcode & 0xffe08000 == 0xc8008000 {
            return Self::STLXR_SR64_ldstexcl;
        }
        if opcode & 0xffe08000 == 0xc8200000 {
            return Self::STXP_SP64_ldstexcl;
        }
        if opcode & 0xffe08000 == 0xc8208000 {
            return Self::STLXP_SP64_ldstexcl;
        }
        if opcode & 0xffe08000 == 0xc8400000 {
            return Self::LDXR_LR64_ldstexcl;
        }
        if opcode & 0xffe08000 == 0xc8408000 {
            return Self::LDAXR_LR64_ldstexcl;
        }
        if opcode & 0xffe08000 == 0xc8600000 {
            return Self::LDXP_LP64_ldstexcl;
        }
        if opcode & 0xffe08000 == 0xc8608000 {
            return Self::LDAXP_LP64_ldstexcl;
        }
        if opcode & 0xffe08000 == 0xc8800000 {
            return Self::STLLR_SL64_ldstexcl;
        }
        if opcode & 0xffe08000 == 0xc8808000 {
            return Self::STLR_SL64_ldstexcl;
        }
        if opcode & 0xffe08000 == 0xc8c00000 {
            return Self::LDLAR_LR64_ldstexcl;
        }
        if opcode & 0xffe08000 == 0xc8c08000 {
            return Self::LDAR_LR64_ldstexcl;
        }
        if opcode & 0xffe08000 == 0xce000000 {
            return Self::EOR3_VVV16_crypto4;
        }
        if opcode & 0xffe08000 == 0xce200000 {
            return Self::BCAX_VVV16_crypto4;
        }
        if opcode & 0xffe08000 == 0xce400000 {
            return Self::SM3SS1_VVV4_crypto4;
        }
        if opcode & 0xffe07c10 == 0xba000400 {
            return Self::RMIF_only_rmif;
        }
        if opcode & 0xffe01fe0 == 0x1e201000 {
            return Self::FMOV_S_floatimm;
        }
        if opcode & 0xffe01fe0 == 0x1e601000 {
            return Self::FMOV_D_floatimm;
        }
        if opcode & 0xffe01fe0 == 0x1ee01000 {
            return Self::FMOV_H_floatimm;
        }
        if opcode & 0xffe00c10 == 0x1e200400 {
            return Self::FCCMP_S_floatccmp;
        }
        if opcode & 0xffe00c10 == 0x1e200410 {
            return Self::FCCMPE_S_floatccmp;
        }
        if opcode & 0xffe00c10 == 0x1e600400 {
            return Self::FCCMP_D_floatccmp;
        }
        if opcode & 0xffe00c10 == 0x1e600410 {
            return Self::FCCMPE_D_floatccmp;
        }
        if opcode & 0xffe00c10 == 0x1ee00400 {
            return Self::FCCMP_H_floatccmp;
        }
        if opcode & 0xffe00c10 == 0x1ee00410 {
            return Self::FCCMPE_H_floatccmp;
        }
        if opcode & 0xffe00c10 == 0x3a400000 {
            return Self::CCMN_32_condcmp_reg;
        }
        if opcode & 0xffe00c10 == 0x3a400800 {
            return Self::CCMN_32_condcmp_imm;
        }
        if opcode & 0xffe00c10 == 0x7a400000 {
            return Self::CCMP_32_condcmp_reg;
        }
        if opcode & 0xffe00c10 == 0x7a400800 {
            return Self::CCMP_32_condcmp_imm;
        }
        if opcode & 0xffe00c10 == 0xba400000 {
            return Self::CCMN_64_condcmp_reg;
        }
        if opcode & 0xffe00c10 == 0xba400800 {
            return Self::CCMN_64_condcmp_imm;
        }
        if opcode & 0xffe00c10 == 0xfa400000 {
            return Self::CCMP_64_condcmp_reg;
        }
        if opcode & 0xffe00c10 == 0xfa400800 {
            return Self::CCMP_64_condcmp_imm;
        }
        if opcode & 0xffe00c00 == 0x19000000 {
            return Self::STLURB_32_ldapstl_unscaled;
        }
        if opcode & 0xffe00c00 == 0x19400000 {
            return Self::LDAPURB_32_ldapstl_unscaled;
        }
        if opcode & 0xffe00c00 == 0x19800000 {
            return Self::LDAPURSB_64_ldapstl_unscaled;
        }
        if opcode & 0xffe00c00 == 0x19c00000 {
            return Self::LDAPURSB_32_ldapstl_unscaled;
        }
        if opcode & 0xffe00c00 == 0x1a800000 {
            return Self::CSEL_32_condsel;
        }
        if opcode & 0xffe00c00 == 0x1a800400 {
            return Self::CINC_CSINC_32_condsel;
        }
        if opcode & 0xffe00c00 == 0x1a800400 {
            return Self::CSINC_32_condsel;
        }
        if opcode & 0xffe00c00 == 0x1e200c00 {
            return Self::FCSEL_S_floatsel;
        }
        if opcode & 0xffe00c00 == 0x1e600c00 {
            return Self::FCSEL_D_floatsel;
        }
        if opcode & 0xffe00c00 == 0x1ee00c00 {
            return Self::FCSEL_H_floatsel;
        }
        if opcode & 0xffe00c00 == 0x38000000 {
            return Self::STURB_32_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0x38000400 {
            return Self::STRB_32_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0x38000800 {
            return Self::STTRB_32_ldst_unpriv;
        }
        if opcode & 0xffe00c00 == 0x38000c00 {
            return Self::STRB_32_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0x38200800 {
            return Self::STRB_32B_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0x38400000 {
            return Self::LDURB_32_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0x38400400 {
            return Self::LDRB_32_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0x38400800 {
            return Self::LDTRB_32_ldst_unpriv;
        }
        if opcode & 0xffe00c00 == 0x38400c00 {
            return Self::LDRB_32_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0x38600800 {
            return Self::LDRB_32B_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0x38800000 {
            return Self::LDURSB_64_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0x38800400 {
            return Self::LDRSB_64_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0x38800800 {
            return Self::LDTRSB_64_ldst_unpriv;
        }
        if opcode & 0xffe00c00 == 0x38800c00 {
            return Self::LDRSB_64_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0x38a00800 {
            return Self::LDRSB_64B_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0x38c00000 {
            return Self::LDURSB_32_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0x38c00400 {
            return Self::LDRSB_32_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0x38c00800 {
            return Self::LDTRSB_32_ldst_unpriv;
        }
        if opcode & 0xffe00c00 == 0x38c00c00 {
            return Self::LDRSB_32_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0x38e00800 {
            return Self::LDRSB_32B_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0x3c000000 {
            return Self::STUR_B_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0x3c000400 {
            return Self::STR_B_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0x3c000c00 {
            return Self::STR_B_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0x3c200800 {
            return Self::STR_B_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0x3c400000 {
            return Self::LDUR_B_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0x3c400400 {
            return Self::LDR_B_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0x3c400c00 {
            return Self::LDR_B_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0x3c600800 {
            return Self::LDR_B_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0x3c800000 {
            return Self::STUR_Q_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0x3c800400 {
            return Self::STR_Q_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0x3c800c00 {
            return Self::STR_Q_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0x3ca00800 {
            return Self::STR_Q_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0x3cc00000 {
            return Self::LDUR_Q_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0x3cc00400 {
            return Self::LDR_Q_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0x3cc00c00 {
            return Self::LDR_Q_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0x3ce00800 {
            return Self::LDR_Q_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0x59000000 {
            return Self::STLURH_32_ldapstl_unscaled;
        }
        if opcode & 0xffe00c00 == 0x59400000 {
            return Self::LDAPURH_32_ldapstl_unscaled;
        }
        if opcode & 0xffe00c00 == 0x59800000 {
            return Self::LDAPURSH_64_ldapstl_unscaled;
        }
        if opcode & 0xffe00c00 == 0x59c00000 {
            return Self::LDAPURSH_32_ldapstl_unscaled;
        }
        if opcode & 0xffe00c00 == 0x5a800000 {
            return Self::CINV_CSINV_32_condsel;
        }
        if opcode & 0xffe00c00 == 0x5a800000 {
            return Self::CSINV_32_condsel;
        }
        if opcode & 0xffe00c00 == 0x5a800400 {
            return Self::CNEG_CSNEG_32_condsel;
        }
        if opcode & 0xffe00c00 == 0x5a800400 {
            return Self::CSNEG_32_condsel;
        }
        if opcode & 0xffe00c00 == 0x78000000 {
            return Self::STURH_32_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0x78000400 {
            return Self::STRH_32_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0x78000800 {
            return Self::STTRH_32_ldst_unpriv;
        }
        if opcode & 0xffe00c00 == 0x78000c00 {
            return Self::STRH_32_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0x78200800 {
            return Self::STRH_32_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0x78400000 {
            return Self::LDURH_32_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0x78400400 {
            return Self::LDRH_32_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0x78400800 {
            return Self::LDTRH_32_ldst_unpriv;
        }
        if opcode & 0xffe00c00 == 0x78400c00 {
            return Self::LDRH_32_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0x78600800 {
            return Self::LDRH_32_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0x78800000 {
            return Self::LDURSH_64_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0x78800400 {
            return Self::LDRSH_64_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0x78800800 {
            return Self::LDTRSH_64_ldst_unpriv;
        }
        if opcode & 0xffe00c00 == 0x78800c00 {
            return Self::LDRSH_64_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0x78a00800 {
            return Self::LDRSH_64_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0x78c00000 {
            return Self::LDURSH_32_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0x78c00400 {
            return Self::LDRSH_32_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0x78c00800 {
            return Self::LDTRSH_32_ldst_unpriv;
        }
        if opcode & 0xffe00c00 == 0x78c00c00 {
            return Self::LDRSH_32_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0x78e00800 {
            return Self::LDRSH_32_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0x7c000000 {
            return Self::STUR_H_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0x7c000400 {
            return Self::STR_H_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0x7c000c00 {
            return Self::STR_H_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0x7c200800 {
            return Self::STR_H_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0x7c400000 {
            return Self::LDUR_H_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0x7c400400 {
            return Self::LDR_H_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0x7c400c00 {
            return Self::LDR_H_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0x7c600800 {
            return Self::LDR_H_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0x99000000 {
            return Self::STLUR_32_ldapstl_unscaled;
        }
        if opcode & 0xffe00c00 == 0x99400000 {
            return Self::LDAPUR_32_ldapstl_unscaled;
        }
        if opcode & 0xffe00c00 == 0x99800000 {
            return Self::LDAPURSW_64_ldapstl_unscaled;
        }
        if opcode & 0xffe00c00 == 0x9a800000 {
            return Self::CSEL_64_condsel;
        }
        if opcode & 0xffe00c00 == 0x9a800400 {
            return Self::CINC_CSINC_64_condsel;
        }
        if opcode & 0xffe00c00 == 0x9a800400 {
            return Self::CSINC_64_condsel;
        }
        if opcode & 0xffe00c00 == 0xb8000000 {
            return Self::STUR_32_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0xb8000400 {
            return Self::STR_32_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0xb8000800 {
            return Self::STTR_32_ldst_unpriv;
        }
        if opcode & 0xffe00c00 == 0xb8000c00 {
            return Self::STR_32_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0xb8200800 {
            return Self::STR_32_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0xb8400000 {
            return Self::LDUR_32_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0xb8400400 {
            return Self::LDR_32_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0xb8400800 {
            return Self::LDTR_32_ldst_unpriv;
        }
        if opcode & 0xffe00c00 == 0xb8400c00 {
            return Self::LDR_32_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0xb8600800 {
            return Self::LDR_32_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0xb8800000 {
            return Self::LDURSW_64_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0xb8800400 {
            return Self::LDRSW_64_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0xb8800800 {
            return Self::LDTRSW_64_ldst_unpriv;
        }
        if opcode & 0xffe00c00 == 0xb8800c00 {
            return Self::LDRSW_64_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0xb8a00800 {
            return Self::LDRSW_64_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0xbc000000 {
            return Self::STUR_S_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0xbc000400 {
            return Self::STR_S_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0xbc000c00 {
            return Self::STR_S_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0xbc200800 {
            return Self::STR_S_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0xbc400000 {
            return Self::LDUR_S_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0xbc400400 {
            return Self::LDR_S_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0xbc400c00 {
            return Self::LDR_S_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0xbc600800 {
            return Self::LDR_S_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0xd9000000 {
            return Self::STLUR_64_ldapstl_unscaled;
        }
        if opcode & 0xffe00c00 == 0xd9200400 {
            return Self::STG_64Spost_ldsttags;
        }
        if opcode & 0xffe00c00 == 0xd9200800 {
            return Self::STG_64Soffset_ldsttags;
        }
        if opcode & 0xffe00c00 == 0xd9200c00 {
            return Self::STG_64Spre_ldsttags;
        }
        if opcode & 0xffe00c00 == 0xd9400000 {
            return Self::LDAPUR_64_ldapstl_unscaled;
        }
        if opcode & 0xffe00c00 == 0xd9600000 {
            return Self::LDG_64Loffset_ldsttags;
        }
        if opcode & 0xffe00c00 == 0xd9600400 {
            return Self::STZG_64Spost_ldsttags;
        }
        if opcode & 0xffe00c00 == 0xd9600800 {
            return Self::STZG_64Soffset_ldsttags;
        }
        if opcode & 0xffe00c00 == 0xd9600c00 {
            return Self::STZG_64Spre_ldsttags;
        }
        if opcode & 0xffe00c00 == 0xd9a00400 {
            return Self::ST2G_64Spost_ldsttags;
        }
        if opcode & 0xffe00c00 == 0xd9a00800 {
            return Self::ST2G_64Soffset_ldsttags;
        }
        if opcode & 0xffe00c00 == 0xd9a00c00 {
            return Self::ST2G_64Spre_ldsttags;
        }
        if opcode & 0xffe00c00 == 0xd9e00400 {
            return Self::STZ2G_64Spost_ldsttags;
        }
        if opcode & 0xffe00c00 == 0xd9e00800 {
            return Self::STZ2G_64Soffset_ldsttags;
        }
        if opcode & 0xffe00c00 == 0xd9e00c00 {
            return Self::STZ2G_64Spre_ldsttags;
        }
        if opcode & 0xffe00c00 == 0xda800000 {
            return Self::CINV_CSINV_64_condsel;
        }
        if opcode & 0xffe00c00 == 0xda800000 {
            return Self::CSINV_64_condsel;
        }
        if opcode & 0xffe00c00 == 0xda800400 {
            return Self::CNEG_CSNEG_64_condsel;
        }
        if opcode & 0xffe00c00 == 0xda800400 {
            return Self::CSNEG_64_condsel;
        }
        if opcode & 0xffe00c00 == 0xf8000000 {
            return Self::STUR_64_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0xf8000400 {
            return Self::STR_64_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0xf8000800 {
            return Self::STTR_64_ldst_unpriv;
        }
        if opcode & 0xffe00c00 == 0xf8000c00 {
            return Self::STR_64_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0xf8200800 {
            return Self::STR_64_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0xf8400000 {
            return Self::LDUR_64_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0xf8400400 {
            return Self::LDR_64_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0xf8400800 {
            return Self::LDTR_64_ldst_unpriv;
        }
        if opcode & 0xffe00c00 == 0xf8400c00 {
            return Self::LDR_64_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0xf8600800 {
            return Self::LDR_64_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0xf8800000 {
            return Self::PRFUM_P_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0xf8a00800 {
            return Self::PRFM_P_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0xfc000000 {
            return Self::STUR_D_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0xfc000400 {
            return Self::STR_D_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0xfc000c00 {
            return Self::STR_D_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0xfc200800 {
            return Self::STR_D_ldst_regoff;
        }
        if opcode & 0xffe00c00 == 0xfc400000 {
            return Self::LDUR_D_ldst_unscaled;
        }
        if opcode & 0xffe00c00 == 0xfc400400 {
            return Self::LDR_D_ldst_immpost;
        }
        if opcode & 0xffe00c00 == 0xfc400c00 {
            return Self::LDR_D_ldst_immpre;
        }
        if opcode & 0xffe00c00 == 0xfc600800 {
            return Self::LDR_D_ldst_regoff;
        }
        if opcode & 0xffe0001f == 0x2b20001f {
            return Self::CMN_ADDS_32S_addsub_ext;
        }
        if opcode & 0xffe0001f == 0x6b20001f {
            return Self::CMP_SUBS_32S_addsub_ext;
        }
        if opcode & 0xffe0001f == 0xab20001f {
            return Self::CMN_ADDS_64S_addsub_ext;
        }
        if opcode & 0xffe0001f == 0xd4000001 {
            return Self::SVC_EX_exception;
        }
        if opcode & 0xffe0001f == 0xd4000002 {
            return Self::HVC_EX_exception;
        }
        if opcode & 0xffe0001f == 0xd4000003 {
            return Self::SMC_EX_exception;
        }
        if opcode & 0xffe0001f == 0xd4200000 {
            return Self::BRK_EX_exception;
        }
        if opcode & 0xffe0001f == 0xd4400000 {
            return Self::HLT_EX_exception;
        }
        if opcode & 0xffe0001f == 0xd4a00001 {
            return Self::DCPS1_DC_exception;
        }
        if opcode & 0xffe0001f == 0xd4a00002 {
            return Self::DCPS2_DC_exception;
        }
        if opcode & 0xffe0001f == 0xd4a00003 {
            return Self::DCPS3_DC_exception;
        }
        if opcode & 0xffe0001f == 0xeb20001f {
            return Self::CMP_SUBS_64S_addsub_ext;
        }
        if opcode & 0xffe00000 == 0xb200000 {
            return Self::ADD_32_addsub_ext;
        }
        if opcode & 0xffe00000 == 0x2b200000 {
            return Self::ADDS_32S_addsub_ext;
        }
        if opcode & 0xffe00000 == 0x4b200000 {
            return Self::SUB_32_addsub_ext;
        }
        if opcode & 0xffe00000 == 0x6b200000 {
            return Self::SUBS_32S_addsub_ext;
        }
        if opcode & 0xffe00000 == 0x8b200000 {
            return Self::ADD_64_addsub_ext;
        }
        if opcode & 0xffe00000 == 0x93c00000 {
            return Self::EXTR_64_extract;
        }
        if opcode & 0xffe00000 == 0x93c00000 {
            return Self::ROR_EXTR_64_extract;
        }
        if opcode & 0xffe00000 == 0xab200000 {
            return Self::ADDS_64S_addsub_ext;
        }
        if opcode & 0xffe00000 == 0xcb200000 {
            return Self::SUB_64_addsub_ext;
        }
        if opcode & 0xffe00000 == 0xce800000 {
            return Self::XAR_VVV2_crypto3_imm6;
        }
        if opcode & 0xffe00000 == 0xeb200000 {
            return Self::SUBS_64S_addsub_ext;
        }
        if opcode & 0xffc0fc00 == 0x13007c00 {
            return Self::ASR_SBFM_32M_bitfield;
        }
        if opcode & 0xffc0fc00 == 0x53007c00 {
            return Self::LSR_UBFM_32M_bitfield;
        }
        if opcode & 0xffc0fc00 == 0x9340fc00 {
            return Self::ASR_SBFM_64M_bitfield;
        }
        if opcode & 0xffc0fc00 == 0xd340fc00 {
            return Self::LSR_UBFM_64M_bitfield;
        }
        if opcode & 0xffc0f400 == 0x5f001000 {
            return Self::FMLA_asisdelem_RH_H;
        }
        if opcode & 0xffc0f400 == 0x5f005000 {
            return Self::FMLS_asisdelem_RH_H;
        }
        if opcode & 0xffc0f400 == 0x5f009000 {
            return Self::FMUL_asisdelem_RH_H;
        }
        if opcode & 0xffc0f400 == 0x7f009000 {
            return Self::FMULX_asisdelem_RH_H;
        }
        if opcode & 0xffc0e010 == 0x85800000 {
            return Self::LDR_p_bi;
        }
        if opcode & 0xffc0e010 == 0x85c00000 {
            return Self::PRFB_i_p_bi_s;
        }
        if opcode & 0xffc0e010 == 0x85c02000 {
            return Self::PRFH_i_p_bi_s;
        }
        if opcode & 0xffc0e010 == 0x85c04000 {
            return Self::PRFW_i_p_bi_s;
        }
        if opcode & 0xffc0e010 == 0x85c06000 {
            return Self::PRFD_i_p_bi_s;
        }
        if opcode & 0xffc0e010 == 0xe5800000 {
            return Self::STR_p_bi;
        }
        if opcode & 0xffc0e000 == 0x84408000 {
            return Self::LD1RB_z_p_bi_u8;
        }
        if opcode & 0xffc0e000 == 0x8440a000 {
            return Self::LD1RB_z_p_bi_u16;
        }
        if opcode & 0xffc0e000 == 0x8440c000 {
            return Self::LD1RB_z_p_bi_u32;
        }
        if opcode & 0xffc0e000 == 0x8440e000 {
            return Self::LD1RB_z_p_bi_u64;
        }
        if opcode & 0xffc0e000 == 0x84c08000 {
            return Self::LD1RSW_z_p_bi_s64;
        }
        if opcode & 0xffc0e000 == 0x84c0a000 {
            return Self::LD1RH_z_p_bi_u16;
        }
        if opcode & 0xffc0e000 == 0x84c0c000 {
            return Self::LD1RH_z_p_bi_u32;
        }
        if opcode & 0xffc0e000 == 0x84c0e000 {
            return Self::LD1RH_z_p_bi_u64;
        }
        if opcode & 0xffc0e000 == 0x85408000 {
            return Self::LD1RSH_z_p_bi_s64;
        }
        if opcode & 0xffc0e000 == 0x8540a000 {
            return Self::LD1RSH_z_p_bi_s32;
        }
        if opcode & 0xffc0e000 == 0x8540c000 {
            return Self::LD1RW_z_p_bi_u32;
        }
        if opcode & 0xffc0e000 == 0x8540e000 {
            return Self::LD1RW_z_p_bi_u64;
        }
        if opcode & 0xffc0e000 == 0x85804000 {
            return Self::LDR_z_bi;
        }
        if opcode & 0xffc0e000 == 0x85c08000 {
            return Self::LD1RSB_z_p_bi_s64;
        }
        if opcode & 0xffc0e000 == 0x85c0a000 {
            return Self::LD1RSB_z_p_bi_s32;
        }
        if opcode & 0xffc0e000 == 0x85c0c000 {
            return Self::LD1RSB_z_p_bi_s16;
        }
        if opcode & 0xffc0e000 == 0x85c0e000 {
            return Self::LD1RD_z_p_bi_u64;
        }
        if opcode & 0xffc0e000 == 0xe5804000 {
            return Self::STR_z_bi;
        }
        if opcode & 0xffc003e0 == 0x320003e0 {
            return Self::MOV_ORR_32_log_imm;
        }
        if opcode & 0xffc003e0 == 0x330003e0 {
            return Self::BFC_BFM_32M_bitfield;
        }
        if opcode & 0xffc003e0 == 0xb34003e0 {
            return Self::BFC_BFM_64M_bitfield;
        }
        if opcode & 0xffc0001f == 0x7200001f {
            return Self::TST_ANDS_32S_log_imm;
        }
        if opcode & 0xffc00000 == 0x12000000 {
            return Self::AND_32_log_imm;
        }
        if opcode & 0xffc00000 == 0x12800000 {
            return Self::MOV_MOVN_32_movewide;
        }
        if opcode & 0xffc00000 == 0x12800000 {
            return Self::MOVN_32_movewide;
        }
        if opcode & 0xffc00000 == 0x13000000 {
            return Self::SBFIZ_SBFM_32M_bitfield;
        }
        if opcode & 0xffc00000 == 0x13000000 {
            return Self::SBFM_32M_bitfield;
        }
        if opcode & 0xffc00000 == 0x13000000 {
            return Self::SBFX_SBFM_32M_bitfield;
        }
        if opcode & 0xffc00000 == 0x28000000 {
            return Self::STNP_32_ldstnapair_offs;
        }
        if opcode & 0xffc00000 == 0x28400000 {
            return Self::LDNP_32_ldstnapair_offs;
        }
        if opcode & 0xffc00000 == 0x28800000 {
            return Self::STP_32_ldstpair_post;
        }
        if opcode & 0xffc00000 == 0x28c00000 {
            return Self::LDP_32_ldstpair_post;
        }
        if opcode & 0xffc00000 == 0x29000000 {
            return Self::STP_32_ldstpair_off;
        }
        if opcode & 0xffc00000 == 0x29400000 {
            return Self::LDP_32_ldstpair_off;
        }
        if opcode & 0xffc00000 == 0x29800000 {
            return Self::STP_32_ldstpair_pre;
        }
        if opcode & 0xffc00000 == 0x29c00000 {
            return Self::LDP_32_ldstpair_pre;
        }
        if opcode & 0xffc00000 == 0x2c000000 {
            return Self::STNP_S_ldstnapair_offs;
        }
        if opcode & 0xffc00000 == 0x2c400000 {
            return Self::LDNP_S_ldstnapair_offs;
        }
        if opcode & 0xffc00000 == 0x2c800000 {
            return Self::STP_S_ldstpair_post;
        }
        if opcode & 0xffc00000 == 0x2cc00000 {
            return Self::LDP_S_ldstpair_post;
        }
        if opcode & 0xffc00000 == 0x2d000000 {
            return Self::STP_S_ldstpair_off;
        }
        if opcode & 0xffc00000 == 0x2d400000 {
            return Self::LDP_S_ldstpair_off;
        }
        if opcode & 0xffc00000 == 0x2d800000 {
            return Self::STP_S_ldstpair_pre;
        }
        if opcode & 0xffc00000 == 0x2dc00000 {
            return Self::LDP_S_ldstpair_pre;
        }
        if opcode & 0xffc00000 == 0x32000000 {
            return Self::ORR_32_log_imm;
        }
        if opcode & 0xffc00000 == 0x33000000 {
            return Self::BFI_BFM_32M_bitfield;
        }
        if opcode & 0xffc00000 == 0x33000000 {
            return Self::BFM_32M_bitfield;
        }
        if opcode & 0xffc00000 == 0x33000000 {
            return Self::BFXIL_BFM_32M_bitfield;
        }
        if opcode & 0xffc00000 == 0x39000000 {
            return Self::STRB_32_ldst_pos;
        }
        if opcode & 0xffc00000 == 0x39400000 {
            return Self::LDRB_32_ldst_pos;
        }
        if opcode & 0xffc00000 == 0x39800000 {
            return Self::LDRSB_64_ldst_pos;
        }
        if opcode & 0xffc00000 == 0x39c00000 {
            return Self::LDRSB_32_ldst_pos;
        }
        if opcode & 0xffc00000 == 0x3d000000 {
            return Self::STR_B_ldst_pos;
        }
        if opcode & 0xffc00000 == 0x3d400000 {
            return Self::LDR_B_ldst_pos;
        }
        if opcode & 0xffc00000 == 0x3d800000 {
            return Self::STR_Q_ldst_pos;
        }
        if opcode & 0xffc00000 == 0x3dc00000 {
            return Self::LDR_Q_ldst_pos;
        }
        if opcode & 0xffc00000 == 0x52000000 {
            return Self::EOR_32_log_imm;
        }
        if opcode & 0xffc00000 == 0x52800000 {
            return Self::MOV_MOVZ_32_movewide;
        }
        if opcode & 0xffc00000 == 0x52800000 {
            return Self::MOVZ_32_movewide;
        }
        if opcode & 0xffc00000 == 0x53000000 {
            return Self::LSL_UBFM_32M_bitfield;
        }
        if opcode & 0xffc00000 == 0x53000000 {
            return Self::UBFIZ_UBFM_32M_bitfield;
        }
        if opcode & 0xffc00000 == 0x53000000 {
            return Self::UBFM_32M_bitfield;
        }
        if opcode & 0xffc00000 == 0x53000000 {
            return Self::UBFX_UBFM_32M_bitfield;
        }
        if opcode & 0xffc00000 == 0x68800000 {
            return Self::STGP_64_ldstpair_post;
        }
        if opcode & 0xffc00000 == 0x68c00000 {
            return Self::LDPSW_64_ldstpair_post;
        }
        if opcode & 0xffc00000 == 0x69000000 {
            return Self::STGP_64_ldstpair_off;
        }
        if opcode & 0xffc00000 == 0x69400000 {
            return Self::LDPSW_64_ldstpair_off;
        }
        if opcode & 0xffc00000 == 0x69800000 {
            return Self::STGP_64_ldstpair_pre;
        }
        if opcode & 0xffc00000 == 0x69c00000 {
            return Self::LDPSW_64_ldstpair_pre;
        }
        if opcode & 0xffc00000 == 0x6c000000 {
            return Self::STNP_D_ldstnapair_offs;
        }
        if opcode & 0xffc00000 == 0x6c400000 {
            return Self::LDNP_D_ldstnapair_offs;
        }
        if opcode & 0xffc00000 == 0x6c800000 {
            return Self::STP_D_ldstpair_post;
        }
        if opcode & 0xffc00000 == 0x6cc00000 {
            return Self::LDP_D_ldstpair_post;
        }
        if opcode & 0xffc00000 == 0x6d000000 {
            return Self::STP_D_ldstpair_off;
        }
        if opcode & 0xffc00000 == 0x6d400000 {
            return Self::LDP_D_ldstpair_off;
        }
        if opcode & 0xffc00000 == 0x6d800000 {
            return Self::STP_D_ldstpair_pre;
        }
        if opcode & 0xffc00000 == 0x6dc00000 {
            return Self::LDP_D_ldstpair_pre;
        }
        if opcode & 0xffc00000 == 0x72000000 {
            return Self::ANDS_32S_log_imm;
        }
        if opcode & 0xffc00000 == 0x72800000 {
            return Self::MOVK_32_movewide;
        }
        if opcode & 0xffc00000 == 0x79000000 {
            return Self::STRH_32_ldst_pos;
        }
        if opcode & 0xffc00000 == 0x79400000 {
            return Self::LDRH_32_ldst_pos;
        }
        if opcode & 0xffc00000 == 0x79800000 {
            return Self::LDRSH_64_ldst_pos;
        }
        if opcode & 0xffc00000 == 0x79c00000 {
            return Self::LDRSH_32_ldst_pos;
        }
        if opcode & 0xffc00000 == 0x7d000000 {
            return Self::STR_H_ldst_pos;
        }
        if opcode & 0xffc00000 == 0x7d400000 {
            return Self::LDR_H_ldst_pos;
        }
        if opcode & 0xffc00000 == 0x91800000 {
            return Self::ADDG_64_addsub_immtags;
        }
        if opcode & 0xffc00000 == 0x93400000 {
            return Self::SBFIZ_SBFM_64M_bitfield;
        }
        if opcode & 0xffc00000 == 0x93400000 {
            return Self::SBFM_64M_bitfield;
        }
        if opcode & 0xffc00000 == 0x93400000 {
            return Self::SBFX_SBFM_64M_bitfield;
        }
        if opcode & 0xffc00000 == 0xa8000000 {
            return Self::STNP_64_ldstnapair_offs;
        }
        if opcode & 0xffc00000 == 0xa8400000 {
            return Self::LDNP_64_ldstnapair_offs;
        }
        if opcode & 0xffc00000 == 0xa8800000 {
            return Self::STP_64_ldstpair_post;
        }
        if opcode & 0xffc00000 == 0xa8c00000 {
            return Self::LDP_64_ldstpair_post;
        }
        if opcode & 0xffc00000 == 0xa9000000 {
            return Self::STP_64_ldstpair_off;
        }
        if opcode & 0xffc00000 == 0xa9400000 {
            return Self::LDP_64_ldstpair_off;
        }
        if opcode & 0xffc00000 == 0xa9800000 {
            return Self::STP_64_ldstpair_pre;
        }
        if opcode & 0xffc00000 == 0xa9c00000 {
            return Self::LDP_64_ldstpair_pre;
        }
        if opcode & 0xffc00000 == 0xac000000 {
            return Self::STNP_Q_ldstnapair_offs;
        }
        if opcode & 0xffc00000 == 0xac400000 {
            return Self::LDNP_Q_ldstnapair_offs;
        }
        if opcode & 0xffc00000 == 0xac800000 {
            return Self::STP_Q_ldstpair_post;
        }
        if opcode & 0xffc00000 == 0xacc00000 {
            return Self::LDP_Q_ldstpair_post;
        }
        if opcode & 0xffc00000 == 0xad000000 {
            return Self::STP_Q_ldstpair_off;
        }
        if opcode & 0xffc00000 == 0xad400000 {
            return Self::LDP_Q_ldstpair_off;
        }
        if opcode & 0xffc00000 == 0xad800000 {
            return Self::STP_Q_ldstpair_pre;
        }
        if opcode & 0xffc00000 == 0xadc00000 {
            return Self::LDP_Q_ldstpair_pre;
        }
        if opcode & 0xffc00000 == 0xb3400000 {
            return Self::BFI_BFM_64M_bitfield;
        }
        if opcode & 0xffc00000 == 0xb3400000 {
            return Self::BFM_64M_bitfield;
        }
        if opcode & 0xffc00000 == 0xb3400000 {
            return Self::BFXIL_BFM_64M_bitfield;
        }
        if opcode & 0xffc00000 == 0xb9000000 {
            return Self::STR_32_ldst_pos;
        }
        if opcode & 0xffc00000 == 0xb9400000 {
            return Self::LDR_32_ldst_pos;
        }
        if opcode & 0xffc00000 == 0xb9800000 {
            return Self::LDRSW_64_ldst_pos;
        }
        if opcode & 0xffc00000 == 0xbd000000 {
            return Self::STR_S_ldst_pos;
        }
        if opcode & 0xffc00000 == 0xbd400000 {
            return Self::LDR_S_ldst_pos;
        }
        if opcode & 0xffc00000 == 0xd1800000 {
            return Self::SUBG_64_addsub_immtags;
        }
        if opcode & 0xffc00000 == 0xd3400000 {
            return Self::LSL_UBFM_64M_bitfield;
        }
        if opcode & 0xffc00000 == 0xd3400000 {
            return Self::UBFIZ_UBFM_64M_bitfield;
        }
        if opcode & 0xffc00000 == 0xd3400000 {
            return Self::UBFM_64M_bitfield;
        }
        if opcode & 0xffc00000 == 0xd3400000 {
            return Self::UBFX_UBFM_64M_bitfield;
        }
        if opcode & 0xffc00000 == 0xf9000000 {
            return Self::STR_64_ldst_pos;
        }
        if opcode & 0xffc00000 == 0xf9400000 {
            return Self::LDR_64_ldst_pos;
        }
        if opcode & 0xffc00000 == 0xf9800000 {
            return Self::PRFM_P_ldst_pos;
        }
        if opcode & 0xffc00000 == 0xfd000000 {
            return Self::STR_D_ldst_pos;
        }
        if opcode & 0xffc00000 == 0xfd400000 {
            return Self::LDR_D_ldst_pos;
        }
        if opcode & 0xffbffc00 == 0x5e21a800 {
            return Self::FCVTNS_asisdmisc_R;
        }
        if opcode & 0xffbffc00 == 0x5e21b800 {
            return Self::FCVTMS_asisdmisc_R;
        }
        if opcode & 0xffbffc00 == 0x5e21c800 {
            return Self::FCVTAS_asisdmisc_R;
        }
        if opcode & 0xffbffc00 == 0x5e21d800 {
            return Self::SCVTF_asisdmisc_R;
        }
        if opcode & 0xffbffc00 == 0x5e30c800 {
            return Self::FMAXNMP_asisdpair_only_H;
        }
        if opcode & 0xffbffc00 == 0x5e30d800 {
            return Self::FADDP_asisdpair_only_H;
        }
        if opcode & 0xffbffc00 == 0x5e30f800 {
            return Self::FMAXP_asisdpair_only_H;
        }
        if opcode & 0xffbffc00 == 0x5ea0c800 {
            return Self::FCMGT_asisdmisc_FZ;
        }
        if opcode & 0xffbffc00 == 0x5ea0d800 {
            return Self::FCMEQ_asisdmisc_FZ;
        }
        if opcode & 0xffbffc00 == 0x5ea0e800 {
            return Self::FCMLT_asisdmisc_FZ;
        }
        if opcode & 0xffbffc00 == 0x5ea1a800 {
            return Self::FCVTPS_asisdmisc_R;
        }
        if opcode & 0xffbffc00 == 0x5ea1b800 {
            return Self::FCVTZS_asisdmisc_R;
        }
        if opcode & 0xffbffc00 == 0x5ea1d800 {
            return Self::FRECPE_asisdmisc_R;
        }
        if opcode & 0xffbffc00 == 0x5ea1f800 {
            return Self::FRECPX_asisdmisc_R;
        }
        if opcode & 0xffbffc00 == 0x5eb0c800 {
            return Self::FMINNMP_asisdpair_only_H;
        }
        if opcode & 0xffbffc00 == 0x5eb0f800 {
            return Self::FMINP_asisdpair_only_H;
        }
        if opcode & 0xffbffc00 == 0x7e216800 {
            return Self::FCVTXN_asisdmisc_N;
        }
        if opcode & 0xffbffc00 == 0x7e21a800 {
            return Self::FCVTNU_asisdmisc_R;
        }
        if opcode & 0xffbffc00 == 0x7e21b800 {
            return Self::FCVTMU_asisdmisc_R;
        }
        if opcode & 0xffbffc00 == 0x7e21c800 {
            return Self::FCVTAU_asisdmisc_R;
        }
        if opcode & 0xffbffc00 == 0x7e21d800 {
            return Self::UCVTF_asisdmisc_R;
        }
        if opcode & 0xffbffc00 == 0x7e30c800 {
            return Self::FMAXNMP_asisdpair_only_SD;
        }
        if opcode & 0xffbffc00 == 0x7e30d800 {
            return Self::FADDP_asisdpair_only_SD;
        }
        if opcode & 0xffbffc00 == 0x7e30f800 {
            return Self::FMAXP_asisdpair_only_SD;
        }
        if opcode & 0xffbffc00 == 0x7ea0c800 {
            return Self::FCMGE_asisdmisc_FZ;
        }
        if opcode & 0xffbffc00 == 0x7ea0d800 {
            return Self::FCMLE_asisdmisc_FZ;
        }
        if opcode & 0xffbffc00 == 0x7ea1a800 {
            return Self::FCVTPU_asisdmisc_R;
        }
        if opcode & 0xffbffc00 == 0x7ea1b800 {
            return Self::FCVTZU_asisdmisc_R;
        }
        if opcode & 0xffbffc00 == 0x7ea1d800 {
            return Self::FRSQRTE_asisdmisc_R;
        }
        if opcode & 0xffbffc00 == 0x7eb0c800 {
            return Self::FMINNMP_asisdpair_only_SD;
        }
        if opcode & 0xffbffc00 == 0x7eb0f800 {
            return Self::FMINP_asisdpair_only_SD;
        }
        if opcode & 0xffa0fc1f == 0x25a02000 {
            return Self::CTERMEQ_rr;
        }
        if opcode & 0xffa0fc1f == 0x25a02010 {
            return Self::CTERMNE_rr;
        }
        if opcode & 0xffa0fc00 == 0x5e20dc00 {
            return Self::FMULX_asisdsame_only;
        }
        if opcode & 0xffa0fc00 == 0x5e20e400 {
            return Self::FCMEQ_asisdsame_only;
        }
        if opcode & 0xffa0fc00 == 0x5e20fc00 {
            return Self::FRECPS_asisdsame_only;
        }
        if opcode & 0xffa0fc00 == 0x5ea0fc00 {
            return Self::FRSQRTS_asisdsame_only;
        }
        if opcode & 0xffa0fc00 == 0x64200000 {
            return Self::FMLA_z_zzzi_h;
        }
        if opcode & 0xffa0fc00 == 0x64200400 {
            return Self::FMLS_z_zzzi_h;
        }
        if opcode & 0xffa0fc00 == 0x64202000 {
            return Self::FMUL_z_zzi_h;
        }
        if opcode & 0xffa0fc00 == 0x7e20e400 {
            return Self::FCMGE_asisdsame_only;
        }
        if opcode & 0xffa0fc00 == 0x7e20ec00 {
            return Self::FACGE_asisdsame_only;
        }
        if opcode & 0xffa0fc00 == 0x7ea0d400 {
            return Self::FABD_asisdsame_only;
        }
        if opcode & 0xffa0fc00 == 0x7ea0e400 {
            return Self::FCMGT_asisdsame_only;
        }
        if opcode & 0xffa0fc00 == 0x7ea0ec00 {
            return Self::FACGT_asisdsame_only;
        }
        if opcode & 0xffa0f000 == 0x4a0a000 {
            return Self::ADR_z_az_sd_same_scaled;
        }
        if opcode & 0xffa0e010 == 0x84200000 {
            return Self::PRFB_i_p_bz_s_x32_scaled;
        }
        if opcode & 0xffa0e010 == 0x84202000 {
            return Self::PRFH_i_p_bz_s_x32_scaled;
        }
        if opcode & 0xffa0e010 == 0x84204000 {
            return Self::PRFW_i_p_bz_s_x32_scaled;
        }
        if opcode & 0xffa0e010 == 0x84206000 {
            return Self::PRFD_i_p_bz_s_x32_scaled;
        }
        if opcode & 0xffa0e010 == 0xc4200000 {
            return Self::PRFB_i_p_bz_d_x32_scaled;
        }
        if opcode & 0xffa0e010 == 0xc4202000 {
            return Self::PRFH_i_p_bz_d_x32_scaled;
        }
        if opcode & 0xffa0e010 == 0xc4204000 {
            return Self::PRFW_i_p_bz_d_x32_scaled;
        }
        if opcode & 0xffa0e010 == 0xc4206000 {
            return Self::PRFD_i_p_bz_d_x32_scaled;
        }
        if opcode & 0xffa0e000 == 0x84000000 {
            return Self::LD1SB_z_p_bz_s_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0x84002000 {
            return Self::LDFF1SB_z_p_bz_s_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0x84004000 {
            return Self::LD1B_z_p_bz_s_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0x84006000 {
            return Self::LDFF1B_z_p_bz_s_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0x84800000 {
            return Self::LD1SH_z_p_bz_s_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0x84802000 {
            return Self::LDFF1SH_z_p_bz_s_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0x84804000 {
            return Self::LD1H_z_p_bz_s_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0x84806000 {
            return Self::LDFF1H_z_p_bz_s_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0x84a00000 {
            return Self::LD1SH_z_p_bz_s_x32_scaled;
        }
        if opcode & 0xffa0e000 == 0x84a02000 {
            return Self::LDFF1SH_z_p_bz_s_x32_scaled;
        }
        if opcode & 0xffa0e000 == 0x84a04000 {
            return Self::LD1H_z_p_bz_s_x32_scaled;
        }
        if opcode & 0xffa0e000 == 0x84a06000 {
            return Self::LDFF1H_z_p_bz_s_x32_scaled;
        }
        if opcode & 0xffa0e000 == 0x85004000 {
            return Self::LD1W_z_p_bz_s_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0x85006000 {
            return Self::LDFF1W_z_p_bz_s_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0x85204000 {
            return Self::LD1W_z_p_bz_s_x32_scaled;
        }
        if opcode & 0xffa0e000 == 0x85206000 {
            return Self::LDFF1W_z_p_bz_s_x32_scaled;
        }
        if opcode & 0xffa0e000 == 0xc4000000 {
            return Self::LD1SB_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0xc4002000 {
            return Self::LDFF1SB_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0xc4004000 {
            return Self::LD1B_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0xc4006000 {
            return Self::LDFF1B_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0xc4800000 {
            return Self::LD1SH_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0xc4802000 {
            return Self::LDFF1SH_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0xc4804000 {
            return Self::LD1H_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0xc4806000 {
            return Self::LDFF1H_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0xc4a00000 {
            return Self::LD1SH_z_p_bz_d_x32_scaled;
        }
        if opcode & 0xffa0e000 == 0xc4a02000 {
            return Self::LDFF1SH_z_p_bz_d_x32_scaled;
        }
        if opcode & 0xffa0e000 == 0xc4a04000 {
            return Self::LD1H_z_p_bz_d_x32_scaled;
        }
        if opcode & 0xffa0e000 == 0xc4a06000 {
            return Self::LDFF1H_z_p_bz_d_x32_scaled;
        }
        if opcode & 0xffa0e000 == 0xc5000000 {
            return Self::LD1SW_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0xc5002000 {
            return Self::LDFF1SW_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0xc5004000 {
            return Self::LD1W_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0xc5006000 {
            return Self::LDFF1W_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0xc5200000 {
            return Self::LD1SW_z_p_bz_d_x32_scaled;
        }
        if opcode & 0xffa0e000 == 0xc5202000 {
            return Self::LDFF1SW_z_p_bz_d_x32_scaled;
        }
        if opcode & 0xffa0e000 == 0xc5204000 {
            return Self::LD1W_z_p_bz_d_x32_scaled;
        }
        if opcode & 0xffa0e000 == 0xc5206000 {
            return Self::LDFF1W_z_p_bz_d_x32_scaled;
        }
        if opcode & 0xffa0e000 == 0xc5804000 {
            return Self::LD1D_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0xc5806000 {
            return Self::LDFF1D_z_p_bz_d_x32_unscaled;
        }
        if opcode & 0xffa0e000 == 0xc5a04000 {
            return Self::LD1D_z_p_bz_d_x32_scaled;
        }
        if opcode & 0xffa0e000 == 0xc5a06000 {
            return Self::LDFF1D_z_p_bz_d_x32_scaled;
        }
        if opcode & 0xffa00c00 == 0xf8200400 {
            return Self::LDRAA_64_ldst_pac;
        }
        if opcode & 0xffa00c00 == 0xf8200c00 {
            return Self::LDRAA_64W_ldst_pac;
        }
        if opcode & 0xffa00c00 == 0xf8a00400 {
            return Self::LDRAB_64_ldst_pac;
        }
        if opcode & 0xffa00c00 == 0xf8a00c00 {
            return Self::LDRAB_64W_ldst_pac;
        }
        if opcode & 0xff90e000 == 0xe400e000 {
            return Self::ST1B_z_p_bi;
        }
        if opcode & 0xff90e000 == 0xe480e000 {
            return Self::ST1H_z_p_bi;
        }
        if opcode & 0xff90e000 == 0xe500e000 {
            return Self::ST1W_z_p_bi;
        }
        if opcode & 0xff90e000 == 0xe580e000 {
            return Self::ST1D_z_p_bi;
        }
        if opcode & 0xff80fc00 == 0x5f000400 {
            return Self::SSHR_asisdshf_R;
        }
        if opcode & 0xff80fc00 == 0x5f001400 {
            return Self::SSRA_asisdshf_R;
        }
        if opcode & 0xff80fc00 == 0x5f002400 {
            return Self::SRSHR_asisdshf_R;
        }
        if opcode & 0xff80fc00 == 0x5f003400 {
            return Self::SRSRA_asisdshf_R;
        }
        if opcode & 0xff80fc00 == 0x5f005400 {
            return Self::SHL_asisdshf_R;
        }
        if opcode & 0xff80fc00 == 0x5f007400 {
            return Self::SQSHL_asisdshf_R;
        }
        if opcode & 0xff80fc00 == 0x5f009400 {
            return Self::SQSHRN_asisdshf_N;
        }
        if opcode & 0xff80fc00 == 0x5f009c00 {
            return Self::SQRSHRN_asisdshf_N;
        }
        if opcode & 0xff80fc00 == 0x5f00e400 {
            return Self::SCVTF_asisdshf_C;
        }
        if opcode & 0xff80fc00 == 0x5f00fc00 {
            return Self::FCVTZS_asisdshf_C;
        }
        if opcode & 0xff80fc00 == 0x7f000400 {
            return Self::USHR_asisdshf_R;
        }
        if opcode & 0xff80fc00 == 0x7f001400 {
            return Self::USRA_asisdshf_R;
        }
        if opcode & 0xff80fc00 == 0x7f002400 {
            return Self::URSHR_asisdshf_R;
        }
        if opcode & 0xff80fc00 == 0x7f003400 {
            return Self::URSRA_asisdshf_R;
        }
        if opcode & 0xff80fc00 == 0x7f004400 {
            return Self::SRI_asisdshf_R;
        }
        if opcode & 0xff80fc00 == 0x7f005400 {
            return Self::SLI_asisdshf_R;
        }
        if opcode & 0xff80fc00 == 0x7f006400 {
            return Self::SQSHLU_asisdshf_R;
        }
        if opcode & 0xff80fc00 == 0x7f007400 {
            return Self::UQSHL_asisdshf_R;
        }
        if opcode & 0xff80fc00 == 0x7f008400 {
            return Self::SQSHRUN_asisdshf_N;
        }
        if opcode & 0xff80fc00 == 0x7f008c00 {
            return Self::SQRSHRUN_asisdshf_N;
        }
        if opcode & 0xff80fc00 == 0x7f009400 {
            return Self::UQSHRN_asisdshf_N;
        }
        if opcode & 0xff80fc00 == 0x7f009c00 {
            return Self::UQRSHRN_asisdshf_N;
        }
        if opcode & 0xff80fc00 == 0x7f00e400 {
            return Self::UCVTF_asisdshf_C;
        }
        if opcode & 0xff80fc00 == 0x7f00fc00 {
            return Self::FCVTZU_asisdshf_C;
        }
        if opcode & 0xff80f400 == 0x5f801000 {
            return Self::FMLA_asisdelem_R_SD;
        }
        if opcode & 0xff80f400 == 0x5f805000 {
            return Self::FMLS_asisdelem_R_SD;
        }
        if opcode & 0xff80f400 == 0x5f809000 {
            return Self::FMUL_asisdelem_R_SD;
        }
        if opcode & 0xff80f400 == 0x7f809000 {
            return Self::FMULX_asisdelem_R_SD;
        }
        if opcode & 0xff80e000 == 0xe4004000 {
            return Self::ST1B_z_p_br;
        }
        if opcode & 0xff80e000 == 0xe4804000 {
            return Self::ST1H_z_p_br;
        }
        if opcode & 0xff80e000 == 0xe5004000 {
            return Self::ST1W_z_p_br;
        }
        if opcode & 0xff8003e0 == 0xb20003e0 {
            return Self::MOV_ORR_64_log_imm;
        }
        if opcode & 0xff80001f == 0x3100001f {
            return Self::CMN_ADDS_32S_addsub_imm;
        }
        if opcode & 0xff80001f == 0x7100001f {
            return Self::CMP_SUBS_32S_addsub_imm;
        }
        if opcode & 0xff80001f == 0xb100001f {
            return Self::CMN_ADDS_64S_addsub_imm;
        }
        if opcode & 0xff80001f == 0xf100001f {
            return Self::CMP_SUBS_64S_addsub_imm;
        }
        if opcode & 0xff80001f == 0xf200001f {
            return Self::TST_ANDS_64S_log_imm;
        }
        if opcode & 0xff800000 == 0x11000000 {
            return Self::ADD_32_addsub_imm;
        }
        if opcode & 0xff800000 == 0x31000000 {
            return Self::ADDS_32S_addsub_imm;
        }
        if opcode & 0xff800000 == 0x51000000 {
            return Self::SUB_32_addsub_imm;
        }
        if opcode & 0xff800000 == 0x71000000 {
            return Self::SUBS_32S_addsub_imm;
        }
        if opcode & 0xff800000 == 0x91000000 {
            return Self::ADD_64_addsub_imm;
        }
        if opcode & 0xff800000 == 0x92000000 {
            return Self::AND_64_log_imm;
        }
        if opcode & 0xff800000 == 0x92800000 {
            return Self::MOV_MOVN_64_movewide;
        }
        if opcode & 0xff800000 == 0x92800000 {
            return Self::MOVN_64_movewide;
        }
        if opcode & 0xff800000 == 0xb1000000 {
            return Self::ADDS_64S_addsub_imm;
        }
        if opcode & 0xff800000 == 0xb2000000 {
            return Self::ORR_64_log_imm;
        }
        if opcode & 0xff800000 == 0xd1000000 {
            return Self::SUB_64_addsub_imm;
        }
        if opcode & 0xff800000 == 0xd2000000 {
            return Self::EOR_64_log_imm;
        }
        if opcode & 0xff800000 == 0xd2800000 {
            return Self::MOV_MOVZ_64_movewide;
        }
        if opcode & 0xff800000 == 0xd2800000 {
            return Self::MOVZ_64_movewide;
        }
        if opcode & 0xff800000 == 0xf1000000 {
            return Self::SUBS_64S_addsub_imm;
        }
        if opcode & 0xff800000 == 0xf2000000 {
            return Self::ANDS_64S_log_imm;
        }
        if opcode & 0xff800000 == 0xf2800000 {
            return Self::MOVK_64_movewide;
        }
        if opcode & 0xff3fffe0 == 0x2538c000 {
            return Self::FMOV_dup_z_i;
        }
        if opcode & 0xff3ffe10 == 0x5344000 {
            return Self::REV_p_p;
        }
        if opcode & 0xff3ffe10 == 0x2519c400 {
            return Self::PNEXT_p_p_p;
        }
        if opcode & 0xff3ffe00 == 0x25288000 {
            return Self::SQINCP_z_p_z;
        }
        if opcode & 0xff3ffe00 == 0x25288800 {
            return Self::SQINCP_r_p_r_sx;
        }
        if opcode & 0xff3ffe00 == 0x25288c00 {
            return Self::SQINCP_r_p_r_x;
        }
        if opcode & 0xff3ffe00 == 0x25298000 {
            return Self::UQINCP_z_p_z;
        }
        if opcode & 0xff3ffe00 == 0x25298800 {
            return Self::UQINCP_r_p_r_uw;
        }
        if opcode & 0xff3ffe00 == 0x25298c00 {
            return Self::UQINCP_r_p_r_x;
        }
        if opcode & 0xff3ffe00 == 0x252a8000 {
            return Self::SQDECP_z_p_z;
        }
        if opcode & 0xff3ffe00 == 0x252a8800 {
            return Self::SQDECP_r_p_r_sx;
        }
        if opcode & 0xff3ffe00 == 0x252a8c00 {
            return Self::SQDECP_r_p_r_x;
        }
        if opcode & 0xff3ffe00 == 0x252b8000 {
            return Self::UQDECP_z_p_z;
        }
        if opcode & 0xff3ffe00 == 0x252b8800 {
            return Self::UQDECP_r_p_r_uw;
        }
        if opcode & 0xff3ffe00 == 0x252b8c00 {
            return Self::UQDECP_r_p_r_x;
        }
        if opcode & 0xff3ffe00 == 0x252c8000 {
            return Self::INCP_z_p_z;
        }
        if opcode & 0xff3ffe00 == 0x252c8800 {
            return Self::INCP_r_p_r;
        }
        if opcode & 0xff3ffe00 == 0x252d8000 {
            return Self::DECP_z_p_z;
        }
        if opcode & 0xff3ffe00 == 0x252d8800 {
            return Self::DECP_r_p_r;
        }
        if opcode & 0xff3ffc10 == 0x2518e000 {
            return Self::PTRUE_p_s;
        }
        if opcode & 0xff3ffc10 == 0x2519e000 {
            return Self::PTRUES_p_s;
        }
        if opcode & 0xff3ffc00 == 0x420b800 {
            return Self::FEXPA_z_z;
        }
        if opcode & 0xff3ffc00 == 0x5203800 {
            return Self::DUP_z_r;
        }
        if opcode & 0xff3ffc00 == 0x5203800 {
            return Self::MOV_dup_z_r;
        }
        if opcode & 0xff3ffc00 == 0x5243800 {
            return Self::INSR_z_r;
        }
        if opcode & 0xff3ffc00 == 0x5303800 {
            return Self::SUNPKLO_z_z;
        }
        if opcode & 0xff3ffc00 == 0x5313800 {
            return Self::SUNPKHI_z_z;
        }
        if opcode & 0xff3ffc00 == 0x5323800 {
            return Self::UUNPKLO_z_z;
        }
        if opcode & 0xff3ffc00 == 0x5333800 {
            return Self::UUNPKHI_z_z;
        }
        if opcode & 0xff3ffc00 == 0x5343800 {
            return Self::INSR_z_v;
        }
        if opcode & 0xff3ffc00 == 0x5383800 {
            return Self::REV_z_z;
        }
        if opcode & 0xff3ffc00 == 0x5e203800 {
            return Self::SUQADD_asisdmisc_R;
        }
        if opcode & 0xff3ffc00 == 0x5e207800 {
            return Self::SQABS_asisdmisc_R;
        }
        if opcode & 0xff3ffc00 == 0x5e208800 {
            return Self::CMGT_asisdmisc_Z;
        }
        if opcode & 0xff3ffc00 == 0x5e209800 {
            return Self::CMEQ_asisdmisc_Z;
        }
        if opcode & 0xff3ffc00 == 0x5e20a800 {
            return Self::CMLT_asisdmisc_Z;
        }
        if opcode & 0xff3ffc00 == 0x5e20b800 {
            return Self::ABS_asisdmisc_R;
        }
        if opcode & 0xff3ffc00 == 0x5e214800 {
            return Self::SQXTN_asisdmisc_N;
        }
        if opcode & 0xff3ffc00 == 0x5e31b800 {
            return Self::ADDP_asisdpair_only;
        }
        if opcode & 0xff3ffc00 == 0x650e3000 {
            return Self::FRECPE_z_z;
        }
        if opcode & 0xff3ffc00 == 0x650f3000 {
            return Self::FRSQRTE_z_z;
        }
        if opcode & 0xff3ffc00 == 0x7e203800 {
            return Self::USQADD_asisdmisc_R;
        }
        if opcode & 0xff3ffc00 == 0x7e207800 {
            return Self::SQNEG_asisdmisc_R;
        }
        if opcode & 0xff3ffc00 == 0x7e208800 {
            return Self::CMGE_asisdmisc_Z;
        }
        if opcode & 0xff3ffc00 == 0x7e209800 {
            return Self::CMLE_asisdmisc_Z;
        }
        if opcode & 0xff3ffc00 == 0x7e20b800 {
            return Self::NEG_asisdmisc_R;
        }
        if opcode & 0xff3ffc00 == 0x7e212800 {
            return Self::SQXTUN_asisdmisc_N;
        }
        if opcode & 0xff3ffc00 == 0x7e214800 {
            return Self::UQXTN_asisdmisc_N;
        }
        if opcode & 0xff3fe3c0 == 0x65188000 {
            return Self::FADD_z_p_zs;
        }
        if opcode & 0xff3fe3c0 == 0x65198000 {
            return Self::FSUB_z_p_zs;
        }
        if opcode & 0xff3fe3c0 == 0x651a8000 {
            return Self::FMUL_z_p_zs;
        }
        if opcode & 0xff3fe3c0 == 0x651b8000 {
            return Self::FSUBR_z_p_zs;
        }
        if opcode & 0xff3fe3c0 == 0x651c8000 {
            return Self::FMAXNM_z_p_zs;
        }
        if opcode & 0xff3fe3c0 == 0x651d8000 {
            return Self::FMINNM_z_p_zs;
        }
        if opcode & 0xff3fe3c0 == 0x651e8000 {
            return Self::FMAX_z_p_zs;
        }
        if opcode & 0xff3fe3c0 == 0x651f8000 {
            return Self::FMIN_z_p_zs;
        }
        if opcode & 0xff3fe010 == 0x65102000 {
            return Self::FCMGE_p_p_z0;
        }
        if opcode & 0xff3fe010 == 0x65102010 {
            return Self::FCMGT_p_p_z0;
        }
        if opcode & 0xff3fe010 == 0x65112000 {
            return Self::FCMLT_p_p_z0;
        }
        if opcode & 0xff3fe010 == 0x65112010 {
            return Self::FCMLE_p_p_z0;
        }
        if opcode & 0xff3fe010 == 0x65122000 {
            return Self::FCMEQ_p_p_z0;
        }
        if opcode & 0xff3fe010 == 0x65132000 {
            return Self::FCMNE_p_p_z0;
        }
        if opcode & 0xff3fe000 == 0x4000000 {
            return Self::ADD_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x4002000 {
            return Self::SADDV_r_p_z;
        }
        if opcode & 0xff3fe000 == 0x4008000 {
            return Self::ASR_z_p_zi;
        }
        if opcode & 0xff3fe000 == 0x4010000 {
            return Self::SUB_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x4012000 {
            return Self::UADDV_r_p_z;
        }
        if opcode & 0xff3fe000 == 0x4018000 {
            return Self::LSR_z_p_zi;
        }
        if opcode & 0xff3fe000 == 0x4030000 {
            return Self::SUBR_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x4038000 {
            return Self::LSL_z_p_zi;
        }
        if opcode & 0xff3fe000 == 0x4048000 {
            return Self::ASRD_z_p_zi;
        }
        if opcode & 0xff3fe000 == 0x4080000 {
            return Self::SMAX_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x4082000 {
            return Self::SMAXV_r_p_z;
        }
        if opcode & 0xff3fe000 == 0x4090000 {
            return Self::UMAX_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x4092000 {
            return Self::UMAXV_r_p_z;
        }
        if opcode & 0xff3fe000 == 0x40a0000 {
            return Self::SMIN_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x40a2000 {
            return Self::SMINV_r_p_z;
        }
        if opcode & 0xff3fe000 == 0x40b0000 {
            return Self::UMIN_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x40b2000 {
            return Self::UMINV_r_p_z;
        }
        if opcode & 0xff3fe000 == 0x40c0000 {
            return Self::SABD_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x40d0000 {
            return Self::UABD_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x4100000 {
            return Self::MUL_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x4108000 {
            return Self::ASR_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x410a000 {
            return Self::SXTB_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x4118000 {
            return Self::LSR_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x411a000 {
            return Self::UXTB_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x4120000 {
            return Self::SMULH_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x412a000 {
            return Self::SXTH_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x4130000 {
            return Self::UMULH_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x4138000 {
            return Self::LSL_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x413a000 {
            return Self::UXTH_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x4140000 {
            return Self::SDIV_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x4148000 {
            return Self::ASRR_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x414a000 {
            return Self::SXTW_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x4150000 {
            return Self::UDIV_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x4158000 {
            return Self::LSRR_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x415a000 {
            return Self::UXTW_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x4160000 {
            return Self::SDIVR_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x416a000 {
            return Self::ABS_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x4170000 {
            return Self::UDIVR_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x4178000 {
            return Self::LSLR_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x417a000 {
            return Self::NEG_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x4180000 {
            return Self::ORR_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x4182000 {
            return Self::ORV_r_p_z;
        }
        if opcode & 0xff3fe000 == 0x4188000 {
            return Self::ASR_z_p_zw;
        }
        if opcode & 0xff3fe000 == 0x418a000 {
            return Self::CLS_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x4190000 {
            return Self::EOR_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x4192000 {
            return Self::EORV_r_p_z;
        }
        if opcode & 0xff3fe000 == 0x4198000 {
            return Self::LSR_z_p_zw;
        }
        if opcode & 0xff3fe000 == 0x419a000 {
            return Self::CLZ_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x41a0000 {
            return Self::AND_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x41a2000 {
            return Self::ANDV_r_p_z;
        }
        if opcode & 0xff3fe000 == 0x41aa000 {
            return Self::CNT_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x41b0000 {
            return Self::BIC_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x41b8000 {
            return Self::LSL_z_p_zw;
        }
        if opcode & 0xff3fe000 == 0x41ba000 {
            return Self::CNOT_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x41ca000 {
            return Self::FABS_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x41da000 {
            return Self::FNEG_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x41ea000 {
            return Self::NOT_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x5208000 {
            return Self::CPY_z_p_v;
        }
        if opcode & 0xff3fe000 == 0x5208000 {
            return Self::MOV_cpy_z_p_v;
        }
        if opcode & 0xff3fe000 == 0x520a000 {
            return Self::LASTA_r_p_z;
        }
        if opcode & 0xff3fe000 == 0x5218000 {
            return Self::COMPACT_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x521a000 {
            return Self::LASTB_r_p_z;
        }
        if opcode & 0xff3fe000 == 0x5228000 {
            return Self::LASTA_v_p_z;
        }
        if opcode & 0xff3fe000 == 0x5238000 {
            return Self::LASTB_v_p_z;
        }
        if opcode & 0xff3fe000 == 0x5248000 {
            return Self::REVB_z_z;
        }
        if opcode & 0xff3fe000 == 0x5258000 {
            return Self::REVH_z_z;
        }
        if opcode & 0xff3fe000 == 0x5268000 {
            return Self::REVW_z_z;
        }
        if opcode & 0xff3fe000 == 0x5278000 {
            return Self::RBIT_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x5288000 {
            return Self::CLASTA_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x528a000 {
            return Self::CPY_z_p_r;
        }
        if opcode & 0xff3fe000 == 0x528a000 {
            return Self::MOV_cpy_z_p_r;
        }
        if opcode & 0xff3fe000 == 0x5298000 {
            return Self::CLASTB_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x52a8000 {
            return Self::CLASTA_v_p_z;
        }
        if opcode & 0xff3fe000 == 0x52b8000 {
            return Self::CLASTB_v_p_z;
        }
        if opcode & 0xff3fe000 == 0x52c8000 {
            return Self::SPLICE_z_p_zz_des;
        }
        if opcode & 0xff3fe000 == 0x530a000 {
            return Self::CLASTA_r_p_z;
        }
        if opcode & 0xff3fe000 == 0x531a000 {
            return Self::CLASTB_r_p_z;
        }
        if opcode & 0xff3fe000 == 0x2528c000 {
            return Self::SMAX_z_zi;
        }
        if opcode & 0xff3fe000 == 0x2529c000 {
            return Self::UMAX_z_zi;
        }
        if opcode & 0xff3fe000 == 0x252ac000 {
            return Self::SMIN_z_zi;
        }
        if opcode & 0xff3fe000 == 0x252bc000 {
            return Self::UMIN_z_zi;
        }
        if opcode & 0xff3fe000 == 0x2530c000 {
            return Self::MUL_z_zi;
        }
        if opcode & 0xff3fe000 == 0x2539c000 {
            return Self::FDUP_z_i;
        }
        if opcode & 0xff3fe000 == 0x2539c000 {
            return Self::FMOV_fdup_z_i;
        }
        if opcode & 0xff3fe000 == 0x65002000 {
            return Self::FADDV_v_p_z;
        }
        if opcode & 0xff3fe000 == 0x65008000 {
            return Self::FADD_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x6500a000 {
            return Self::FRINTN_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x65018000 {
            return Self::FSUB_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x6501a000 {
            return Self::FRINTP_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x65028000 {
            return Self::FMUL_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x6502a000 {
            return Self::FRINTM_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x65038000 {
            return Self::FSUBR_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x6503a000 {
            return Self::FRINTZ_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x65042000 {
            return Self::FMAXNMV_v_p_z;
        }
        if opcode & 0xff3fe000 == 0x65048000 {
            return Self::FMAXNM_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x6504a000 {
            return Self::FRINTA_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x65052000 {
            return Self::FMINNMV_v_p_z;
        }
        if opcode & 0xff3fe000 == 0x65058000 {
            return Self::FMINNM_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x65062000 {
            return Self::FMAXV_v_p_z;
        }
        if opcode & 0xff3fe000 == 0x65068000 {
            return Self::FMAX_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x6506a000 {
            return Self::FRINTX_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x65072000 {
            return Self::FMINV_v_p_z;
        }
        if opcode & 0xff3fe000 == 0x65078000 {
            return Self::FMIN_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x6507a000 {
            return Self::FRINTI_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x65088000 {
            return Self::FABD_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x65098000 {
            return Self::FSCALE_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x650a8000 {
            return Self::FMULX_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x650c8000 {
            return Self::FDIVR_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x650ca000 {
            return Self::FRECPX_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x650d8000 {
            return Self::FDIV_z_p_zz;
        }
        if opcode & 0xff3fe000 == 0x650da000 {
            return Self::FSQRT_z_p_z;
        }
        if opcode & 0xff3fe000 == 0x65182000 {
            return Self::FADDA_v_p_z;
        }
        if opcode & 0xff3fc200 == 0x25208000 {
            return Self::CNTP_r_p_p;
        }
        if opcode & 0xff3fc000 == 0x2520c000 {
            return Self::ADD_z_zi;
        }
        if opcode & 0xff3fc000 == 0x2521c000 {
            return Self::SUB_z_zi;
        }
        if opcode & 0xff3fc000 == 0x2523c000 {
            return Self::SUBR_z_zi;
        }
        if opcode & 0xff3fc000 == 0x2524c000 {
            return Self::SQADD_z_zi;
        }
        if opcode & 0xff3fc000 == 0x2525c000 {
            return Self::UQADD_z_zi;
        }
        if opcode & 0xff3fc000 == 0x2526c000 {
            return Self::SQSUB_z_zi;
        }
        if opcode & 0xff3fc000 == 0x2527c000 {
            return Self::UQSUB_z_zi;
        }
        if opcode & 0xff3fc000 == 0x2538c000 {
            return Self::DUP_z_i;
        }
        if opcode & 0xff3fc000 == 0x2538c000 {
            return Self::MOV_dup_z_i;
        }
        if opcode & 0xff3ee000 == 0x4102000 {
            return Self::MOVPRFX_z_p_z;
        }
        if opcode & 0xff3ee000 == 0x64008000 {
            return Self::FCADD_z_p_zz;
        }
        if opcode & 0xff38fc00 == 0x65108000 {
            return Self::FTMAD_z_zzi;
        }
        if opcode & 0xff30ffe0 == 0x5104000 {
            return Self::FMOV_cpy_z_p_i;
        }
        if opcode & 0xff30fe10 == 0x5204000 {
            return Self::ZIP1_p_pp;
        }
        if opcode & 0xff30fe10 == 0x5204400 {
            return Self::ZIP2_p_pp;
        }
        if opcode & 0xff30fe10 == 0x5204800 {
            return Self::UZP1_p_pp;
        }
        if opcode & 0xff30fe10 == 0x5204c00 {
            return Self::UZP2_p_pp;
        }
        if opcode & 0xff30fe10 == 0x5205000 {
            return Self::TRN1_p_pp;
        }
        if opcode & 0xff30fe10 == 0x5205400 {
            return Self::TRN2_p_pp;
        }
        if opcode & 0xff30e000 == 0x510c000 {
            return Self::FCPY_z_p_i;
        }
        if opcode & 0xff30e000 == 0x510c000 {
            return Self::FMOV_fcpy_z_p_i;
        }
        if opcode & 0xff30c000 == 0x5100000 {
            return Self::CPY_z_o_i;
        }
        if opcode & 0xff30c000 == 0x5100000 {
            return Self::MOV_cpy_z_o_i;
        }
        if opcode & 0xff30c000 == 0x5104000 {
            return Self::CPY_z_p_i;
        }
        if opcode & 0xff30c000 == 0x5104000 {
            return Self::MOV_cpy_z_p_i;
        }
        if opcode & 0xff20fc00 == 0x4200000 {
            return Self::ADD_z_zz;
        }
        if opcode & 0xff20fc00 == 0x4200400 {
            return Self::SUB_z_zz;
        }
        if opcode & 0xff20fc00 == 0x4201000 {
            return Self::SQADD_z_zz;
        }
        if opcode & 0xff20fc00 == 0x4201400 {
            return Self::UQADD_z_zz;
        }
        if opcode & 0xff20fc00 == 0x4201800 {
            return Self::SQSUB_z_zz;
        }
        if opcode & 0xff20fc00 == 0x4201c00 {
            return Self::UQSUB_z_zz;
        }
        if opcode & 0xff20fc00 == 0x4204000 {
            return Self::INDEX_z_ii;
        }
        if opcode & 0xff20fc00 == 0x4204400 {
            return Self::INDEX_z_ri;
        }
        if opcode & 0xff20fc00 == 0x4204800 {
            return Self::INDEX_z_ir;
        }
        if opcode & 0xff20fc00 == 0x4204c00 {
            return Self::INDEX_z_rr;
        }
        if opcode & 0xff20fc00 == 0x4208000 {
            return Self::ASR_z_zw;
        }
        if opcode & 0xff20fc00 == 0x4208400 {
            return Self::LSR_z_zw;
        }
        if opcode & 0xff20fc00 == 0x4208c00 {
            return Self::LSL_z_zw;
        }
        if opcode & 0xff20fc00 == 0x4209000 {
            return Self::ASR_z_zi;
        }
        if opcode & 0xff20fc00 == 0x4209400 {
            return Self::LSR_z_zi;
        }
        if opcode & 0xff20fc00 == 0x4209c00 {
            return Self::LSL_z_zi;
        }
        if opcode & 0xff20fc00 == 0x420b000 {
            return Self::FTSSEL_z_zz;
        }
        if opcode & 0xff20fc00 == 0x5202000 {
            return Self::DUP_z_zi;
        }
        if opcode & 0xff20fc00 == 0x5202000 {
            return Self::MOV_dup_z_zi;
        }
        if opcode & 0xff20fc00 == 0x5203000 {
            return Self::TBL_z_zz_1;
        }
        if opcode & 0xff20fc00 == 0x5206000 {
            return Self::ZIP1_z_zz;
        }
        if opcode & 0xff20fc00 == 0x5206400 {
            return Self::ZIP2_z_zz;
        }
        if opcode & 0xff20fc00 == 0x5206800 {
            return Self::UZP1_z_zz;
        }
        if opcode & 0xff20fc00 == 0x5206c00 {
            return Self::UZP2_z_zz;
        }
        if opcode & 0xff20fc00 == 0x5207000 {
            return Self::TRN1_z_zz;
        }
        if opcode & 0xff20fc00 == 0x5207400 {
            return Self::TRN2_z_zz;
        }
        if opcode & 0xff20fc00 == 0x44000000 {
            return Self::SDOT_z_zzz;
        }
        if opcode & 0xff20fc00 == 0x44000400 {
            return Self::UDOT_z_zzz;
        }
        if opcode & 0xff20fc00 == 0x5e200c00 {
            return Self::SQADD_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x5e202c00 {
            return Self::SQSUB_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x5e203400 {
            return Self::CMGT_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x5e203c00 {
            return Self::CMGE_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x5e204400 {
            return Self::SSHL_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x5e204c00 {
            return Self::SQSHL_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x5e205400 {
            return Self::SRSHL_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x5e205c00 {
            return Self::SQRSHL_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x5e208400 {
            return Self::ADD_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x5e208c00 {
            return Self::CMTST_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x5e209000 {
            return Self::SQDMLAL_asisddiff_only;
        }
        if opcode & 0xff20fc00 == 0x5e20b000 {
            return Self::SQDMLSL_asisddiff_only;
        }
        if opcode & 0xff20fc00 == 0x5e20b400 {
            return Self::SQDMULH_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x5e20d000 {
            return Self::SQDMULL_asisddiff_only;
        }
        if opcode & 0xff20fc00 == 0x65000000 {
            return Self::FADD_z_zz;
        }
        if opcode & 0xff20fc00 == 0x65000400 {
            return Self::FSUB_z_zz;
        }
        if opcode & 0xff20fc00 == 0x65000800 {
            return Self::FMUL_z_zz;
        }
        if opcode & 0xff20fc00 == 0x65000c00 {
            return Self::FTSMUL_z_zz;
        }
        if opcode & 0xff20fc00 == 0x65001800 {
            return Self::FRECPS_z_zz;
        }
        if opcode & 0xff20fc00 == 0x65001c00 {
            return Self::FRSQRTS_z_zz;
        }
        if opcode & 0xff20fc00 == 0x7e008400 {
            return Self::SQRDMLAH_asisdsame2_only;
        }
        if opcode & 0xff20fc00 == 0x7e008c00 {
            return Self::SQRDMLSH_asisdsame2_only;
        }
        if opcode & 0xff20fc00 == 0x7e200c00 {
            return Self::UQADD_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x7e202c00 {
            return Self::UQSUB_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x7e203400 {
            return Self::CMHI_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x7e203c00 {
            return Self::CMHS_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x7e204400 {
            return Self::USHL_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x7e204c00 {
            return Self::UQSHL_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x7e205400 {
            return Self::URSHL_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x7e205c00 {
            return Self::UQRSHL_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x7e208400 {
            return Self::SUB_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x7e208c00 {
            return Self::CMEQ_asisdsame_only;
        }
        if opcode & 0xff20fc00 == 0x7e20b400 {
            return Self::SQRDMULH_asisdsame_only;
        }
        if opcode & 0xff20ec10 == 0x25200400 {
            return Self::WHILELT_p_p_rr;
        }
        if opcode & 0xff20ec10 == 0x25200410 {
            return Self::WHILELE_p_p_rr;
        }
        if opcode & 0xff20ec10 == 0x25200c00 {
            return Self::WHILELO_p_p_rr;
        }
        if opcode & 0xff20ec10 == 0x25200c10 {
            return Self::WHILELS_p_p_rr;
        }
        if opcode & 0xff20e010 == 0x24000000 {
            return Self::CMPHS_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x24000000 {
            return Self::CMPLS_cmphs_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x24000010 {
            return Self::CMPHI_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x24000010 {
            return Self::CMPLO_cmphi_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x24002000 {
            return Self::CMPEQ_p_p_zw;
        }
        if opcode & 0xff20e010 == 0x24002010 {
            return Self::CMPNE_p_p_zw;
        }
        if opcode & 0xff20e010 == 0x24004000 {
            return Self::CMPGE_p_p_zw;
        }
        if opcode & 0xff20e010 == 0x24004010 {
            return Self::CMPGT_p_p_zw;
        }
        if opcode & 0xff20e010 == 0x24006000 {
            return Self::CMPLT_p_p_zw;
        }
        if opcode & 0xff20e010 == 0x24006010 {
            return Self::CMPLE_p_p_zw;
        }
        if opcode & 0xff20e010 == 0x24008000 {
            return Self::CMPGE_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x24008000 {
            return Self::CMPLE_cmpge_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x24008010 {
            return Self::CMPGT_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x24008010 {
            return Self::CMPLT_cmpgt_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x2400a000 {
            return Self::CMPEQ_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x2400a010 {
            return Self::CMPNE_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x2400c000 {
            return Self::CMPHS_p_p_zw;
        }
        if opcode & 0xff20e010 == 0x2400c010 {
            return Self::CMPHI_p_p_zw;
        }
        if opcode & 0xff20e010 == 0x2400e000 {
            return Self::CMPLO_p_p_zw;
        }
        if opcode & 0xff20e010 == 0x2400e010 {
            return Self::CMPLS_p_p_zw;
        }
        if opcode & 0xff20e010 == 0x25000000 {
            return Self::CMPGE_p_p_zi;
        }
        if opcode & 0xff20e010 == 0x25000010 {
            return Self::CMPGT_p_p_zi;
        }
        if opcode & 0xff20e010 == 0x25002000 {
            return Self::CMPLT_p_p_zi;
        }
        if opcode & 0xff20e010 == 0x25002010 {
            return Self::CMPLE_p_p_zi;
        }
        if opcode & 0xff20e010 == 0x25008000 {
            return Self::CMPEQ_p_p_zi;
        }
        if opcode & 0xff20e010 == 0x25008010 {
            return Self::CMPNE_p_p_zi;
        }
        if opcode & 0xff20e010 == 0x65004000 {
            return Self::FCMGE_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x65004000 {
            return Self::FCMLE_fcmge_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x65004010 {
            return Self::FCMGT_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x65004010 {
            return Self::FCMLT_fcmgt_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x65006000 {
            return Self::FCMEQ_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x65006010 {
            return Self::FCMNE_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x6500c000 {
            return Self::FCMUO_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x6500c010 {
            return Self::FACGE_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x6500c010 {
            return Self::FACLE_facge_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x6500e010 {
            return Self::FACGT_p_p_zz;
        }
        if opcode & 0xff20e010 == 0x6500e010 {
            return Self::FACLT_facgt_p_p_zz;
        }
        if opcode & 0xff20e000 == 0x4004000 {
            return Self::MLA_z_p_zzz;
        }
        if opcode & 0xff20e000 == 0x4006000 {
            return Self::MLS_z_p_zzz;
        }
        if opcode & 0xff20e000 == 0x400c000 {
            return Self::MAD_z_p_zzz;
        }
        if opcode & 0xff20e000 == 0x400e000 {
            return Self::MSB_z_p_zzz;
        }
        if opcode & 0xff20e000 == 0x65200000 {
            return Self::FMLA_z_p_zzz;
        }
        if opcode & 0xff20e000 == 0x65202000 {
            return Self::FMLS_z_p_zzz;
        }
        if opcode & 0xff20e000 == 0x65204000 {
            return Self::FNMLA_z_p_zzz;
        }
        if opcode & 0xff20e000 == 0x65206000 {
            return Self::FNMLS_z_p_zzz;
        }
        if opcode & 0xff20e000 == 0x65208000 {
            return Self::FMAD_z_p_zzz;
        }
        if opcode & 0xff20e000 == 0x6520a000 {
            return Self::FMSB_z_p_zzz;
        }
        if opcode & 0xff20e000 == 0x6520c000 {
            return Self::FNMAD_z_p_zzz;
        }
        if opcode & 0xff20e000 == 0x6520e000 {
            return Self::FNMSB_z_p_zzz;
        }
        if opcode & 0xff20c000 == 0x520c000 {
            return Self::MOV_sel_z_p_zz;
        }
        if opcode & 0xff20c000 == 0x520c000 {
            return Self::SEL_z_p_zz;
        }
        if opcode & 0xff208000 == 0x64000000 {
            return Self::FCMLA_z_p_zzz;
        }
        if opcode & 0xff202010 == 0x24200000 {
            return Self::CMPHS_p_p_zi;
        }
        if opcode & 0xff202010 == 0x24200010 {
            return Self::CMPHI_p_p_zi;
        }
        if opcode & 0xff202010 == 0x24202000 {
            return Self::CMPLO_p_p_zi;
        }
        if opcode & 0xff202010 == 0x24202010 {
            return Self::CMPLS_p_p_zi;
        }
        if opcode & 0xff2003e0 == 0x2a2003e0 {
            return Self::MVN_ORN_32_log_shift;
        }
        if opcode & 0xff2003e0 == 0x4b0003e0 {
            return Self::NEG_SUB_32_addsub_shift;
        }
        if opcode & 0xff2003e0 == 0x6b0003e0 {
            return Self::NEGS_SUBS_32_addsub_shift;
        }
        if opcode & 0xff2003e0 == 0xaa2003e0 {
            return Self::MVN_ORN_64_log_shift;
        }
        if opcode & 0xff2003e0 == 0xcb0003e0 {
            return Self::NEG_SUB_64_addsub_shift;
        }
        if opcode & 0xff2003e0 == 0xeb0003e0 {
            return Self::NEGS_SUBS_64_addsub_shift;
        }
        if opcode & 0xff20001f == 0x2b00001f {
            return Self::CMN_ADDS_32_addsub_shift;
        }
        if opcode & 0xff20001f == 0x6a00001f {
            return Self::TST_ANDS_32_log_shift;
        }
        if opcode & 0xff20001f == 0x6b00001f {
            return Self::CMP_SUBS_32_addsub_shift;
        }
        if opcode & 0xff20001f == 0xab00001f {
            return Self::CMN_ADDS_64_addsub_shift;
        }
        if opcode & 0xff20001f == 0xea00001f {
            return Self::TST_ANDS_64_log_shift;
        }
        if opcode & 0xff20001f == 0xeb00001f {
            return Self::CMP_SUBS_64_addsub_shift;
        }
        if opcode & 0xff200000 == 0xa000000 {
            return Self::AND_32_log_shift;
        }
        if opcode & 0xff200000 == 0xa200000 {
            return Self::BIC_32_log_shift;
        }
        if opcode & 0xff200000 == 0xb000000 {
            return Self::ADD_32_addsub_shift;
        }
        if opcode & 0xff200000 == 0x2a000000 {
            return Self::ORR_32_log_shift;
        }
        if opcode & 0xff200000 == 0x2a200000 {
            return Self::ORN_32_log_shift;
        }
        if opcode & 0xff200000 == 0x2b000000 {
            return Self::ADDS_32_addsub_shift;
        }
        if opcode & 0xff200000 == 0x4a000000 {
            return Self::EOR_32_log_shift;
        }
        if opcode & 0xff200000 == 0x4a200000 {
            return Self::EON_32_log_shift;
        }
        if opcode & 0xff200000 == 0x4b000000 {
            return Self::SUB_32_addsub_shift;
        }
        if opcode & 0xff200000 == 0x6a000000 {
            return Self::ANDS_32_log_shift;
        }
        if opcode & 0xff200000 == 0x6a200000 {
            return Self::BICS_32_log_shift;
        }
        if opcode & 0xff200000 == 0x6b000000 {
            return Self::SUBS_32_addsub_shift;
        }
        if opcode & 0xff200000 == 0x8a000000 {
            return Self::AND_64_log_shift;
        }
        if opcode & 0xff200000 == 0x8a200000 {
            return Self::BIC_64_log_shift;
        }
        if opcode & 0xff200000 == 0x8b000000 {
            return Self::ADD_64_addsub_shift;
        }
        if opcode & 0xff200000 == 0xaa000000 {
            return Self::ORR_64_log_shift;
        }
        if opcode & 0xff200000 == 0xaa200000 {
            return Self::ORN_64_log_shift;
        }
        if opcode & 0xff200000 == 0xab000000 {
            return Self::ADDS_64_addsub_shift;
        }
        if opcode & 0xff200000 == 0xca000000 {
            return Self::EOR_64_log_shift;
        }
        if opcode & 0xff200000 == 0xca200000 {
            return Self::EON_64_log_shift;
        }
        if opcode & 0xff200000 == 0xcb000000 {
            return Self::SUB_64_addsub_shift;
        }
        if opcode & 0xff200000 == 0xea000000 {
            return Self::ANDS_64_log_shift;
        }
        if opcode & 0xff200000 == 0xea200000 {
            return Self::BICS_64_log_shift;
        }
        if opcode & 0xff200000 == 0xeb000000 {
            return Self::SUBS_64_addsub_shift;
        }
        if opcode & 0xff00f400 == 0x5f003000 {
            return Self::SQDMLAL_asisdelem_L;
        }
        if opcode & 0xff00f400 == 0x5f007000 {
            return Self::SQDMLSL_asisdelem_L;
        }
        if opcode & 0xff00f400 == 0x5f00b000 {
            return Self::SQDMULL_asisdelem_L;
        }
        if opcode & 0xff00f400 == 0x5f00c000 {
            return Self::SQDMULH_asisdelem_R;
        }
        if opcode & 0xff00f400 == 0x5f00d000 {
            return Self::SQRDMULH_asisdelem_R;
        }
        if opcode & 0xff00f400 == 0x7f00d000 {
            return Self::SQRDMLAH_asisdelem_R;
        }
        if opcode & 0xff00f400 == 0x7f00f000 {
            return Self::SQRDMLSH_asisdelem_R;
        }
        if opcode & 0xff000010 == 0x54000000 {
            return Self::B_only_condbranch;
        }
        if opcode & 0xff000000 == 0x18000000 {
            return Self::LDR_32_loadlit;
        }
        if opcode & 0xff000000 == 0x1c000000 {
            return Self::LDR_S_loadlit;
        }
        if opcode & 0xff000000 == 0x34000000 {
            return Self::CBZ_32_compbranch;
        }
        if opcode & 0xff000000 == 0x35000000 {
            return Self::CBNZ_32_compbranch;
        }
        if opcode & 0xff000000 == 0x58000000 {
            return Self::LDR_64_loadlit;
        }
        if opcode & 0xff000000 == 0x5c000000 {
            return Self::LDR_D_loadlit;
        }
        if opcode & 0xff000000 == 0x98000000 {
            return Self::LDRSW_64_loadlit;
        }
        if opcode & 0xff000000 == 0x9c000000 {
            return Self::LDR_Q_loadlit;
        }
        if opcode & 0xff000000 == 0xb4000000 {
            return Self::CBZ_64_compbranch;
        }
        if opcode & 0xff000000 == 0xb5000000 {
            return Self::CBNZ_64_compbranch;
        }
        if opcode & 0xff000000 == 0xd8000000 {
            return Self::PRFM_P_loadlit;
        }
        if opcode & 0xfc000000 == 0x14000000 {
            return Self::B_only_branch_imm;
        }
        if opcode & 0xfc000000 == 0x94000000 {
            return Self::BL_only_branch_imm;
        }
        if opcode & 0xbffffc00 == 0xd008400 {
            return Self::ST1_asisdlso_D1_1d;
        }
        if opcode & 0xbffffc00 == 0xd00a400 {
            return Self::ST3_asisdlso_D3_3d;
        }
        if opcode & 0xbffffc00 == 0xd208400 {
            return Self::ST2_asisdlso_D2_2d;
        }
        if opcode & 0xbffffc00 == 0xd20a400 {
            return Self::ST4_asisdlso_D4_4d;
        }
        if opcode & 0xbffffc00 == 0xd408400 {
            return Self::LD1_asisdlso_D1_1d;
        }
        if opcode & 0xbffffc00 == 0xd40a400 {
            return Self::LD3_asisdlso_D3_3d;
        }
        if opcode & 0xbffffc00 == 0xd608400 {
            return Self::LD2_asisdlso_D2_2d;
        }
        if opcode & 0xbffffc00 == 0xd60a400 {
            return Self::LD4_asisdlso_D4_4d;
        }
        if opcode & 0xbffffc00 == 0xd9f8400 {
            return Self::ST1_asisdlsop_D1_i1d;
        }
        if opcode & 0xbffffc00 == 0xd9fa400 {
            return Self::ST3_asisdlsop_D3_i3d;
        }
        if opcode & 0xbffffc00 == 0xdbf8400 {
            return Self::ST2_asisdlsop_D2_i2d;
        }
        if opcode & 0xbffffc00 == 0xdbfa400 {
            return Self::ST4_asisdlsop_D4_i4d;
        }
        if opcode & 0xbffffc00 == 0xddf8400 {
            return Self::LD1_asisdlsop_D1_i1d;
        }
        if opcode & 0xbffffc00 == 0xddfa400 {
            return Self::LD3_asisdlsop_D3_i3d;
        }
        if opcode & 0xbffffc00 == 0xdff8400 {
            return Self::LD2_asisdlsop_D2_i2d;
        }
        if opcode & 0xbffffc00 == 0xdffa400 {
            return Self::LD4_asisdlsop_D4_i4d;
        }
        if opcode & 0xbffffc00 == 0xe30c800 {
            return Self::FMAXNMV_asimdall_only_H;
        }
        if opcode & 0xbffffc00 == 0xe30f800 {
            return Self::FMAXV_asimdall_only_H;
        }
        if opcode & 0xbffffc00 == 0xe798800 {
            return Self::FRINTN_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0xe799800 {
            return Self::FRINTM_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0xe79a800 {
            return Self::FCVTNS_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0xe79b800 {
            return Self::FCVTMS_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0xe79c800 {
            return Self::FCVTAS_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0xe79d800 {
            return Self::SCVTF_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0xea16800 {
            return Self::BFCVTN_asimdmisc_4S;
        }
        if opcode & 0xbffffc00 == 0xeb0c800 {
            return Self::FMINNMV_asimdall_only_H;
        }
        if opcode & 0xbffffc00 == 0xeb0f800 {
            return Self::FMINV_asimdall_only_H;
        }
        if opcode & 0xbffffc00 == 0xef8c800 {
            return Self::FCMGT_asimdmiscfp16_FZ;
        }
        if opcode & 0xbffffc00 == 0xef8d800 {
            return Self::FCMEQ_asimdmiscfp16_FZ;
        }
        if opcode & 0xbffffc00 == 0xef8e800 {
            return Self::FCMLT_asimdmiscfp16_FZ;
        }
        if opcode & 0xbffffc00 == 0xef8f800 {
            return Self::FABS_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0xef98800 {
            return Self::FRINTP_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0xef99800 {
            return Self::FRINTZ_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0xef9a800 {
            return Self::FCVTPS_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0xef9b800 {
            return Self::FCVTZS_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0xef9d800 {
            return Self::FRECPE_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0x2e205800 {
            return Self::MVN_NOT_asimdmisc_R;
        }
        if opcode & 0xbffffc00 == 0x2e205800 {
            return Self::NOT_asimdmisc_R;
        }
        if opcode & 0xbffffc00 == 0x2e605800 {
            return Self::RBIT_asimdmisc_R;
        }
        if opcode & 0xbffffc00 == 0x2e798800 {
            return Self::FRINTA_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0x2e799800 {
            return Self::FRINTX_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0x2e79a800 {
            return Self::FCVTNU_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0x2e79b800 {
            return Self::FCVTMU_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0x2e79c800 {
            return Self::FCVTAU_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0x2e79d800 {
            return Self::UCVTF_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0x2ef8c800 {
            return Self::FCMGE_asimdmiscfp16_FZ;
        }
        if opcode & 0xbffffc00 == 0x2ef8d800 {
            return Self::FCMLE_asimdmiscfp16_FZ;
        }
        if opcode & 0xbffffc00 == 0x2ef8f800 {
            return Self::FNEG_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0x2ef99800 {
            return Self::FRINTI_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0x2ef9a800 {
            return Self::FCVTPU_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0x2ef9b800 {
            return Self::FCVTZU_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0x2ef9d800 {
            return Self::FRSQRTE_asimdmiscfp16_R;
        }
        if opcode & 0xbffffc00 == 0x2ef9f800 {
            return Self::FSQRT_asimdmiscfp16_R;
        }
        if opcode & 0xbffff000 == 0xc000000 {
            return Self::ST4_asisdlse_R4;
        }
        if opcode & 0xbffff000 == 0xc002000 {
            return Self::ST1_asisdlse_R4_4v;
        }
        if opcode & 0xbffff000 == 0xc004000 {
            return Self::ST3_asisdlse_R3;
        }
        if opcode & 0xbffff000 == 0xc006000 {
            return Self::ST1_asisdlse_R3_3v;
        }
        if opcode & 0xbffff000 == 0xc007000 {
            return Self::ST1_asisdlse_R1_1v;
        }
        if opcode & 0xbffff000 == 0xc008000 {
            return Self::ST2_asisdlse_R2;
        }
        if opcode & 0xbffff000 == 0xc00a000 {
            return Self::ST1_asisdlse_R2_2v;
        }
        if opcode & 0xbffff000 == 0xc400000 {
            return Self::LD4_asisdlse_R4;
        }
        if opcode & 0xbffff000 == 0xc402000 {
            return Self::LD1_asisdlse_R4_4v;
        }
        if opcode & 0xbffff000 == 0xc404000 {
            return Self::LD3_asisdlse_R3;
        }
        if opcode & 0xbffff000 == 0xc406000 {
            return Self::LD1_asisdlse_R3_3v;
        }
        if opcode & 0xbffff000 == 0xc407000 {
            return Self::LD1_asisdlse_R1_1v;
        }
        if opcode & 0xbffff000 == 0xc408000 {
            return Self::LD2_asisdlse_R2;
        }
        if opcode & 0xbffff000 == 0xc40a000 {
            return Self::LD1_asisdlse_R2_2v;
        }
        if opcode & 0xbffff000 == 0xc9f0000 {
            return Self::ST4_asisdlsep_I4_i;
        }
        if opcode & 0xbffff000 == 0xc9f2000 {
            return Self::ST1_asisdlsep_I4_i4;
        }
        if opcode & 0xbffff000 == 0xc9f4000 {
            return Self::ST3_asisdlsep_I3_i;
        }
        if opcode & 0xbffff000 == 0xc9f6000 {
            return Self::ST1_asisdlsep_I3_i3;
        }
        if opcode & 0xbffff000 == 0xc9f7000 {
            return Self::ST1_asisdlsep_I1_i1;
        }
        if opcode & 0xbffff000 == 0xc9f8000 {
            return Self::ST2_asisdlsep_I2_i;
        }
        if opcode & 0xbffff000 == 0xc9fa000 {
            return Self::ST1_asisdlsep_I2_i2;
        }
        if opcode & 0xbffff000 == 0xcdf0000 {
            return Self::LD4_asisdlsep_I4_i;
        }
        if opcode & 0xbffff000 == 0xcdf2000 {
            return Self::LD1_asisdlsep_I4_i4;
        }
        if opcode & 0xbffff000 == 0xcdf4000 {
            return Self::LD3_asisdlsep_I3_i;
        }
        if opcode & 0xbffff000 == 0xcdf6000 {
            return Self::LD1_asisdlsep_I3_i3;
        }
        if opcode & 0xbffff000 == 0xcdf7000 {
            return Self::LD1_asisdlsep_I1_i1;
        }
        if opcode & 0xbffff000 == 0xcdf8000 {
            return Self::LD2_asisdlsep_I2_i;
        }
        if opcode & 0xbffff000 == 0xcdfa000 {
            return Self::LD1_asisdlsep_I2_i2;
        }
        if opcode & 0xbffff000 == 0xd40c000 {
            return Self::LD1R_asisdlso_R1;
        }
        if opcode & 0xbffff000 == 0xd40e000 {
            return Self::LD3R_asisdlso_R3;
        }
        if opcode & 0xbffff000 == 0xd60c000 {
            return Self::LD2R_asisdlso_R2;
        }
        if opcode & 0xbffff000 == 0xd60e000 {
            return Self::LD4R_asisdlso_R4;
        }
        if opcode & 0xbffff000 == 0xddfc000 {
            return Self::LD1R_asisdlsop_R1_i;
        }
        if opcode & 0xbffff000 == 0xddfe000 {
            return Self::LD3R_asisdlsop_R3_i;
        }
        if opcode & 0xbffff000 == 0xdffc000 {
            return Self::LD2R_asisdlsop_R2_i;
        }
        if opcode & 0xbffff000 == 0xdffe000 {
            return Self::LD4R_asisdlsop_R4_i;
        }
        if opcode & 0xbfffec00 == 0xd008000 {
            return Self::ST1_asisdlso_S1_1s;
        }
        if opcode & 0xbfffec00 == 0xd00a000 {
            return Self::ST3_asisdlso_S3_3s;
        }
        if opcode & 0xbfffec00 == 0xd208000 {
            return Self::ST2_asisdlso_S2_2s;
        }
        if opcode & 0xbfffec00 == 0xd20a000 {
            return Self::ST4_asisdlso_S4_4s;
        }
        if opcode & 0xbfffec00 == 0xd408000 {
            return Self::LD1_asisdlso_S1_1s;
        }
        if opcode & 0xbfffec00 == 0xd40a000 {
            return Self::LD3_asisdlso_S3_3s;
        }
        if opcode & 0xbfffec00 == 0xd608000 {
            return Self::LD2_asisdlso_S2_2s;
        }
        if opcode & 0xbfffec00 == 0xd60a000 {
            return Self::LD4_asisdlso_S4_4s;
        }
        if opcode & 0xbfffec00 == 0xd9f8000 {
            return Self::ST1_asisdlsop_S1_i1s;
        }
        if opcode & 0xbfffec00 == 0xd9fa000 {
            return Self::ST3_asisdlsop_S3_i3s;
        }
        if opcode & 0xbfffec00 == 0xdbf8000 {
            return Self::ST2_asisdlsop_S2_i2s;
        }
        if opcode & 0xbfffec00 == 0xdbfa000 {
            return Self::ST4_asisdlsop_S4_i4s;
        }
        if opcode & 0xbfffec00 == 0xddf8000 {
            return Self::LD1_asisdlsop_S1_i1s;
        }
        if opcode & 0xbfffec00 == 0xddfa000 {
            return Self::LD3_asisdlsop_S3_i3s;
        }
        if opcode & 0xbfffec00 == 0xdff8000 {
            return Self::LD2_asisdlsop_S2_i2s;
        }
        if opcode & 0xbfffec00 == 0xdffa000 {
            return Self::LD4_asisdlsop_S4_i4s;
        }
        if opcode & 0xbfffe400 == 0xd004000 {
            return Self::ST1_asisdlso_H1_1h;
        }
        if opcode & 0xbfffe400 == 0xd006000 {
            return Self::ST3_asisdlso_H3_3h;
        }
        if opcode & 0xbfffe400 == 0xd204000 {
            return Self::ST2_asisdlso_H2_2h;
        }
        if opcode & 0xbfffe400 == 0xd206000 {
            return Self::ST4_asisdlso_H4_4h;
        }
        if opcode & 0xbfffe400 == 0xd404000 {
            return Self::LD1_asisdlso_H1_1h;
        }
        if opcode & 0xbfffe400 == 0xd406000 {
            return Self::LD3_asisdlso_H3_3h;
        }
        if opcode & 0xbfffe400 == 0xd604000 {
            return Self::LD2_asisdlso_H2_2h;
        }
        if opcode & 0xbfffe400 == 0xd606000 {
            return Self::LD4_asisdlso_H4_4h;
        }
        if opcode & 0xbfffe400 == 0xd9f4000 {
            return Self::ST1_asisdlsop_H1_i1h;
        }
        if opcode & 0xbfffe400 == 0xd9f6000 {
            return Self::ST3_asisdlsop_H3_i3h;
        }
        if opcode & 0xbfffe400 == 0xdbf4000 {
            return Self::ST2_asisdlsop_H2_i2h;
        }
        if opcode & 0xbfffe400 == 0xdbf6000 {
            return Self::ST4_asisdlsop_H4_i4h;
        }
        if opcode & 0xbfffe400 == 0xddf4000 {
            return Self::LD1_asisdlsop_H1_i1h;
        }
        if opcode & 0xbfffe400 == 0xddf6000 {
            return Self::LD3_asisdlsop_H3_i3h;
        }
        if opcode & 0xbfffe400 == 0xdff4000 {
            return Self::LD2_asisdlsop_H2_i2h;
        }
        if opcode & 0xbfffe400 == 0xdff6000 {
            return Self::LD4_asisdlsop_H4_i4h;
        }
        if opcode & 0xbfffe000 == 0xd000000 {
            return Self::ST1_asisdlso_B1_1b;
        }
        if opcode & 0xbfffe000 == 0xd002000 {
            return Self::ST3_asisdlso_B3_3b;
        }
        if opcode & 0xbfffe000 == 0xd200000 {
            return Self::ST2_asisdlso_B2_2b;
        }
        if opcode & 0xbfffe000 == 0xd202000 {
            return Self::ST4_asisdlso_B4_4b;
        }
        if opcode & 0xbfffe000 == 0xd400000 {
            return Self::LD1_asisdlso_B1_1b;
        }
        if opcode & 0xbfffe000 == 0xd402000 {
            return Self::LD3_asisdlso_B3_3b;
        }
        if opcode & 0xbfffe000 == 0xd600000 {
            return Self::LD2_asisdlso_B2_2b;
        }
        if opcode & 0xbfffe000 == 0xd602000 {
            return Self::LD4_asisdlso_B4_4b;
        }
        if opcode & 0xbfffe000 == 0xd9f0000 {
            return Self::ST1_asisdlsop_B1_i1b;
        }
        if opcode & 0xbfffe000 == 0xd9f2000 {
            return Self::ST3_asisdlsop_B3_i3b;
        }
        if opcode & 0xbfffe000 == 0xdbf0000 {
            return Self::ST2_asisdlsop_B2_i2b;
        }
        if opcode & 0xbfffe000 == 0xdbf2000 {
            return Self::ST4_asisdlsop_B4_i4b;
        }
        if opcode & 0xbfffe000 == 0xddf0000 {
            return Self::LD1_asisdlsop_B1_i1b;
        }
        if opcode & 0xbfffe000 == 0xddf2000 {
            return Self::LD3_asisdlsop_B3_i3b;
        }
        if opcode & 0xbfffe000 == 0xdff0000 {
            return Self::LD2_asisdlsop_B2_i2b;
        }
        if opcode & 0xbfffe000 == 0xdff2000 {
            return Self::LD4_asisdlsop_B4_i4b;
        }
        if opcode & 0xbff8fc00 == 0xf00e400 {
            return Self::MOVI_asimdimm_N_b;
        }
        if opcode & 0xbff8fc00 == 0xf00f400 {
            return Self::FMOV_asimdimm_S_s;
        }
        if opcode & 0xbff8fc00 == 0xf00fc00 {
            return Self::FMOV_asimdimm_H_h;
        }
        if opcode & 0xbff8ec00 == 0xf00c400 {
            return Self::MOVI_asimdimm_M_sm;
        }
        if opcode & 0xbff8ec00 == 0x2f00c400 {
            return Self::MVNI_asimdimm_M_sm;
        }
        if opcode & 0xbff8dc00 == 0xf008400 {
            return Self::MOVI_asimdimm_L_hl;
        }
        if opcode & 0xbff8dc00 == 0xf009400 {
            return Self::ORR_asimdimm_L_hl;
        }
        if opcode & 0xbff8dc00 == 0x2f008400 {
            return Self::MVNI_asimdimm_L_hl;
        }
        if opcode & 0xbff8dc00 == 0x2f009400 {
            return Self::BIC_asimdimm_L_hl;
        }
        if opcode & 0xbff89c00 == 0xf000400 {
            return Self::MOVI_asimdimm_L_sl;
        }
        if opcode & 0xbff89c00 == 0xf001400 {
            return Self::ORR_asimdimm_L_sl;
        }
        if opcode & 0xbff89c00 == 0x2f000400 {
            return Self::MVNI_asimdimm_L_sl;
        }
        if opcode & 0xbff89c00 == 0x2f001400 {
            return Self::BIC_asimdimm_L_sl;
        }
        if opcode & 0xbfe0fc00 == 0xd808400 {
            return Self::ST1_asisdlsop_DX1_r1d;
        }
        if opcode & 0xbfe0fc00 == 0xd80a400 {
            return Self::ST3_asisdlsop_DX3_r3d;
        }
        if opcode & 0xbfe0fc00 == 0xda08400 {
            return Self::ST2_asisdlsop_DX2_r2d;
        }
        if opcode & 0xbfe0fc00 == 0xda0a400 {
            return Self::ST4_asisdlsop_DX4_r4d;
        }
        if opcode & 0xbfe0fc00 == 0xdc08400 {
            return Self::LD1_asisdlsop_DX1_r1d;
        }
        if opcode & 0xbfe0fc00 == 0xdc0a400 {
            return Self::LD3_asisdlsop_DX3_r3d;
        }
        if opcode & 0xbfe0fc00 == 0xde08400 {
            return Self::LD2_asisdlsop_DX2_r2d;
        }
        if opcode & 0xbfe0fc00 == 0xde0a400 {
            return Self::LD4_asisdlsop_DX4_r4d;
        }
        if opcode & 0xbfe0fc00 == 0xe000000 {
            return Self::TBL_asimdtbl_L1_1;
        }
        if opcode & 0xbfe0fc00 == 0xe000400 {
            return Self::DUP_asimdins_DV_v;
        }
        if opcode & 0xbfe0fc00 == 0xe000c00 {
            return Self::DUP_asimdins_DR_r;
        }
        if opcode & 0xbfe0fc00 == 0xe001000 {
            return Self::TBX_asimdtbl_L1_1;
        }
        if opcode & 0xbfe0fc00 == 0xe002000 {
            return Self::TBL_asimdtbl_L2_2;
        }
        if opcode & 0xbfe0fc00 == 0xe003000 {
            return Self::TBX_asimdtbl_L2_2;
        }
        if opcode & 0xbfe0fc00 == 0xe004000 {
            return Self::TBL_asimdtbl_L3_3;
        }
        if opcode & 0xbfe0fc00 == 0xe005000 {
            return Self::TBX_asimdtbl_L3_3;
        }
        if opcode & 0xbfe0fc00 == 0xe006000 {
            return Self::TBL_asimdtbl_L4_4;
        }
        if opcode & 0xbfe0fc00 == 0xe007000 {
            return Self::TBX_asimdtbl_L4_4;
        }
        if opcode & 0xbfe0fc00 == 0xe201c00 {
            return Self::AND_asimdsame_only;
        }
        if opcode & 0xbfe0fc00 == 0xe20ec00 {
            return Self::FMLAL_asimdsame_F;
        }
        if opcode & 0xbfe0fc00 == 0xe400400 {
            return Self::FMAXNM_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0xe400c00 {
            return Self::FMLA_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0xe401400 {
            return Self::FADD_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0xe401c00 {
            return Self::FMULX_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0xe402400 {
            return Self::FCMEQ_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0xe403400 {
            return Self::FMAX_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0xe403c00 {
            return Self::FRECPS_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0xe601c00 {
            return Self::BIC_asimdsame_only;
        }
        if opcode & 0xbfe0fc00 == 0xe809c00 {
            return Self::USDOT_asimdsame2_D;
        }
        if opcode & 0xbfe0fc00 == 0xea01c00 {
            return Self::MOV_ORR_asimdsame_only;
        }
        if opcode & 0xbfe0fc00 == 0xea01c00 {
            return Self::ORR_asimdsame_only;
        }
        if opcode & 0xbfe0fc00 == 0xea0ec00 {
            return Self::FMLSL_asimdsame_F;
        }
        if opcode & 0xbfe0fc00 == 0xec00400 {
            return Self::FMINNM_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0xec00c00 {
            return Self::FMLS_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0xec01400 {
            return Self::FSUB_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0xec03400 {
            return Self::FMIN_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0xec03c00 {
            return Self::FRSQRTS_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0xee01c00 {
            return Self::ORN_asimdsame_only;
        }
        if opcode & 0xbfe0fc00 == 0x2e201c00 {
            return Self::EOR_asimdsame_only;
        }
        if opcode & 0xbfe0fc00 == 0x2e20cc00 {
            return Self::FMLAL2_asimdsame_F;
        }
        if opcode & 0xbfe0fc00 == 0x2e400400 {
            return Self::FMAXNMP_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0x2e401400 {
            return Self::FADDP_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0x2e401c00 {
            return Self::FMUL_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0x2e402400 {
            return Self::FCMGE_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0x2e402c00 {
            return Self::FACGE_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0x2e403400 {
            return Self::FMAXP_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0x2e403c00 {
            return Self::FDIV_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0x2e40fc00 {
            return Self::BFDOT_asimdsame2_D;
        }
        if opcode & 0xbfe0fc00 == 0x2e601c00 {
            return Self::BSL_asimdsame_only;
        }
        if opcode & 0xbfe0fc00 == 0x2ea01c00 {
            return Self::BIT_asimdsame_only;
        }
        if opcode & 0xbfe0fc00 == 0x2ea0cc00 {
            return Self::FMLSL2_asimdsame_F;
        }
        if opcode & 0xbfe0fc00 == 0x2ec00400 {
            return Self::FMINNMP_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0x2ec01400 {
            return Self::FABD_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0x2ec02400 {
            return Self::FCMGT_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0x2ec02c00 {
            return Self::FACGT_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0x2ec03400 {
            return Self::FMINP_asimdsamefp16_only;
        }
        if opcode & 0xbfe0fc00 == 0x2ec0fc00 {
            return Self::BFMLAL_asimdsame2_F;
        }
        if opcode & 0xbfe0fc00 == 0x2ee01c00 {
            return Self::BIF_asimdsame_only;
        }
        if opcode & 0xbfe0f000 == 0xc800000 {
            return Self::ST4_asisdlsep_R4_r;
        }
        if opcode & 0xbfe0f000 == 0xc802000 {
            return Self::ST1_asisdlsep_R4_r4;
        }
        if opcode & 0xbfe0f000 == 0xc804000 {
            return Self::ST3_asisdlsep_R3_r;
        }
        if opcode & 0xbfe0f000 == 0xc806000 {
            return Self::ST1_asisdlsep_R3_r3;
        }
        if opcode & 0xbfe0f000 == 0xc807000 {
            return Self::ST1_asisdlsep_R1_r1;
        }
        if opcode & 0xbfe0f000 == 0xc808000 {
            return Self::ST2_asisdlsep_R2_r;
        }
        if opcode & 0xbfe0f000 == 0xc80a000 {
            return Self::ST1_asisdlsep_R2_r2;
        }
        if opcode & 0xbfe0f000 == 0xcc00000 {
            return Self::LD4_asisdlsep_R4_r;
        }
        if opcode & 0xbfe0f000 == 0xcc02000 {
            return Self::LD1_asisdlsep_R4_r4;
        }
        if opcode & 0xbfe0f000 == 0xcc04000 {
            return Self::LD3_asisdlsep_R3_r;
        }
        if opcode & 0xbfe0f000 == 0xcc06000 {
            return Self::LD1_asisdlsep_R3_r3;
        }
        if opcode & 0xbfe0f000 == 0xcc07000 {
            return Self::LD1_asisdlsep_R1_r1;
        }
        if opcode & 0xbfe0f000 == 0xcc08000 {
            return Self::LD2_asisdlsep_R2_r;
        }
        if opcode & 0xbfe0f000 == 0xcc0a000 {
            return Self::LD1_asisdlsep_R2_r2;
        }
        if opcode & 0xbfe0f000 == 0xdc0c000 {
            return Self::LD1R_asisdlsop_RX1_r;
        }
        if opcode & 0xbfe0f000 == 0xdc0e000 {
            return Self::LD3R_asisdlsop_RX3_r;
        }
        if opcode & 0xbfe0f000 == 0xde0c000 {
            return Self::LD2R_asisdlsop_RX2_r;
        }
        if opcode & 0xbfe0f000 == 0xde0e000 {
            return Self::LD4R_asisdlsop_RX4_r;
        }
        if opcode & 0xbfe0ec00 == 0xd808000 {
            return Self::ST1_asisdlsop_SX1_r1s;
        }
        if opcode & 0xbfe0ec00 == 0xd80a000 {
            return Self::ST3_asisdlsop_SX3_r3s;
        }
        if opcode & 0xbfe0ec00 == 0xda08000 {
            return Self::ST2_asisdlsop_SX2_r2s;
        }
        if opcode & 0xbfe0ec00 == 0xda0a000 {
            return Self::ST4_asisdlsop_SX4_r4s;
        }
        if opcode & 0xbfe0ec00 == 0xdc08000 {
            return Self::LD1_asisdlsop_SX1_r1s;
        }
        if opcode & 0xbfe0ec00 == 0xdc0a000 {
            return Self::LD3_asisdlsop_SX3_r3s;
        }
        if opcode & 0xbfe0ec00 == 0xde08000 {
            return Self::LD2_asisdlsop_SX2_r2s;
        }
        if opcode & 0xbfe0ec00 == 0xde0a000 {
            return Self::LD4_asisdlsop_SX4_r4s;
        }
        if opcode & 0xbfe0e400 == 0xd804000 {
            return Self::ST1_asisdlsop_HX1_r1h;
        }
        if opcode & 0xbfe0e400 == 0xd806000 {
            return Self::ST3_asisdlsop_HX3_r3h;
        }
        if opcode & 0xbfe0e400 == 0xda04000 {
            return Self::ST2_asisdlsop_HX2_r2h;
        }
        if opcode & 0xbfe0e400 == 0xda06000 {
            return Self::ST4_asisdlsop_HX4_r4h;
        }
        if opcode & 0xbfe0e400 == 0xdc04000 {
            return Self::LD1_asisdlsop_HX1_r1h;
        }
        if opcode & 0xbfe0e400 == 0xdc06000 {
            return Self::LD3_asisdlsop_HX3_r3h;
        }
        if opcode & 0xbfe0e400 == 0xde04000 {
            return Self::LD2_asisdlsop_HX2_r2h;
        }
        if opcode & 0xbfe0e400 == 0xde06000 {
            return Self::LD4_asisdlsop_HX4_r4h;
        }
        if opcode & 0xbfe0e000 == 0xd800000 {
            return Self::ST1_asisdlsop_BX1_r1b;
        }
        if opcode & 0xbfe0e000 == 0xd802000 {
            return Self::ST3_asisdlsop_BX3_r3b;
        }
        if opcode & 0xbfe0e000 == 0xda00000 {
            return Self::ST2_asisdlsop_BX2_r2b;
        }
        if opcode & 0xbfe0e000 == 0xda02000 {
            return Self::ST4_asisdlsop_BX4_r4b;
        }
        if opcode & 0xbfe0e000 == 0xdc00000 {
            return Self::LD1_asisdlsop_BX1_r1b;
        }
        if opcode & 0xbfe0e000 == 0xdc02000 {
            return Self::LD3_asisdlsop_BX3_r3b;
        }
        if opcode & 0xbfe0e000 == 0xde00000 {
            return Self::LD2_asisdlsop_BX2_r2b;
        }
        if opcode & 0xbfe0e000 == 0xde02000 {
            return Self::LD4_asisdlsop_BX4_r4b;
        }
        if opcode & 0xbfe08400 == 0x2e000000 {
            return Self::EXT_asimdext_only;
        }
        if opcode & 0xbfc0f400 == 0xf001000 {
            return Self::FMLA_asimdelem_RH_H;
        }
        if opcode & 0xbfc0f400 == 0xf005000 {
            return Self::FMLS_asimdelem_RH_H;
        }
        if opcode & 0xbfc0f400 == 0xf009000 {
            return Self::FMUL_asimdelem_RH_H;
        }
        if opcode & 0xbfc0f400 == 0xf00f000 {
            return Self::SUDOT_asimdelem_D;
        }
        if opcode & 0xbfc0f400 == 0xf40f000 {
            return Self::BFDOT_asimdelem_E;
        }
        if opcode & 0xbfc0f400 == 0xf800000 {
            return Self::FMLAL_asimdelem_LH;
        }
        if opcode & 0xbfc0f400 == 0xf804000 {
            return Self::FMLSL_asimdelem_LH;
        }
        if opcode & 0xbfc0f400 == 0xf80f000 {
            return Self::USDOT_asimdelem_D;
        }
        if opcode & 0xbfc0f400 == 0xfc0f000 {
            return Self::BFMLAL_asimdelem_F;
        }
        if opcode & 0xbfc0f400 == 0x2f009000 {
            return Self::FMULX_asimdelem_RH_H;
        }
        if opcode & 0xbfc0f400 == 0x2f808000 {
            return Self::FMLAL2_asimdelem_LH;
        }
        if opcode & 0xbfc0f400 == 0x2f80c000 {
            return Self::FMLSL2_asimdelem_LH;
        }
        if opcode & 0xbfc09400 == 0x2f401000 {
            return Self::FCMLA_asimdelem_C_H;
        }
        if opcode & 0xbfc09400 == 0x2f801000 {
            return Self::FCMLA_asimdelem_C_S;
        }
        if opcode & 0xbfbffc00 == 0xe216800 {
            return Self::FCVTN_asimdmisc_N;
        }
        if opcode & 0xbfbffc00 == 0xe217800 {
            return Self::FCVTL_asimdmisc_L;
        }
        if opcode & 0xbfbffc00 == 0xe218800 {
            return Self::FRINTN_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0xe219800 {
            return Self::FRINTM_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0xe21a800 {
            return Self::FCVTNS_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0xe21b800 {
            return Self::FCVTMS_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0xe21c800 {
            return Self::FCVTAS_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0xe21d800 {
            return Self::SCVTF_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0xe21e800 {
            return Self::FRINT32Z_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0xe21f800 {
            return Self::FRINT64Z_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0xea0c800 {
            return Self::FCMGT_asimdmisc_FZ;
        }
        if opcode & 0xbfbffc00 == 0xea0d800 {
            return Self::FCMEQ_asimdmisc_FZ;
        }
        if opcode & 0xbfbffc00 == 0xea0e800 {
            return Self::FCMLT_asimdmisc_FZ;
        }
        if opcode & 0xbfbffc00 == 0xea0f800 {
            return Self::FABS_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0xea18800 {
            return Self::FRINTP_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0xea19800 {
            return Self::FRINTZ_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0xea1a800 {
            return Self::FCVTPS_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0xea1b800 {
            return Self::FCVTZS_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0xea1c800 {
            return Self::URECPE_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0xea1d800 {
            return Self::FRECPE_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0x2e216800 {
            return Self::FCVTXN_asimdmisc_N;
        }
        if opcode & 0xbfbffc00 == 0x2e218800 {
            return Self::FRINTA_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0x2e219800 {
            return Self::FRINTX_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0x2e21a800 {
            return Self::FCVTNU_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0x2e21b800 {
            return Self::FCVTMU_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0x2e21c800 {
            return Self::FCVTAU_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0x2e21d800 {
            return Self::UCVTF_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0x2e21e800 {
            return Self::FRINT32X_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0x2e21f800 {
            return Self::FRINT64X_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0x2e30c800 {
            return Self::FMAXNMV_asimdall_only_SD;
        }
        if opcode & 0xbfbffc00 == 0x2e30f800 {
            return Self::FMAXV_asimdall_only_SD;
        }
        if opcode & 0xbfbffc00 == 0x2ea0c800 {
            return Self::FCMGE_asimdmisc_FZ;
        }
        if opcode & 0xbfbffc00 == 0x2ea0d800 {
            return Self::FCMLE_asimdmisc_FZ;
        }
        if opcode & 0xbfbffc00 == 0x2ea0f800 {
            return Self::FNEG_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0x2ea19800 {
            return Self::FRINTI_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0x2ea1a800 {
            return Self::FCVTPU_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0x2ea1b800 {
            return Self::FCVTZU_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0x2ea1c800 {
            return Self::URSQRTE_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0x2ea1d800 {
            return Self::FRSQRTE_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0x2ea1f800 {
            return Self::FSQRT_asimdmisc_R;
        }
        if opcode & 0xbfbffc00 == 0x2eb0c800 {
            return Self::FMINNMV_asimdall_only_SD;
        }
        if opcode & 0xbfbffc00 == 0x2eb0f800 {
            return Self::FMINV_asimdall_only_SD;
        }
        if opcode & 0xbfa0fc00 == 0xe20c400 {
            return Self::FMAXNM_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0xe20cc00 {
            return Self::FMLA_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0xe20d400 {
            return Self::FADD_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0xe20dc00 {
            return Self::FMULX_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0xe20e400 {
            return Self::FCMEQ_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0xe20f400 {
            return Self::FMAX_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0xe20fc00 {
            return Self::FRECPS_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0xea0c400 {
            return Self::FMINNM_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0xea0cc00 {
            return Self::FMLS_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0xea0d400 {
            return Self::FSUB_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0xea0f400 {
            return Self::FMIN_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0xea0fc00 {
            return Self::FRSQRTS_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0x2e20c400 {
            return Self::FMAXNMP_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0x2e20d400 {
            return Self::FADDP_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0x2e20dc00 {
            return Self::FMUL_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0x2e20e400 {
            return Self::FCMGE_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0x2e20ec00 {
            return Self::FACGE_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0x2e20f400 {
            return Self::FMAXP_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0x2e20fc00 {
            return Self::FDIV_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0x2ea0c400 {
            return Self::FMINNMP_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0x2ea0d400 {
            return Self::FABD_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0x2ea0e400 {
            return Self::FCMGT_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0x2ea0ec00 {
            return Self::FACGT_asimdsame_only;
        }
        if opcode & 0xbfa0fc00 == 0x2ea0f400 {
            return Self::FMINP_asimdsame_only;
        }
        if opcode & 0xbf87fc00 == 0xf00a400 {
            return Self::SXTL_SSHLL_asimdshf_L;
        }
        if opcode & 0xbf87fc00 == 0x2f00a400 {
            return Self::UXTL_USHLL_asimdshf_L;
        }
        if opcode & 0xbf80fc00 == 0xf000400 {
            return Self::SSHR_asimdshf_R;
        }
        if opcode & 0xbf80fc00 == 0xf001400 {
            return Self::SSRA_asimdshf_R;
        }
        if opcode & 0xbf80fc00 == 0xf002400 {
            return Self::SRSHR_asimdshf_R;
        }
        if opcode & 0xbf80fc00 == 0xf003400 {
            return Self::SRSRA_asimdshf_R;
        }
        if opcode & 0xbf80fc00 == 0xf005400 {
            return Self::SHL_asimdshf_R;
        }
        if opcode & 0xbf80fc00 == 0xf007400 {
            return Self::SQSHL_asimdshf_R;
        }
        if opcode & 0xbf80fc00 == 0xf008400 {
            return Self::SHRN_asimdshf_N;
        }
        if opcode & 0xbf80fc00 == 0xf008c00 {
            return Self::RSHRN_asimdshf_N;
        }
        if opcode & 0xbf80fc00 == 0xf009400 {
            return Self::SQSHRN_asimdshf_N;
        }
        if opcode & 0xbf80fc00 == 0xf009c00 {
            return Self::SQRSHRN_asimdshf_N;
        }
        if opcode & 0xbf80fc00 == 0xf00a400 {
            return Self::SSHLL_asimdshf_L;
        }
        if opcode & 0xbf80fc00 == 0xf00e400 {
            return Self::SCVTF_asimdshf_C;
        }
        if opcode & 0xbf80fc00 == 0xf00fc00 {
            return Self::FCVTZS_asimdshf_C;
        }
        if opcode & 0xbf80fc00 == 0x2f000400 {
            return Self::USHR_asimdshf_R;
        }
        if opcode & 0xbf80fc00 == 0x2f001400 {
            return Self::USRA_asimdshf_R;
        }
        if opcode & 0xbf80fc00 == 0x2f002400 {
            return Self::URSHR_asimdshf_R;
        }
        if opcode & 0xbf80fc00 == 0x2f003400 {
            return Self::URSRA_asimdshf_R;
        }
        if opcode & 0xbf80fc00 == 0x2f004400 {
            return Self::SRI_asimdshf_R;
        }
        if opcode & 0xbf80fc00 == 0x2f005400 {
            return Self::SLI_asimdshf_R;
        }
        if opcode & 0xbf80fc00 == 0x2f006400 {
            return Self::SQSHLU_asimdshf_R;
        }
        if opcode & 0xbf80fc00 == 0x2f007400 {
            return Self::UQSHL_asimdshf_R;
        }
        if opcode & 0xbf80fc00 == 0x2f008400 {
            return Self::SQSHRUN_asimdshf_N;
        }
        if opcode & 0xbf80fc00 == 0x2f008c00 {
            return Self::SQRSHRUN_asimdshf_N;
        }
        if opcode & 0xbf80fc00 == 0x2f009400 {
            return Self::UQSHRN_asimdshf_N;
        }
        if opcode & 0xbf80fc00 == 0x2f009c00 {
            return Self::UQRSHRN_asimdshf_N;
        }
        if opcode & 0xbf80fc00 == 0x2f00a400 {
            return Self::USHLL_asimdshf_L;
        }
        if opcode & 0xbf80fc00 == 0x2f00e400 {
            return Self::UCVTF_asimdshf_C;
        }
        if opcode & 0xbf80fc00 == 0x2f00fc00 {
            return Self::FCVTZU_asimdshf_C;
        }
        if opcode & 0xbf80f400 == 0xf801000 {
            return Self::FMLA_asimdelem_R_SD;
        }
        if opcode & 0xbf80f400 == 0xf805000 {
            return Self::FMLS_asimdelem_R_SD;
        }
        if opcode & 0xbf80f400 == 0xf809000 {
            return Self::FMUL_asimdelem_R_SD;
        }
        if opcode & 0xbf80f400 == 0x2f809000 {
            return Self::FMULX_asimdelem_R_SD;
        }
        if opcode & 0xbf3ffc00 == 0xe200800 {
            return Self::REV64_asimdmisc_R;
        }
        if opcode & 0xbf3ffc00 == 0xe201800 {
            return Self::REV16_asimdmisc_R;
        }
        if opcode & 0xbf3ffc00 == 0xe202800 {
            return Self::SADDLP_asimdmisc_P;
        }
        if opcode & 0xbf3ffc00 == 0xe203800 {
            return Self::SUQADD_asimdmisc_R;
        }
        if opcode & 0xbf3ffc00 == 0xe204800 {
            return Self::CLS_asimdmisc_R;
        }
        if opcode & 0xbf3ffc00 == 0xe205800 {
            return Self::CNT_asimdmisc_R;
        }
        if opcode & 0xbf3ffc00 == 0xe206800 {
            return Self::SADALP_asimdmisc_P;
        }
        if opcode & 0xbf3ffc00 == 0xe207800 {
            return Self::SQABS_asimdmisc_R;
        }
        if opcode & 0xbf3ffc00 == 0xe208800 {
            return Self::CMGT_asimdmisc_Z;
        }
        if opcode & 0xbf3ffc00 == 0xe209800 {
            return Self::CMEQ_asimdmisc_Z;
        }
        if opcode & 0xbf3ffc00 == 0xe20a800 {
            return Self::CMLT_asimdmisc_Z;
        }
        if opcode & 0xbf3ffc00 == 0xe20b800 {
            return Self::ABS_asimdmisc_R;
        }
        if opcode & 0xbf3ffc00 == 0xe212800 {
            return Self::XTN_asimdmisc_N;
        }
        if opcode & 0xbf3ffc00 == 0xe214800 {
            return Self::SQXTN_asimdmisc_N;
        }
        if opcode & 0xbf3ffc00 == 0xe303800 {
            return Self::SADDLV_asimdall_only;
        }
        if opcode & 0xbf3ffc00 == 0xe30a800 {
            return Self::SMAXV_asimdall_only;
        }
        if opcode & 0xbf3ffc00 == 0xe31a800 {
            return Self::SMINV_asimdall_only;
        }
        if opcode & 0xbf3ffc00 == 0xe31b800 {
            return Self::ADDV_asimdall_only;
        }
        if opcode & 0xbf3ffc00 == 0x2e200800 {
            return Self::REV32_asimdmisc_R;
        }
        if opcode & 0xbf3ffc00 == 0x2e202800 {
            return Self::UADDLP_asimdmisc_P;
        }
        if opcode & 0xbf3ffc00 == 0x2e203800 {
            return Self::USQADD_asimdmisc_R;
        }
        if opcode & 0xbf3ffc00 == 0x2e204800 {
            return Self::CLZ_asimdmisc_R;
        }
        if opcode & 0xbf3ffc00 == 0x2e206800 {
            return Self::UADALP_asimdmisc_P;
        }
        if opcode & 0xbf3ffc00 == 0x2e207800 {
            return Self::SQNEG_asimdmisc_R;
        }
        if opcode & 0xbf3ffc00 == 0x2e208800 {
            return Self::CMGE_asimdmisc_Z;
        }
        if opcode & 0xbf3ffc00 == 0x2e209800 {
            return Self::CMLE_asimdmisc_Z;
        }
        if opcode & 0xbf3ffc00 == 0x2e20b800 {
            return Self::NEG_asimdmisc_R;
        }
        if opcode & 0xbf3ffc00 == 0x2e212800 {
            return Self::SQXTUN_asimdmisc_N;
        }
        if opcode & 0xbf3ffc00 == 0x2e213800 {
            return Self::SHLL_asimdmisc_S;
        }
        if opcode & 0xbf3ffc00 == 0x2e214800 {
            return Self::UQXTN_asimdmisc_N;
        }
        if opcode & 0xbf3ffc00 == 0x2e303800 {
            return Self::UADDLV_asimdall_only;
        }
        if opcode & 0xbf3ffc00 == 0x2e30a800 {
            return Self::UMAXV_asimdall_only;
        }
        if opcode & 0xbf3ffc00 == 0x2e31a800 {
            return Self::UMINV_asimdall_only;
        }
        if opcode & 0xbf20fc00 == 0xe001800 {
            return Self::UZP1_asimdperm_only;
        }
        if opcode & 0xbf20fc00 == 0xe002800 {
            return Self::TRN1_asimdperm_only;
        }
        if opcode & 0xbf20fc00 == 0xe003800 {
            return Self::ZIP1_asimdperm_only;
        }
        if opcode & 0xbf20fc00 == 0xe005800 {
            return Self::UZP2_asimdperm_only;
        }
        if opcode & 0xbf20fc00 == 0xe006800 {
            return Self::TRN2_asimdperm_only;
        }
        if opcode & 0xbf20fc00 == 0xe007800 {
            return Self::ZIP2_asimdperm_only;
        }
        if opcode & 0xbf20fc00 == 0xe009400 {
            return Self::SDOT_asimdsame2_D;
        }
        if opcode & 0xbf20fc00 == 0xe200000 {
            return Self::SADDL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0xe200400 {
            return Self::SHADD_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe200c00 {
            return Self::SQADD_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe201000 {
            return Self::SADDW_asimddiff_W;
        }
        if opcode & 0xbf20fc00 == 0xe201400 {
            return Self::SRHADD_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe202000 {
            return Self::SSUBL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0xe202400 {
            return Self::SHSUB_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe202c00 {
            return Self::SQSUB_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe203000 {
            return Self::SSUBW_asimddiff_W;
        }
        if opcode & 0xbf20fc00 == 0xe203400 {
            return Self::CMGT_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe203c00 {
            return Self::CMGE_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe204000 {
            return Self::ADDHN_asimddiff_N;
        }
        if opcode & 0xbf20fc00 == 0xe204400 {
            return Self::SSHL_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe204c00 {
            return Self::SQSHL_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe205000 {
            return Self::SABAL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0xe205400 {
            return Self::SRSHL_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe205c00 {
            return Self::SQRSHL_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe206000 {
            return Self::SUBHN_asimddiff_N;
        }
        if opcode & 0xbf20fc00 == 0xe206400 {
            return Self::SMAX_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe206c00 {
            return Self::SMIN_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe207000 {
            return Self::SABDL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0xe207400 {
            return Self::SABD_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe207c00 {
            return Self::SABA_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe208000 {
            return Self::SMLAL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0xe208400 {
            return Self::ADD_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe208c00 {
            return Self::CMTST_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe209000 {
            return Self::SQDMLAL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0xe209400 {
            return Self::MLA_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe209c00 {
            return Self::MUL_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe20a000 {
            return Self::SMLSL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0xe20a400 {
            return Self::SMAXP_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe20ac00 {
            return Self::SMINP_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe20b000 {
            return Self::SQDMLSL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0xe20b400 {
            return Self::SQDMULH_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe20bc00 {
            return Self::ADDP_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0xe20c000 {
            return Self::SMULL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0xe20d000 {
            return Self::SQDMULL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0xe20e000 {
            return Self::PMULL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0x2e008400 {
            return Self::SQRDMLAH_asimdsame2_only;
        }
        if opcode & 0xbf20fc00 == 0x2e008c00 {
            return Self::SQRDMLSH_asimdsame2_only;
        }
        if opcode & 0xbf20fc00 == 0x2e009400 {
            return Self::UDOT_asimdsame2_D;
        }
        if opcode & 0xbf20fc00 == 0x2e200000 {
            return Self::UADDL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0x2e200400 {
            return Self::UHADD_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e200c00 {
            return Self::UQADD_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e201000 {
            return Self::UADDW_asimddiff_W;
        }
        if opcode & 0xbf20fc00 == 0x2e201400 {
            return Self::URHADD_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e202000 {
            return Self::USUBL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0x2e202400 {
            return Self::UHSUB_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e202c00 {
            return Self::UQSUB_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e203000 {
            return Self::USUBW_asimddiff_W;
        }
        if opcode & 0xbf20fc00 == 0x2e203400 {
            return Self::CMHI_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e203c00 {
            return Self::CMHS_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e204000 {
            return Self::RADDHN_asimddiff_N;
        }
        if opcode & 0xbf20fc00 == 0x2e204400 {
            return Self::USHL_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e204c00 {
            return Self::UQSHL_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e205000 {
            return Self::UABAL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0x2e205400 {
            return Self::URSHL_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e205c00 {
            return Self::UQRSHL_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e206000 {
            return Self::RSUBHN_asimddiff_N;
        }
        if opcode & 0xbf20fc00 == 0x2e206400 {
            return Self::UMAX_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e206c00 {
            return Self::UMIN_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e207000 {
            return Self::UABDL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0x2e207400 {
            return Self::UABD_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e207c00 {
            return Self::UABA_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e208000 {
            return Self::UMLAL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0x2e208400 {
            return Self::SUB_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e208c00 {
            return Self::CMEQ_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e209400 {
            return Self::MLS_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e209c00 {
            return Self::PMUL_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e20a000 {
            return Self::UMLSL_asimddiff_L;
        }
        if opcode & 0xbf20fc00 == 0x2e20a400 {
            return Self::UMAXP_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e20ac00 {
            return Self::UMINP_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e20b400 {
            return Self::SQRDMULH_asimdsame_only;
        }
        if opcode & 0xbf20fc00 == 0x2e20c000 {
            return Self::UMULL_asimddiff_L;
        }
        if opcode & 0xbf20ec00 == 0x2e00e400 {
            return Self::FCADD_asimdsame2_C;
        }
        if opcode & 0xbf20e400 == 0x2e00c400 {
            return Self::FCMLA_asimdsame2_C;
        }
        if opcode & 0xbf00f400 == 0xf002000 {
            return Self::SMLAL_asimdelem_L;
        }
        if opcode & 0xbf00f400 == 0xf003000 {
            return Self::SQDMLAL_asimdelem_L;
        }
        if opcode & 0xbf00f400 == 0xf006000 {
            return Self::SMLSL_asimdelem_L;
        }
        if opcode & 0xbf00f400 == 0xf007000 {
            return Self::SQDMLSL_asimdelem_L;
        }
        if opcode & 0xbf00f400 == 0xf008000 {
            return Self::MUL_asimdelem_R;
        }
        if opcode & 0xbf00f400 == 0xf00a000 {
            return Self::SMULL_asimdelem_L;
        }
        if opcode & 0xbf00f400 == 0xf00b000 {
            return Self::SQDMULL_asimdelem_L;
        }
        if opcode & 0xbf00f400 == 0xf00c000 {
            return Self::SQDMULH_asimdelem_R;
        }
        if opcode & 0xbf00f400 == 0xf00d000 {
            return Self::SQRDMULH_asimdelem_R;
        }
        if opcode & 0xbf00f400 == 0xf00e000 {
            return Self::SDOT_asimdelem_D;
        }
        if opcode & 0xbf00f400 == 0x2f000000 {
            return Self::MLA_asimdelem_R;
        }
        if opcode & 0xbf00f400 == 0x2f002000 {
            return Self::UMLAL_asimdelem_L;
        }
        if opcode & 0xbf00f400 == 0x2f004000 {
            return Self::MLS_asimdelem_R;
        }
        if opcode & 0xbf00f400 == 0x2f006000 {
            return Self::UMLSL_asimdelem_L;
        }
        if opcode & 0xbf00f400 == 0x2f00a000 {
            return Self::UMULL_asimdelem_L;
        }
        if opcode & 0xbf00f400 == 0x2f00d000 {
            return Self::SQRDMLAH_asimdelem_R;
        }
        if opcode & 0xbf00f400 == 0x2f00e000 {
            return Self::UDOT_asimdelem_D;
        }
        if opcode & 0xbf00f400 == 0x2f00f000 {
            return Self::SQRDMLSH_asimdelem_R;
        }
        if opcode & 0x9f000000 == 0x10000000 {
            return Self::ADR_only_pcreladdr;
        }
        if opcode & 0x9f000000 == 0x90000000 {
            return Self::ADRP_only_pcreladdr;
        }
        if opcode & 0x7f000000 == 0x36000000 {
            return Self::TBZ_only_testbranch;
        }
        if opcode & 0x7f000000 == 0x37000000 {
            return Self::TBNZ_only_testbranch;
        }
        
        Self::UNKNOWN(opcode)
    }

    pub fn encode(&self) -> u32 {
        match self {
            Self::SETFFR_f => 0x252c9000,
            Self::NOP_HI_hints => 0xd503201f,
            Self::YIELD_HI_hints => 0xd503203f,
            Self::WFE_HI_hints => 0xd503205f,
            Self::WFI_HI_hints => 0xd503207f,
            Self::SEV_HI_hints => 0xd503209f,
            Self::SEVL_HI_hints => 0xd50320bf,
            Self::DGH_HI_hints => 0xd50320df,
            Self::XPACLRI_HI_hints => 0xd50320ff,
            Self::PACIA1716_HI_hints => 0xd503211f,
            Self::PACIB1716_HI_hints => 0xd503215f,
            Self::AUTIA1716_HI_hints => 0xd503219f,
            Self::AUTIB1716_HI_hints => 0xd50321df,
            Self::ESB_HI_hints => 0xd503221f,
            Self::PSB_HC_hints => 0xd503223f,
            Self::TSB_HC_hints => 0xd503225f,
            Self::CSDB_HI_hints => 0xd503229f,
            Self::PACIAZ_HI_hints => 0xd503231f,
            Self::PACIASP_HI_hints => 0xd503233f,
            Self::PACIBZ_HI_hints => 0xd503235f,
            Self::PACIBSP_HI_hints => 0xd503237f,
            Self::AUTIAZ_HI_hints => 0xd503239f,
            Self::AUTIASP_HI_hints => 0xd50323bf,
            Self::AUTIBZ_HI_hints => 0xd50323df,
            Self::AUTIBSP_HI_hints => 0xd50323ff,
            Self::SSBB_only_barriers => 0xd503309f,
            Self::PSSBB_only_barriers => 0xd503349f,
            Self::RETAA_64E_branch_reg => 0xd65f0bff,
            Self::RETAB_64E_branch_reg => 0xd65f0fff,
            Self::ERET_64E_branch_reg => 0xd69f03e0,
            Self::ERETAA_64E_branch_reg => 0xd69f0bff,
            Self::ERETAB_64E_branch_reg => 0xd69f0fff,
            Self::DRPS_64E_branch_reg => 0xd6bf03e0,
            Self::PFALSE_p => 0x2518e400,
            Self::RDFFR_p_f => 0x2519f000,
            Self::WFET_only_systeminstrswithreg => 0xd5031000,
            Self::WFIT_only_systeminstrswithreg => 0xd5031020,
            Self::CFP_SYS_CR_systeminstrs => 0xd50b7380,
            Self::DVP_SYS_CR_systeminstrs => 0xd50b73a0,
            Self::CPP_SYS_CR_systeminstrs => 0xd50b73e0,
            Self::PACIZA_64Z_dp_1src => 0xdac123e0,
            Self::PACIZB_64Z_dp_1src => 0xdac127e0,
            Self::PACDZA_64Z_dp_1src => 0xdac12be0,
            Self::PACDZB_64Z_dp_1src => 0xdac12fe0,
            Self::AUTIZA_64Z_dp_1src => 0xdac133e0,
            Self::AUTIZB_64Z_dp_1src => 0xdac137e0,
            Self::AUTDZA_64Z_dp_1src => 0xdac13be0,
            Self::AUTDZB_64Z_dp_1src => 0xdac13fe0,
            Self::XPACI_64Z_dp_1src => 0xdac143e0,
            Self::XPACD_64Z_dp_1src => 0xdac147e0,
            Self::BTI_HB_hints => 0xd503241f,
            Self::WRFFR_f_p => 0x25289000,
            Self::PUNPKLO_p_p => 0x5304000,
            Self::PUNPKHI_p_p => 0x5314000,
            Self::RDFFR_p_p_f => 0x2518f000,
            Self::PFIRST_p_p_p => 0x2558c000,
            Self::RDFFRS_p_p_f => 0x2558f000,
            Self::SETF8_only_setf => 0x3a00080d,
            Self::SETF16_only_setf => 0x3a00480d,
            Self::BR_64_branch_reg => 0xd61f0000,
            Self::BRAAZ_64_branch_reg => 0xd61f081f,
            Self::BRABZ_64_branch_reg => 0xd61f0c1f,
            Self::BLR_64_branch_reg => 0xd63f0000,
            Self::BLRAAZ_64_branch_reg => 0xd63f081f,
            Self::BLRABZ_64_branch_reg => 0xd63f0c1f,
            Self::RET_64R_branch_reg => 0xd65f0000,
            Self::MOVPRFX_z_z => 0x420bc00,
            Self::MOV_ADD_32_addsub_imm => 0x11000000,
            Self::SXTB_SBFM_32M_bitfield => 0x13001c00,
            Self::SXTH_SBFM_32M_bitfield => 0x13003c00,
            Self::FCVTNS_32S_float2int => 0x1e200000,
            Self::FMOV_S_floatdp1 => 0x1e204000,
            Self::FABS_S_floatdp1 => 0x1e20c000,
            Self::FCVTNU_32S_float2int => 0x1e210000,
            Self::FNEG_S_floatdp1 => 0x1e214000,
            Self::FSQRT_S_floatdp1 => 0x1e21c000,
            Self::SCVTF_S32_float2int => 0x1e220000,
            Self::FCVT_DS_floatdp1 => 0x1e22c000,
            Self::UCVTF_S32_float2int => 0x1e230000,
            Self::FCVT_HS_floatdp1 => 0x1e23c000,
            Self::FCVTAS_32S_float2int => 0x1e240000,
            Self::FRINTN_S_floatdp1 => 0x1e244000,
            Self::FRINTP_S_floatdp1 => 0x1e24c000,
            Self::FCVTAU_32S_float2int => 0x1e250000,
            Self::FRINTM_S_floatdp1 => 0x1e254000,
            Self::FRINTZ_S_floatdp1 => 0x1e25c000,
            Self::FMOV_32S_float2int => 0x1e260000,
            Self::FRINTA_S_floatdp1 => 0x1e264000,
            Self::FMOV_S32_float2int => 0x1e270000,
            Self::FRINTX_S_floatdp1 => 0x1e274000,
            Self::FRINTI_S_floatdp1 => 0x1e27c000,
            Self::FCVTPS_32S_float2int => 0x1e280000,
            Self::FRINT32Z_S_floatdp1 => 0x1e284000,
            Self::FRINT32X_S_floatdp1 => 0x1e28c000,
            Self::FCVTPU_32S_float2int => 0x1e290000,
            Self::FRINT64Z_S_floatdp1 => 0x1e294000,
            Self::FRINT64X_S_floatdp1 => 0x1e29c000,
            Self::FCVTMS_32S_float2int => 0x1e300000,
            Self::FCVTMU_32S_float2int => 0x1e310000,
            Self::FCVTZS_32S_float2int => 0x1e380000,
            Self::FCVTZU_32S_float2int => 0x1e390000,
            Self::FCVTNS_32D_float2int => 0x1e600000,
            Self::FMOV_D_floatdp1 => 0x1e604000,
            Self::FABS_D_floatdp1 => 0x1e60c000,
            Self::FCVTNU_32D_float2int => 0x1e610000,
            Self::FNEG_D_floatdp1 => 0x1e614000,
            Self::FSQRT_D_floatdp1 => 0x1e61c000,
            Self::SCVTF_D32_float2int => 0x1e620000,
            Self::FCVT_SD_floatdp1 => 0x1e624000,
            Self::UCVTF_D32_float2int => 0x1e630000,
            Self::BFCVT_BS_floatdp1 => 0x1e634000,
            Self::FCVT_HD_floatdp1 => 0x1e63c000,
            Self::FCVTAS_32D_float2int => 0x1e640000,
            Self::FRINTN_D_floatdp1 => 0x1e644000,
            Self::FRINTP_D_floatdp1 => 0x1e64c000,
            Self::FCVTAU_32D_float2int => 0x1e650000,
            Self::FRINTM_D_floatdp1 => 0x1e654000,
            Self::FRINTZ_D_floatdp1 => 0x1e65c000,
            Self::FRINTA_D_floatdp1 => 0x1e664000,
            Self::FRINTX_D_floatdp1 => 0x1e674000,
            Self::FRINTI_D_floatdp1 => 0x1e67c000,
            Self::FCVTPS_32D_float2int => 0x1e680000,
            Self::FRINT32Z_D_floatdp1 => 0x1e684000,
            Self::FRINT32X_D_floatdp1 => 0x1e68c000,
            Self::FCVTPU_32D_float2int => 0x1e690000,
            Self::FRINT64Z_D_floatdp1 => 0x1e694000,
            Self::FRINT64X_D_floatdp1 => 0x1e69c000,
            Self::FCVTMS_32D_float2int => 0x1e700000,
            Self::FCVTMU_32D_float2int => 0x1e710000,
            Self::FCVTZS_32D_float2int => 0x1e780000,
            Self::FCVTZU_32D_float2int => 0x1e790000,
            Self::FJCVTZS_32D_float2int => 0x1e7e0000,
            Self::FCVTNS_32H_float2int => 0x1ee00000,
            Self::FMOV_H_floatdp1 => 0x1ee04000,
            Self::FABS_H_floatdp1 => 0x1ee0c000,
            Self::FCVTNU_32H_float2int => 0x1ee10000,
            Self::FNEG_H_floatdp1 => 0x1ee14000,
            Self::FSQRT_H_floatdp1 => 0x1ee1c000,
            Self::SCVTF_H32_float2int => 0x1ee20000,
            Self::FCVT_SH_floatdp1 => 0x1ee24000,
            Self::FCVT_DH_floatdp1 => 0x1ee2c000,
            Self::UCVTF_H32_float2int => 0x1ee30000,
            Self::FCVTAS_32H_float2int => 0x1ee40000,
            Self::FRINTN_H_floatdp1 => 0x1ee44000,
            Self::FRINTP_H_floatdp1 => 0x1ee4c000,
            Self::FCVTAU_32H_float2int => 0x1ee50000,
            Self::FRINTM_H_floatdp1 => 0x1ee54000,
            Self::FRINTZ_H_floatdp1 => 0x1ee5c000,
            Self::FMOV_32H_float2int => 0x1ee60000,
            Self::FRINTA_H_floatdp1 => 0x1ee64000,
            Self::FMOV_H32_float2int => 0x1ee70000,
            Self::FRINTX_H_floatdp1 => 0x1ee74000,
            Self::FRINTI_H_floatdp1 => 0x1ee7c000,
            Self::FCVTPS_32H_float2int => 0x1ee80000,
            Self::FCVTPU_32H_float2int => 0x1ee90000,
            Self::FCVTMS_32H_float2int => 0x1ef00000,
            Self::FCVTMU_32H_float2int => 0x1ef10000,
            Self::FCVTZS_32H_float2int => 0x1ef80000,
            Self::FCVTZU_32H_float2int => 0x1ef90000,
            Self::AESE_B_cryptoaes => 0x4e284800,
            Self::AESD_B_cryptoaes => 0x4e285800,
            Self::AESMC_B_cryptoaes => 0x4e286800,
            Self::AESIMC_B_cryptoaes => 0x4e287800,
            Self::UXTB_UBFM_32M_bitfield => 0x53001c00,
            Self::UXTH_UBFM_32M_bitfield => 0x53003c00,
            Self::RBIT_32_dp_1src => 0x5ac00000,
            Self::REV16_32_dp_1src => 0x5ac00400,
            Self::REV_32_dp_1src => 0x5ac00800,
            Self::CLZ_32_dp_1src => 0x5ac01000,
            Self::CLS_32_dp_1src => 0x5ac01400,
            Self::SHA1H_SS_cryptosha2 => 0x5e280800,
            Self::SHA1SU1_VV_cryptosha2 => 0x5e281800,
            Self::SHA256SU0_VV_cryptosha2 => 0x5e282800,
            Self::FCVTNS_asisdmiscfp16_R => 0x5e79a800,
            Self::FCVTMS_asisdmiscfp16_R => 0x5e79b800,
            Self::FCVTAS_asisdmiscfp16_R => 0x5e79c800,
            Self::SCVTF_asisdmiscfp16_R => 0x5e79d800,
            Self::FCMGT_asisdmiscfp16_FZ => 0x5ef8c800,
            Self::FCMEQ_asisdmiscfp16_FZ => 0x5ef8d800,
            Self::FCMLT_asisdmiscfp16_FZ => 0x5ef8e800,
            Self::FCVTPS_asisdmiscfp16_R => 0x5ef9a800,
            Self::FCVTZS_asisdmiscfp16_R => 0x5ef9b800,
            Self::FRECPE_asisdmiscfp16_R => 0x5ef9d800,
            Self::FRECPX_asisdmiscfp16_R => 0x5ef9f800,
            Self::FCVTNU_asisdmiscfp16_R => 0x7e79a800,
            Self::FCVTMU_asisdmiscfp16_R => 0x7e79b800,
            Self::FCVTAU_asisdmiscfp16_R => 0x7e79c800,
            Self::UCVTF_asisdmiscfp16_R => 0x7e79d800,
            Self::FCMGE_asisdmiscfp16_FZ => 0x7ef8c800,
            Self::FCMLE_asisdmiscfp16_FZ => 0x7ef8d800,
            Self::FCVTPU_asisdmiscfp16_R => 0x7ef9a800,
            Self::FCVTZU_asisdmiscfp16_R => 0x7ef9b800,
            Self::FRSQRTE_asisdmiscfp16_R => 0x7ef9d800,
            Self::MOV_ADD_64_addsub_imm => 0x91000000,
            Self::SXTB_SBFM_64M_bitfield => 0x93401c00,
            Self::SXTH_SBFM_64M_bitfield => 0x93403c00,
            Self::SXTW_SBFM_64M_bitfield => 0x93407c00,
            Self::FCVTNS_64S_float2int => 0x9e200000,
            Self::FCVTNU_64S_float2int => 0x9e210000,
            Self::SCVTF_S64_float2int => 0x9e220000,
            Self::UCVTF_S64_float2int => 0x9e230000,
            Self::FCVTAS_64S_float2int => 0x9e240000,
            Self::FCVTAU_64S_float2int => 0x9e250000,
            Self::FCVTPS_64S_float2int => 0x9e280000,
            Self::FCVTPU_64S_float2int => 0x9e290000,
            Self::FCVTMS_64S_float2int => 0x9e300000,
            Self::FCVTMU_64S_float2int => 0x9e310000,
            Self::FCVTZS_64S_float2int => 0x9e380000,
            Self::FCVTZU_64S_float2int => 0x9e390000,
            Self::FCVTNS_64D_float2int => 0x9e600000,
            Self::FCVTNU_64D_float2int => 0x9e610000,
            Self::SCVTF_D64_float2int => 0x9e620000,
            Self::UCVTF_D64_float2int => 0x9e630000,
            Self::FCVTAS_64D_float2int => 0x9e640000,
            Self::FCVTAU_64D_float2int => 0x9e650000,
            Self::FMOV_64D_float2int => 0x9e660000,
            Self::FMOV_D64_float2int => 0x9e670000,
            Self::FCVTPS_64D_float2int => 0x9e680000,
            Self::FCVTPU_64D_float2int => 0x9e690000,
            Self::FCVTMS_64D_float2int => 0x9e700000,
            Self::FCVTMU_64D_float2int => 0x9e710000,
            Self::FCVTZS_64D_float2int => 0x9e780000,
            Self::FCVTZU_64D_float2int => 0x9e790000,
            Self::FMOV_64VX_float2int => 0x9eae0000,
            Self::FMOV_V64I_float2int => 0x9eaf0000,
            Self::FCVTNS_64H_float2int => 0x9ee00000,
            Self::FCVTNU_64H_float2int => 0x9ee10000,
            Self::SCVTF_H64_float2int => 0x9ee20000,
            Self::UCVTF_H64_float2int => 0x9ee30000,
            Self::FCVTAS_64H_float2int => 0x9ee40000,
            Self::FCVTAU_64H_float2int => 0x9ee50000,
            Self::FMOV_64H_float2int => 0x9ee60000,
            Self::FMOV_H64_float2int => 0x9ee70000,
            Self::FCVTPS_64H_float2int => 0x9ee80000,
            Self::FCVTPU_64H_float2int => 0x9ee90000,
            Self::FCVTMS_64H_float2int => 0x9ef00000,
            Self::FCVTMU_64H_float2int => 0x9ef10000,
            Self::FCVTZS_64H_float2int => 0x9ef80000,
            Self::FCVTZU_64H_float2int => 0x9ef90000,
            Self::SHA512SU0_VV2_cryptosha512_2 => 0xcec08000,
            Self::SM4E_VV4_cryptosha512_2 => 0xcec08400,
            Self::BRAA_64P_branch_reg => 0xd71f0800,
            Self::BRAB_64P_branch_reg => 0xd71f0c00,
            Self::BLRAA_64P_branch_reg => 0xd73f0800,
            Self::BLRAB_64P_branch_reg => 0xd73f0c00,
            Self::STZGM_64bulk_ldsttags => 0xd9200000,
            Self::STGM_64bulk_ldsttags => 0xd9a00000,
            Self::LDGM_64bulk_ldsttags => 0xd9e00000,
            Self::RBIT_64_dp_1src => 0xdac00000,
            Self::REV16_64_dp_1src => 0xdac00400,
            Self::REV32_64_dp_1src => 0xdac00800,
            Self::REV_64_dp_1src => 0xdac00c00,
            Self::REV64_REV_64_dp_1src => 0xdac00c00,
            Self::CLZ_64_dp_1src => 0xdac01000,
            Self::CLS_64_dp_1src => 0xdac01400,
            Self::PACIA_64P_dp_1src => 0xdac10000,
            Self::PACIB_64P_dp_1src => 0xdac10400,
            Self::PACDA_64P_dp_1src => 0xdac10800,
            Self::PACDB_64P_dp_1src => 0xdac10c00,
            Self::AUTIA_64P_dp_1src => 0xdac11000,
            Self::AUTIB_64P_dp_1src => 0xdac11400,
            Self::AUTDA_64P_dp_1src => 0xdac11800,
            Self::AUTDB_64P_dp_1src => 0xdac11c00,
            Self::ST64B_64L_memop => 0xf83f9000,
            Self::LD64B_64L_memop => 0xf83fd000,
            Self::RDVL_r_i => 0x4bf5000,
            Self::DSB_BOn_barriers => 0xd503323f,
            Self::CFINV_M_pstate => 0xd500401f,
            Self::XAFLAG_M_pstate => 0xd500403f,
            Self::AXFLAG_M_pstate => 0xd500405f,
            Self::CLREX_BN_barriers => 0xd503305f,
            Self::DSB_BO_barriers => 0xd503309f,
            Self::DMB_BO_barriers => 0xd50330bf,
            Self::ISB_BI_barriers => 0xd50330df,
            Self::SB_only_barriers => 0xd50330ff,
            Self::HINT_HM_hints => 0xd503201f,
            Self::BFCVTNT_z_p_z_s2bf => 0x648aa000,
            Self::SCVTF_z_p_z_h2fp16 => 0x6552a000,
            Self::UCVTF_z_p_z_h2fp16 => 0x6553a000,
            Self::SCVTF_z_p_z_w2fp16 => 0x6554a000,
            Self::UCVTF_z_p_z_w2fp16 => 0x6555a000,
            Self::SCVTF_z_p_z_x2fp16 => 0x6556a000,
            Self::UCVTF_z_p_z_x2fp16 => 0x6557a000,
            Self::FCVTZS_z_p_z_fp162h => 0x655aa000,
            Self::FCVTZU_z_p_z_fp162h => 0x655ba000,
            Self::FCVTZS_z_p_z_fp162w => 0x655ca000,
            Self::FCVTZU_z_p_z_fp162w => 0x655da000,
            Self::FCVTZS_z_p_z_fp162x => 0x655ea000,
            Self::FCVTZU_z_p_z_fp162x => 0x655fa000,
            Self::FCVT_z_p_z_s2h => 0x6588a000,
            Self::FCVT_z_p_z_h2s => 0x6589a000,
            Self::BFCVT_z_p_z_s2bf => 0x658aa000,
            Self::SCVTF_z_p_z_w2s => 0x6594a000,
            Self::UCVTF_z_p_z_w2s => 0x6595a000,
            Self::FCVTZS_z_p_z_s2w => 0x659ca000,
            Self::FCVTZU_z_p_z_s2w => 0x659da000,
            Self::FCVT_z_p_z_d2h => 0x65c8a000,
            Self::FCVT_z_p_z_h2d => 0x65c9a000,
            Self::FCVT_z_p_z_d2s => 0x65caa000,
            Self::FCVT_z_p_z_s2d => 0x65cba000,
            Self::SCVTF_z_p_z_w2d => 0x65d0a000,
            Self::UCVTF_z_p_z_w2d => 0x65d1a000,
            Self::SCVTF_z_p_z_x2s => 0x65d4a000,
            Self::UCVTF_z_p_z_x2s => 0x65d5a000,
            Self::SCVTF_z_p_z_x2d => 0x65d6a000,
            Self::UCVTF_z_p_z_x2d => 0x65d7a000,
            Self::FCVTZS_z_p_z_d2w => 0x65d8a000,
            Self::FCVTZU_z_p_z_d2w => 0x65d9a000,
            Self::FCVTZS_z_p_z_s2x => 0x65dca000,
            Self::FCVTZU_z_p_z_s2x => 0x65dda000,
            Self::FCVTZS_z_p_z_d2x => 0x65dea000,
            Self::FCVTZU_z_p_z_d2x => 0x65dfa000,
            Self::PTEST_p_p => 0x2550c000,
            Self::BRKN_p_p_pp => 0x25184000,
            Self::BRKAS_p_p_p_z => 0x25504000,
            Self::BRKNS_p_p_pp => 0x25584000,
            Self::BRKBS_p_p_p_z => 0x25d04000,
            Self::BRKA_p_p_p => 0x25104000,
            Self::BRKB_p_p_p => 0x25904000,
            Self::CSET_CSINC_32_condsel => 0x1a9f07e0,
            Self::CSETM_CSINV_32_condsel => 0x5a9f03e0,
            Self::CSET_CSINC_64_condsel => 0x9a9f07e0,
            Self::CSETM_CSINV_64_condsel => 0xda9f03e0,
            Self::UDF_only_perm_undef => 0x0,
            Self::SCVTF_S32_float2fix => 0x1e020000,
            Self::UCVTF_S32_float2fix => 0x1e030000,
            Self::FCVTZS_32S_float2fix => 0x1e180000,
            Self::FCVTZU_32S_float2fix => 0x1e190000,
            Self::SCVTF_D32_float2fix => 0x1e420000,
            Self::UCVTF_D32_float2fix => 0x1e430000,
            Self::FCVTZS_32D_float2fix => 0x1e580000,
            Self::FCVTZU_32D_float2fix => 0x1e590000,
            Self::SCVTF_H32_float2fix => 0x1ec20000,
            Self::UCVTF_H32_float2fix => 0x1ec30000,
            Self::FCVTZS_32H_float2fix => 0x1ed80000,
            Self::FCVTZU_32H_float2fix => 0x1ed90000,
            Self::SCVTF_S64_float2fix => 0x9e020000,
            Self::UCVTF_S64_float2fix => 0x9e030000,
            Self::FCVTZS_64S_float2fix => 0x9e180000,
            Self::FCVTZU_64S_float2fix => 0x9e190000,
            Self::SCVTF_D64_float2fix => 0x9e420000,
            Self::UCVTF_D64_float2fix => 0x9e430000,
            Self::FCVTZS_64D_float2fix => 0x9e580000,
            Self::FCVTZU_64D_float2fix => 0x9e590000,
            Self::SCVTF_H64_float2fix => 0x9ec20000,
            Self::UCVTF_H64_float2fix => 0x9ec30000,
            Self::FCVTZS_64H_float2fix => 0x9ed80000,
            Self::FCVTZU_64H_float2fix => 0x9ed90000,
            Self::ORN_orr_z_zi => 0x5000000,
            Self::ORR_z_zi => 0x5000000,
            Self::EON_eor_z_zi => 0x5400000,
            Self::EOR_z_zi => 0x5400000,
            Self::AND_z_zi => 0x5800000,
            Self::BIC_and_z_zi => 0x5800000,
            Self::DUPM_z_i => 0x5c00000,
            Self::MOV_dupm_z_i => 0x5c00000,
            Self::AT_SYS_CR_systeminstrs => 0xd5087800,
            Self::MOVI_asimdimm_D_ds => 0x2f00e400,
            Self::MOVI_asimdimm_D2_d => 0x6f00e400,
            Self::FMOV_asimdimm_D2_d => 0x6f00f400,
            Self::MSR_SI_pstate => 0xd500401f,
            Self::DC_SYS_CR_systeminstrs => 0xd5087000,
            Self::IC_SYS_CR_systeminstrs => 0xd5087000,
            Self::TLBI_SYS_CR_systeminstrs => 0xd5088000,
            Self::SYS_CR_systeminstrs => 0xd5080000,
            Self::SYSL_RC_systeminstrs => 0xd5280000,
            Self::CNTB_r_s => 0x420e000,
            Self::SQINCB_r_rs_sx => 0x420f000,
            Self::UQINCB_r_rs_uw => 0x420f400,
            Self::SQDECB_r_rs_sx => 0x420f800,
            Self::UQDECB_r_rs_uw => 0x420fc00,
            Self::INCB_r_rs => 0x430e000,
            Self::DECB_r_rs => 0x430e400,
            Self::SQINCB_r_rs_x => 0x430f000,
            Self::UQINCB_r_rs_x => 0x430f400,
            Self::SQDECB_r_rs_x => 0x430f800,
            Self::UQDECB_r_rs_x => 0x430fc00,
            Self::SQINCH_z_zs => 0x460c000,
            Self::UQINCH_z_zs => 0x460c400,
            Self::SQDECH_z_zs => 0x460c800,
            Self::UQDECH_z_zs => 0x460cc00,
            Self::CNTH_r_s => 0x460e000,
            Self::SQINCH_r_rs_sx => 0x460f000,
            Self::UQINCH_r_rs_uw => 0x460f400,
            Self::SQDECH_r_rs_sx => 0x460f800,
            Self::UQDECH_r_rs_uw => 0x460fc00,
            Self::INCH_z_zs => 0x470c000,
            Self::DECH_z_zs => 0x470c400,
            Self::INCH_r_rs => 0x470e000,
            Self::DECH_r_rs => 0x470e400,
            Self::SQINCH_r_rs_x => 0x470f000,
            Self::UQINCH_r_rs_x => 0x470f400,
            Self::SQDECH_r_rs_x => 0x470f800,
            Self::UQDECH_r_rs_x => 0x470fc00,
            Self::SQINCW_z_zs => 0x4a0c000,
            Self::UQINCW_z_zs => 0x4a0c400,
            Self::SQDECW_z_zs => 0x4a0c800,
            Self::UQDECW_z_zs => 0x4a0cc00,
            Self::CNTW_r_s => 0x4a0e000,
            Self::SQINCW_r_rs_sx => 0x4a0f000,
            Self::UQINCW_r_rs_uw => 0x4a0f400,
            Self::SQDECW_r_rs_sx => 0x4a0f800,
            Self::UQDECW_r_rs_uw => 0x4a0fc00,
            Self::INCW_z_zs => 0x4b0c000,
            Self::DECW_z_zs => 0x4b0c400,
            Self::INCW_r_rs => 0x4b0e000,
            Self::DECW_r_rs => 0x4b0e400,
            Self::SQINCW_r_rs_x => 0x4b0f000,
            Self::UQINCW_r_rs_x => 0x4b0f400,
            Self::SQDECW_r_rs_x => 0x4b0f800,
            Self::UQDECW_r_rs_x => 0x4b0fc00,
            Self::SQINCD_z_zs => 0x4e0c000,
            Self::UQINCD_z_zs => 0x4e0c400,
            Self::SQDECD_z_zs => 0x4e0c800,
            Self::UQDECD_z_zs => 0x4e0cc00,
            Self::CNTD_r_s => 0x4e0e000,
            Self::SQINCD_r_rs_sx => 0x4e0f000,
            Self::UQINCD_r_rs_uw => 0x4e0f400,
            Self::SQDECD_r_rs_sx => 0x4e0f800,
            Self::UQDECD_r_rs_uw => 0x4e0fc00,
            Self::INCD_z_zs => 0x4f0c000,
            Self::DECD_z_zs => 0x4f0c400,
            Self::INCD_r_rs => 0x4f0e000,
            Self::DECD_r_rs => 0x4f0e400,
            Self::SQINCD_r_rs_x => 0x4f0f000,
            Self::UQINCD_r_rs_x => 0x4f0f400,
            Self::SQDECD_r_rs_x => 0x4f0f800,
            Self::UQDECD_r_rs_x => 0x4f0fc00,
            Self::LD1RQB_z_p_bi_u8 => 0xa4002000,
            Self::LD1B_z_p_bi_u8 => 0xa400a000,
            Self::LDNT1B_z_p_bi_contiguous => 0xa400e000,
            Self::LDNF1B_z_p_bi_u8 => 0xa410a000,
            Self::LD1ROB_z_p_bi_u8 => 0xa4202000,
            Self::LD1B_z_p_bi_u16 => 0xa420a000,
            Self::LD2B_z_p_bi_contiguous => 0xa420e000,
            Self::LDNF1B_z_p_bi_u16 => 0xa430a000,
            Self::LD1B_z_p_bi_u32 => 0xa440a000,
            Self::LD3B_z_p_bi_contiguous => 0xa440e000,
            Self::LDNF1B_z_p_bi_u32 => 0xa450a000,
            Self::LD1B_z_p_bi_u64 => 0xa460a000,
            Self::LD4B_z_p_bi_contiguous => 0xa460e000,
            Self::LDNF1B_z_p_bi_u64 => 0xa470a000,
            Self::LD1RQH_z_p_bi_u16 => 0xa4802000,
            Self::LD1SW_z_p_bi_s64 => 0xa480a000,
            Self::LDNT1H_z_p_bi_contiguous => 0xa480e000,
            Self::LDNF1SW_z_p_bi_s64 => 0xa490a000,
            Self::LD1ROH_z_p_bi_u16 => 0xa4a02000,
            Self::LD1H_z_p_bi_u16 => 0xa4a0a000,
            Self::LD2H_z_p_bi_contiguous => 0xa4a0e000,
            Self::LDNF1H_z_p_bi_u16 => 0xa4b0a000,
            Self::LD1H_z_p_bi_u32 => 0xa4c0a000,
            Self::LD3H_z_p_bi_contiguous => 0xa4c0e000,
            Self::LDNF1H_z_p_bi_u32 => 0xa4d0a000,
            Self::LD1H_z_p_bi_u64 => 0xa4e0a000,
            Self::LD4H_z_p_bi_contiguous => 0xa4e0e000,
            Self::LDNF1H_z_p_bi_u64 => 0xa4f0a000,
            Self::LD1RQW_z_p_bi_u32 => 0xa5002000,
            Self::LD1SH_z_p_bi_s64 => 0xa500a000,
            Self::LDNT1W_z_p_bi_contiguous => 0xa500e000,
            Self::LDNF1SH_z_p_bi_s64 => 0xa510a000,
            Self::LD1ROW_z_p_bi_u32 => 0xa5202000,
            Self::LD1SH_z_p_bi_s32 => 0xa520a000,
            Self::LD2W_z_p_bi_contiguous => 0xa520e000,
            Self::LDNF1SH_z_p_bi_s32 => 0xa530a000,
            Self::LD1W_z_p_bi_u32 => 0xa540a000,
            Self::LD3W_z_p_bi_contiguous => 0xa540e000,
            Self::LDNF1W_z_p_bi_u32 => 0xa550a000,
            Self::LD1W_z_p_bi_u64 => 0xa560a000,
            Self::LD4W_z_p_bi_contiguous => 0xa560e000,
            Self::LDNF1W_z_p_bi_u64 => 0xa570a000,
            Self::LD1RQD_z_p_bi_u64 => 0xa5802000,
            Self::LD1SB_z_p_bi_s64 => 0xa580a000,
            Self::LDNT1D_z_p_bi_contiguous => 0xa580e000,
            Self::LDNF1SB_z_p_bi_s64 => 0xa590a000,
            Self::LD1ROD_z_p_bi_u64 => 0xa5a02000,
            Self::LD1SB_z_p_bi_s32 => 0xa5a0a000,
            Self::LD2D_z_p_bi_contiguous => 0xa5a0e000,
            Self::LDNF1SB_z_p_bi_s32 => 0xa5b0a000,
            Self::LD1SB_z_p_bi_s16 => 0xa5c0a000,
            Self::LD3D_z_p_bi_contiguous => 0xa5c0e000,
            Self::LDNF1SB_z_p_bi_s16 => 0xa5d0a000,
            Self::LD1D_z_p_bi_u64 => 0xa5e0a000,
            Self::LD4D_z_p_bi_contiguous => 0xa5e0e000,
            Self::LDNF1D_z_p_bi_u64 => 0xa5f0a000,
            Self::STNT1B_z_p_bi_contiguous => 0xe410e000,
            Self::ST2B_z_p_bi_contiguous => 0xe430e000,
            Self::ST3B_z_p_bi_contiguous => 0xe450e000,
            Self::ST4B_z_p_bi_contiguous => 0xe470e000,
            Self::STNT1H_z_p_bi_contiguous => 0xe490e000,
            Self::ST2H_z_p_bi_contiguous => 0xe4b0e000,
            Self::ST3H_z_p_bi_contiguous => 0xe4d0e000,
            Self::ST4H_z_p_bi_contiguous => 0xe4f0e000,
            Self::STNT1W_z_p_bi_contiguous => 0xe510e000,
            Self::ST2W_z_p_bi_contiguous => 0xe530e000,
            Self::ST3W_z_p_bi_contiguous => 0xe550e000,
            Self::ST4W_z_p_bi_contiguous => 0xe570e000,
            Self::STNT1D_z_p_bi_contiguous => 0xe590e000,
            Self::ST2D_z_p_bi_contiguous => 0xe5b0e000,
            Self::ST3D_z_p_bi_contiguous => 0xe5d0e000,
            Self::ST4D_z_p_bi_contiguous => 0xe5f0e000,
            Self::AND_p_p_pp_z => 0x25004000,
            Self::MOV_and_p_p_pp_z => 0x25004000,
            Self::BIC_p_p_pp_z => 0x25004010,
            Self::EOR_p_p_pp_z => 0x25004200,
            Self::NOT_eor_p_p_pp_z => 0x25004200,
            Self::MOV_sel_p_p_pp => 0x25004210,
            Self::SEL_p_p_pp => 0x25004210,
            Self::BRKPA_p_p_pp => 0x2500c000,
            Self::BRKPB_p_p_pp => 0x2500c010,
            Self::ANDS_p_p_pp_z => 0x25404000,
            Self::MOVS_ands_p_p_pp_z => 0x25404000,
            Self::BICS_p_p_pp_z => 0x25404010,
            Self::EORS_p_p_pp_z => 0x25404200,
            Self::NOTS_eors_p_p_pp_z => 0x25404200,
            Self::BRKPAS_p_p_pp => 0x2540c000,
            Self::BRKPBS_p_p_pp => 0x2540c010,
            Self::MOV_orr_p_p_pp_z => 0x25804000,
            Self::ORR_p_p_pp_z => 0x25804000,
            Self::ORN_p_p_pp_z => 0x25804010,
            Self::NOR_p_p_pp_z => 0x25804200,
            Self::NAND_p_p_pp_z => 0x25804210,
            Self::MOVS_orrs_p_p_pp_z => 0x25c04000,
            Self::ORRS_p_p_pp_z => 0x25c04000,
            Self::ORNS_p_p_pp_z => 0x25c04010,
            Self::NORS_p_p_pp_z => 0x25c04200,
            Self::NANDS_p_p_pp_z => 0x25c04210,
            Self::MSR_SR_systemmove => 0xd5100000,
            Self::MRS_RS_systemmove => 0xd5300000,
            Self::MOV_UMOV_asimdins_X_x => 0x4e083c00,
            Self::UMOV_asimdins_X_x => 0x4e083c00,
            Self::MOV_UMOV_asimdins_W_w => 0xe043c00,
            Self::MOV_ORR_32_log_shift => 0x2a0003e0,
            Self::NGC_SBC_32_addsub_carry => 0x5a0003e0,
            Self::NGCS_SBCS_32_addsub_carry => 0x7a0003e0,
            Self::MOV_ORR_64_log_shift => 0xaa0003e0,
            Self::NGC_SBC_64_addsub_carry => 0xda0003e0,
            Self::NGCS_SBCS_64_addsub_carry => 0xfa0003e0,
            Self::FCMP_S_floatcmp => 0x1e202000,
            Self::FCMP_SZ_floatcmp => 0x1e202008,
            Self::FCMPE_S_floatcmp => 0x1e202010,
            Self::FCMPE_SZ_floatcmp => 0x1e202018,
            Self::FCMP_D_floatcmp => 0x1e602000,
            Self::FCMP_DZ_floatcmp => 0x1e602008,
            Self::FCMPE_D_floatcmp => 0x1e602010,
            Self::FCMPE_DZ_floatcmp => 0x1e602018,
            Self::FCMP_H_floatcmp => 0x1ee02000,
            Self::FCMP_HZ_floatcmp => 0x1ee02008,
            Self::FCMPE_H_floatcmp => 0x1ee02010,
            Self::FCMPE_HZ_floatcmp => 0x1ee02018,
            Self::STADDB_LDADDB_32_memop => 0x3820001f,
            Self::STCLRB_LDCLRB_32_memop => 0x3820101f,
            Self::STEORB_LDEORB_32_memop => 0x3820201f,
            Self::STSETB_LDSETB_32_memop => 0x3820301f,
            Self::STSMAXB_LDSMAXB_32_memop => 0x3820401f,
            Self::STSMINB_LDSMINB_32_memop => 0x3820501f,
            Self::STUMAXB_LDUMAXB_32_memop => 0x3820601f,
            Self::STUMINB_LDUMINB_32_memop => 0x3820701f,
            Self::STADDLB_LDADDLB_32_memop => 0x3860001f,
            Self::STCLRLB_LDCLRLB_32_memop => 0x3860101f,
            Self::STEORLB_LDEORLB_32_memop => 0x3860201f,
            Self::STSETLB_LDSETLB_32_memop => 0x3860301f,
            Self::STSMAXLB_LDSMAXLB_32_memop => 0x3860401f,
            Self::STSMINLB_LDSMINLB_32_memop => 0x3860501f,
            Self::STUMAXLB_LDUMAXLB_32_memop => 0x3860601f,
            Self::STUMINLB_LDUMINLB_32_memop => 0x3860701f,
            Self::STADDH_LDADDH_32_memop => 0x7820001f,
            Self::STCLRH_LDCLRH_32_memop => 0x7820101f,
            Self::STEORH_LDEORH_32_memop => 0x7820201f,
            Self::STSETH_LDSETH_32_memop => 0x7820301f,
            Self::STSMAXH_LDSMAXH_32_memop => 0x7820401f,
            Self::STSMINH_LDSMINH_32_memop => 0x7820501f,
            Self::STUMAXH_LDUMAXH_32_memop => 0x7820601f,
            Self::STUMINH_LDUMINH_32_memop => 0x7820701f,
            Self::STADDLH_LDADDLH_32_memop => 0x7860001f,
            Self::STCLRLH_LDCLRLH_32_memop => 0x7860101f,
            Self::STEORLH_LDEORLH_32_memop => 0x7860201f,
            Self::STSETLH_LDSETLH_32_memop => 0x7860301f,
            Self::STSMAXLH_LDSMAXLH_32_memop => 0x7860401f,
            Self::STSMINLH_LDSMINLH_32_memop => 0x7860501f,
            Self::STUMAXLH_LDUMAXLH_32_memop => 0x7860601f,
            Self::STUMINLH_LDUMINLH_32_memop => 0x7860701f,
            Self::STADD_LDADD_32_memop => 0xb820001f,
            Self::STCLR_LDCLR_32_memop => 0xb820101f,
            Self::STEOR_LDEOR_32_memop => 0xb820201f,
            Self::STSET_LDSET_32_memop => 0xb820301f,
            Self::STSMAX_LDSMAX_32_memop => 0xb820401f,
            Self::STSMIN_LDSMIN_32_memop => 0xb820501f,
            Self::STUMAX_LDUMAX_32_memop => 0xb820601f,
            Self::STUMIN_LDUMIN_32_memop => 0xb820701f,
            Self::STADDL_LDADDL_32_memop => 0xb860001f,
            Self::STCLRL_LDCLRL_32_memop => 0xb860101f,
            Self::STEORL_LDEORL_32_memop => 0xb860201f,
            Self::STSETL_LDSETL_32_memop => 0xb860301f,
            Self::STSMAXL_LDSMAXL_32_memop => 0xb860401f,
            Self::STSMINL_LDSMINL_32_memop => 0xb860501f,
            Self::STUMAXL_LDUMAXL_32_memop => 0xb860601f,
            Self::STUMINL_LDUMINL_32_memop => 0xb860701f,
            Self::CMPP_SUBPS_64S_dp_2src => 0xbac0001f,
            Self::STADD_LDADD_64_memop => 0xf820001f,
            Self::STCLR_LDCLR_64_memop => 0xf820101f,
            Self::STEOR_LDEOR_64_memop => 0xf820201f,
            Self::STSET_LDSET_64_memop => 0xf820301f,
            Self::STSMAX_LDSMAX_64_memop => 0xf820401f,
            Self::STSMIN_LDSMIN_64_memop => 0xf820501f,
            Self::STUMAX_LDUMAX_64_memop => 0xf820601f,
            Self::STUMIN_LDUMIN_64_memop => 0xf820701f,
            Self::STADDL_LDADDL_64_memop => 0xf860001f,
            Self::STCLRL_LDCLRL_64_memop => 0xf860101f,
            Self::STEORL_LDEORL_64_memop => 0xf860201f,
            Self::STSETL_LDSETL_64_memop => 0xf860301f,
            Self::STSMAXL_LDSMAXL_64_memop => 0xf860401f,
            Self::STSMINL_LDSMINL_64_memop => 0xf860501f,
            Self::STUMAXL_LDUMAXL_64_memop => 0xf860601f,
            Self::STUMINL_LDUMINL_64_memop => 0xf860701f,
            Self::AND_z_zz => 0x4203000,
            Self::MOV_orr_z_zz => 0x4603000,
            Self::ORR_z_zz => 0x4603000,
            Self::EOR_z_zz => 0x4a03000,
            Self::BIC_z_zz => 0x4e03000,
            Self::ZIP1_z_zz_q => 0x5a00000,
            Self::ZIP2_z_zz_q => 0x5a00400,
            Self::UZP1_z_zz_q => 0x5a00800,
            Self::UZP2_z_zz_q => 0x5a00c00,
            Self::TRN1_z_zz_q => 0x5a01800,
            Self::TRN2_z_zz_q => 0x5a01c00,
            Self::CASP_CP32_ldstexcl => 0x8207c00,
            Self::CASPL_CP32_ldstexcl => 0x820fc00,
            Self::CASPA_CP32_ldstexcl => 0x8607c00,
            Self::CASPAL_CP32_ldstexcl => 0x860fc00,
            Self::CASB_C32_ldstexcl => 0x8a07c00,
            Self::CASLB_C32_ldstexcl => 0x8a0fc00,
            Self::CASAB_C32_ldstexcl => 0x8e07c00,
            Self::CASALB_C32_ldstexcl => 0x8e0fc00,
            Self::SMOV_asimdins_W_w => 0xe002c00,
            Self::UMOV_asimdins_W_w => 0xe003c00,
            Self::ADC_32_addsub_carry => 0x1a000000,
            Self::UDIV_32_dp_2src => 0x1ac00800,
            Self::SDIV_32_dp_2src => 0x1ac00c00,
            Self::LSL_LSLV_32_dp_2src => 0x1ac02000,
            Self::LSLV_32_dp_2src => 0x1ac02000,
            Self::LSR_LSRV_32_dp_2src => 0x1ac02400,
            Self::LSRV_32_dp_2src => 0x1ac02400,
            Self::ASR_ASRV_32_dp_2src => 0x1ac02800,
            Self::ASRV_32_dp_2src => 0x1ac02800,
            Self::ROR_RORV_32_dp_2src => 0x1ac02c00,
            Self::RORV_32_dp_2src => 0x1ac02c00,
            Self::CRC32B_32C_dp_2src => 0x1ac04000,
            Self::CRC32H_32C_dp_2src => 0x1ac04400,
            Self::CRC32W_32C_dp_2src => 0x1ac04800,
            Self::CRC32CB_32C_dp_2src => 0x1ac05000,
            Self::CRC32CH_32C_dp_2src => 0x1ac05400,
            Self::CRC32CW_32C_dp_2src => 0x1ac05800,
            Self::MUL_MADD_32A_dp_3src => 0x1b007c00,
            Self::MNEG_MSUB_32A_dp_3src => 0x1b00fc00,
            Self::FMUL_S_floatdp2 => 0x1e200800,
            Self::FDIV_S_floatdp2 => 0x1e201800,
            Self::FADD_S_floatdp2 => 0x1e202800,
            Self::FSUB_S_floatdp2 => 0x1e203800,
            Self::FMAX_S_floatdp2 => 0x1e204800,
            Self::FMIN_S_floatdp2 => 0x1e205800,
            Self::FMAXNM_S_floatdp2 => 0x1e206800,
            Self::FMINNM_S_floatdp2 => 0x1e207800,
            Self::FNMUL_S_floatdp2 => 0x1e208800,
            Self::FMUL_D_floatdp2 => 0x1e600800,
            Self::FDIV_D_floatdp2 => 0x1e601800,
            Self::FADD_D_floatdp2 => 0x1e602800,
            Self::FSUB_D_floatdp2 => 0x1e603800,
            Self::FMAX_D_floatdp2 => 0x1e604800,
            Self::FMIN_D_floatdp2 => 0x1e605800,
            Self::FMAXNM_D_floatdp2 => 0x1e606800,
            Self::FMINNM_D_floatdp2 => 0x1e607800,
            Self::FNMUL_D_floatdp2 => 0x1e608800,
            Self::FMUL_H_floatdp2 => 0x1ee00800,
            Self::FDIV_H_floatdp2 => 0x1ee01800,
            Self::FADD_H_floatdp2 => 0x1ee02800,
            Self::FSUB_H_floatdp2 => 0x1ee03800,
            Self::FMAX_H_floatdp2 => 0x1ee04800,
            Self::FMIN_H_floatdp2 => 0x1ee05800,
            Self::FMAXNM_H_floatdp2 => 0x1ee06800,
            Self::FMINNM_H_floatdp2 => 0x1ee07800,
            Self::FNMUL_H_floatdp2 => 0x1ee08800,
            Self::LDADDB_32_memop => 0x38200000,
            Self::LDCLRB_32_memop => 0x38201000,
            Self::LDEORB_32_memop => 0x38202000,
            Self::LDSETB_32_memop => 0x38203000,
            Self::LDSMAXB_32_memop => 0x38204000,
            Self::LDSMINB_32_memop => 0x38205000,
            Self::LDUMAXB_32_memop => 0x38206000,
            Self::LDUMINB_32_memop => 0x38207000,
            Self::SWPB_32_memop => 0x38208000,
            Self::LDADDLB_32_memop => 0x38600000,
            Self::LDCLRLB_32_memop => 0x38601000,
            Self::LDEORLB_32_memop => 0x38602000,
            Self::LDSETLB_32_memop => 0x38603000,
            Self::LDSMAXLB_32_memop => 0x38604000,
            Self::LDSMINLB_32_memop => 0x38605000,
            Self::LDUMAXLB_32_memop => 0x38606000,
            Self::LDUMINLB_32_memop => 0x38607000,
            Self::SWPLB_32_memop => 0x38608000,
            Self::LDADDAB_32_memop => 0x38a00000,
            Self::LDCLRAB_32_memop => 0x38a01000,
            Self::LDEORAB_32_memop => 0x38a02000,
            Self::LDSETAB_32_memop => 0x38a03000,
            Self::LDSMAXAB_32_memop => 0x38a04000,
            Self::LDSMINAB_32_memop => 0x38a05000,
            Self::LDUMAXAB_32_memop => 0x38a06000,
            Self::LDUMINAB_32_memop => 0x38a07000,
            Self::SWPAB_32_memop => 0x38a08000,
            Self::LDAPRB_32L_memop => 0x38a0c000,
            Self::LDADDALB_32_memop => 0x38e00000,
            Self::LDCLRALB_32_memop => 0x38e01000,
            Self::LDEORALB_32_memop => 0x38e02000,
            Self::LDSETALB_32_memop => 0x38e03000,
            Self::LDSMAXALB_32_memop => 0x38e04000,
            Self::LDSMINALB_32_memop => 0x38e05000,
            Self::LDUMAXALB_32_memop => 0x38e06000,
            Self::LDUMINALB_32_memop => 0x38e07000,
            Self::SWPALB_32_memop => 0x38e08000,
            Self::ADCS_32_addsub_carry => 0x3a000000,
            Self::USDOT_z_zzz_s => 0x44807800,
            Self::SDOT_z_zzzi_s => 0x44a00000,
            Self::UDOT_z_zzzi_s => 0x44a00400,
            Self::USDOT_z_zzzi_s => 0x44a01800,
            Self::SUDOT_z_zzzi_s => 0x44a01c00,
            Self::SDOT_z_zzzi_d => 0x44e00000,
            Self::UDOT_z_zzzi_d => 0x44e00400,
            Self::SMMLA_z_zzz => 0x45009800,
            Self::USMMLA_z_zzz => 0x45809800,
            Self::UMMLA_z_zzz => 0x45c09800,
            Self::CASP_CP64_ldstexcl => 0x48207c00,
            Self::CASPL_CP64_ldstexcl => 0x4820fc00,
            Self::CASPA_CP64_ldstexcl => 0x48607c00,
            Self::CASPAL_CP64_ldstexcl => 0x4860fc00,
            Self::CASH_C32_ldstexcl => 0x48a07c00,
            Self::CASLH_C32_ldstexcl => 0x48a0fc00,
            Self::CASAH_C32_ldstexcl => 0x48e07c00,
            Self::CASALH_C32_ldstexcl => 0x48e0fc00,
            Self::INS_asimdins_IR_r => 0x4e001c00,
            Self::MOV_INS_asimdins_IR_r => 0x4e001c00,
            Self::SMOV_asimdins_X_x => 0x4e002c00,
            Self::SMMLA_asimdsame2_G => 0x4e80a400,
            Self::USMMLA_asimdsame2_G => 0x4e80ac00,
            Self::SBC_32_addsub_carry => 0x5a000000,
            Self::SHA1C_QSV_cryptosha3 => 0x5e000000,
            Self::DUP_asisdone_only => 0x5e000400,
            Self::MOV_DUP_asisdone_only => 0x5e000400,
            Self::SHA1P_QSV_cryptosha3 => 0x5e001000,
            Self::SHA1M_QSV_cryptosha3 => 0x5e002000,
            Self::SHA1SU0_VVV_cryptosha3 => 0x5e003000,
            Self::SHA256H_QQV_cryptosha3 => 0x5e004000,
            Self::SHA256H2_QQV_cryptosha3 => 0x5e005000,
            Self::SHA256SU1_VVV_cryptosha3 => 0x5e006000,
            Self::FMULX_asisdsamefp16_only => 0x5e401c00,
            Self::FCMEQ_asisdsamefp16_only => 0x5e402400,
            Self::FRECPS_asisdsamefp16_only => 0x5e403c00,
            Self::FRSQRTS_asisdsamefp16_only => 0x5ec03c00,
            Self::BFDOT_z_zzzi => 0x64604000,
            Self::BFDOT_z_zzz => 0x64608000,
            Self::BFMMLA_z_zzz => 0x6460e400,
            Self::FMLA_z_zzzi_s => 0x64a00000,
            Self::FMLS_z_zzzi_s => 0x64a00400,
            Self::FMUL_z_zzi_s => 0x64a02000,
            Self::FMMLA_z_zzz_s => 0x64a0e400,
            Self::FMLA_z_zzzi_d => 0x64e00000,
            Self::FMLS_z_zzzi_d => 0x64e00400,
            Self::FMUL_z_zzi_d => 0x64e02000,
            Self::BFMLALB_z_zzz => 0x64e08000,
            Self::BFMLALT_z_zzz => 0x64e08400,
            Self::FMMLA_z_zzz_d => 0x64e0e400,
            Self::BFMMLA_asimdsame2_E => 0x6e40ec00,
            Self::UMMLA_asimdsame2_G => 0x6e80a400,
            Self::LDADDH_32_memop => 0x78200000,
            Self::LDCLRH_32_memop => 0x78201000,
            Self::LDEORH_32_memop => 0x78202000,
            Self::LDSETH_32_memop => 0x78203000,
            Self::LDSMAXH_32_memop => 0x78204000,
            Self::LDSMINH_32_memop => 0x78205000,
            Self::LDUMAXH_32_memop => 0x78206000,
            Self::LDUMINH_32_memop => 0x78207000,
            Self::SWPH_32_memop => 0x78208000,
            Self::LDADDLH_32_memop => 0x78600000,
            Self::LDCLRLH_32_memop => 0x78601000,
            Self::LDEORLH_32_memop => 0x78602000,
            Self::LDSETLH_32_memop => 0x78603000,
            Self::LDSMAXLH_32_memop => 0x78604000,
            Self::LDSMINLH_32_memop => 0x78605000,
            Self::LDUMAXLH_32_memop => 0x78606000,
            Self::LDUMINLH_32_memop => 0x78607000,
            Self::SWPLH_32_memop => 0x78608000,
            Self::LDADDAH_32_memop => 0x78a00000,
            Self::LDCLRAH_32_memop => 0x78a01000,
            Self::LDEORAH_32_memop => 0x78a02000,
            Self::LDSETAH_32_memop => 0x78a03000,
            Self::LDSMAXAH_32_memop => 0x78a04000,
            Self::LDSMINAH_32_memop => 0x78a05000,
            Self::LDUMAXAH_32_memop => 0x78a06000,
            Self::LDUMINAH_32_memop => 0x78a07000,
            Self::SWPAH_32_memop => 0x78a08000,
            Self::LDAPRH_32L_memop => 0x78a0c000,
            Self::LDADDALH_32_memop => 0x78e00000,
            Self::LDCLRALH_32_memop => 0x78e01000,
            Self::LDEORALH_32_memop => 0x78e02000,
            Self::LDSETALH_32_memop => 0x78e03000,
            Self::LDSMAXALH_32_memop => 0x78e04000,
            Self::LDSMINALH_32_memop => 0x78e05000,
            Self::LDUMAXALH_32_memop => 0x78e06000,
            Self::LDUMINALH_32_memop => 0x78e07000,
            Self::SWPALH_32_memop => 0x78e08000,
            Self::SBCS_32_addsub_carry => 0x7a000000,
            Self::FCMGE_asisdsamefp16_only => 0x7e402400,
            Self::FACGE_asisdsamefp16_only => 0x7e402c00,
            Self::FABD_asisdsamefp16_only => 0x7ec01400,
            Self::FCMGT_asisdsamefp16_only => 0x7ec02400,
            Self::FACGT_asisdsamefp16_only => 0x7ec02c00,
            Self::CAS_C32_ldstexcl => 0x88a07c00,
            Self::CASL_C32_ldstexcl => 0x88a0fc00,
            Self::CASA_C32_ldstexcl => 0x88e07c00,
            Self::CASAL_C32_ldstexcl => 0x88e0fc00,
            Self::ADC_64_addsub_carry => 0x9a000000,
            Self::SUBP_64S_dp_2src => 0x9ac00000,
            Self::UDIV_64_dp_2src => 0x9ac00800,
            Self::SDIV_64_dp_2src => 0x9ac00c00,
            Self::IRG_64I_dp_2src => 0x9ac01000,
            Self::GMI_64G_dp_2src => 0x9ac01400,
            Self::LSL_LSLV_64_dp_2src => 0x9ac02000,
            Self::LSLV_64_dp_2src => 0x9ac02000,
            Self::LSR_LSRV_64_dp_2src => 0x9ac02400,
            Self::LSRV_64_dp_2src => 0x9ac02400,
            Self::ASR_ASRV_64_dp_2src => 0x9ac02800,
            Self::ASRV_64_dp_2src => 0x9ac02800,
            Self::ROR_RORV_64_dp_2src => 0x9ac02c00,
            Self::RORV_64_dp_2src => 0x9ac02c00,
            Self::PACGA_64P_dp_2src => 0x9ac03000,
            Self::CRC32X_64C_dp_2src => 0x9ac04c00,
            Self::CRC32CX_64C_dp_2src => 0x9ac05c00,
            Self::MUL_MADD_64A_dp_3src => 0x9b007c00,
            Self::MNEG_MSUB_64A_dp_3src => 0x9b00fc00,
            Self::SMULL_SMADDL_64WA_dp_3src => 0x9b207c00,
            Self::SMNEGL_SMSUBL_64WA_dp_3src => 0x9b20fc00,
            Self::UMULL_UMADDL_64WA_dp_3src => 0x9ba07c00,
            Self::UMNEGL_UMSUBL_64WA_dp_3src => 0x9ba0fc00,
            Self::LDADD_32_memop => 0xb8200000,
            Self::LDCLR_32_memop => 0xb8201000,
            Self::LDEOR_32_memop => 0xb8202000,
            Self::LDSET_32_memop => 0xb8203000,
            Self::LDSMAX_32_memop => 0xb8204000,
            Self::LDSMIN_32_memop => 0xb8205000,
            Self::LDUMAX_32_memop => 0xb8206000,
            Self::LDUMIN_32_memop => 0xb8207000,
            Self::SWP_32_memop => 0xb8208000,
            Self::LDADDL_32_memop => 0xb8600000,
            Self::LDCLRL_32_memop => 0xb8601000,
            Self::LDEORL_32_memop => 0xb8602000,
            Self::LDSETL_32_memop => 0xb8603000,
            Self::LDSMAXL_32_memop => 0xb8604000,
            Self::LDSMINL_32_memop => 0xb8605000,
            Self::LDUMAXL_32_memop => 0xb8606000,
            Self::LDUMINL_32_memop => 0xb8607000,
            Self::SWPL_32_memop => 0xb8608000,
            Self::LDADDA_32_memop => 0xb8a00000,
            Self::LDCLRA_32_memop => 0xb8a01000,
            Self::LDEORA_32_memop => 0xb8a02000,
            Self::LDSETA_32_memop => 0xb8a03000,
            Self::LDSMAXA_32_memop => 0xb8a04000,
            Self::LDSMINA_32_memop => 0xb8a05000,
            Self::LDUMAXA_32_memop => 0xb8a06000,
            Self::LDUMINA_32_memop => 0xb8a07000,
            Self::SWPA_32_memop => 0xb8a08000,
            Self::LDAPR_32L_memop => 0xb8a0c000,
            Self::LDADDAL_32_memop => 0xb8e00000,
            Self::LDCLRAL_32_memop => 0xb8e01000,
            Self::LDEORAL_32_memop => 0xb8e02000,
            Self::LDSETAL_32_memop => 0xb8e03000,
            Self::LDSMAXAL_32_memop => 0xb8e04000,
            Self::LDSMINAL_32_memop => 0xb8e05000,
            Self::LDUMAXAL_32_memop => 0xb8e06000,
            Self::LDUMINAL_32_memop => 0xb8e07000,
            Self::SWPAL_32_memop => 0xb8e08000,
            Self::ADCS_64_addsub_carry => 0xba000000,
            Self::SUBPS_64S_dp_2src => 0xbac00000,
            Self::CAS_C64_ldstexcl => 0xc8a07c00,
            Self::CASL_C64_ldstexcl => 0xc8a0fc00,
            Self::CASA_C64_ldstexcl => 0xc8e07c00,
            Self::CASAL_C64_ldstexcl => 0xc8e0fc00,
            Self::SHA512H_QQV_cryptosha512_3 => 0xce608000,
            Self::SHA512H2_QQV_cryptosha512_3 => 0xce608400,
            Self::SHA512SU1_VVV2_cryptosha512_3 => 0xce608800,
            Self::RAX1_VVV2_cryptosha512_3 => 0xce608c00,
            Self::SM3PARTW1_VVV4_cryptosha512_3 => 0xce60c000,
            Self::SM3PARTW2_VVV4_cryptosha512_3 => 0xce60c400,
            Self::SM4EKEY_VVV4_cryptosha512_3 => 0xce60c800,
            Self::SBC_64_addsub_carry => 0xda000000,
            Self::LDADD_64_memop => 0xf8200000,
            Self::LDCLR_64_memop => 0xf8201000,
            Self::LDEOR_64_memop => 0xf8202000,
            Self::LDSET_64_memop => 0xf8203000,
            Self::LDSMAX_64_memop => 0xf8204000,
            Self::LDSMIN_64_memop => 0xf8205000,
            Self::LDUMAX_64_memop => 0xf8206000,
            Self::LDUMIN_64_memop => 0xf8207000,
            Self::SWP_64_memop => 0xf8208000,
            Self::ST64BV0_64_memop => 0xf820a000,
            Self::ST64BV_64_memop => 0xf820b000,
            Self::LDADDL_64_memop => 0xf8600000,
            Self::LDCLRL_64_memop => 0xf8601000,
            Self::LDEORL_64_memop => 0xf8602000,
            Self::LDSETL_64_memop => 0xf8603000,
            Self::LDSMAXL_64_memop => 0xf8604000,
            Self::LDSMINL_64_memop => 0xf8605000,
            Self::LDUMAXL_64_memop => 0xf8606000,
            Self::LDUMINL_64_memop => 0xf8607000,
            Self::SWPL_64_memop => 0xf8608000,
            Self::LDADDA_64_memop => 0xf8a00000,
            Self::LDCLRA_64_memop => 0xf8a01000,
            Self::LDEORA_64_memop => 0xf8a02000,
            Self::LDSETA_64_memop => 0xf8a03000,
            Self::LDSMAXA_64_memop => 0xf8a04000,
            Self::LDSMINA_64_memop => 0xf8a05000,
            Self::LDUMAXA_64_memop => 0xf8a06000,
            Self::LDUMINA_64_memop => 0xf8a07000,
            Self::SWPA_64_memop => 0xf8a08000,
            Self::LDAPR_64L_memop => 0xf8a0c000,
            Self::LDADDAL_64_memop => 0xf8e00000,
            Self::LDCLRAL_64_memop => 0xf8e01000,
            Self::LDEORAL_64_memop => 0xf8e02000,
            Self::LDSETAL_64_memop => 0xf8e03000,
            Self::LDSMAXAL_64_memop => 0xf8e04000,
            Self::LDSMINAL_64_memop => 0xf8e05000,
            Self::LDUMAXAL_64_memop => 0xf8e06000,
            Self::LDUMINAL_64_memop => 0xf8e07000,
            Self::SWPAL_64_memop => 0xf8e08000,
            Self::SBCS_64_addsub_carry => 0xfa000000,
            Self::ADDVL_r_ri => 0x4205000,
            Self::ADDPL_r_ri => 0x4605000,
            Self::BFMLALB_z_zzzi => 0x64e04000,
            Self::BFMLALT_z_zzzi => 0x64e04400,
            Self::ADR_z_az_d_s32_scaled => 0x420a000,
            Self::ADR_z_az_d_u32_scaled => 0x460a000,
            Self::FCMLA_z_zzzi_h => 0x64a01000,
            Self::FCMLA_z_zzzi_s => 0x64e01000,
            Self::STRB_32BL_ldst_regoff => 0x38206800,
            Self::LDRB_32BL_ldst_regoff => 0x38606800,
            Self::LDRSB_64BL_ldst_regoff => 0x38a06800,
            Self::LDRSB_32BL_ldst_regoff => 0x38e06800,
            Self::STR_BL_ldst_regoff => 0x3c206800,
            Self::LDR_BL_ldst_regoff => 0x3c606800,
            Self::PRFB_i_p_br_s => 0x8400c000,
            Self::PRFB_i_p_ai_s => 0x8400e000,
            Self::PRFH_i_p_br_s => 0x8480c000,
            Self::PRFH_i_p_ai_s => 0x8480e000,
            Self::PRFW_i_p_br_s => 0x8500c000,
            Self::PRFW_i_p_ai_s => 0x8500e000,
            Self::PRFD_i_p_br_s => 0x8580c000,
            Self::PRFD_i_p_ai_s => 0x8580e000,
            Self::PRFB_i_p_ai_d => 0xc400e000,
            Self::PRFB_i_p_bz_d_64_scaled => 0xc4608000,
            Self::PRFH_i_p_bz_d_64_scaled => 0xc460a000,
            Self::PRFW_i_p_bz_d_64_scaled => 0xc460c000,
            Self::PRFD_i_p_bz_d_64_scaled => 0xc460e000,
            Self::PRFH_i_p_ai_d => 0xc480e000,
            Self::PRFW_i_p_ai_d => 0xc500e000,
            Self::PRFD_i_p_ai_d => 0xc580e000,
            Self::EXT_z_zi_des => 0x5200000,
            Self::LD1SB_z_p_ai_s => 0x84208000,
            Self::LDFF1SB_z_p_ai_s => 0x8420a000,
            Self::LD1B_z_p_ai_s => 0x8420c000,
            Self::LDFF1B_z_p_ai_s => 0x8420e000,
            Self::LD1SH_z_p_ai_s => 0x84a08000,
            Self::LDFF1SH_z_p_ai_s => 0x84a0a000,
            Self::LD1H_z_p_ai_s => 0x84a0c000,
            Self::LDFF1H_z_p_ai_s => 0x84a0e000,
            Self::LD1W_z_p_ai_s => 0x8520c000,
            Self::LDFF1W_z_p_ai_s => 0x8520e000,
            Self::LD1RQB_z_p_br_contiguous => 0xa4000000,
            Self::LD1B_z_p_br_u8 => 0xa4004000,
            Self::LDFF1B_z_p_br_u8 => 0xa4006000,
            Self::LDNT1B_z_p_br_contiguous => 0xa400c000,
            Self::LD1ROB_z_p_br_contiguous => 0xa4200000,
            Self::LD1B_z_p_br_u16 => 0xa4204000,
            Self::LDFF1B_z_p_br_u16 => 0xa4206000,
            Self::LD2B_z_p_br_contiguous => 0xa420c000,
            Self::LD1B_z_p_br_u32 => 0xa4404000,
            Self::LDFF1B_z_p_br_u32 => 0xa4406000,
            Self::LD3B_z_p_br_contiguous => 0xa440c000,
            Self::LD1B_z_p_br_u64 => 0xa4604000,
            Self::LDFF1B_z_p_br_u64 => 0xa4606000,
            Self::LD4B_z_p_br_contiguous => 0xa460c000,
            Self::LD1RQH_z_p_br_contiguous => 0xa4800000,
            Self::LD1SW_z_p_br_s64 => 0xa4804000,
            Self::LDFF1SW_z_p_br_s64 => 0xa4806000,
            Self::LDNT1H_z_p_br_contiguous => 0xa480c000,
            Self::LD1ROH_z_p_br_contiguous => 0xa4a00000,
            Self::LD1H_z_p_br_u16 => 0xa4a04000,
            Self::LDFF1H_z_p_br_u16 => 0xa4a06000,
            Self::LD2H_z_p_br_contiguous => 0xa4a0c000,
            Self::LD1H_z_p_br_u32 => 0xa4c04000,
            Self::LDFF1H_z_p_br_u32 => 0xa4c06000,
            Self::LD3H_z_p_br_contiguous => 0xa4c0c000,
            Self::LD1H_z_p_br_u64 => 0xa4e04000,
            Self::LDFF1H_z_p_br_u64 => 0xa4e06000,
            Self::LD4H_z_p_br_contiguous => 0xa4e0c000,
            Self::LD1RQW_z_p_br_contiguous => 0xa5000000,
            Self::LD1SH_z_p_br_s64 => 0xa5004000,
            Self::LDFF1SH_z_p_br_s64 => 0xa5006000,
            Self::LDNT1W_z_p_br_contiguous => 0xa500c000,
            Self::LD1ROW_z_p_br_contiguous => 0xa5200000,
            Self::LD1SH_z_p_br_s32 => 0xa5204000,
            Self::LDFF1SH_z_p_br_s32 => 0xa5206000,
            Self::LD2W_z_p_br_contiguous => 0xa520c000,
            Self::LD1W_z_p_br_u32 => 0xa5404000,
            Self::LDFF1W_z_p_br_u32 => 0xa5406000,
            Self::LD3W_z_p_br_contiguous => 0xa540c000,
            Self::LD1W_z_p_br_u64 => 0xa5604000,
            Self::LDFF1W_z_p_br_u64 => 0xa5606000,
            Self::LD4W_z_p_br_contiguous => 0xa560c000,
            Self::LD1RQD_z_p_br_contiguous => 0xa5800000,
            Self::LD1SB_z_p_br_s64 => 0xa5804000,
            Self::LDFF1SB_z_p_br_s64 => 0xa5806000,
            Self::LDNT1D_z_p_br_contiguous => 0xa580c000,
            Self::LD1ROD_z_p_br_contiguous => 0xa5a00000,
            Self::LD1SB_z_p_br_s32 => 0xa5a04000,
            Self::LDFF1SB_z_p_br_s32 => 0xa5a06000,
            Self::LD2D_z_p_br_contiguous => 0xa5a0c000,
            Self::LD1SB_z_p_br_s16 => 0xa5c04000,
            Self::LDFF1SB_z_p_br_s16 => 0xa5c06000,
            Self::LD3D_z_p_br_contiguous => 0xa5c0c000,
            Self::LD1D_z_p_br_u64 => 0xa5e04000,
            Self::LDFF1D_z_p_br_u64 => 0xa5e06000,
            Self::LD4D_z_p_br_contiguous => 0xa5e0c000,
            Self::LD1SB_z_p_ai_d => 0xc4208000,
            Self::LDFF1SB_z_p_ai_d => 0xc420a000,
            Self::LD1B_z_p_ai_d => 0xc420c000,
            Self::LDFF1B_z_p_ai_d => 0xc420e000,
            Self::LD1SB_z_p_bz_d_64_unscaled => 0xc4408000,
            Self::LDFF1SB_z_p_bz_d_64_unscaled => 0xc440a000,
            Self::LD1B_z_p_bz_d_64_unscaled => 0xc440c000,
            Self::LDFF1B_z_p_bz_d_64_unscaled => 0xc440e000,
            Self::LD1SH_z_p_ai_d => 0xc4a08000,
            Self::LDFF1SH_z_p_ai_d => 0xc4a0a000,
            Self::LD1H_z_p_ai_d => 0xc4a0c000,
            Self::LDFF1H_z_p_ai_d => 0xc4a0e000,
            Self::LD1SH_z_p_bz_d_64_unscaled => 0xc4c08000,
            Self::LDFF1SH_z_p_bz_d_64_unscaled => 0xc4c0a000,
            Self::LD1H_z_p_bz_d_64_unscaled => 0xc4c0c000,
            Self::LDFF1H_z_p_bz_d_64_unscaled => 0xc4c0e000,
            Self::LD1SH_z_p_bz_d_64_scaled => 0xc4e08000,
            Self::LDFF1SH_z_p_bz_d_64_scaled => 0xc4e0a000,
            Self::LD1H_z_p_bz_d_64_scaled => 0xc4e0c000,
            Self::LDFF1H_z_p_bz_d_64_scaled => 0xc4e0e000,
            Self::LD1SW_z_p_ai_d => 0xc5208000,
            Self::LDFF1SW_z_p_ai_d => 0xc520a000,
            Self::LD1W_z_p_ai_d => 0xc520c000,
            Self::LDFF1W_z_p_ai_d => 0xc520e000,
            Self::LD1SW_z_p_bz_d_64_unscaled => 0xc5408000,
            Self::LDFF1SW_z_p_bz_d_64_unscaled => 0xc540a000,
            Self::LD1W_z_p_bz_d_64_unscaled => 0xc540c000,
            Self::LDFF1W_z_p_bz_d_64_unscaled => 0xc540e000,
            Self::LD1SW_z_p_bz_d_64_scaled => 0xc5608000,
            Self::LDFF1SW_z_p_bz_d_64_scaled => 0xc560a000,
            Self::LD1W_z_p_bz_d_64_scaled => 0xc560c000,
            Self::LDFF1W_z_p_bz_d_64_scaled => 0xc560e000,
            Self::LD1D_z_p_ai_d => 0xc5a0c000,
            Self::LDFF1D_z_p_ai_d => 0xc5a0e000,
            Self::LD1D_z_p_bz_d_64_unscaled => 0xc5c0c000,
            Self::LDFF1D_z_p_bz_d_64_unscaled => 0xc5c0e000,
            Self::LD1D_z_p_bz_d_64_scaled => 0xc5e0c000,
            Self::LDFF1D_z_p_bz_d_64_scaled => 0xc5e0e000,
            Self::STNT1B_z_p_br_contiguous => 0xe4006000,
            Self::ST1B_z_p_bz_d_64_unscaled => 0xe400a000,
            Self::ST2B_z_p_br_contiguous => 0xe4206000,
            Self::ST3B_z_p_br_contiguous => 0xe4406000,
            Self::ST1B_z_p_ai_d => 0xe440a000,
            Self::ST4B_z_p_br_contiguous => 0xe4606000,
            Self::ST1B_z_p_ai_s => 0xe460a000,
            Self::STNT1H_z_p_br_contiguous => 0xe4806000,
            Self::ST1H_z_p_bz_d_64_unscaled => 0xe480a000,
            Self::ST2H_z_p_br_contiguous => 0xe4a06000,
            Self::ST1H_z_p_bz_d_64_scaled => 0xe4a0a000,
            Self::ST3H_z_p_br_contiguous => 0xe4c06000,
            Self::ST1H_z_p_ai_d => 0xe4c0a000,
            Self::ST4H_z_p_br_contiguous => 0xe4e06000,
            Self::ST1H_z_p_ai_s => 0xe4e0a000,
            Self::STNT1W_z_p_br_contiguous => 0xe5006000,
            Self::ST1W_z_p_bz_d_64_unscaled => 0xe500a000,
            Self::ST2W_z_p_br_contiguous => 0xe5206000,
            Self::ST1W_z_p_bz_d_64_scaled => 0xe520a000,
            Self::ST3W_z_p_br_contiguous => 0xe5406000,
            Self::ST1W_z_p_ai_d => 0xe540a000,
            Self::ST4W_z_p_br_contiguous => 0xe5606000,
            Self::ST1W_z_p_ai_s => 0xe560a000,
            Self::STNT1D_z_p_br_contiguous => 0xe5806000,
            Self::ST1D_z_p_bz_d_64_unscaled => 0xe580a000,
            Self::ST2D_z_p_br_contiguous => 0xe5a06000,
            Self::ST1D_z_p_bz_d_64_scaled => 0xe5a0a000,
            Self::ST3D_z_p_br_contiguous => 0xe5c06000,
            Self::ST1D_z_p_ai_d => 0xe5c0a000,
            Self::ST1D_z_p_br => 0xe5e04000,
            Self::ST4D_z_p_br_contiguous => 0xe5e06000,
            Self::SM3TT1A_VVV4_crypto3_imm2 => 0xce408000,
            Self::SM3TT1B_VVV4_crypto3_imm2 => 0xce408400,
            Self::SM3TT2A_VVV4_crypto3_imm2 => 0xce408800,
            Self::SM3TT2B_VVV_crypto3_imm2 => 0xce408c00,
            Self::ST1B_z_p_bz_d_x32_unscaled => 0xe4008000,
            Self::ST1B_z_p_bz_s_x32_unscaled => 0xe4408000,
            Self::ST1H_z_p_bz_d_x32_unscaled => 0xe4808000,
            Self::ST1H_z_p_bz_d_x32_scaled => 0xe4a08000,
            Self::ST1H_z_p_bz_s_x32_unscaled => 0xe4c08000,
            Self::ST1H_z_p_bz_s_x32_scaled => 0xe4e08000,
            Self::ST1W_z_p_bz_d_x32_unscaled => 0xe5008000,
            Self::ST1W_z_p_bz_d_x32_scaled => 0xe5208000,
            Self::ST1W_z_p_bz_s_x32_unscaled => 0xe5408000,
            Self::ST1W_z_p_bz_s_x32_scaled => 0xe5608000,
            Self::ST1D_z_p_bz_d_x32_unscaled => 0xe5808000,
            Self::ST1D_z_p_bz_d_x32_scaled => 0xe5a08000,
            Self::INS_asimdins_IV_v => 0x6e000400,
            Self::MOV_INS_asimdins_IV_v => 0x6e000400,
            Self::STXRB_SR32_ldstexcl => 0x8000000,
            Self::STLXRB_SR32_ldstexcl => 0x8008000,
            Self::LDXRB_LR32_ldstexcl => 0x8400000,
            Self::LDAXRB_LR32_ldstexcl => 0x8408000,
            Self::STLLRB_SL32_ldstexcl => 0x8800000,
            Self::STLRB_SL32_ldstexcl => 0x8808000,
            Self::LDLARB_LR32_ldstexcl => 0x8c00000,
            Self::LDARB_LR32_ldstexcl => 0x8c08000,
            Self::EXTR_32_extract => 0x13800000,
            Self::ROR_EXTR_32_extract => 0x13800000,
            Self::MADD_32A_dp_3src => 0x1b000000,
            Self::MSUB_32A_dp_3src => 0x1b008000,
            Self::FMADD_S_floatdp3 => 0x1f000000,
            Self::FMSUB_S_floatdp3 => 0x1f008000,
            Self::FNMADD_S_floatdp3 => 0x1f200000,
            Self::FNMSUB_S_floatdp3 => 0x1f208000,
            Self::FMADD_D_floatdp3 => 0x1f400000,
            Self::FMSUB_D_floatdp3 => 0x1f408000,
            Self::FNMADD_D_floatdp3 => 0x1f600000,
            Self::FNMSUB_D_floatdp3 => 0x1f608000,
            Self::FMADD_H_floatdp3 => 0x1fc00000,
            Self::FMSUB_H_floatdp3 => 0x1fc08000,
            Self::FNMADD_H_floatdp3 => 0x1fe00000,
            Self::FNMSUB_H_floatdp3 => 0x1fe08000,
            Self::STXRH_SR32_ldstexcl => 0x48000000,
            Self::STLXRH_SR32_ldstexcl => 0x48008000,
            Self::LDXRH_LR32_ldstexcl => 0x48400000,
            Self::LDAXRH_LR32_ldstexcl => 0x48408000,
            Self::STLLRH_SL32_ldstexcl => 0x48800000,
            Self::STLRH_SL32_ldstexcl => 0x48808000,
            Self::LDLARH_LR32_ldstexcl => 0x48c00000,
            Self::LDARH_LR32_ldstexcl => 0x48c08000,
            Self::STXR_SR32_ldstexcl => 0x88000000,
            Self::STLXR_SR32_ldstexcl => 0x88008000,
            Self::STXP_SP32_ldstexcl => 0x88200000,
            Self::STLXP_SP32_ldstexcl => 0x88208000,
            Self::LDXR_LR32_ldstexcl => 0x88400000,
            Self::LDAXR_LR32_ldstexcl => 0x88408000,
            Self::LDXP_LP32_ldstexcl => 0x88600000,
            Self::LDAXP_LP32_ldstexcl => 0x88608000,
            Self::STLLR_SL32_ldstexcl => 0x88800000,
            Self::STLR_SL32_ldstexcl => 0x88808000,
            Self::LDLAR_LR32_ldstexcl => 0x88c00000,
            Self::LDAR_LR32_ldstexcl => 0x88c08000,
            Self::MADD_64A_dp_3src => 0x9b000000,
            Self::MSUB_64A_dp_3src => 0x9b008000,
            Self::SMADDL_64WA_dp_3src => 0x9b200000,
            Self::SMSUBL_64WA_dp_3src => 0x9b208000,
            Self::SMULH_64_dp_3src => 0x9b400000,
            Self::UMADDL_64WA_dp_3src => 0x9ba00000,
            Self::UMSUBL_64WA_dp_3src => 0x9ba08000,
            Self::UMULH_64_dp_3src => 0x9bc00000,
            Self::STXR_SR64_ldstexcl => 0xc8000000,
            Self::STLXR_SR64_ldstexcl => 0xc8008000,
            Self::STXP_SP64_ldstexcl => 0xc8200000,
            Self::STLXP_SP64_ldstexcl => 0xc8208000,
            Self::LDXR_LR64_ldstexcl => 0xc8400000,
            Self::LDAXR_LR64_ldstexcl => 0xc8408000,
            Self::LDXP_LP64_ldstexcl => 0xc8600000,
            Self::LDAXP_LP64_ldstexcl => 0xc8608000,
            Self::STLLR_SL64_ldstexcl => 0xc8800000,
            Self::STLR_SL64_ldstexcl => 0xc8808000,
            Self::LDLAR_LR64_ldstexcl => 0xc8c00000,
            Self::LDAR_LR64_ldstexcl => 0xc8c08000,
            Self::EOR3_VVV16_crypto4 => 0xce000000,
            Self::BCAX_VVV16_crypto4 => 0xce200000,
            Self::SM3SS1_VVV4_crypto4 => 0xce400000,
            Self::RMIF_only_rmif => 0xba000400,
            Self::FMOV_S_floatimm => 0x1e201000,
            Self::FMOV_D_floatimm => 0x1e601000,
            Self::FMOV_H_floatimm => 0x1ee01000,
            Self::FCCMP_S_floatccmp => 0x1e200400,
            Self::FCCMPE_S_floatccmp => 0x1e200410,
            Self::FCCMP_D_floatccmp => 0x1e600400,
            Self::FCCMPE_D_floatccmp => 0x1e600410,
            Self::FCCMP_H_floatccmp => 0x1ee00400,
            Self::FCCMPE_H_floatccmp => 0x1ee00410,
            Self::CCMN_32_condcmp_reg => 0x3a400000,
            Self::CCMN_32_condcmp_imm => 0x3a400800,
            Self::CCMP_32_condcmp_reg => 0x7a400000,
            Self::CCMP_32_condcmp_imm => 0x7a400800,
            Self::CCMN_64_condcmp_reg => 0xba400000,
            Self::CCMN_64_condcmp_imm => 0xba400800,
            Self::CCMP_64_condcmp_reg => 0xfa400000,
            Self::CCMP_64_condcmp_imm => 0xfa400800,
            Self::STLURB_32_ldapstl_unscaled => 0x19000000,
            Self::LDAPURB_32_ldapstl_unscaled => 0x19400000,
            Self::LDAPURSB_64_ldapstl_unscaled => 0x19800000,
            Self::LDAPURSB_32_ldapstl_unscaled => 0x19c00000,
            Self::CSEL_32_condsel => 0x1a800000,
            Self::CINC_CSINC_32_condsel => 0x1a800400,
            Self::CSINC_32_condsel => 0x1a800400,
            Self::FCSEL_S_floatsel => 0x1e200c00,
            Self::FCSEL_D_floatsel => 0x1e600c00,
            Self::FCSEL_H_floatsel => 0x1ee00c00,
            Self::STURB_32_ldst_unscaled => 0x38000000,
            Self::STRB_32_ldst_immpost => 0x38000400,
            Self::STTRB_32_ldst_unpriv => 0x38000800,
            Self::STRB_32_ldst_immpre => 0x38000c00,
            Self::STRB_32B_ldst_regoff => 0x38200800,
            Self::LDURB_32_ldst_unscaled => 0x38400000,
            Self::LDRB_32_ldst_immpost => 0x38400400,
            Self::LDTRB_32_ldst_unpriv => 0x38400800,
            Self::LDRB_32_ldst_immpre => 0x38400c00,
            Self::LDRB_32B_ldst_regoff => 0x38600800,
            Self::LDURSB_64_ldst_unscaled => 0x38800000,
            Self::LDRSB_64_ldst_immpost => 0x38800400,
            Self::LDTRSB_64_ldst_unpriv => 0x38800800,
            Self::LDRSB_64_ldst_immpre => 0x38800c00,
            Self::LDRSB_64B_ldst_regoff => 0x38a00800,
            Self::LDURSB_32_ldst_unscaled => 0x38c00000,
            Self::LDRSB_32_ldst_immpost => 0x38c00400,
            Self::LDTRSB_32_ldst_unpriv => 0x38c00800,
            Self::LDRSB_32_ldst_immpre => 0x38c00c00,
            Self::LDRSB_32B_ldst_regoff => 0x38e00800,
            Self::STUR_B_ldst_unscaled => 0x3c000000,
            Self::STR_B_ldst_immpost => 0x3c000400,
            Self::STR_B_ldst_immpre => 0x3c000c00,
            Self::STR_B_ldst_regoff => 0x3c200800,
            Self::LDUR_B_ldst_unscaled => 0x3c400000,
            Self::LDR_B_ldst_immpost => 0x3c400400,
            Self::LDR_B_ldst_immpre => 0x3c400c00,
            Self::LDR_B_ldst_regoff => 0x3c600800,
            Self::STUR_Q_ldst_unscaled => 0x3c800000,
            Self::STR_Q_ldst_immpost => 0x3c800400,
            Self::STR_Q_ldst_immpre => 0x3c800c00,
            Self::STR_Q_ldst_regoff => 0x3ca00800,
            Self::LDUR_Q_ldst_unscaled => 0x3cc00000,
            Self::LDR_Q_ldst_immpost => 0x3cc00400,
            Self::LDR_Q_ldst_immpre => 0x3cc00c00,
            Self::LDR_Q_ldst_regoff => 0x3ce00800,
            Self::STLURH_32_ldapstl_unscaled => 0x59000000,
            Self::LDAPURH_32_ldapstl_unscaled => 0x59400000,
            Self::LDAPURSH_64_ldapstl_unscaled => 0x59800000,
            Self::LDAPURSH_32_ldapstl_unscaled => 0x59c00000,
            Self::CINV_CSINV_32_condsel => 0x5a800000,
            Self::CSINV_32_condsel => 0x5a800000,
            Self::CNEG_CSNEG_32_condsel => 0x5a800400,
            Self::CSNEG_32_condsel => 0x5a800400,
            Self::STURH_32_ldst_unscaled => 0x78000000,
            Self::STRH_32_ldst_immpost => 0x78000400,
            Self::STTRH_32_ldst_unpriv => 0x78000800,
            Self::STRH_32_ldst_immpre => 0x78000c00,
            Self::STRH_32_ldst_regoff => 0x78200800,
            Self::LDURH_32_ldst_unscaled => 0x78400000,
            Self::LDRH_32_ldst_immpost => 0x78400400,
            Self::LDTRH_32_ldst_unpriv => 0x78400800,
            Self::LDRH_32_ldst_immpre => 0x78400c00,
            Self::LDRH_32_ldst_regoff => 0x78600800,
            Self::LDURSH_64_ldst_unscaled => 0x78800000,
            Self::LDRSH_64_ldst_immpost => 0x78800400,
            Self::LDTRSH_64_ldst_unpriv => 0x78800800,
            Self::LDRSH_64_ldst_immpre => 0x78800c00,
            Self::LDRSH_64_ldst_regoff => 0x78a00800,
            Self::LDURSH_32_ldst_unscaled => 0x78c00000,
            Self::LDRSH_32_ldst_immpost => 0x78c00400,
            Self::LDTRSH_32_ldst_unpriv => 0x78c00800,
            Self::LDRSH_32_ldst_immpre => 0x78c00c00,
            Self::LDRSH_32_ldst_regoff => 0x78e00800,
            Self::STUR_H_ldst_unscaled => 0x7c000000,
            Self::STR_H_ldst_immpost => 0x7c000400,
            Self::STR_H_ldst_immpre => 0x7c000c00,
            Self::STR_H_ldst_regoff => 0x7c200800,
            Self::LDUR_H_ldst_unscaled => 0x7c400000,
            Self::LDR_H_ldst_immpost => 0x7c400400,
            Self::LDR_H_ldst_immpre => 0x7c400c00,
            Self::LDR_H_ldst_regoff => 0x7c600800,
            Self::STLUR_32_ldapstl_unscaled => 0x99000000,
            Self::LDAPUR_32_ldapstl_unscaled => 0x99400000,
            Self::LDAPURSW_64_ldapstl_unscaled => 0x99800000,
            Self::CSEL_64_condsel => 0x9a800000,
            Self::CINC_CSINC_64_condsel => 0x9a800400,
            Self::CSINC_64_condsel => 0x9a800400,
            Self::STUR_32_ldst_unscaled => 0xb8000000,
            Self::STR_32_ldst_immpost => 0xb8000400,
            Self::STTR_32_ldst_unpriv => 0xb8000800,
            Self::STR_32_ldst_immpre => 0xb8000c00,
            Self::STR_32_ldst_regoff => 0xb8200800,
            Self::LDUR_32_ldst_unscaled => 0xb8400000,
            Self::LDR_32_ldst_immpost => 0xb8400400,
            Self::LDTR_32_ldst_unpriv => 0xb8400800,
            Self::LDR_32_ldst_immpre => 0xb8400c00,
            Self::LDR_32_ldst_regoff => 0xb8600800,
            Self::LDURSW_64_ldst_unscaled => 0xb8800000,
            Self::LDRSW_64_ldst_immpost => 0xb8800400,
            Self::LDTRSW_64_ldst_unpriv => 0xb8800800,
            Self::LDRSW_64_ldst_immpre => 0xb8800c00,
            Self::LDRSW_64_ldst_regoff => 0xb8a00800,
            Self::STUR_S_ldst_unscaled => 0xbc000000,
            Self::STR_S_ldst_immpost => 0xbc000400,
            Self::STR_S_ldst_immpre => 0xbc000c00,
            Self::STR_S_ldst_regoff => 0xbc200800,
            Self::LDUR_S_ldst_unscaled => 0xbc400000,
            Self::LDR_S_ldst_immpost => 0xbc400400,
            Self::LDR_S_ldst_immpre => 0xbc400c00,
            Self::LDR_S_ldst_regoff => 0xbc600800,
            Self::STLUR_64_ldapstl_unscaled => 0xd9000000,
            Self::STG_64Spost_ldsttags => 0xd9200400,
            Self::STG_64Soffset_ldsttags => 0xd9200800,
            Self::STG_64Spre_ldsttags => 0xd9200c00,
            Self::LDAPUR_64_ldapstl_unscaled => 0xd9400000,
            Self::LDG_64Loffset_ldsttags => 0xd9600000,
            Self::STZG_64Spost_ldsttags => 0xd9600400,
            Self::STZG_64Soffset_ldsttags => 0xd9600800,
            Self::STZG_64Spre_ldsttags => 0xd9600c00,
            Self::ST2G_64Spost_ldsttags => 0xd9a00400,
            Self::ST2G_64Soffset_ldsttags => 0xd9a00800,
            Self::ST2G_64Spre_ldsttags => 0xd9a00c00,
            Self::STZ2G_64Spost_ldsttags => 0xd9e00400,
            Self::STZ2G_64Soffset_ldsttags => 0xd9e00800,
            Self::STZ2G_64Spre_ldsttags => 0xd9e00c00,
            Self::CINV_CSINV_64_condsel => 0xda800000,
            Self::CSINV_64_condsel => 0xda800000,
            Self::CNEG_CSNEG_64_condsel => 0xda800400,
            Self::CSNEG_64_condsel => 0xda800400,
            Self::STUR_64_ldst_unscaled => 0xf8000000,
            Self::STR_64_ldst_immpost => 0xf8000400,
            Self::STTR_64_ldst_unpriv => 0xf8000800,
            Self::STR_64_ldst_immpre => 0xf8000c00,
            Self::STR_64_ldst_regoff => 0xf8200800,
            Self::LDUR_64_ldst_unscaled => 0xf8400000,
            Self::LDR_64_ldst_immpost => 0xf8400400,
            Self::LDTR_64_ldst_unpriv => 0xf8400800,
            Self::LDR_64_ldst_immpre => 0xf8400c00,
            Self::LDR_64_ldst_regoff => 0xf8600800,
            Self::PRFUM_P_ldst_unscaled => 0xf8800000,
            Self::PRFM_P_ldst_regoff => 0xf8a00800,
            Self::STUR_D_ldst_unscaled => 0xfc000000,
            Self::STR_D_ldst_immpost => 0xfc000400,
            Self::STR_D_ldst_immpre => 0xfc000c00,
            Self::STR_D_ldst_regoff => 0xfc200800,
            Self::LDUR_D_ldst_unscaled => 0xfc400000,
            Self::LDR_D_ldst_immpost => 0xfc400400,
            Self::LDR_D_ldst_immpre => 0xfc400c00,
            Self::LDR_D_ldst_regoff => 0xfc600800,
            Self::CMN_ADDS_32S_addsub_ext => 0x2b20001f,
            Self::CMP_SUBS_32S_addsub_ext => 0x6b20001f,
            Self::CMN_ADDS_64S_addsub_ext => 0xab20001f,
            Self::SVC_EX_exception => 0xd4000001,
            Self::HVC_EX_exception => 0xd4000002,
            Self::SMC_EX_exception => 0xd4000003,
            Self::BRK_EX_exception => 0xd4200000,
            Self::HLT_EX_exception => 0xd4400000,
            Self::DCPS1_DC_exception => 0xd4a00001,
            Self::DCPS2_DC_exception => 0xd4a00002,
            Self::DCPS3_DC_exception => 0xd4a00003,
            Self::CMP_SUBS_64S_addsub_ext => 0xeb20001f,
            Self::ADD_32_addsub_ext => 0xb200000,
            Self::ADDS_32S_addsub_ext => 0x2b200000,
            Self::SUB_32_addsub_ext => 0x4b200000,
            Self::SUBS_32S_addsub_ext => 0x6b200000,
            Self::ADD_64_addsub_ext => 0x8b200000,
            Self::EXTR_64_extract => 0x93c00000,
            Self::ROR_EXTR_64_extract => 0x93c00000,
            Self::ADDS_64S_addsub_ext => 0xab200000,
            Self::SUB_64_addsub_ext => 0xcb200000,
            Self::XAR_VVV2_crypto3_imm6 => 0xce800000,
            Self::SUBS_64S_addsub_ext => 0xeb200000,
            Self::ASR_SBFM_32M_bitfield => 0x13007c00,
            Self::LSR_UBFM_32M_bitfield => 0x53007c00,
            Self::ASR_SBFM_64M_bitfield => 0x9340fc00,
            Self::LSR_UBFM_64M_bitfield => 0xd340fc00,
            Self::FMLA_asisdelem_RH_H => 0x5f001000,
            Self::FMLS_asisdelem_RH_H => 0x5f005000,
            Self::FMUL_asisdelem_RH_H => 0x5f009000,
            Self::FMULX_asisdelem_RH_H => 0x7f009000,
            Self::LDR_p_bi => 0x85800000,
            Self::PRFB_i_p_bi_s => 0x85c00000,
            Self::PRFH_i_p_bi_s => 0x85c02000,
            Self::PRFW_i_p_bi_s => 0x85c04000,
            Self::PRFD_i_p_bi_s => 0x85c06000,
            Self::STR_p_bi => 0xe5800000,
            Self::LD1RB_z_p_bi_u8 => 0x84408000,
            Self::LD1RB_z_p_bi_u16 => 0x8440a000,
            Self::LD1RB_z_p_bi_u32 => 0x8440c000,
            Self::LD1RB_z_p_bi_u64 => 0x8440e000,
            Self::LD1RSW_z_p_bi_s64 => 0x84c08000,
            Self::LD1RH_z_p_bi_u16 => 0x84c0a000,
            Self::LD1RH_z_p_bi_u32 => 0x84c0c000,
            Self::LD1RH_z_p_bi_u64 => 0x84c0e000,
            Self::LD1RSH_z_p_bi_s64 => 0x85408000,
            Self::LD1RSH_z_p_bi_s32 => 0x8540a000,
            Self::LD1RW_z_p_bi_u32 => 0x8540c000,
            Self::LD1RW_z_p_bi_u64 => 0x8540e000,
            Self::LDR_z_bi => 0x85804000,
            Self::LD1RSB_z_p_bi_s64 => 0x85c08000,
            Self::LD1RSB_z_p_bi_s32 => 0x85c0a000,
            Self::LD1RSB_z_p_bi_s16 => 0x85c0c000,
            Self::LD1RD_z_p_bi_u64 => 0x85c0e000,
            Self::STR_z_bi => 0xe5804000,
            Self::MOV_ORR_32_log_imm => 0x320003e0,
            Self::BFC_BFM_32M_bitfield => 0x330003e0,
            Self::BFC_BFM_64M_bitfield => 0xb34003e0,
            Self::TST_ANDS_32S_log_imm => 0x7200001f,
            Self::AND_32_log_imm => 0x12000000,
            Self::MOV_MOVN_32_movewide => 0x12800000,
            Self::MOVN_32_movewide => 0x12800000,
            Self::SBFIZ_SBFM_32M_bitfield => 0x13000000,
            Self::SBFM_32M_bitfield => 0x13000000,
            Self::SBFX_SBFM_32M_bitfield => 0x13000000,
            Self::STNP_32_ldstnapair_offs => 0x28000000,
            Self::LDNP_32_ldstnapair_offs => 0x28400000,
            Self::STP_32_ldstpair_post => 0x28800000,
            Self::LDP_32_ldstpair_post => 0x28c00000,
            Self::STP_32_ldstpair_off => 0x29000000,
            Self::LDP_32_ldstpair_off => 0x29400000,
            Self::STP_32_ldstpair_pre => 0x29800000,
            Self::LDP_32_ldstpair_pre => 0x29c00000,
            Self::STNP_S_ldstnapair_offs => 0x2c000000,
            Self::LDNP_S_ldstnapair_offs => 0x2c400000,
            Self::STP_S_ldstpair_post => 0x2c800000,
            Self::LDP_S_ldstpair_post => 0x2cc00000,
            Self::STP_S_ldstpair_off => 0x2d000000,
            Self::LDP_S_ldstpair_off => 0x2d400000,
            Self::STP_S_ldstpair_pre => 0x2d800000,
            Self::LDP_S_ldstpair_pre => 0x2dc00000,
            Self::ORR_32_log_imm => 0x32000000,
            Self::BFI_BFM_32M_bitfield => 0x33000000,
            Self::BFM_32M_bitfield => 0x33000000,
            Self::BFXIL_BFM_32M_bitfield => 0x33000000,
            Self::STRB_32_ldst_pos => 0x39000000,
            Self::LDRB_32_ldst_pos => 0x39400000,
            Self::LDRSB_64_ldst_pos => 0x39800000,
            Self::LDRSB_32_ldst_pos => 0x39c00000,
            Self::STR_B_ldst_pos => 0x3d000000,
            Self::LDR_B_ldst_pos => 0x3d400000,
            Self::STR_Q_ldst_pos => 0x3d800000,
            Self::LDR_Q_ldst_pos => 0x3dc00000,
            Self::EOR_32_log_imm => 0x52000000,
            Self::MOV_MOVZ_32_movewide => 0x52800000,
            Self::MOVZ_32_movewide => 0x52800000,
            Self::LSL_UBFM_32M_bitfield => 0x53000000,
            Self::UBFIZ_UBFM_32M_bitfield => 0x53000000,
            Self::UBFM_32M_bitfield => 0x53000000,
            Self::UBFX_UBFM_32M_bitfield => 0x53000000,
            Self::STGP_64_ldstpair_post => 0x68800000,
            Self::LDPSW_64_ldstpair_post => 0x68c00000,
            Self::STGP_64_ldstpair_off => 0x69000000,
            Self::LDPSW_64_ldstpair_off => 0x69400000,
            Self::STGP_64_ldstpair_pre => 0x69800000,
            Self::LDPSW_64_ldstpair_pre => 0x69c00000,
            Self::STNP_D_ldstnapair_offs => 0x6c000000,
            Self::LDNP_D_ldstnapair_offs => 0x6c400000,
            Self::STP_D_ldstpair_post => 0x6c800000,
            Self::LDP_D_ldstpair_post => 0x6cc00000,
            Self::STP_D_ldstpair_off => 0x6d000000,
            Self::LDP_D_ldstpair_off => 0x6d400000,
            Self::STP_D_ldstpair_pre => 0x6d800000,
            Self::LDP_D_ldstpair_pre => 0x6dc00000,
            Self::ANDS_32S_log_imm => 0x72000000,
            Self::MOVK_32_movewide => 0x72800000,
            Self::STRH_32_ldst_pos => 0x79000000,
            Self::LDRH_32_ldst_pos => 0x79400000,
            Self::LDRSH_64_ldst_pos => 0x79800000,
            Self::LDRSH_32_ldst_pos => 0x79c00000,
            Self::STR_H_ldst_pos => 0x7d000000,
            Self::LDR_H_ldst_pos => 0x7d400000,
            Self::ADDG_64_addsub_immtags => 0x91800000,
            Self::SBFIZ_SBFM_64M_bitfield => 0x93400000,
            Self::SBFM_64M_bitfield => 0x93400000,
            Self::SBFX_SBFM_64M_bitfield => 0x93400000,
            Self::STNP_64_ldstnapair_offs => 0xa8000000,
            Self::LDNP_64_ldstnapair_offs => 0xa8400000,
            Self::STP_64_ldstpair_post => 0xa8800000,
            Self::LDP_64_ldstpair_post => 0xa8c00000,
            Self::STP_64_ldstpair_off => 0xa9000000,
            Self::LDP_64_ldstpair_off => 0xa9400000,
            Self::STP_64_ldstpair_pre => 0xa9800000,
            Self::LDP_64_ldstpair_pre => 0xa9c00000,
            Self::STNP_Q_ldstnapair_offs => 0xac000000,
            Self::LDNP_Q_ldstnapair_offs => 0xac400000,
            Self::STP_Q_ldstpair_post => 0xac800000,
            Self::LDP_Q_ldstpair_post => 0xacc00000,
            Self::STP_Q_ldstpair_off => 0xad000000,
            Self::LDP_Q_ldstpair_off => 0xad400000,
            Self::STP_Q_ldstpair_pre => 0xad800000,
            Self::LDP_Q_ldstpair_pre => 0xadc00000,
            Self::BFI_BFM_64M_bitfield => 0xb3400000,
            Self::BFM_64M_bitfield => 0xb3400000,
            Self::BFXIL_BFM_64M_bitfield => 0xb3400000,
            Self::STR_32_ldst_pos => 0xb9000000,
            Self::LDR_32_ldst_pos => 0xb9400000,
            Self::LDRSW_64_ldst_pos => 0xb9800000,
            Self::STR_S_ldst_pos => 0xbd000000,
            Self::LDR_S_ldst_pos => 0xbd400000,
            Self::SUBG_64_addsub_immtags => 0xd1800000,
            Self::LSL_UBFM_64M_bitfield => 0xd3400000,
            Self::UBFIZ_UBFM_64M_bitfield => 0xd3400000,
            Self::UBFM_64M_bitfield => 0xd3400000,
            Self::UBFX_UBFM_64M_bitfield => 0xd3400000,
            Self::STR_64_ldst_pos => 0xf9000000,
            Self::LDR_64_ldst_pos => 0xf9400000,
            Self::PRFM_P_ldst_pos => 0xf9800000,
            Self::STR_D_ldst_pos => 0xfd000000,
            Self::LDR_D_ldst_pos => 0xfd400000,
            Self::FCVTNS_asisdmisc_R => 0x5e21a800,
            Self::FCVTMS_asisdmisc_R => 0x5e21b800,
            Self::FCVTAS_asisdmisc_R => 0x5e21c800,
            Self::SCVTF_asisdmisc_R => 0x5e21d800,
            Self::FMAXNMP_asisdpair_only_H => 0x5e30c800,
            Self::FADDP_asisdpair_only_H => 0x5e30d800,
            Self::FMAXP_asisdpair_only_H => 0x5e30f800,
            Self::FCMGT_asisdmisc_FZ => 0x5ea0c800,
            Self::FCMEQ_asisdmisc_FZ => 0x5ea0d800,
            Self::FCMLT_asisdmisc_FZ => 0x5ea0e800,
            Self::FCVTPS_asisdmisc_R => 0x5ea1a800,
            Self::FCVTZS_asisdmisc_R => 0x5ea1b800,
            Self::FRECPE_asisdmisc_R => 0x5ea1d800,
            Self::FRECPX_asisdmisc_R => 0x5ea1f800,
            Self::FMINNMP_asisdpair_only_H => 0x5eb0c800,
            Self::FMINP_asisdpair_only_H => 0x5eb0f800,
            Self::FCVTXN_asisdmisc_N => 0x7e216800,
            Self::FCVTNU_asisdmisc_R => 0x7e21a800,
            Self::FCVTMU_asisdmisc_R => 0x7e21b800,
            Self::FCVTAU_asisdmisc_R => 0x7e21c800,
            Self::UCVTF_asisdmisc_R => 0x7e21d800,
            Self::FMAXNMP_asisdpair_only_SD => 0x7e30c800,
            Self::FADDP_asisdpair_only_SD => 0x7e30d800,
            Self::FMAXP_asisdpair_only_SD => 0x7e30f800,
            Self::FCMGE_asisdmisc_FZ => 0x7ea0c800,
            Self::FCMLE_asisdmisc_FZ => 0x7ea0d800,
            Self::FCVTPU_asisdmisc_R => 0x7ea1a800,
            Self::FCVTZU_asisdmisc_R => 0x7ea1b800,
            Self::FRSQRTE_asisdmisc_R => 0x7ea1d800,
            Self::FMINNMP_asisdpair_only_SD => 0x7eb0c800,
            Self::FMINP_asisdpair_only_SD => 0x7eb0f800,
            Self::CTERMEQ_rr => 0x25a02000,
            Self::CTERMNE_rr => 0x25a02010,
            Self::FMULX_asisdsame_only => 0x5e20dc00,
            Self::FCMEQ_asisdsame_only => 0x5e20e400,
            Self::FRECPS_asisdsame_only => 0x5e20fc00,
            Self::FRSQRTS_asisdsame_only => 0x5ea0fc00,
            Self::FMLA_z_zzzi_h => 0x64200000,
            Self::FMLS_z_zzzi_h => 0x64200400,
            Self::FMUL_z_zzi_h => 0x64202000,
            Self::FCMGE_asisdsame_only => 0x7e20e400,
            Self::FACGE_asisdsame_only => 0x7e20ec00,
            Self::FABD_asisdsame_only => 0x7ea0d400,
            Self::FCMGT_asisdsame_only => 0x7ea0e400,
            Self::FACGT_asisdsame_only => 0x7ea0ec00,
            Self::ADR_z_az_sd_same_scaled => 0x4a0a000,
            Self::PRFB_i_p_bz_s_x32_scaled => 0x84200000,
            Self::PRFH_i_p_bz_s_x32_scaled => 0x84202000,
            Self::PRFW_i_p_bz_s_x32_scaled => 0x84204000,
            Self::PRFD_i_p_bz_s_x32_scaled => 0x84206000,
            Self::PRFB_i_p_bz_d_x32_scaled => 0xc4200000,
            Self::PRFH_i_p_bz_d_x32_scaled => 0xc4202000,
            Self::PRFW_i_p_bz_d_x32_scaled => 0xc4204000,
            Self::PRFD_i_p_bz_d_x32_scaled => 0xc4206000,
            Self::LD1SB_z_p_bz_s_x32_unscaled => 0x84000000,
            Self::LDFF1SB_z_p_bz_s_x32_unscaled => 0x84002000,
            Self::LD1B_z_p_bz_s_x32_unscaled => 0x84004000,
            Self::LDFF1B_z_p_bz_s_x32_unscaled => 0x84006000,
            Self::LD1SH_z_p_bz_s_x32_unscaled => 0x84800000,
            Self::LDFF1SH_z_p_bz_s_x32_unscaled => 0x84802000,
            Self::LD1H_z_p_bz_s_x32_unscaled => 0x84804000,
            Self::LDFF1H_z_p_bz_s_x32_unscaled => 0x84806000,
            Self::LD1SH_z_p_bz_s_x32_scaled => 0x84a00000,
            Self::LDFF1SH_z_p_bz_s_x32_scaled => 0x84a02000,
            Self::LD1H_z_p_bz_s_x32_scaled => 0x84a04000,
            Self::LDFF1H_z_p_bz_s_x32_scaled => 0x84a06000,
            Self::LD1W_z_p_bz_s_x32_unscaled => 0x85004000,
            Self::LDFF1W_z_p_bz_s_x32_unscaled => 0x85006000,
            Self::LD1W_z_p_bz_s_x32_scaled => 0x85204000,
            Self::LDFF1W_z_p_bz_s_x32_scaled => 0x85206000,
            Self::LD1SB_z_p_bz_d_x32_unscaled => 0xc4000000,
            Self::LDFF1SB_z_p_bz_d_x32_unscaled => 0xc4002000,
            Self::LD1B_z_p_bz_d_x32_unscaled => 0xc4004000,
            Self::LDFF1B_z_p_bz_d_x32_unscaled => 0xc4006000,
            Self::LD1SH_z_p_bz_d_x32_unscaled => 0xc4800000,
            Self::LDFF1SH_z_p_bz_d_x32_unscaled => 0xc4802000,
            Self::LD1H_z_p_bz_d_x32_unscaled => 0xc4804000,
            Self::LDFF1H_z_p_bz_d_x32_unscaled => 0xc4806000,
            Self::LD1SH_z_p_bz_d_x32_scaled => 0xc4a00000,
            Self::LDFF1SH_z_p_bz_d_x32_scaled => 0xc4a02000,
            Self::LD1H_z_p_bz_d_x32_scaled => 0xc4a04000,
            Self::LDFF1H_z_p_bz_d_x32_scaled => 0xc4a06000,
            Self::LD1SW_z_p_bz_d_x32_unscaled => 0xc5000000,
            Self::LDFF1SW_z_p_bz_d_x32_unscaled => 0xc5002000,
            Self::LD1W_z_p_bz_d_x32_unscaled => 0xc5004000,
            Self::LDFF1W_z_p_bz_d_x32_unscaled => 0xc5006000,
            Self::LD1SW_z_p_bz_d_x32_scaled => 0xc5200000,
            Self::LDFF1SW_z_p_bz_d_x32_scaled => 0xc5202000,
            Self::LD1W_z_p_bz_d_x32_scaled => 0xc5204000,
            Self::LDFF1W_z_p_bz_d_x32_scaled => 0xc5206000,
            Self::LD1D_z_p_bz_d_x32_unscaled => 0xc5804000,
            Self::LDFF1D_z_p_bz_d_x32_unscaled => 0xc5806000,
            Self::LD1D_z_p_bz_d_x32_scaled => 0xc5a04000,
            Self::LDFF1D_z_p_bz_d_x32_scaled => 0xc5a06000,
            Self::LDRAA_64_ldst_pac => 0xf8200400,
            Self::LDRAA_64W_ldst_pac => 0xf8200c00,
            Self::LDRAB_64_ldst_pac => 0xf8a00400,
            Self::LDRAB_64W_ldst_pac => 0xf8a00c00,
            Self::ST1B_z_p_bi => 0xe400e000,
            Self::ST1H_z_p_bi => 0xe480e000,
            Self::ST1W_z_p_bi => 0xe500e000,
            Self::ST1D_z_p_bi => 0xe580e000,
            Self::SSHR_asisdshf_R => 0x5f000400,
            Self::SSRA_asisdshf_R => 0x5f001400,
            Self::SRSHR_asisdshf_R => 0x5f002400,
            Self::SRSRA_asisdshf_R => 0x5f003400,
            Self::SHL_asisdshf_R => 0x5f005400,
            Self::SQSHL_asisdshf_R => 0x5f007400,
            Self::SQSHRN_asisdshf_N => 0x5f009400,
            Self::SQRSHRN_asisdshf_N => 0x5f009c00,
            Self::SCVTF_asisdshf_C => 0x5f00e400,
            Self::FCVTZS_asisdshf_C => 0x5f00fc00,
            Self::USHR_asisdshf_R => 0x7f000400,
            Self::USRA_asisdshf_R => 0x7f001400,
            Self::URSHR_asisdshf_R => 0x7f002400,
            Self::URSRA_asisdshf_R => 0x7f003400,
            Self::SRI_asisdshf_R => 0x7f004400,
            Self::SLI_asisdshf_R => 0x7f005400,
            Self::SQSHLU_asisdshf_R => 0x7f006400,
            Self::UQSHL_asisdshf_R => 0x7f007400,
            Self::SQSHRUN_asisdshf_N => 0x7f008400,
            Self::SQRSHRUN_asisdshf_N => 0x7f008c00,
            Self::UQSHRN_asisdshf_N => 0x7f009400,
            Self::UQRSHRN_asisdshf_N => 0x7f009c00,
            Self::UCVTF_asisdshf_C => 0x7f00e400,
            Self::FCVTZU_asisdshf_C => 0x7f00fc00,
            Self::FMLA_asisdelem_R_SD => 0x5f801000,
            Self::FMLS_asisdelem_R_SD => 0x5f805000,
            Self::FMUL_asisdelem_R_SD => 0x5f809000,
            Self::FMULX_asisdelem_R_SD => 0x7f809000,
            Self::ST1B_z_p_br => 0xe4004000,
            Self::ST1H_z_p_br => 0xe4804000,
            Self::ST1W_z_p_br => 0xe5004000,
            Self::MOV_ORR_64_log_imm => 0xb20003e0,
            Self::CMN_ADDS_32S_addsub_imm => 0x3100001f,
            Self::CMP_SUBS_32S_addsub_imm => 0x7100001f,
            Self::CMN_ADDS_64S_addsub_imm => 0xb100001f,
            Self::CMP_SUBS_64S_addsub_imm => 0xf100001f,
            Self::TST_ANDS_64S_log_imm => 0xf200001f,
            Self::ADD_32_addsub_imm => 0x11000000,
            Self::ADDS_32S_addsub_imm => 0x31000000,
            Self::SUB_32_addsub_imm => 0x51000000,
            Self::SUBS_32S_addsub_imm => 0x71000000,
            Self::ADD_64_addsub_imm => 0x91000000,
            Self::AND_64_log_imm => 0x92000000,
            Self::MOV_MOVN_64_movewide => 0x92800000,
            Self::MOVN_64_movewide => 0x92800000,
            Self::ADDS_64S_addsub_imm => 0xb1000000,
            Self::ORR_64_log_imm => 0xb2000000,
            Self::SUB_64_addsub_imm => 0xd1000000,
            Self::EOR_64_log_imm => 0xd2000000,
            Self::MOV_MOVZ_64_movewide => 0xd2800000,
            Self::MOVZ_64_movewide => 0xd2800000,
            Self::SUBS_64S_addsub_imm => 0xf1000000,
            Self::ANDS_64S_log_imm => 0xf2000000,
            Self::MOVK_64_movewide => 0xf2800000,
            Self::FMOV_dup_z_i => 0x2538c000,
            Self::REV_p_p => 0x5344000,
            Self::PNEXT_p_p_p => 0x2519c400,
            Self::SQINCP_z_p_z => 0x25288000,
            Self::SQINCP_r_p_r_sx => 0x25288800,
            Self::SQINCP_r_p_r_x => 0x25288c00,
            Self::UQINCP_z_p_z => 0x25298000,
            Self::UQINCP_r_p_r_uw => 0x25298800,
            Self::UQINCP_r_p_r_x => 0x25298c00,
            Self::SQDECP_z_p_z => 0x252a8000,
            Self::SQDECP_r_p_r_sx => 0x252a8800,
            Self::SQDECP_r_p_r_x => 0x252a8c00,
            Self::UQDECP_z_p_z => 0x252b8000,
            Self::UQDECP_r_p_r_uw => 0x252b8800,
            Self::UQDECP_r_p_r_x => 0x252b8c00,
            Self::INCP_z_p_z => 0x252c8000,
            Self::INCP_r_p_r => 0x252c8800,
            Self::DECP_z_p_z => 0x252d8000,
            Self::DECP_r_p_r => 0x252d8800,
            Self::PTRUE_p_s => 0x2518e000,
            Self::PTRUES_p_s => 0x2519e000,
            Self::FEXPA_z_z => 0x420b800,
            Self::DUP_z_r => 0x5203800,
            Self::MOV_dup_z_r => 0x5203800,
            Self::INSR_z_r => 0x5243800,
            Self::SUNPKLO_z_z => 0x5303800,
            Self::SUNPKHI_z_z => 0x5313800,
            Self::UUNPKLO_z_z => 0x5323800,
            Self::UUNPKHI_z_z => 0x5333800,
            Self::INSR_z_v => 0x5343800,
            Self::REV_z_z => 0x5383800,
            Self::SUQADD_asisdmisc_R => 0x5e203800,
            Self::SQABS_asisdmisc_R => 0x5e207800,
            Self::CMGT_asisdmisc_Z => 0x5e208800,
            Self::CMEQ_asisdmisc_Z => 0x5e209800,
            Self::CMLT_asisdmisc_Z => 0x5e20a800,
            Self::ABS_asisdmisc_R => 0x5e20b800,
            Self::SQXTN_asisdmisc_N => 0x5e214800,
            Self::ADDP_asisdpair_only => 0x5e31b800,
            Self::FRECPE_z_z => 0x650e3000,
            Self::FRSQRTE_z_z => 0x650f3000,
            Self::USQADD_asisdmisc_R => 0x7e203800,
            Self::SQNEG_asisdmisc_R => 0x7e207800,
            Self::CMGE_asisdmisc_Z => 0x7e208800,
            Self::CMLE_asisdmisc_Z => 0x7e209800,
            Self::NEG_asisdmisc_R => 0x7e20b800,
            Self::SQXTUN_asisdmisc_N => 0x7e212800,
            Self::UQXTN_asisdmisc_N => 0x7e214800,
            Self::FADD_z_p_zs => 0x65188000,
            Self::FSUB_z_p_zs => 0x65198000,
            Self::FMUL_z_p_zs => 0x651a8000,
            Self::FSUBR_z_p_zs => 0x651b8000,
            Self::FMAXNM_z_p_zs => 0x651c8000,
            Self::FMINNM_z_p_zs => 0x651d8000,
            Self::FMAX_z_p_zs => 0x651e8000,
            Self::FMIN_z_p_zs => 0x651f8000,
            Self::FCMGE_p_p_z0 => 0x65102000,
            Self::FCMGT_p_p_z0 => 0x65102010,
            Self::FCMLT_p_p_z0 => 0x65112000,
            Self::FCMLE_p_p_z0 => 0x65112010,
            Self::FCMEQ_p_p_z0 => 0x65122000,
            Self::FCMNE_p_p_z0 => 0x65132000,
            Self::ADD_z_p_zz => 0x4000000,
            Self::SADDV_r_p_z => 0x4002000,
            Self::ASR_z_p_zi => 0x4008000,
            Self::SUB_z_p_zz => 0x4010000,
            Self::UADDV_r_p_z => 0x4012000,
            Self::LSR_z_p_zi => 0x4018000,
            Self::SUBR_z_p_zz => 0x4030000,
            Self::LSL_z_p_zi => 0x4038000,
            Self::ASRD_z_p_zi => 0x4048000,
            Self::SMAX_z_p_zz => 0x4080000,
            Self::SMAXV_r_p_z => 0x4082000,
            Self::UMAX_z_p_zz => 0x4090000,
            Self::UMAXV_r_p_z => 0x4092000,
            Self::SMIN_z_p_zz => 0x40a0000,
            Self::SMINV_r_p_z => 0x40a2000,
            Self::UMIN_z_p_zz => 0x40b0000,
            Self::UMINV_r_p_z => 0x40b2000,
            Self::SABD_z_p_zz => 0x40c0000,
            Self::UABD_z_p_zz => 0x40d0000,
            Self::MUL_z_p_zz => 0x4100000,
            Self::ASR_z_p_zz => 0x4108000,
            Self::SXTB_z_p_z => 0x410a000,
            Self::LSR_z_p_zz => 0x4118000,
            Self::UXTB_z_p_z => 0x411a000,
            Self::SMULH_z_p_zz => 0x4120000,
            Self::SXTH_z_p_z => 0x412a000,
            Self::UMULH_z_p_zz => 0x4130000,
            Self::LSL_z_p_zz => 0x4138000,
            Self::UXTH_z_p_z => 0x413a000,
            Self::SDIV_z_p_zz => 0x4140000,
            Self::ASRR_z_p_zz => 0x4148000,
            Self::SXTW_z_p_z => 0x414a000,
            Self::UDIV_z_p_zz => 0x4150000,
            Self::LSRR_z_p_zz => 0x4158000,
            Self::UXTW_z_p_z => 0x415a000,
            Self::SDIVR_z_p_zz => 0x4160000,
            Self::ABS_z_p_z => 0x416a000,
            Self::UDIVR_z_p_zz => 0x4170000,
            Self::LSLR_z_p_zz => 0x4178000,
            Self::NEG_z_p_z => 0x417a000,
            Self::ORR_z_p_zz => 0x4180000,
            Self::ORV_r_p_z => 0x4182000,
            Self::ASR_z_p_zw => 0x4188000,
            Self::CLS_z_p_z => 0x418a000,
            Self::EOR_z_p_zz => 0x4190000,
            Self::EORV_r_p_z => 0x4192000,
            Self::LSR_z_p_zw => 0x4198000,
            Self::CLZ_z_p_z => 0x419a000,
            Self::AND_z_p_zz => 0x41a0000,
            Self::ANDV_r_p_z => 0x41a2000,
            Self::CNT_z_p_z => 0x41aa000,
            Self::BIC_z_p_zz => 0x41b0000,
            Self::LSL_z_p_zw => 0x41b8000,
            Self::CNOT_z_p_z => 0x41ba000,
            Self::FABS_z_p_z => 0x41ca000,
            Self::FNEG_z_p_z => 0x41da000,
            Self::NOT_z_p_z => 0x41ea000,
            Self::CPY_z_p_v => 0x5208000,
            Self::MOV_cpy_z_p_v => 0x5208000,
            Self::LASTA_r_p_z => 0x520a000,
            Self::COMPACT_z_p_z => 0x5218000,
            Self::LASTB_r_p_z => 0x521a000,
            Self::LASTA_v_p_z => 0x5228000,
            Self::LASTB_v_p_z => 0x5238000,
            Self::REVB_z_z => 0x5248000,
            Self::REVH_z_z => 0x5258000,
            Self::REVW_z_z => 0x5268000,
            Self::RBIT_z_p_z => 0x5278000,
            Self::CLASTA_z_p_zz => 0x5288000,
            Self::CPY_z_p_r => 0x528a000,
            Self::MOV_cpy_z_p_r => 0x528a000,
            Self::CLASTB_z_p_zz => 0x5298000,
            Self::CLASTA_v_p_z => 0x52a8000,
            Self::CLASTB_v_p_z => 0x52b8000,
            Self::SPLICE_z_p_zz_des => 0x52c8000,
            Self::CLASTA_r_p_z => 0x530a000,
            Self::CLASTB_r_p_z => 0x531a000,
            Self::SMAX_z_zi => 0x2528c000,
            Self::UMAX_z_zi => 0x2529c000,
            Self::SMIN_z_zi => 0x252ac000,
            Self::UMIN_z_zi => 0x252bc000,
            Self::MUL_z_zi => 0x2530c000,
            Self::FDUP_z_i => 0x2539c000,
            Self::FMOV_fdup_z_i => 0x2539c000,
            Self::FADDV_v_p_z => 0x65002000,
            Self::FADD_z_p_zz => 0x65008000,
            Self::FRINTN_z_p_z => 0x6500a000,
            Self::FSUB_z_p_zz => 0x65018000,
            Self::FRINTP_z_p_z => 0x6501a000,
            Self::FMUL_z_p_zz => 0x65028000,
            Self::FRINTM_z_p_z => 0x6502a000,
            Self::FSUBR_z_p_zz => 0x65038000,
            Self::FRINTZ_z_p_z => 0x6503a000,
            Self::FMAXNMV_v_p_z => 0x65042000,
            Self::FMAXNM_z_p_zz => 0x65048000,
            Self::FRINTA_z_p_z => 0x6504a000,
            Self::FMINNMV_v_p_z => 0x65052000,
            Self::FMINNM_z_p_zz => 0x65058000,
            Self::FMAXV_v_p_z => 0x65062000,
            Self::FMAX_z_p_zz => 0x65068000,
            Self::FRINTX_z_p_z => 0x6506a000,
            Self::FMINV_v_p_z => 0x65072000,
            Self::FMIN_z_p_zz => 0x65078000,
            Self::FRINTI_z_p_z => 0x6507a000,
            Self::FABD_z_p_zz => 0x65088000,
            Self::FSCALE_z_p_zz => 0x65098000,
            Self::FMULX_z_p_zz => 0x650a8000,
            Self::FDIVR_z_p_zz => 0x650c8000,
            Self::FRECPX_z_p_z => 0x650ca000,
            Self::FDIV_z_p_zz => 0x650d8000,
            Self::FSQRT_z_p_z => 0x650da000,
            Self::FADDA_v_p_z => 0x65182000,
            Self::CNTP_r_p_p => 0x25208000,
            Self::ADD_z_zi => 0x2520c000,
            Self::SUB_z_zi => 0x2521c000,
            Self::SUBR_z_zi => 0x2523c000,
            Self::SQADD_z_zi => 0x2524c000,
            Self::UQADD_z_zi => 0x2525c000,
            Self::SQSUB_z_zi => 0x2526c000,
            Self::UQSUB_z_zi => 0x2527c000,
            Self::DUP_z_i => 0x2538c000,
            Self::MOV_dup_z_i => 0x2538c000,
            Self::MOVPRFX_z_p_z => 0x4102000,
            Self::FCADD_z_p_zz => 0x64008000,
            Self::FTMAD_z_zzi => 0x65108000,
            Self::FMOV_cpy_z_p_i => 0x5104000,
            Self::ZIP1_p_pp => 0x5204000,
            Self::ZIP2_p_pp => 0x5204400,
            Self::UZP1_p_pp => 0x5204800,
            Self::UZP2_p_pp => 0x5204c00,
            Self::TRN1_p_pp => 0x5205000,
            Self::TRN2_p_pp => 0x5205400,
            Self::FCPY_z_p_i => 0x510c000,
            Self::FMOV_fcpy_z_p_i => 0x510c000,
            Self::CPY_z_o_i => 0x5100000,
            Self::MOV_cpy_z_o_i => 0x5100000,
            Self::CPY_z_p_i => 0x5104000,
            Self::MOV_cpy_z_p_i => 0x5104000,
            Self::ADD_z_zz => 0x4200000,
            Self::SUB_z_zz => 0x4200400,
            Self::SQADD_z_zz => 0x4201000,
            Self::UQADD_z_zz => 0x4201400,
            Self::SQSUB_z_zz => 0x4201800,
            Self::UQSUB_z_zz => 0x4201c00,
            Self::INDEX_z_ii => 0x4204000,
            Self::INDEX_z_ri => 0x4204400,
            Self::INDEX_z_ir => 0x4204800,
            Self::INDEX_z_rr => 0x4204c00,
            Self::ASR_z_zw => 0x4208000,
            Self::LSR_z_zw => 0x4208400,
            Self::LSL_z_zw => 0x4208c00,
            Self::ASR_z_zi => 0x4209000,
            Self::LSR_z_zi => 0x4209400,
            Self::LSL_z_zi => 0x4209c00,
            Self::FTSSEL_z_zz => 0x420b000,
            Self::DUP_z_zi => 0x5202000,
            Self::MOV_dup_z_zi => 0x5202000,
            Self::TBL_z_zz_1 => 0x5203000,
            Self::ZIP1_z_zz => 0x5206000,
            Self::ZIP2_z_zz => 0x5206400,
            Self::UZP1_z_zz => 0x5206800,
            Self::UZP2_z_zz => 0x5206c00,
            Self::TRN1_z_zz => 0x5207000,
            Self::TRN2_z_zz => 0x5207400,
            Self::SDOT_z_zzz => 0x44000000,
            Self::UDOT_z_zzz => 0x44000400,
            Self::SQADD_asisdsame_only => 0x5e200c00,
            Self::SQSUB_asisdsame_only => 0x5e202c00,
            Self::CMGT_asisdsame_only => 0x5e203400,
            Self::CMGE_asisdsame_only => 0x5e203c00,
            Self::SSHL_asisdsame_only => 0x5e204400,
            Self::SQSHL_asisdsame_only => 0x5e204c00,
            Self::SRSHL_asisdsame_only => 0x5e205400,
            Self::SQRSHL_asisdsame_only => 0x5e205c00,
            Self::ADD_asisdsame_only => 0x5e208400,
            Self::CMTST_asisdsame_only => 0x5e208c00,
            Self::SQDMLAL_asisddiff_only => 0x5e209000,
            Self::SQDMLSL_asisddiff_only => 0x5e20b000,
            Self::SQDMULH_asisdsame_only => 0x5e20b400,
            Self::SQDMULL_asisddiff_only => 0x5e20d000,
            Self::FADD_z_zz => 0x65000000,
            Self::FSUB_z_zz => 0x65000400,
            Self::FMUL_z_zz => 0x65000800,
            Self::FTSMUL_z_zz => 0x65000c00,
            Self::FRECPS_z_zz => 0x65001800,
            Self::FRSQRTS_z_zz => 0x65001c00,
            Self::SQRDMLAH_asisdsame2_only => 0x7e008400,
            Self::SQRDMLSH_asisdsame2_only => 0x7e008c00,
            Self::UQADD_asisdsame_only => 0x7e200c00,
            Self::UQSUB_asisdsame_only => 0x7e202c00,
            Self::CMHI_asisdsame_only => 0x7e203400,
            Self::CMHS_asisdsame_only => 0x7e203c00,
            Self::USHL_asisdsame_only => 0x7e204400,
            Self::UQSHL_asisdsame_only => 0x7e204c00,
            Self::URSHL_asisdsame_only => 0x7e205400,
            Self::UQRSHL_asisdsame_only => 0x7e205c00,
            Self::SUB_asisdsame_only => 0x7e208400,
            Self::CMEQ_asisdsame_only => 0x7e208c00,
            Self::SQRDMULH_asisdsame_only => 0x7e20b400,
            Self::WHILELT_p_p_rr => 0x25200400,
            Self::WHILELE_p_p_rr => 0x25200410,
            Self::WHILELO_p_p_rr => 0x25200c00,
            Self::WHILELS_p_p_rr => 0x25200c10,
            Self::CMPHS_p_p_zz => 0x24000000,
            Self::CMPLS_cmphs_p_p_zz => 0x24000000,
            Self::CMPHI_p_p_zz => 0x24000010,
            Self::CMPLO_cmphi_p_p_zz => 0x24000010,
            Self::CMPEQ_p_p_zw => 0x24002000,
            Self::CMPNE_p_p_zw => 0x24002010,
            Self::CMPGE_p_p_zw => 0x24004000,
            Self::CMPGT_p_p_zw => 0x24004010,
            Self::CMPLT_p_p_zw => 0x24006000,
            Self::CMPLE_p_p_zw => 0x24006010,
            Self::CMPGE_p_p_zz => 0x24008000,
            Self::CMPLE_cmpge_p_p_zz => 0x24008000,
            Self::CMPGT_p_p_zz => 0x24008010,
            Self::CMPLT_cmpgt_p_p_zz => 0x24008010,
            Self::CMPEQ_p_p_zz => 0x2400a000,
            Self::CMPNE_p_p_zz => 0x2400a010,
            Self::CMPHS_p_p_zw => 0x2400c000,
            Self::CMPHI_p_p_zw => 0x2400c010,
            Self::CMPLO_p_p_zw => 0x2400e000,
            Self::CMPLS_p_p_zw => 0x2400e010,
            Self::CMPGE_p_p_zi => 0x25000000,
            Self::CMPGT_p_p_zi => 0x25000010,
            Self::CMPLT_p_p_zi => 0x25002000,
            Self::CMPLE_p_p_zi => 0x25002010,
            Self::CMPEQ_p_p_zi => 0x25008000,
            Self::CMPNE_p_p_zi => 0x25008010,
            Self::FCMGE_p_p_zz => 0x65004000,
            Self::FCMLE_fcmge_p_p_zz => 0x65004000,
            Self::FCMGT_p_p_zz => 0x65004010,
            Self::FCMLT_fcmgt_p_p_zz => 0x65004010,
            Self::FCMEQ_p_p_zz => 0x65006000,
            Self::FCMNE_p_p_zz => 0x65006010,
            Self::FCMUO_p_p_zz => 0x6500c000,
            Self::FACGE_p_p_zz => 0x6500c010,
            Self::FACLE_facge_p_p_zz => 0x6500c010,
            Self::FACGT_p_p_zz => 0x6500e010,
            Self::FACLT_facgt_p_p_zz => 0x6500e010,
            Self::MLA_z_p_zzz => 0x4004000,
            Self::MLS_z_p_zzz => 0x4006000,
            Self::MAD_z_p_zzz => 0x400c000,
            Self::MSB_z_p_zzz => 0x400e000,
            Self::FMLA_z_p_zzz => 0x65200000,
            Self::FMLS_z_p_zzz => 0x65202000,
            Self::FNMLA_z_p_zzz => 0x65204000,
            Self::FNMLS_z_p_zzz => 0x65206000,
            Self::FMAD_z_p_zzz => 0x65208000,
            Self::FMSB_z_p_zzz => 0x6520a000,
            Self::FNMAD_z_p_zzz => 0x6520c000,
            Self::FNMSB_z_p_zzz => 0x6520e000,
            Self::MOV_sel_z_p_zz => 0x520c000,
            Self::SEL_z_p_zz => 0x520c000,
            Self::FCMLA_z_p_zzz => 0x64000000,
            Self::CMPHS_p_p_zi => 0x24200000,
            Self::CMPHI_p_p_zi => 0x24200010,
            Self::CMPLO_p_p_zi => 0x24202000,
            Self::CMPLS_p_p_zi => 0x24202010,
            Self::MVN_ORN_32_log_shift => 0x2a2003e0,
            Self::NEG_SUB_32_addsub_shift => 0x4b0003e0,
            Self::NEGS_SUBS_32_addsub_shift => 0x6b0003e0,
            Self::MVN_ORN_64_log_shift => 0xaa2003e0,
            Self::NEG_SUB_64_addsub_shift => 0xcb0003e0,
            Self::NEGS_SUBS_64_addsub_shift => 0xeb0003e0,
            Self::CMN_ADDS_32_addsub_shift => 0x2b00001f,
            Self::TST_ANDS_32_log_shift => 0x6a00001f,
            Self::CMP_SUBS_32_addsub_shift => 0x6b00001f,
            Self::CMN_ADDS_64_addsub_shift => 0xab00001f,
            Self::TST_ANDS_64_log_shift => 0xea00001f,
            Self::CMP_SUBS_64_addsub_shift => 0xeb00001f,
            Self::AND_32_log_shift => 0xa000000,
            Self::BIC_32_log_shift => 0xa200000,
            Self::ADD_32_addsub_shift => 0xb000000,
            Self::ORR_32_log_shift => 0x2a000000,
            Self::ORN_32_log_shift => 0x2a200000,
            Self::ADDS_32_addsub_shift => 0x2b000000,
            Self::EOR_32_log_shift => 0x4a000000,
            Self::EON_32_log_shift => 0x4a200000,
            Self::SUB_32_addsub_shift => 0x4b000000,
            Self::ANDS_32_log_shift => 0x6a000000,
            Self::BICS_32_log_shift => 0x6a200000,
            Self::SUBS_32_addsub_shift => 0x6b000000,
            Self::AND_64_log_shift => 0x8a000000,
            Self::BIC_64_log_shift => 0x8a200000,
            Self::ADD_64_addsub_shift => 0x8b000000,
            Self::ORR_64_log_shift => 0xaa000000,
            Self::ORN_64_log_shift => 0xaa200000,
            Self::ADDS_64_addsub_shift => 0xab000000,
            Self::EOR_64_log_shift => 0xca000000,
            Self::EON_64_log_shift => 0xca200000,
            Self::SUB_64_addsub_shift => 0xcb000000,
            Self::ANDS_64_log_shift => 0xea000000,
            Self::BICS_64_log_shift => 0xea200000,
            Self::SUBS_64_addsub_shift => 0xeb000000,
            Self::SQDMLAL_asisdelem_L => 0x5f003000,
            Self::SQDMLSL_asisdelem_L => 0x5f007000,
            Self::SQDMULL_asisdelem_L => 0x5f00b000,
            Self::SQDMULH_asisdelem_R => 0x5f00c000,
            Self::SQRDMULH_asisdelem_R => 0x5f00d000,
            Self::SQRDMLAH_asisdelem_R => 0x7f00d000,
            Self::SQRDMLSH_asisdelem_R => 0x7f00f000,
            Self::B_only_condbranch => 0x54000000,
            Self::LDR_32_loadlit => 0x18000000,
            Self::LDR_S_loadlit => 0x1c000000,
            Self::CBZ_32_compbranch => 0x34000000,
            Self::CBNZ_32_compbranch => 0x35000000,
            Self::LDR_64_loadlit => 0x58000000,
            Self::LDR_D_loadlit => 0x5c000000,
            Self::LDRSW_64_loadlit => 0x98000000,
            Self::LDR_Q_loadlit => 0x9c000000,
            Self::CBZ_64_compbranch => 0xb4000000,
            Self::CBNZ_64_compbranch => 0xb5000000,
            Self::PRFM_P_loadlit => 0xd8000000,
            Self::B_only_branch_imm => 0x14000000,
            Self::BL_only_branch_imm => 0x94000000,
            Self::ST1_asisdlso_D1_1d => 0xd008400,
            Self::ST3_asisdlso_D3_3d => 0xd00a400,
            Self::ST2_asisdlso_D2_2d => 0xd208400,
            Self::ST4_asisdlso_D4_4d => 0xd20a400,
            Self::LD1_asisdlso_D1_1d => 0xd408400,
            Self::LD3_asisdlso_D3_3d => 0xd40a400,
            Self::LD2_asisdlso_D2_2d => 0xd608400,
            Self::LD4_asisdlso_D4_4d => 0xd60a400,
            Self::ST1_asisdlsop_D1_i1d => 0xd9f8400,
            Self::ST3_asisdlsop_D3_i3d => 0xd9fa400,
            Self::ST2_asisdlsop_D2_i2d => 0xdbf8400,
            Self::ST4_asisdlsop_D4_i4d => 0xdbfa400,
            Self::LD1_asisdlsop_D1_i1d => 0xddf8400,
            Self::LD3_asisdlsop_D3_i3d => 0xddfa400,
            Self::LD2_asisdlsop_D2_i2d => 0xdff8400,
            Self::LD4_asisdlsop_D4_i4d => 0xdffa400,
            Self::FMAXNMV_asimdall_only_H => 0xe30c800,
            Self::FMAXV_asimdall_only_H => 0xe30f800,
            Self::FRINTN_asimdmiscfp16_R => 0xe798800,
            Self::FRINTM_asimdmiscfp16_R => 0xe799800,
            Self::FCVTNS_asimdmiscfp16_R => 0xe79a800,
            Self::FCVTMS_asimdmiscfp16_R => 0xe79b800,
            Self::FCVTAS_asimdmiscfp16_R => 0xe79c800,
            Self::SCVTF_asimdmiscfp16_R => 0xe79d800,
            Self::BFCVTN_asimdmisc_4S => 0xea16800,
            Self::FMINNMV_asimdall_only_H => 0xeb0c800,
            Self::FMINV_asimdall_only_H => 0xeb0f800,
            Self::FCMGT_asimdmiscfp16_FZ => 0xef8c800,
            Self::FCMEQ_asimdmiscfp16_FZ => 0xef8d800,
            Self::FCMLT_asimdmiscfp16_FZ => 0xef8e800,
            Self::FABS_asimdmiscfp16_R => 0xef8f800,
            Self::FRINTP_asimdmiscfp16_R => 0xef98800,
            Self::FRINTZ_asimdmiscfp16_R => 0xef99800,
            Self::FCVTPS_asimdmiscfp16_R => 0xef9a800,
            Self::FCVTZS_asimdmiscfp16_R => 0xef9b800,
            Self::FRECPE_asimdmiscfp16_R => 0xef9d800,
            Self::MVN_NOT_asimdmisc_R => 0x2e205800,
            Self::NOT_asimdmisc_R => 0x2e205800,
            Self::RBIT_asimdmisc_R => 0x2e605800,
            Self::FRINTA_asimdmiscfp16_R => 0x2e798800,
            Self::FRINTX_asimdmiscfp16_R => 0x2e799800,
            Self::FCVTNU_asimdmiscfp16_R => 0x2e79a800,
            Self::FCVTMU_asimdmiscfp16_R => 0x2e79b800,
            Self::FCVTAU_asimdmiscfp16_R => 0x2e79c800,
            Self::UCVTF_asimdmiscfp16_R => 0x2e79d800,
            Self::FCMGE_asimdmiscfp16_FZ => 0x2ef8c800,
            Self::FCMLE_asimdmiscfp16_FZ => 0x2ef8d800,
            Self::FNEG_asimdmiscfp16_R => 0x2ef8f800,
            Self::FRINTI_asimdmiscfp16_R => 0x2ef99800,
            Self::FCVTPU_asimdmiscfp16_R => 0x2ef9a800,
            Self::FCVTZU_asimdmiscfp16_R => 0x2ef9b800,
            Self::FRSQRTE_asimdmiscfp16_R => 0x2ef9d800,
            Self::FSQRT_asimdmiscfp16_R => 0x2ef9f800,
            Self::ST4_asisdlse_R4 => 0xc000000,
            Self::ST1_asisdlse_R4_4v => 0xc002000,
            Self::ST3_asisdlse_R3 => 0xc004000,
            Self::ST1_asisdlse_R3_3v => 0xc006000,
            Self::ST1_asisdlse_R1_1v => 0xc007000,
            Self::ST2_asisdlse_R2 => 0xc008000,
            Self::ST1_asisdlse_R2_2v => 0xc00a000,
            Self::LD4_asisdlse_R4 => 0xc400000,
            Self::LD1_asisdlse_R4_4v => 0xc402000,
            Self::LD3_asisdlse_R3 => 0xc404000,
            Self::LD1_asisdlse_R3_3v => 0xc406000,
            Self::LD1_asisdlse_R1_1v => 0xc407000,
            Self::LD2_asisdlse_R2 => 0xc408000,
            Self::LD1_asisdlse_R2_2v => 0xc40a000,
            Self::ST4_asisdlsep_I4_i => 0xc9f0000,
            Self::ST1_asisdlsep_I4_i4 => 0xc9f2000,
            Self::ST3_asisdlsep_I3_i => 0xc9f4000,
            Self::ST1_asisdlsep_I3_i3 => 0xc9f6000,
            Self::ST1_asisdlsep_I1_i1 => 0xc9f7000,
            Self::ST2_asisdlsep_I2_i => 0xc9f8000,
            Self::ST1_asisdlsep_I2_i2 => 0xc9fa000,
            Self::LD4_asisdlsep_I4_i => 0xcdf0000,
            Self::LD1_asisdlsep_I4_i4 => 0xcdf2000,
            Self::LD3_asisdlsep_I3_i => 0xcdf4000,
            Self::LD1_asisdlsep_I3_i3 => 0xcdf6000,
            Self::LD1_asisdlsep_I1_i1 => 0xcdf7000,
            Self::LD2_asisdlsep_I2_i => 0xcdf8000,
            Self::LD1_asisdlsep_I2_i2 => 0xcdfa000,
            Self::LD1R_asisdlso_R1 => 0xd40c000,
            Self::LD3R_asisdlso_R3 => 0xd40e000,
            Self::LD2R_asisdlso_R2 => 0xd60c000,
            Self::LD4R_asisdlso_R4 => 0xd60e000,
            Self::LD1R_asisdlsop_R1_i => 0xddfc000,
            Self::LD3R_asisdlsop_R3_i => 0xddfe000,
            Self::LD2R_asisdlsop_R2_i => 0xdffc000,
            Self::LD4R_asisdlsop_R4_i => 0xdffe000,
            Self::ST1_asisdlso_S1_1s => 0xd008000,
            Self::ST3_asisdlso_S3_3s => 0xd00a000,
            Self::ST2_asisdlso_S2_2s => 0xd208000,
            Self::ST4_asisdlso_S4_4s => 0xd20a000,
            Self::LD1_asisdlso_S1_1s => 0xd408000,
            Self::LD3_asisdlso_S3_3s => 0xd40a000,
            Self::LD2_asisdlso_S2_2s => 0xd608000,
            Self::LD4_asisdlso_S4_4s => 0xd60a000,
            Self::ST1_asisdlsop_S1_i1s => 0xd9f8000,
            Self::ST3_asisdlsop_S3_i3s => 0xd9fa000,
            Self::ST2_asisdlsop_S2_i2s => 0xdbf8000,
            Self::ST4_asisdlsop_S4_i4s => 0xdbfa000,
            Self::LD1_asisdlsop_S1_i1s => 0xddf8000,
            Self::LD3_asisdlsop_S3_i3s => 0xddfa000,
            Self::LD2_asisdlsop_S2_i2s => 0xdff8000,
            Self::LD4_asisdlsop_S4_i4s => 0xdffa000,
            Self::ST1_asisdlso_H1_1h => 0xd004000,
            Self::ST3_asisdlso_H3_3h => 0xd006000,
            Self::ST2_asisdlso_H2_2h => 0xd204000,
            Self::ST4_asisdlso_H4_4h => 0xd206000,
            Self::LD1_asisdlso_H1_1h => 0xd404000,
            Self::LD3_asisdlso_H3_3h => 0xd406000,
            Self::LD2_asisdlso_H2_2h => 0xd604000,
            Self::LD4_asisdlso_H4_4h => 0xd606000,
            Self::ST1_asisdlsop_H1_i1h => 0xd9f4000,
            Self::ST3_asisdlsop_H3_i3h => 0xd9f6000,
            Self::ST2_asisdlsop_H2_i2h => 0xdbf4000,
            Self::ST4_asisdlsop_H4_i4h => 0xdbf6000,
            Self::LD1_asisdlsop_H1_i1h => 0xddf4000,
            Self::LD3_asisdlsop_H3_i3h => 0xddf6000,
            Self::LD2_asisdlsop_H2_i2h => 0xdff4000,
            Self::LD4_asisdlsop_H4_i4h => 0xdff6000,
            Self::ST1_asisdlso_B1_1b => 0xd000000,
            Self::ST3_asisdlso_B3_3b => 0xd002000,
            Self::ST2_asisdlso_B2_2b => 0xd200000,
            Self::ST4_asisdlso_B4_4b => 0xd202000,
            Self::LD1_asisdlso_B1_1b => 0xd400000,
            Self::LD3_asisdlso_B3_3b => 0xd402000,
            Self::LD2_asisdlso_B2_2b => 0xd600000,
            Self::LD4_asisdlso_B4_4b => 0xd602000,
            Self::ST1_asisdlsop_B1_i1b => 0xd9f0000,
            Self::ST3_asisdlsop_B3_i3b => 0xd9f2000,
            Self::ST2_asisdlsop_B2_i2b => 0xdbf0000,
            Self::ST4_asisdlsop_B4_i4b => 0xdbf2000,
            Self::LD1_asisdlsop_B1_i1b => 0xddf0000,
            Self::LD3_asisdlsop_B3_i3b => 0xddf2000,
            Self::LD2_asisdlsop_B2_i2b => 0xdff0000,
            Self::LD4_asisdlsop_B4_i4b => 0xdff2000,
            Self::MOVI_asimdimm_N_b => 0xf00e400,
            Self::FMOV_asimdimm_S_s => 0xf00f400,
            Self::FMOV_asimdimm_H_h => 0xf00fc00,
            Self::MOVI_asimdimm_M_sm => 0xf00c400,
            Self::MVNI_asimdimm_M_sm => 0x2f00c400,
            Self::MOVI_asimdimm_L_hl => 0xf008400,
            Self::ORR_asimdimm_L_hl => 0xf009400,
            Self::MVNI_asimdimm_L_hl => 0x2f008400,
            Self::BIC_asimdimm_L_hl => 0x2f009400,
            Self::MOVI_asimdimm_L_sl => 0xf000400,
            Self::ORR_asimdimm_L_sl => 0xf001400,
            Self::MVNI_asimdimm_L_sl => 0x2f000400,
            Self::BIC_asimdimm_L_sl => 0x2f001400,
            Self::ST1_asisdlsop_DX1_r1d => 0xd808400,
            Self::ST3_asisdlsop_DX3_r3d => 0xd80a400,
            Self::ST2_asisdlsop_DX2_r2d => 0xda08400,
            Self::ST4_asisdlsop_DX4_r4d => 0xda0a400,
            Self::LD1_asisdlsop_DX1_r1d => 0xdc08400,
            Self::LD3_asisdlsop_DX3_r3d => 0xdc0a400,
            Self::LD2_asisdlsop_DX2_r2d => 0xde08400,
            Self::LD4_asisdlsop_DX4_r4d => 0xde0a400,
            Self::TBL_asimdtbl_L1_1 => 0xe000000,
            Self::DUP_asimdins_DV_v => 0xe000400,
            Self::DUP_asimdins_DR_r => 0xe000c00,
            Self::TBX_asimdtbl_L1_1 => 0xe001000,
            Self::TBL_asimdtbl_L2_2 => 0xe002000,
            Self::TBX_asimdtbl_L2_2 => 0xe003000,
            Self::TBL_asimdtbl_L3_3 => 0xe004000,
            Self::TBX_asimdtbl_L3_3 => 0xe005000,
            Self::TBL_asimdtbl_L4_4 => 0xe006000,
            Self::TBX_asimdtbl_L4_4 => 0xe007000,
            Self::AND_asimdsame_only => 0xe201c00,
            Self::FMLAL_asimdsame_F => 0xe20ec00,
            Self::FMAXNM_asimdsamefp16_only => 0xe400400,
            Self::FMLA_asimdsamefp16_only => 0xe400c00,
            Self::FADD_asimdsamefp16_only => 0xe401400,
            Self::FMULX_asimdsamefp16_only => 0xe401c00,
            Self::FCMEQ_asimdsamefp16_only => 0xe402400,
            Self::FMAX_asimdsamefp16_only => 0xe403400,
            Self::FRECPS_asimdsamefp16_only => 0xe403c00,
            Self::BIC_asimdsame_only => 0xe601c00,
            Self::USDOT_asimdsame2_D => 0xe809c00,
            Self::MOV_ORR_asimdsame_only => 0xea01c00,
            Self::ORR_asimdsame_only => 0xea01c00,
            Self::FMLSL_asimdsame_F => 0xea0ec00,
            Self::FMINNM_asimdsamefp16_only => 0xec00400,
            Self::FMLS_asimdsamefp16_only => 0xec00c00,
            Self::FSUB_asimdsamefp16_only => 0xec01400,
            Self::FMIN_asimdsamefp16_only => 0xec03400,
            Self::FRSQRTS_asimdsamefp16_only => 0xec03c00,
            Self::ORN_asimdsame_only => 0xee01c00,
            Self::EOR_asimdsame_only => 0x2e201c00,
            Self::FMLAL2_asimdsame_F => 0x2e20cc00,
            Self::FMAXNMP_asimdsamefp16_only => 0x2e400400,
            Self::FADDP_asimdsamefp16_only => 0x2e401400,
            Self::FMUL_asimdsamefp16_only => 0x2e401c00,
            Self::FCMGE_asimdsamefp16_only => 0x2e402400,
            Self::FACGE_asimdsamefp16_only => 0x2e402c00,
            Self::FMAXP_asimdsamefp16_only => 0x2e403400,
            Self::FDIV_asimdsamefp16_only => 0x2e403c00,
            Self::BFDOT_asimdsame2_D => 0x2e40fc00,
            Self::BSL_asimdsame_only => 0x2e601c00,
            Self::BIT_asimdsame_only => 0x2ea01c00,
            Self::FMLSL2_asimdsame_F => 0x2ea0cc00,
            Self::FMINNMP_asimdsamefp16_only => 0x2ec00400,
            Self::FABD_asimdsamefp16_only => 0x2ec01400,
            Self::FCMGT_asimdsamefp16_only => 0x2ec02400,
            Self::FACGT_asimdsamefp16_only => 0x2ec02c00,
            Self::FMINP_asimdsamefp16_only => 0x2ec03400,
            Self::BFMLAL_asimdsame2_F => 0x2ec0fc00,
            Self::BIF_asimdsame_only => 0x2ee01c00,
            Self::ST4_asisdlsep_R4_r => 0xc800000,
            Self::ST1_asisdlsep_R4_r4 => 0xc802000,
            Self::ST3_asisdlsep_R3_r => 0xc804000,
            Self::ST1_asisdlsep_R3_r3 => 0xc806000,
            Self::ST1_asisdlsep_R1_r1 => 0xc807000,
            Self::ST2_asisdlsep_R2_r => 0xc808000,
            Self::ST1_asisdlsep_R2_r2 => 0xc80a000,
            Self::LD4_asisdlsep_R4_r => 0xcc00000,
            Self::LD1_asisdlsep_R4_r4 => 0xcc02000,
            Self::LD3_asisdlsep_R3_r => 0xcc04000,
            Self::LD1_asisdlsep_R3_r3 => 0xcc06000,
            Self::LD1_asisdlsep_R1_r1 => 0xcc07000,
            Self::LD2_asisdlsep_R2_r => 0xcc08000,
            Self::LD1_asisdlsep_R2_r2 => 0xcc0a000,
            Self::LD1R_asisdlsop_RX1_r => 0xdc0c000,
            Self::LD3R_asisdlsop_RX3_r => 0xdc0e000,
            Self::LD2R_asisdlsop_RX2_r => 0xde0c000,
            Self::LD4R_asisdlsop_RX4_r => 0xde0e000,
            Self::ST1_asisdlsop_SX1_r1s => 0xd808000,
            Self::ST3_asisdlsop_SX3_r3s => 0xd80a000,
            Self::ST2_asisdlsop_SX2_r2s => 0xda08000,
            Self::ST4_asisdlsop_SX4_r4s => 0xda0a000,
            Self::LD1_asisdlsop_SX1_r1s => 0xdc08000,
            Self::LD3_asisdlsop_SX3_r3s => 0xdc0a000,
            Self::LD2_asisdlsop_SX2_r2s => 0xde08000,
            Self::LD4_asisdlsop_SX4_r4s => 0xde0a000,
            Self::ST1_asisdlsop_HX1_r1h => 0xd804000,
            Self::ST3_asisdlsop_HX3_r3h => 0xd806000,
            Self::ST2_asisdlsop_HX2_r2h => 0xda04000,
            Self::ST4_asisdlsop_HX4_r4h => 0xda06000,
            Self::LD1_asisdlsop_HX1_r1h => 0xdc04000,
            Self::LD3_asisdlsop_HX3_r3h => 0xdc06000,
            Self::LD2_asisdlsop_HX2_r2h => 0xde04000,
            Self::LD4_asisdlsop_HX4_r4h => 0xde06000,
            Self::ST1_asisdlsop_BX1_r1b => 0xd800000,
            Self::ST3_asisdlsop_BX3_r3b => 0xd802000,
            Self::ST2_asisdlsop_BX2_r2b => 0xda00000,
            Self::ST4_asisdlsop_BX4_r4b => 0xda02000,
            Self::LD1_asisdlsop_BX1_r1b => 0xdc00000,
            Self::LD3_asisdlsop_BX3_r3b => 0xdc02000,
            Self::LD2_asisdlsop_BX2_r2b => 0xde00000,
            Self::LD4_asisdlsop_BX4_r4b => 0xde02000,
            Self::EXT_asimdext_only => 0x2e000000,
            Self::FMLA_asimdelem_RH_H => 0xf001000,
            Self::FMLS_asimdelem_RH_H => 0xf005000,
            Self::FMUL_asimdelem_RH_H => 0xf009000,
            Self::SUDOT_asimdelem_D => 0xf00f000,
            Self::BFDOT_asimdelem_E => 0xf40f000,
            Self::FMLAL_asimdelem_LH => 0xf800000,
            Self::FMLSL_asimdelem_LH => 0xf804000,
            Self::USDOT_asimdelem_D => 0xf80f000,
            Self::BFMLAL_asimdelem_F => 0xfc0f000,
            Self::FMULX_asimdelem_RH_H => 0x2f009000,
            Self::FMLAL2_asimdelem_LH => 0x2f808000,
            Self::FMLSL2_asimdelem_LH => 0x2f80c000,
            Self::FCMLA_asimdelem_C_H => 0x2f401000,
            Self::FCMLA_asimdelem_C_S => 0x2f801000,
            Self::FCVTN_asimdmisc_N => 0xe216800,
            Self::FCVTL_asimdmisc_L => 0xe217800,
            Self::FRINTN_asimdmisc_R => 0xe218800,
            Self::FRINTM_asimdmisc_R => 0xe219800,
            Self::FCVTNS_asimdmisc_R => 0xe21a800,
            Self::FCVTMS_asimdmisc_R => 0xe21b800,
            Self::FCVTAS_asimdmisc_R => 0xe21c800,
            Self::SCVTF_asimdmisc_R => 0xe21d800,
            Self::FRINT32Z_asimdmisc_R => 0xe21e800,
            Self::FRINT64Z_asimdmisc_R => 0xe21f800,
            Self::FCMGT_asimdmisc_FZ => 0xea0c800,
            Self::FCMEQ_asimdmisc_FZ => 0xea0d800,
            Self::FCMLT_asimdmisc_FZ => 0xea0e800,
            Self::FABS_asimdmisc_R => 0xea0f800,
            Self::FRINTP_asimdmisc_R => 0xea18800,
            Self::FRINTZ_asimdmisc_R => 0xea19800,
            Self::FCVTPS_asimdmisc_R => 0xea1a800,
            Self::FCVTZS_asimdmisc_R => 0xea1b800,
            Self::URECPE_asimdmisc_R => 0xea1c800,
            Self::FRECPE_asimdmisc_R => 0xea1d800,
            Self::FCVTXN_asimdmisc_N => 0x2e216800,
            Self::FRINTA_asimdmisc_R => 0x2e218800,
            Self::FRINTX_asimdmisc_R => 0x2e219800,
            Self::FCVTNU_asimdmisc_R => 0x2e21a800,
            Self::FCVTMU_asimdmisc_R => 0x2e21b800,
            Self::FCVTAU_asimdmisc_R => 0x2e21c800,
            Self::UCVTF_asimdmisc_R => 0x2e21d800,
            Self::FRINT32X_asimdmisc_R => 0x2e21e800,
            Self::FRINT64X_asimdmisc_R => 0x2e21f800,
            Self::FMAXNMV_asimdall_only_SD => 0x2e30c800,
            Self::FMAXV_asimdall_only_SD => 0x2e30f800,
            Self::FCMGE_asimdmisc_FZ => 0x2ea0c800,
            Self::FCMLE_asimdmisc_FZ => 0x2ea0d800,
            Self::FNEG_asimdmisc_R => 0x2ea0f800,
            Self::FRINTI_asimdmisc_R => 0x2ea19800,
            Self::FCVTPU_asimdmisc_R => 0x2ea1a800,
            Self::FCVTZU_asimdmisc_R => 0x2ea1b800,
            Self::URSQRTE_asimdmisc_R => 0x2ea1c800,
            Self::FRSQRTE_asimdmisc_R => 0x2ea1d800,
            Self::FSQRT_asimdmisc_R => 0x2ea1f800,
            Self::FMINNMV_asimdall_only_SD => 0x2eb0c800,
            Self::FMINV_asimdall_only_SD => 0x2eb0f800,
            Self::FMAXNM_asimdsame_only => 0xe20c400,
            Self::FMLA_asimdsame_only => 0xe20cc00,
            Self::FADD_asimdsame_only => 0xe20d400,
            Self::FMULX_asimdsame_only => 0xe20dc00,
            Self::FCMEQ_asimdsame_only => 0xe20e400,
            Self::FMAX_asimdsame_only => 0xe20f400,
            Self::FRECPS_asimdsame_only => 0xe20fc00,
            Self::FMINNM_asimdsame_only => 0xea0c400,
            Self::FMLS_asimdsame_only => 0xea0cc00,
            Self::FSUB_asimdsame_only => 0xea0d400,
            Self::FMIN_asimdsame_only => 0xea0f400,
            Self::FRSQRTS_asimdsame_only => 0xea0fc00,
            Self::FMAXNMP_asimdsame_only => 0x2e20c400,
            Self::FADDP_asimdsame_only => 0x2e20d400,
            Self::FMUL_asimdsame_only => 0x2e20dc00,
            Self::FCMGE_asimdsame_only => 0x2e20e400,
            Self::FACGE_asimdsame_only => 0x2e20ec00,
            Self::FMAXP_asimdsame_only => 0x2e20f400,
            Self::FDIV_asimdsame_only => 0x2e20fc00,
            Self::FMINNMP_asimdsame_only => 0x2ea0c400,
            Self::FABD_asimdsame_only => 0x2ea0d400,
            Self::FCMGT_asimdsame_only => 0x2ea0e400,
            Self::FACGT_asimdsame_only => 0x2ea0ec00,
            Self::FMINP_asimdsame_only => 0x2ea0f400,
            Self::SXTL_SSHLL_asimdshf_L => 0xf00a400,
            Self::UXTL_USHLL_asimdshf_L => 0x2f00a400,
            Self::SSHR_asimdshf_R => 0xf000400,
            Self::SSRA_asimdshf_R => 0xf001400,
            Self::SRSHR_asimdshf_R => 0xf002400,
            Self::SRSRA_asimdshf_R => 0xf003400,
            Self::SHL_asimdshf_R => 0xf005400,
            Self::SQSHL_asimdshf_R => 0xf007400,
            Self::SHRN_asimdshf_N => 0xf008400,
            Self::RSHRN_asimdshf_N => 0xf008c00,
            Self::SQSHRN_asimdshf_N => 0xf009400,
            Self::SQRSHRN_asimdshf_N => 0xf009c00,
            Self::SSHLL_asimdshf_L => 0xf00a400,
            Self::SCVTF_asimdshf_C => 0xf00e400,
            Self::FCVTZS_asimdshf_C => 0xf00fc00,
            Self::USHR_asimdshf_R => 0x2f000400,
            Self::USRA_asimdshf_R => 0x2f001400,
            Self::URSHR_asimdshf_R => 0x2f002400,
            Self::URSRA_asimdshf_R => 0x2f003400,
            Self::SRI_asimdshf_R => 0x2f004400,
            Self::SLI_asimdshf_R => 0x2f005400,
            Self::SQSHLU_asimdshf_R => 0x2f006400,
            Self::UQSHL_asimdshf_R => 0x2f007400,
            Self::SQSHRUN_asimdshf_N => 0x2f008400,
            Self::SQRSHRUN_asimdshf_N => 0x2f008c00,
            Self::UQSHRN_asimdshf_N => 0x2f009400,
            Self::UQRSHRN_asimdshf_N => 0x2f009c00,
            Self::USHLL_asimdshf_L => 0x2f00a400,
            Self::UCVTF_asimdshf_C => 0x2f00e400,
            Self::FCVTZU_asimdshf_C => 0x2f00fc00,
            Self::FMLA_asimdelem_R_SD => 0xf801000,
            Self::FMLS_asimdelem_R_SD => 0xf805000,
            Self::FMUL_asimdelem_R_SD => 0xf809000,
            Self::FMULX_asimdelem_R_SD => 0x2f809000,
            Self::REV64_asimdmisc_R => 0xe200800,
            Self::REV16_asimdmisc_R => 0xe201800,
            Self::SADDLP_asimdmisc_P => 0xe202800,
            Self::SUQADD_asimdmisc_R => 0xe203800,
            Self::CLS_asimdmisc_R => 0xe204800,
            Self::CNT_asimdmisc_R => 0xe205800,
            Self::SADALP_asimdmisc_P => 0xe206800,
            Self::SQABS_asimdmisc_R => 0xe207800,
            Self::CMGT_asimdmisc_Z => 0xe208800,
            Self::CMEQ_asimdmisc_Z => 0xe209800,
            Self::CMLT_asimdmisc_Z => 0xe20a800,
            Self::ABS_asimdmisc_R => 0xe20b800,
            Self::XTN_asimdmisc_N => 0xe212800,
            Self::SQXTN_asimdmisc_N => 0xe214800,
            Self::SADDLV_asimdall_only => 0xe303800,
            Self::SMAXV_asimdall_only => 0xe30a800,
            Self::SMINV_asimdall_only => 0xe31a800,
            Self::ADDV_asimdall_only => 0xe31b800,
            Self::REV32_asimdmisc_R => 0x2e200800,
            Self::UADDLP_asimdmisc_P => 0x2e202800,
            Self::USQADD_asimdmisc_R => 0x2e203800,
            Self::CLZ_asimdmisc_R => 0x2e204800,
            Self::UADALP_asimdmisc_P => 0x2e206800,
            Self::SQNEG_asimdmisc_R => 0x2e207800,
            Self::CMGE_asimdmisc_Z => 0x2e208800,
            Self::CMLE_asimdmisc_Z => 0x2e209800,
            Self::NEG_asimdmisc_R => 0x2e20b800,
            Self::SQXTUN_asimdmisc_N => 0x2e212800,
            Self::SHLL_asimdmisc_S => 0x2e213800,
            Self::UQXTN_asimdmisc_N => 0x2e214800,
            Self::UADDLV_asimdall_only => 0x2e303800,
            Self::UMAXV_asimdall_only => 0x2e30a800,
            Self::UMINV_asimdall_only => 0x2e31a800,
            Self::UZP1_asimdperm_only => 0xe001800,
            Self::TRN1_asimdperm_only => 0xe002800,
            Self::ZIP1_asimdperm_only => 0xe003800,
            Self::UZP2_asimdperm_only => 0xe005800,
            Self::TRN2_asimdperm_only => 0xe006800,
            Self::ZIP2_asimdperm_only => 0xe007800,
            Self::SDOT_asimdsame2_D => 0xe009400,
            Self::SADDL_asimddiff_L => 0xe200000,
            Self::SHADD_asimdsame_only => 0xe200400,
            Self::SQADD_asimdsame_only => 0xe200c00,
            Self::SADDW_asimddiff_W => 0xe201000,
            Self::SRHADD_asimdsame_only => 0xe201400,
            Self::SSUBL_asimddiff_L => 0xe202000,
            Self::SHSUB_asimdsame_only => 0xe202400,
            Self::SQSUB_asimdsame_only => 0xe202c00,
            Self::SSUBW_asimddiff_W => 0xe203000,
            Self::CMGT_asimdsame_only => 0xe203400,
            Self::CMGE_asimdsame_only => 0xe203c00,
            Self::ADDHN_asimddiff_N => 0xe204000,
            Self::SSHL_asimdsame_only => 0xe204400,
            Self::SQSHL_asimdsame_only => 0xe204c00,
            Self::SABAL_asimddiff_L => 0xe205000,
            Self::SRSHL_asimdsame_only => 0xe205400,
            Self::SQRSHL_asimdsame_only => 0xe205c00,
            Self::SUBHN_asimddiff_N => 0xe206000,
            Self::SMAX_asimdsame_only => 0xe206400,
            Self::SMIN_asimdsame_only => 0xe206c00,
            Self::SABDL_asimddiff_L => 0xe207000,
            Self::SABD_asimdsame_only => 0xe207400,
            Self::SABA_asimdsame_only => 0xe207c00,
            Self::SMLAL_asimddiff_L => 0xe208000,
            Self::ADD_asimdsame_only => 0xe208400,
            Self::CMTST_asimdsame_only => 0xe208c00,
            Self::SQDMLAL_asimddiff_L => 0xe209000,
            Self::MLA_asimdsame_only => 0xe209400,
            Self::MUL_asimdsame_only => 0xe209c00,
            Self::SMLSL_asimddiff_L => 0xe20a000,
            Self::SMAXP_asimdsame_only => 0xe20a400,
            Self::SMINP_asimdsame_only => 0xe20ac00,
            Self::SQDMLSL_asimddiff_L => 0xe20b000,
            Self::SQDMULH_asimdsame_only => 0xe20b400,
            Self::ADDP_asimdsame_only => 0xe20bc00,
            Self::SMULL_asimddiff_L => 0xe20c000,
            Self::SQDMULL_asimddiff_L => 0xe20d000,
            Self::PMULL_asimddiff_L => 0xe20e000,
            Self::SQRDMLAH_asimdsame2_only => 0x2e008400,
            Self::SQRDMLSH_asimdsame2_only => 0x2e008c00,
            Self::UDOT_asimdsame2_D => 0x2e009400,
            Self::UADDL_asimddiff_L => 0x2e200000,
            Self::UHADD_asimdsame_only => 0x2e200400,
            Self::UQADD_asimdsame_only => 0x2e200c00,
            Self::UADDW_asimddiff_W => 0x2e201000,
            Self::URHADD_asimdsame_only => 0x2e201400,
            Self::USUBL_asimddiff_L => 0x2e202000,
            Self::UHSUB_asimdsame_only => 0x2e202400,
            Self::UQSUB_asimdsame_only => 0x2e202c00,
            Self::USUBW_asimddiff_W => 0x2e203000,
            Self::CMHI_asimdsame_only => 0x2e203400,
            Self::CMHS_asimdsame_only => 0x2e203c00,
            Self::RADDHN_asimddiff_N => 0x2e204000,
            Self::USHL_asimdsame_only => 0x2e204400,
            Self::UQSHL_asimdsame_only => 0x2e204c00,
            Self::UABAL_asimddiff_L => 0x2e205000,
            Self::URSHL_asimdsame_only => 0x2e205400,
            Self::UQRSHL_asimdsame_only => 0x2e205c00,
            Self::RSUBHN_asimddiff_N => 0x2e206000,
            Self::UMAX_asimdsame_only => 0x2e206400,
            Self::UMIN_asimdsame_only => 0x2e206c00,
            Self::UABDL_asimddiff_L => 0x2e207000,
            Self::UABD_asimdsame_only => 0x2e207400,
            Self::UABA_asimdsame_only => 0x2e207c00,
            Self::UMLAL_asimddiff_L => 0x2e208000,
            Self::SUB_asimdsame_only => 0x2e208400,
            Self::CMEQ_asimdsame_only => 0x2e208c00,
            Self::MLS_asimdsame_only => 0x2e209400,
            Self::PMUL_asimdsame_only => 0x2e209c00,
            Self::UMLSL_asimddiff_L => 0x2e20a000,
            Self::UMAXP_asimdsame_only => 0x2e20a400,
            Self::UMINP_asimdsame_only => 0x2e20ac00,
            Self::SQRDMULH_asimdsame_only => 0x2e20b400,
            Self::UMULL_asimddiff_L => 0x2e20c000,
            Self::FCADD_asimdsame2_C => 0x2e00e400,
            Self::FCMLA_asimdsame2_C => 0x2e00c400,
            Self::SMLAL_asimdelem_L => 0xf002000,
            Self::SQDMLAL_asimdelem_L => 0xf003000,
            Self::SMLSL_asimdelem_L => 0xf006000,
            Self::SQDMLSL_asimdelem_L => 0xf007000,
            Self::MUL_asimdelem_R => 0xf008000,
            Self::SMULL_asimdelem_L => 0xf00a000,
            Self::SQDMULL_asimdelem_L => 0xf00b000,
            Self::SQDMULH_asimdelem_R => 0xf00c000,
            Self::SQRDMULH_asimdelem_R => 0xf00d000,
            Self::SDOT_asimdelem_D => 0xf00e000,
            Self::MLA_asimdelem_R => 0x2f000000,
            Self::UMLAL_asimdelem_L => 0x2f002000,
            Self::MLS_asimdelem_R => 0x2f004000,
            Self::UMLSL_asimdelem_L => 0x2f006000,
            Self::UMULL_asimdelem_L => 0x2f00a000,
            Self::SQRDMLAH_asimdelem_R => 0x2f00d000,
            Self::UDOT_asimdelem_D => 0x2f00e000,
            Self::SQRDMLSH_asimdelem_R => 0x2f00f000,
            Self::ADR_only_pcreladdr => 0x10000000,
            Self::ADRP_only_pcreladdr => 0x90000000,
            Self::TBZ_only_testbranch => 0x36000000,
            Self::TBNZ_only_testbranch => 0x37000000,
            
            Self::UNKNOWN(opcode) => *opcode,
        }
    }
}