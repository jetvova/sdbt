// @generated
// This file was automatically generated by extracting instruction names, parameters, and bit
// patterns from the Armv8-A 2020-12, A64 Instruction Set Architecture documentation provided 
// in XML format. I believe this consitutes fair use for research and educational purposes.
// https://developer.arm.com/architectures/cpu-architecture/a-profile/exploration-tools

// Please note that the A64 instruction set is property and copyrighted material of Arm Ltd.

#![allow(unused_attributes, non_snake_case, non_camel_case_types)]
#![rustfmt::skip]

#[derive(Debug, Clone, PartialEq, Eq)]
pub enum Instruction {
    SETFFR_f,
    NOP_HI_hints,
    YIELD_HI_hints,
    WFE_HI_hints,
    WFI_HI_hints,
    SEV_HI_hints,
    SEVL_HI_hints,
    DGH_HI_hints,
    XPACLRI_HI_hints,
    PACIA1716_HI_hints,
    PACIB1716_HI_hints,
    AUTIA1716_HI_hints,
    AUTIB1716_HI_hints,
    ESB_HI_hints,
    PSB_HC_hints,
    TSB_HC_hints,
    CSDB_HI_hints,
    PACIAZ_HI_hints,
    PACIASP_HI_hints,
    PACIBZ_HI_hints,
    PACIBSP_HI_hints,
    AUTIAZ_HI_hints,
    AUTIASP_HI_hints,
    AUTIBZ_HI_hints,
    AUTIBSP_HI_hints,
    SSBB_only_barriers,
    PSSBB_only_barriers,
    RETAA_64E_branch_reg,
    RETAB_64E_branch_reg,
    ERET_64E_branch_reg,
    ERETAA_64E_branch_reg,
    ERETAB_64E_branch_reg,
    DRPS_64E_branch_reg,
    BTI_HB_hints { op2: u8, },
    DSB_BOn_barriers { imm2: u8, },
    DSB_BO_barriers { CRm: u8, },
    PFALSE_p { Pd: u8, },
    RDFFR_p_f { Pd: u8, },
    WRFFR_f_p { Pn: u8, },
    CFINV_M_pstate { CRm: u8, },
    XAFLAG_M_pstate { CRm: u8, },
    AXFLAG_M_pstate { CRm: u8, },
    CLREX_BN_barriers { CRm: u8, },
    DMB_BO_barriers { CRm: u8, },
    ISB_BI_barriers { CRm: u8, },
    SB_only_barriers { CRm: u8, },
    SETF8_only_setf { Rn: u8, },
    SETF16_only_setf { Rn: u8, },
    WFET_only_systeminstrswithreg { Rd: u8, },
    WFIT_only_systeminstrswithreg { Rd: u8, },
    CFP_SYS_CR_systeminstrs { Rt: u8, },
    DVP_SYS_CR_systeminstrs { Rt: u8, },
    CPP_SYS_CR_systeminstrs { Rt: u8, },
    BR_64_branch_reg { Rn: u8, },
    BRAAZ_64_branch_reg { Rn: u8, },
    BRABZ_64_branch_reg { Rn: u8, },
    BLR_64_branch_reg { Rn: u8, },
    BLRAAZ_64_branch_reg { Rn: u8, },
    BLRABZ_64_branch_reg { Rn: u8, },
    RET_64R_branch_reg { Rn: u8, },
    PACIZA_64Z_dp_1src { Rd: u8, },
    PACIZB_64Z_dp_1src { Rd: u8, },
    PACDZA_64Z_dp_1src { Rd: u8, },
    PACDZB_64Z_dp_1src { Rd: u8, },
    AUTIZA_64Z_dp_1src { Rd: u8, },
    AUTIZB_64Z_dp_1src { Rd: u8, },
    AUTDZA_64Z_dp_1src { Rd: u8, },
    AUTDZB_64Z_dp_1src { Rd: u8, },
    XPACI_64Z_dp_1src { Rd: u8, },
    XPACD_64Z_dp_1src { Rd: u8, },
    FMOV_dup_z_i { size: u8, Zd: u8, },
    HINT_HM_hints { CRm: u8, op2: u8, },
    PUNPKLO_p_p { Pn: u8, Pd: u8, },
    PUNPKHI_p_p { Pn: u8, Pd: u8, },
    RDFFR_p_p_f { Pg: u8, Pd: u8, },
    PTEST_p_p { Pg: u8, Pn: u8, },
    PFIRST_p_p_p { Pg: u8, Pdn: u8, },
    RDFFRS_p_p_f { Pg: u8, Pd: u8, },
    CSET_CSINC_32_condsel { cond: u8, Rd: u8, },
    CSETM_CSINV_32_condsel { cond: u8, Rd: u8, },
    CSET_CSINC_64_condsel { cond: u8, Rd: u8, },
    CSETM_CSINV_64_condsel { cond: u8, Rd: u8, },
    MOVPRFX_z_z { Zn: u8, Zd: u8, },
    REV_p_p { size: u8, Pn: u8, Pd: u8, },
    MOV_ADD_32_addsub_imm { Rn: u8, Rd: u8, },
    SXTB_SBFM_32M_bitfield { Rn: u8, Rd: u8, },
    SXTH_SBFM_32M_bitfield { Rn: u8, Rd: u8, },
    FCVTNS_32S_float2int { Rn: u8, Rd: u8, },
    FCMP_S_floatcmp { Rm: u8, Rn: u8, },
    FCMP_SZ_floatcmp { Rm: u8, Rn: u8, },
    FCMPE_S_floatcmp { Rm: u8, Rn: u8, },
    FCMPE_SZ_floatcmp { Rm: u8, Rn: u8, },
    FMOV_S_floatdp1 { Rn: u8, Rd: u8, },
    FABS_S_floatdp1 { Rn: u8, Rd: u8, },
    FCVTNU_32S_float2int { Rn: u8, Rd: u8, },
    FNEG_S_floatdp1 { Rn: u8, Rd: u8, },
    FSQRT_S_floatdp1 { Rn: u8, Rd: u8, },
    SCVTF_S32_float2int { Rn: u8, Rd: u8, },
    FCVT_DS_floatdp1 { Rn: u8, Rd: u8, },
    UCVTF_S32_float2int { Rn: u8, Rd: u8, },
    FCVT_HS_floatdp1 { Rn: u8, Rd: u8, },
    FCVTAS_32S_float2int { Rn: u8, Rd: u8, },
    FRINTN_S_floatdp1 { Rn: u8, Rd: u8, },
    FRINTP_S_floatdp1 { Rn: u8, Rd: u8, },
    FCVTAU_32S_float2int { Rn: u8, Rd: u8, },
    FRINTM_S_floatdp1 { Rn: u8, Rd: u8, },
    FRINTZ_S_floatdp1 { Rn: u8, Rd: u8, },
    FMOV_32S_float2int { Rn: u8, Rd: u8, },
    FRINTA_S_floatdp1 { Rn: u8, Rd: u8, },
    FMOV_S32_float2int { Rn: u8, Rd: u8, },
    FRINTX_S_floatdp1 { Rn: u8, Rd: u8, },
    FRINTI_S_floatdp1 { Rn: u8, Rd: u8, },
    FCVTPS_32S_float2int { Rn: u8, Rd: u8, },
    FRINT32Z_S_floatdp1 { Rn: u8, Rd: u8, },
    FRINT32X_S_floatdp1 { Rn: u8, Rd: u8, },
    FCVTPU_32S_float2int { Rn: u8, Rd: u8, },
    FRINT64Z_S_floatdp1 { Rn: u8, Rd: u8, },
    FRINT64X_S_floatdp1 { Rn: u8, Rd: u8, },
    FCVTMS_32S_float2int { Rn: u8, Rd: u8, },
    FCVTMU_32S_float2int { Rn: u8, Rd: u8, },
    FCVTZS_32S_float2int { Rn: u8, Rd: u8, },
    FCVTZU_32S_float2int { Rn: u8, Rd: u8, },
    FCVTNS_32D_float2int { Rn: u8, Rd: u8, },
    FCMP_D_floatcmp { Rm: u8, Rn: u8, },
    FCMP_DZ_floatcmp { Rm: u8, Rn: u8, },
    FCMPE_D_floatcmp { Rm: u8, Rn: u8, },
    FCMPE_DZ_floatcmp { Rm: u8, Rn: u8, },
    FMOV_D_floatdp1 { Rn: u8, Rd: u8, },
    FABS_D_floatdp1 { Rn: u8, Rd: u8, },
    FCVTNU_32D_float2int { Rn: u8, Rd: u8, },
    FNEG_D_floatdp1 { Rn: u8, Rd: u8, },
    FSQRT_D_floatdp1 { Rn: u8, Rd: u8, },
    SCVTF_D32_float2int { Rn: u8, Rd: u8, },
    FCVT_SD_floatdp1 { Rn: u8, Rd: u8, },
    UCVTF_D32_float2int { Rn: u8, Rd: u8, },
    BFCVT_BS_floatdp1 { Rn: u8, Rd: u8, },
    FCVT_HD_floatdp1 { Rn: u8, Rd: u8, },
    FCVTAS_32D_float2int { Rn: u8, Rd: u8, },
    FRINTN_D_floatdp1 { Rn: u8, Rd: u8, },
    FRINTP_D_floatdp1 { Rn: u8, Rd: u8, },
    FCVTAU_32D_float2int { Rn: u8, Rd: u8, },
    FRINTM_D_floatdp1 { Rn: u8, Rd: u8, },
    FRINTZ_D_floatdp1 { Rn: u8, Rd: u8, },
    FRINTA_D_floatdp1 { Rn: u8, Rd: u8, },
    FRINTX_D_floatdp1 { Rn: u8, Rd: u8, },
    FRINTI_D_floatdp1 { Rn: u8, Rd: u8, },
    FCVTPS_32D_float2int { Rn: u8, Rd: u8, },
    FRINT32Z_D_floatdp1 { Rn: u8, Rd: u8, },
    FRINT32X_D_floatdp1 { Rn: u8, Rd: u8, },
    FCVTPU_32D_float2int { Rn: u8, Rd: u8, },
    FRINT64Z_D_floatdp1 { Rn: u8, Rd: u8, },
    FRINT64X_D_floatdp1 { Rn: u8, Rd: u8, },
    FCVTMS_32D_float2int { Rn: u8, Rd: u8, },
    FCVTMU_32D_float2int { Rn: u8, Rd: u8, },
    FCVTZS_32D_float2int { Rn: u8, Rd: u8, },
    FCVTZU_32D_float2int { Rn: u8, Rd: u8, },
    FJCVTZS_32D_float2int { Rn: u8, Rd: u8, },
    FCVTNS_32H_float2int { Rn: u8, Rd: u8, },
    FCMP_H_floatcmp { Rm: u8, Rn: u8, },
    FCMP_HZ_floatcmp { Rm: u8, Rn: u8, },
    FCMPE_H_floatcmp { Rm: u8, Rn: u8, },
    FCMPE_HZ_floatcmp { Rm: u8, Rn: u8, },
    FMOV_H_floatdp1 { Rn: u8, Rd: u8, },
    FABS_H_floatdp1 { Rn: u8, Rd: u8, },
    FCVTNU_32H_float2int { Rn: u8, Rd: u8, },
    FNEG_H_floatdp1 { Rn: u8, Rd: u8, },
    FSQRT_H_floatdp1 { Rn: u8, Rd: u8, },
    SCVTF_H32_float2int { Rn: u8, Rd: u8, },
    FCVT_SH_floatdp1 { Rn: u8, Rd: u8, },
    FCVT_DH_floatdp1 { Rn: u8, Rd: u8, },
    UCVTF_H32_float2int { Rn: u8, Rd: u8, },
    FCVTAS_32H_float2int { Rn: u8, Rd: u8, },
    FRINTN_H_floatdp1 { Rn: u8, Rd: u8, },
    FRINTP_H_floatdp1 { Rn: u8, Rd: u8, },
    FCVTAU_32H_float2int { Rn: u8, Rd: u8, },
    FRINTM_H_floatdp1 { Rn: u8, Rd: u8, },
    FRINTZ_H_floatdp1 { Rn: u8, Rd: u8, },
    FMOV_32H_float2int { Rn: u8, Rd: u8, },
    FRINTA_H_floatdp1 { Rn: u8, Rd: u8, },
    FMOV_H32_float2int { Rn: u8, Rd: u8, },
    FRINTX_H_floatdp1 { Rn: u8, Rd: u8, },
    FRINTI_H_floatdp1 { Rn: u8, Rd: u8, },
    FCVTPS_32H_float2int { Rn: u8, Rd: u8, },
    FCVTPU_32H_float2int { Rn: u8, Rd: u8, },
    FCVTMS_32H_float2int { Rn: u8, Rd: u8, },
    FCVTMU_32H_float2int { Rn: u8, Rd: u8, },
    FCVTZS_32H_float2int { Rn: u8, Rd: u8, },
    FCVTZU_32H_float2int { Rn: u8, Rd: u8, },
    PNEXT_p_p_p { size: u8, Pg: u8, Pdn: u8, },
    MOV_ORR_32_log_shift { Rm: u8, Rd: u8, },
    STADDB_LDADDB_32_memop { Rs: u8, Rn: u8, },
    STCLRB_LDCLRB_32_memop { Rs: u8, Rn: u8, },
    STEORB_LDEORB_32_memop { Rs: u8, Rn: u8, },
    STSETB_LDSETB_32_memop { Rs: u8, Rn: u8, },
    STSMAXB_LDSMAXB_32_memop { Rs: u8, Rn: u8, },
    STSMINB_LDSMINB_32_memop { Rs: u8, Rn: u8, },
    STUMAXB_LDUMAXB_32_memop { Rs: u8, Rn: u8, },
    STUMINB_LDUMINB_32_memop { Rs: u8, Rn: u8, },
    STADDLB_LDADDLB_32_memop { Rs: u8, Rn: u8, },
    STCLRLB_LDCLRLB_32_memop { Rs: u8, Rn: u8, },
    STEORLB_LDEORLB_32_memop { Rs: u8, Rn: u8, },
    STSETLB_LDSETLB_32_memop { Rs: u8, Rn: u8, },
    STSMAXLB_LDSMAXLB_32_memop { Rs: u8, Rn: u8, },
    STSMINLB_LDSMINLB_32_memop { Rs: u8, Rn: u8, },
    STUMAXLB_LDUMAXLB_32_memop { Rs: u8, Rn: u8, },
    STUMINLB_LDUMINLB_32_memop { Rs: u8, Rn: u8, },
    AESE_B_cryptoaes { Rn: u8, Rd: u8, },
    AESD_B_cryptoaes { Rn: u8, Rd: u8, },
    AESMC_B_cryptoaes { Rn: u8, Rd: u8, },
    AESIMC_B_cryptoaes { Rn: u8, Rd: u8, },
    UXTB_UBFM_32M_bitfield { Rn: u8, Rd: u8, },
    UXTH_UBFM_32M_bitfield { Rn: u8, Rd: u8, },
    NGC_SBC_32_addsub_carry { Rm: u8, Rd: u8, },
    RBIT_32_dp_1src { Rn: u8, Rd: u8, },
    REV16_32_dp_1src { Rn: u8, Rd: u8, },
    REV_32_dp_1src { Rn: u8, Rd: u8, },
    CLZ_32_dp_1src { Rn: u8, Rd: u8, },
    CLS_32_dp_1src { Rn: u8, Rd: u8, },
    SHA1H_SS_cryptosha2 { Rn: u8, Rd: u8, },
    SHA1SU1_VV_cryptosha2 { Rn: u8, Rd: u8, },
    SHA256SU0_VV_cryptosha2 { Rn: u8, Rd: u8, },
    FCVTNS_asisdmiscfp16_R { Rn: u8, Rd: u8, },
    FCVTMS_asisdmiscfp16_R { Rn: u8, Rd: u8, },
    FCVTAS_asisdmiscfp16_R { Rn: u8, Rd: u8, },
    SCVTF_asisdmiscfp16_R { Rn: u8, Rd: u8, },
    FCMGT_asisdmiscfp16_FZ { Rn: u8, Rd: u8, },
    FCMEQ_asisdmiscfp16_FZ { Rn: u8, Rd: u8, },
    FCMLT_asisdmiscfp16_FZ { Rn: u8, Rd: u8, },
    FCVTPS_asisdmiscfp16_R { Rn: u8, Rd: u8, },
    FCVTZS_asisdmiscfp16_R { Rn: u8, Rd: u8, },
    FRECPE_asisdmiscfp16_R { Rn: u8, Rd: u8, },
    FRECPX_asisdmiscfp16_R { Rn: u8, Rd: u8, },
    STADDH_LDADDH_32_memop { Rs: u8, Rn: u8, },
    STCLRH_LDCLRH_32_memop { Rs: u8, Rn: u8, },
    STEORH_LDEORH_32_memop { Rs: u8, Rn: u8, },
    STSETH_LDSETH_32_memop { Rs: u8, Rn: u8, },
    STSMAXH_LDSMAXH_32_memop { Rs: u8, Rn: u8, },
    STSMINH_LDSMINH_32_memop { Rs: u8, Rn: u8, },
    STUMAXH_LDUMAXH_32_memop { Rs: u8, Rn: u8, },
    STUMINH_LDUMINH_32_memop { Rs: u8, Rn: u8, },
    STADDLH_LDADDLH_32_memop { Rs: u8, Rn: u8, },
    STCLRLH_LDCLRLH_32_memop { Rs: u8, Rn: u8, },
    STEORLH_LDEORLH_32_memop { Rs: u8, Rn: u8, },
    STSETLH_LDSETLH_32_memop { Rs: u8, Rn: u8, },
    STSMAXLH_LDSMAXLH_32_memop { Rs: u8, Rn: u8, },
    STSMINLH_LDSMINLH_32_memop { Rs: u8, Rn: u8, },
    STUMAXLH_LDUMAXLH_32_memop { Rs: u8, Rn: u8, },
    STUMINLH_LDUMINLH_32_memop { Rs: u8, Rn: u8, },
    NGCS_SBCS_32_addsub_carry { Rm: u8, Rd: u8, },
    FCVTNU_asisdmiscfp16_R { Rn: u8, Rd: u8, },
    FCVTMU_asisdmiscfp16_R { Rn: u8, Rd: u8, },
    FCVTAU_asisdmiscfp16_R { Rn: u8, Rd: u8, },
    UCVTF_asisdmiscfp16_R { Rn: u8, Rd: u8, },
    FCMGE_asisdmiscfp16_FZ { Rn: u8, Rd: u8, },
    FCMLE_asisdmiscfp16_FZ { Rn: u8, Rd: u8, },
    FCVTPU_asisdmiscfp16_R { Rn: u8, Rd: u8, },
    FCVTZU_asisdmiscfp16_R { Rn: u8, Rd: u8, },
    FRSQRTE_asisdmiscfp16_R { Rn: u8, Rd: u8, },
    MOV_ADD_64_addsub_imm { Rn: u8, Rd: u8, },
    SXTB_SBFM_64M_bitfield { Rn: u8, Rd: u8, },
    SXTH_SBFM_64M_bitfield { Rn: u8, Rd: u8, },
    SXTW_SBFM_64M_bitfield { Rn: u8, Rd: u8, },
    FCVTNS_64S_float2int { Rn: u8, Rd: u8, },
    FCVTNU_64S_float2int { Rn: u8, Rd: u8, },
    SCVTF_S64_float2int { Rn: u8, Rd: u8, },
    UCVTF_S64_float2int { Rn: u8, Rd: u8, },
    FCVTAS_64S_float2int { Rn: u8, Rd: u8, },
    FCVTAU_64S_float2int { Rn: u8, Rd: u8, },
    FCVTPS_64S_float2int { Rn: u8, Rd: u8, },
    FCVTPU_64S_float2int { Rn: u8, Rd: u8, },
    FCVTMS_64S_float2int { Rn: u8, Rd: u8, },
    FCVTMU_64S_float2int { Rn: u8, Rd: u8, },
    FCVTZS_64S_float2int { Rn: u8, Rd: u8, },
    FCVTZU_64S_float2int { Rn: u8, Rd: u8, },
    FCVTNS_64D_float2int { Rn: u8, Rd: u8, },
    FCVTNU_64D_float2int { Rn: u8, Rd: u8, },
    SCVTF_D64_float2int { Rn: u8, Rd: u8, },
    UCVTF_D64_float2int { Rn: u8, Rd: u8, },
    FCVTAS_64D_float2int { Rn: u8, Rd: u8, },
    FCVTAU_64D_float2int { Rn: u8, Rd: u8, },
    FMOV_64D_float2int { Rn: u8, Rd: u8, },
    FMOV_D64_float2int { Rn: u8, Rd: u8, },
    FCVTPS_64D_float2int { Rn: u8, Rd: u8, },
    FCVTPU_64D_float2int { Rn: u8, Rd: u8, },
    FCVTMS_64D_float2int { Rn: u8, Rd: u8, },
    FCVTMU_64D_float2int { Rn: u8, Rd: u8, },
    FCVTZS_64D_float2int { Rn: u8, Rd: u8, },
    FCVTZU_64D_float2int { Rn: u8, Rd: u8, },
    FMOV_64VX_float2int { Rn: u8, Rd: u8, },
    FMOV_V64I_float2int { Rn: u8, Rd: u8, },
    FCVTNS_64H_float2int { Rn: u8, Rd: u8, },
    FCVTNU_64H_float2int { Rn: u8, Rd: u8, },
    SCVTF_H64_float2int { Rn: u8, Rd: u8, },
    UCVTF_H64_float2int { Rn: u8, Rd: u8, },
    FCVTAS_64H_float2int { Rn: u8, Rd: u8, },
    FCVTAU_64H_float2int { Rn: u8, Rd: u8, },
    FMOV_64H_float2int { Rn: u8, Rd: u8, },
    FMOV_H64_float2int { Rn: u8, Rd: u8, },
    FCVTPS_64H_float2int { Rn: u8, Rd: u8, },
    FCVTPU_64H_float2int { Rn: u8, Rd: u8, },
    FCVTMS_64H_float2int { Rn: u8, Rd: u8, },
    FCVTMU_64H_float2int { Rn: u8, Rd: u8, },
    FCVTZS_64H_float2int { Rn: u8, Rd: u8, },
    FCVTZU_64H_float2int { Rn: u8, Rd: u8, },
    MOV_ORR_64_log_shift { Rm: u8, Rd: u8, },
    STADD_LDADD_32_memop { Rs: u8, Rn: u8, },
    STCLR_LDCLR_32_memop { Rs: u8, Rn: u8, },
    STEOR_LDEOR_32_memop { Rs: u8, Rn: u8, },
    STSET_LDSET_32_memop { Rs: u8, Rn: u8, },
    STSMAX_LDSMAX_32_memop { Rs: u8, Rn: u8, },
    STSMIN_LDSMIN_32_memop { Rs: u8, Rn: u8, },
    STUMAX_LDUMAX_32_memop { Rs: u8, Rn: u8, },
    STUMIN_LDUMIN_32_memop { Rs: u8, Rn: u8, },
    STADDL_LDADDL_32_memop { Rs: u8, Rn: u8, },
    STCLRL_LDCLRL_32_memop { Rs: u8, Rn: u8, },
    STEORL_LDEORL_32_memop { Rs: u8, Rn: u8, },
    STSETL_LDSETL_32_memop { Rs: u8, Rn: u8, },
    STSMAXL_LDSMAXL_32_memop { Rs: u8, Rn: u8, },
    STSMINL_LDSMINL_32_memop { Rs: u8, Rn: u8, },
    STUMAXL_LDUMAXL_32_memop { Rs: u8, Rn: u8, },
    STUMINL_LDUMINL_32_memop { Rs: u8, Rn: u8, },
    CMPP_SUBPS_64S_dp_2src { Xm: u8, Xn: u8, },
    SHA512SU0_VV2_cryptosha512_2 { Rn: u8, Rd: u8, },
    SM4E_VV4_cryptosha512_2 { Rn: u8, Rd: u8, },
    MSR_SI_pstate { op1: u8, CRm: u8, op2: u8, },
    BRAA_64P_branch_reg { Rn: u8, Rm: u8, },
    BRAB_64P_branch_reg { Rn: u8, Rm: u8, },
    BLRAA_64P_branch_reg { Rn: u8, Rm: u8, },
    BLRAB_64P_branch_reg { Rn: u8, Rm: u8, },
    STZGM_64bulk_ldsttags { Xn: u8, Xt: u8, },
    STGM_64bulk_ldsttags { Xn: u8, Xt: u8, },
    LDGM_64bulk_ldsttags { Xn: u8, Xt: u8, },
    NGC_SBC_64_addsub_carry { Rm: u8, Rd: u8, },
    RBIT_64_dp_1src { Rn: u8, Rd: u8, },
    REV16_64_dp_1src { Rn: u8, Rd: u8, },
    REV32_64_dp_1src { Rn: u8, Rd: u8, },
    REV_64_dp_1src { Rn: u8, Rd: u8, },
    REV64_REV_64_dp_1src { Rn: u8, Rd: u8, },
    CLZ_64_dp_1src { Rn: u8, Rd: u8, },
    CLS_64_dp_1src { Rn: u8, Rd: u8, },
    PACIA_64P_dp_1src { Rn: u8, Rd: u8, },
    PACIB_64P_dp_1src { Rn: u8, Rd: u8, },
    PACDA_64P_dp_1src { Rn: u8, Rd: u8, },
    PACDB_64P_dp_1src { Rn: u8, Rd: u8, },
    AUTIA_64P_dp_1src { Rn: u8, Rd: u8, },
    AUTIB_64P_dp_1src { Rn: u8, Rd: u8, },
    AUTDA_64P_dp_1src { Rn: u8, Rd: u8, },
    AUTDB_64P_dp_1src { Rn: u8, Rd: u8, },
    STADD_LDADD_64_memop { Rs: u8, Rn: u8, },
    STCLR_LDCLR_64_memop { Rs: u8, Rn: u8, },
    STEOR_LDEOR_64_memop { Rs: u8, Rn: u8, },
    STSET_LDSET_64_memop { Rs: u8, Rn: u8, },
    STSMAX_LDSMAX_64_memop { Rs: u8, Rn: u8, },
    STSMIN_LDSMIN_64_memop { Rs: u8, Rn: u8, },
    STUMAX_LDUMAX_64_memop { Rs: u8, Rn: u8, },
    STUMIN_LDUMIN_64_memop { Rs: u8, Rn: u8, },
    ST64B_64L_memop { Rn: u8, Rt: u8, },
    LD64B_64L_memop { Rn: u8, Rt: u8, },
    STADDL_LDADDL_64_memop { Rs: u8, Rn: u8, },
    STCLRL_LDCLRL_64_memop { Rs: u8, Rn: u8, },
    STEORL_LDEORL_64_memop { Rs: u8, Rn: u8, },
    STSETL_LDSETL_64_memop { Rs: u8, Rn: u8, },
    STSMAXL_LDSMAXL_64_memop { Rs: u8, Rn: u8, },
    STSMINL_LDSMINL_64_memop { Rs: u8, Rn: u8, },
    STUMAXL_LDUMAXL_64_memop { Rs: u8, Rn: u8, },
    STUMINL_LDUMINL_64_memop { Rs: u8, Rn: u8, },
    NGCS_SBCS_64_addsub_carry { Rm: u8, Rd: u8, },
    RDVL_r_i { imm6: u8, Rd: u8, },
    FMOV_cpy_z_p_i { size: u8, Pg: u8, Zd: u8, },
    ST1_asisdlso_D1_1d { Q: u8, Rn: u8, Rt: u8, },
    ST3_asisdlso_D3_3d { Q: u8, Rn: u8, Rt: u8, },
    ST2_asisdlso_D2_2d { Q: u8, Rn: u8, Rt: u8, },
    ST4_asisdlso_D4_4d { Q: u8, Rn: u8, Rt: u8, },
    LD1_asisdlso_D1_1d { Q: u8, Rn: u8, Rt: u8, },
    LD3_asisdlso_D3_3d { Q: u8, Rn: u8, Rt: u8, },
    LD2_asisdlso_D2_2d { Q: u8, Rn: u8, Rt: u8, },
    LD4_asisdlso_D4_4d { Q: u8, Rn: u8, Rt: u8, },
    ST1_asisdlsop_D1_i1d { Q: u8, Rn: u8, Rt: u8, },
    ST3_asisdlsop_D3_i3d { Q: u8, Rn: u8, Rt: u8, },
    ST2_asisdlsop_D2_i2d { Q: u8, Rn: u8, Rt: u8, },
    ST4_asisdlsop_D4_i4d { Q: u8, Rn: u8, Rt: u8, },
    LD1_asisdlsop_D1_i1d { Q: u8, Rn: u8, Rt: u8, },
    LD3_asisdlsop_D3_i3d { Q: u8, Rn: u8, Rt: u8, },
    LD2_asisdlsop_D2_i2d { Q: u8, Rn: u8, Rt: u8, },
    LD4_asisdlsop_D4_i4d { Q: u8, Rn: u8, Rt: u8, },
    FMAXNMV_asimdall_only_H { Q: u8, Rn: u8, Rd: u8, },
    FMAXV_asimdall_only_H { Q: u8, Rn: u8, Rd: u8, },
    FRINTN_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FRINTM_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FCVTNS_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FCVTMS_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FCVTAS_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    SCVTF_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    BFCVTN_asimdmisc_4S { Q: u8, Rn: u8, Rd: u8, },
    FMINNMV_asimdall_only_H { Q: u8, Rn: u8, Rd: u8, },
    FMINV_asimdall_only_H { Q: u8, Rn: u8, Rd: u8, },
    FCMGT_asimdmiscfp16_FZ { Q: u8, Rn: u8, Rd: u8, },
    FCMEQ_asimdmiscfp16_FZ { Q: u8, Rn: u8, Rd: u8, },
    FCMLT_asimdmiscfp16_FZ { Q: u8, Rn: u8, Rd: u8, },
    FABS_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FRINTP_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FRINTZ_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FCVTPS_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FCVTZS_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FRECPE_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    PTRUE_p_s { size: u8, pattern: u8, Pd: u8, },
    PTRUES_p_s { size: u8, pattern: u8, Pd: u8, },
    SQINCP_z_p_z { size: u8, Pm: u8, Zdn: u8, },
    SQINCP_r_p_r_sx { size: u8, Pm: u8, Rdn: u8, },
    SQINCP_r_p_r_x { size: u8, Pm: u8, Rdn: u8, },
    UQINCP_z_p_z { size: u8, Pm: u8, Zdn: u8, },
    UQINCP_r_p_r_uw { size: u8, Pm: u8, Rdn: u8, },
    UQINCP_r_p_r_x { size: u8, Pm: u8, Rdn: u8, },
    SQDECP_z_p_z { size: u8, Pm: u8, Zdn: u8, },
    SQDECP_r_p_r_sx { size: u8, Pm: u8, Rdn: u8, },
    SQDECP_r_p_r_x { size: u8, Pm: u8, Rdn: u8, },
    UQDECP_z_p_z { size: u8, Pm: u8, Zdn: u8, },
    UQDECP_r_p_r_uw { size: u8, Pm: u8, Rdn: u8, },
    UQDECP_r_p_r_x { size: u8, Pm: u8, Rdn: u8, },
    INCP_z_p_z { size: u8, Pm: u8, Zdn: u8, },
    INCP_r_p_r { size: u8, Pm: u8, Rdn: u8, },
    DECP_z_p_z { size: u8, Pm: u8, Zdn: u8, },
    DECP_r_p_r { size: u8, Pm: u8, Rdn: u8, },
    CTERMEQ_rr { sz: u8, Rm: u8, Rn: u8, },
    CTERMNE_rr { sz: u8, Rm: u8, Rn: u8, },
    MVN_NOT_asimdmisc_R { Q: u8, Rn: u8, Rd: u8, },
    NOT_asimdmisc_R { Q: u8, Rn: u8, Rd: u8, },
    RBIT_asimdmisc_R { Q: u8, Rn: u8, Rd: u8, },
    FRINTA_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FRINTX_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FCVTNU_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FCVTMU_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FCVTAU_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    UCVTF_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FCMGE_asimdmiscfp16_FZ { Q: u8, Rn: u8, Rd: u8, },
    FCMLE_asimdmiscfp16_FZ { Q: u8, Rn: u8, Rd: u8, },
    FNEG_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FRINTI_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FCVTPU_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FCVTZU_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FRSQRTE_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    FSQRT_asimdmiscfp16_R { Q: u8, Rn: u8, Rd: u8, },
    MOV_UMOV_asimdins_X_x { imm5: u8, Rn: u8, Rd: u8, },
    UMOV_asimdins_X_x { imm5: u8, Rn: u8, Rd: u8, },
    FCVTNS_asisdmisc_R { sz: u8, Rn: u8, Rd: u8, },
    FCVTMS_asisdmisc_R { sz: u8, Rn: u8, Rd: u8, },
    FCVTAS_asisdmisc_R { sz: u8, Rn: u8, Rd: u8, },
    SCVTF_asisdmisc_R { sz: u8, Rn: u8, Rd: u8, },
    FMAXNMP_asisdpair_only_H { sz: u8, Rn: u8, Rd: u8, },
    FADDP_asisdpair_only_H { sz: u8, Rn: u8, Rd: u8, },
    FMAXP_asisdpair_only_H { sz: u8, Rn: u8, Rd: u8, },
    FCMGT_asisdmisc_FZ { sz: u8, Rn: u8, Rd: u8, },
    FCMEQ_asisdmisc_FZ { sz: u8, Rn: u8, Rd: u8, },
    FCMLT_asisdmisc_FZ { sz: u8, Rn: u8, Rd: u8, },
    FCVTPS_asisdmisc_R { sz: u8, Rn: u8, Rd: u8, },
    FCVTZS_asisdmisc_R { sz: u8, Rn: u8, Rd: u8, },
    FRECPE_asisdmisc_R { sz: u8, Rn: u8, Rd: u8, },
    FRECPX_asisdmisc_R { sz: u8, Rn: u8, Rd: u8, },
    FMINNMP_asisdpair_only_H { sz: u8, Rn: u8, Rd: u8, },
    FMINP_asisdpair_only_H { sz: u8, Rn: u8, Rd: u8, },
    FADD_z_p_zs { size: u8, Pg: u8, i1: u8, Zdn: u8, },
    FSUB_z_p_zs { size: u8, Pg: u8, i1: u8, Zdn: u8, },
    FMUL_z_p_zs { size: u8, Pg: u8, i1: u8, Zdn: u8, },
    FSUBR_z_p_zs { size: u8, Pg: u8, i1: u8, Zdn: u8, },
    FMAXNM_z_p_zs { size: u8, Pg: u8, i1: u8, Zdn: u8, },
    FMINNM_z_p_zs { size: u8, Pg: u8, i1: u8, Zdn: u8, },
    FMAX_z_p_zs { size: u8, Pg: u8, i1: u8, Zdn: u8, },
    FMIN_z_p_zs { size: u8, Pg: u8, i1: u8, Zdn: u8, },
    FCVTXN_asisdmisc_N { sz: u8, Rn: u8, Rd: u8, },
    FCVTNU_asisdmisc_R { sz: u8, Rn: u8, Rd: u8, },
    FCVTMU_asisdmisc_R { sz: u8, Rn: u8, Rd: u8, },
    FCVTAU_asisdmisc_R { sz: u8, Rn: u8, Rd: u8, },
    UCVTF_asisdmisc_R { sz: u8, Rn: u8, Rd: u8, },
    FMAXNMP_asisdpair_only_SD { sz: u8, Rn: u8, Rd: u8, },
    FADDP_asisdpair_only_SD { sz: u8, Rn: u8, Rd: u8, },
    FMAXP_asisdpair_only_SD { sz: u8, Rn: u8, Rd: u8, },
    FCMGE_asisdmisc_FZ { sz: u8, Rn: u8, Rd: u8, },
    FCMLE_asisdmisc_FZ { sz: u8, Rn: u8, Rd: u8, },
    FCVTPU_asisdmisc_R { sz: u8, Rn: u8, Rd: u8, },
    FCVTZU_asisdmisc_R { sz: u8, Rn: u8, Rd: u8, },
    FRSQRTE_asisdmisc_R { sz: u8, Rn: u8, Rd: u8, },
    FMINNMP_asisdpair_only_SD { sz: u8, Rn: u8, Rd: u8, },
    FMINP_asisdpair_only_SD { sz: u8, Rn: u8, Rd: u8, },
    FEXPA_z_z { size: u8, Zn: u8, Zd: u8, },
    DUP_z_r { size: u8, Rn: u8, Zd: u8, },
    MOV_dup_z_r { size: u8, Rn: u8, Zd: u8, },
    INSR_z_r { size: u8, Rm: u8, Zdn: u8, },
    SUNPKLO_z_z { size: u8, Zn: u8, Zd: u8, },
    SUNPKHI_z_z { size: u8, Zn: u8, Zd: u8, },
    UUNPKLO_z_z { size: u8, Zn: u8, Zd: u8, },
    UUNPKHI_z_z { size: u8, Zn: u8, Zd: u8, },
    INSR_z_v { size: u8, Vm: u8, Zdn: u8, },
    REV_z_z { size: u8, Zn: u8, Zd: u8, },
    ST1_asisdlso_S1_1s { Q: u8, S: u8, Rn: u8, Rt: u8, },
    ST3_asisdlso_S3_3s { Q: u8, S: u8, Rn: u8, Rt: u8, },
    ST2_asisdlso_S2_2s { Q: u8, S: u8, Rn: u8, Rt: u8, },
    ST4_asisdlso_S4_4s { Q: u8, S: u8, Rn: u8, Rt: u8, },
    LD1_asisdlso_S1_1s { Q: u8, S: u8, Rn: u8, Rt: u8, },
    LD3_asisdlso_S3_3s { Q: u8, S: u8, Rn: u8, Rt: u8, },
    LD2_asisdlso_S2_2s { Q: u8, S: u8, Rn: u8, Rt: u8, },
    LD4_asisdlso_S4_4s { Q: u8, S: u8, Rn: u8, Rt: u8, },
    ST1_asisdlsop_S1_i1s { Q: u8, S: u8, Rn: u8, Rt: u8, },
    ST3_asisdlsop_S3_i3s { Q: u8, S: u8, Rn: u8, Rt: u8, },
    ST2_asisdlsop_S2_i2s { Q: u8, S: u8, Rn: u8, Rt: u8, },
    ST4_asisdlsop_S4_i4s { Q: u8, S: u8, Rn: u8, Rt: u8, },
    LD1_asisdlsop_S1_i1s { Q: u8, S: u8, Rn: u8, Rt: u8, },
    LD3_asisdlsop_S3_i3s { Q: u8, S: u8, Rn: u8, Rt: u8, },
    LD2_asisdlsop_S2_i2s { Q: u8, S: u8, Rn: u8, Rt: u8, },
    LD4_asisdlsop_S4_i4s { Q: u8, S: u8, Rn: u8, Rt: u8, },
    MOV_UMOV_asimdins_W_w { imm5: u8, Rn: u8, Rd: u8, },
    FCVTN_asimdmisc_N { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FCVTL_asimdmisc_L { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FRINTN_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FRINTM_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FCVTNS_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FCVTMS_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FCVTAS_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    SCVTF_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FRINT32Z_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FRINT64Z_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FCMGT_asimdmisc_FZ { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FCMEQ_asimdmisc_FZ { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FCMLT_asimdmisc_FZ { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FABS_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FRINTP_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FRINTZ_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FCVTPS_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FCVTZS_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    URECPE_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FRECPE_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    BRKN_p_p_pp { Pg: u8, Pn: u8, Pdm: u8, },
    BRKAS_p_p_p_z { Pg: u8, Pn: u8, Pd: u8, },
    BRKNS_p_p_pp { Pg: u8, Pn: u8, Pdm: u8, },
    BRKBS_p_p_p_z { Pg: u8, Pn: u8, Pd: u8, },
    FCVTXN_asimdmisc_N { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FRINTA_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FRINTX_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FCVTNU_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FCVTMU_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FCVTAU_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    UCVTF_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FRINT32X_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FRINT64X_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FMAXNMV_asimdall_only_SD { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FMAXV_asimdall_only_SD { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FCMGE_asimdmisc_FZ { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FCMLE_asimdmisc_FZ { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FNEG_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FRINTI_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FCVTPU_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FCVTZU_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    URSQRTE_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FRSQRTE_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FSQRT_asimdmisc_R { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FMINNMV_asimdall_only_SD { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    FMINV_asimdall_only_SD { Q: u8, sz: u8, Rn: u8, Rd: u8, },
    SUQADD_asisdmisc_R { size: u8, Rn: u8, Rd: u8, },
    SQABS_asisdmisc_R { size: u8, Rn: u8, Rd: u8, },
    CMGT_asisdmisc_Z { size: u8, Rn: u8, Rd: u8, },
    CMEQ_asisdmisc_Z { size: u8, Rn: u8, Rd: u8, },
    CMLT_asisdmisc_Z { size: u8, Rn: u8, Rd: u8, },
    ABS_asisdmisc_R { size: u8, Rn: u8, Rd: u8, },
    SQXTN_asisdmisc_N { size: u8, Rn: u8, Rd: u8, },
    ADDP_asisdpair_only { size: u8, Rn: u8, Rd: u8, },
    FRECPE_z_z { size: u8, Zn: u8, Zd: u8, },
    FRSQRTE_z_z { size: u8, Zn: u8, Zd: u8, },
    USQADD_asisdmisc_R { size: u8, Rn: u8, Rd: u8, },
    SQNEG_asisdmisc_R { size: u8, Rn: u8, Rd: u8, },
    CMGE_asisdmisc_Z { size: u8, Rn: u8, Rd: u8, },
    CMLE_asisdmisc_Z { size: u8, Rn: u8, Rd: u8, },
    NEG_asisdmisc_R { size: u8, Rn: u8, Rd: u8, },
    SQXTUN_asisdmisc_N { size: u8, Rn: u8, Rd: u8, },
    UQXTN_asisdmisc_N { size: u8, Rn: u8, Rd: u8, },
    AT_SYS_CR_systeminstrs { op1: u8, CRm: u8, op2: u8, Rt: u8, },
    ST4_asisdlse_R4 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    ST1_asisdlse_R4_4v { Q: u8, size: u8, Rn: u8, Rt: u8, },
    ST3_asisdlse_R3 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    ST1_asisdlse_R3_3v { Q: u8, size: u8, Rn: u8, Rt: u8, },
    ST1_asisdlse_R1_1v { Q: u8, size: u8, Rn: u8, Rt: u8, },
    ST2_asisdlse_R2 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    ST1_asisdlse_R2_2v { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD4_asisdlse_R4 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlse_R4_4v { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD3_asisdlse_R3 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlse_R3_3v { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlse_R1_1v { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD2_asisdlse_R2 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlse_R2_2v { Q: u8, size: u8, Rn: u8, Rt: u8, },
    ST4_asisdlsep_I4_i { Q: u8, size: u8, Rn: u8, Rt: u8, },
    ST1_asisdlsep_I4_i4 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    ST3_asisdlsep_I3_i { Q: u8, size: u8, Rn: u8, Rt: u8, },
    ST1_asisdlsep_I3_i3 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    ST1_asisdlsep_I1_i1 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    ST2_asisdlsep_I2_i { Q: u8, size: u8, Rn: u8, Rt: u8, },
    ST1_asisdlsep_I2_i2 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD4_asisdlsep_I4_i { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlsep_I4_i4 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD3_asisdlsep_I3_i { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlsep_I3_i3 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlsep_I1_i1 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD2_asisdlsep_I2_i { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlsep_I2_i2 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    ST1_asisdlso_H1_1h { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST3_asisdlso_H3_3h { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST2_asisdlso_H2_2h { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST4_asisdlso_H4_4h { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlso_H1_1h { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD3_asisdlso_H3_3h { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD1R_asisdlso_R1 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD3R_asisdlso_R3 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD2_asisdlso_H2_2h { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD4_asisdlso_H4_4h { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD2R_asisdlso_R2 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD4R_asisdlso_R4 { Q: u8, size: u8, Rn: u8, Rt: u8, },
    ST1_asisdlsop_H1_i1h { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST3_asisdlsop_H3_i3h { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST2_asisdlsop_H2_i2h { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST4_asisdlsop_H4_i4h { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlsop_H1_i1h { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD3_asisdlsop_H3_i3h { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD1R_asisdlsop_R1_i { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD3R_asisdlsop_R3_i { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD2_asisdlsop_H2_i2h { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD4_asisdlsop_H4_i4h { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD2R_asisdlsop_R2_i { Q: u8, size: u8, Rn: u8, Rt: u8, },
    LD4R_asisdlsop_R4_i { Q: u8, size: u8, Rn: u8, Rt: u8, },
    REV64_asimdmisc_R { Q: u8, size: u8, Rn: u8, Rd: u8, },
    REV16_asimdmisc_R { Q: u8, size: u8, Rn: u8, Rd: u8, },
    SADDLP_asimdmisc_P { Q: u8, size: u8, Rn: u8, Rd: u8, },
    SUQADD_asimdmisc_R { Q: u8, size: u8, Rn: u8, Rd: u8, },
    CLS_asimdmisc_R { Q: u8, size: u8, Rn: u8, Rd: u8, },
    CNT_asimdmisc_R { Q: u8, size: u8, Rn: u8, Rd: u8, },
    SADALP_asimdmisc_P { Q: u8, size: u8, Rn: u8, Rd: u8, },
    SQABS_asimdmisc_R { Q: u8, size: u8, Rn: u8, Rd: u8, },
    CMGT_asimdmisc_Z { Q: u8, size: u8, Rn: u8, Rd: u8, },
    CMEQ_asimdmisc_Z { Q: u8, size: u8, Rn: u8, Rd: u8, },
    CMLT_asimdmisc_Z { Q: u8, size: u8, Rn: u8, Rd: u8, },
    ABS_asimdmisc_R { Q: u8, size: u8, Rn: u8, Rd: u8, },
    XTN_asimdmisc_N { Q: u8, size: u8, Rn: u8, Rd: u8, },
    SQXTN_asimdmisc_N { Q: u8, size: u8, Rn: u8, Rd: u8, },
    SADDLV_asimdall_only { Q: u8, size: u8, Rn: u8, Rd: u8, },
    SMAXV_asimdall_only { Q: u8, size: u8, Rn: u8, Rd: u8, },
    SMINV_asimdall_only { Q: u8, size: u8, Rn: u8, Rd: u8, },
    ADDV_asimdall_only { Q: u8, size: u8, Rn: u8, Rd: u8, },
    FMOV_S_floatimm { imm8: u8, Rd: u8, },
    FMOV_D_floatimm { imm8: u8, Rd: u8, },
    FMOV_H_floatimm { imm8: u8, Rd: u8, },
    BRKA_p_p_p { Pg: u8, Pn: u8, M: u8, Pd: u8, },
    BRKB_p_p_p { Pg: u8, Pn: u8, M: u8, Pd: u8, },
    REV32_asimdmisc_R { Q: u8, size: u8, Rn: u8, Rd: u8, },
    UADDLP_asimdmisc_P { Q: u8, size: u8, Rn: u8, Rd: u8, },
    USQADD_asimdmisc_R { Q: u8, size: u8, Rn: u8, Rd: u8, },
    CLZ_asimdmisc_R { Q: u8, size: u8, Rn: u8, Rd: u8, },
    UADALP_asimdmisc_P { Q: u8, size: u8, Rn: u8, Rd: u8, },
    SQNEG_asimdmisc_R { Q: u8, size: u8, Rn: u8, Rd: u8, },
    CMGE_asimdmisc_Z { Q: u8, size: u8, Rn: u8, Rd: u8, },
    CMLE_asimdmisc_Z { Q: u8, size: u8, Rn: u8, Rd: u8, },
    NEG_asimdmisc_R { Q: u8, size: u8, Rn: u8, Rd: u8, },
    SQXTUN_asimdmisc_N { Q: u8, size: u8, Rn: u8, Rd: u8, },
    SHLL_asimdmisc_S { Q: u8, size: u8, Rn: u8, Rd: u8, },
    UQXTN_asimdmisc_N { Q: u8, size: u8, Rn: u8, Rd: u8, },
    UADDLV_asimdall_only { Q: u8, size: u8, Rn: u8, Rd: u8, },
    UMAXV_asimdall_only { Q: u8, size: u8, Rn: u8, Rd: u8, },
    UMINV_asimdall_only { Q: u8, size: u8, Rn: u8, Rd: u8, },
    MOVI_asimdimm_D_ds { a: u8, b: u8, c: u8, d: u8, e: u8, f: u8, g: u8, h: u8, Rd: u8, },
    BFCVTNT_z_p_z_s2bf { Pg: u8, Zn: u8, Zd: u8, },
    SCVTF_z_p_z_h2fp16 { Pg: u8, Zn: u8, Zd: u8, },
    UCVTF_z_p_z_h2fp16 { Pg: u8, Zn: u8, Zd: u8, },
    SCVTF_z_p_z_w2fp16 { Pg: u8, Zn: u8, Zd: u8, },
    UCVTF_z_p_z_w2fp16 { Pg: u8, Zn: u8, Zd: u8, },
    SCVTF_z_p_z_x2fp16 { Pg: u8, Zn: u8, Zd: u8, },
    UCVTF_z_p_z_x2fp16 { Pg: u8, Zn: u8, Zd: u8, },
    FCVTZS_z_p_z_fp162h { Pg: u8, Zn: u8, Zd: u8, },
    FCVTZU_z_p_z_fp162h { Pg: u8, Zn: u8, Zd: u8, },
    FCVTZS_z_p_z_fp162w { Pg: u8, Zn: u8, Zd: u8, },
    FCVTZU_z_p_z_fp162w { Pg: u8, Zn: u8, Zd: u8, },
    FCVTZS_z_p_z_fp162x { Pg: u8, Zn: u8, Zd: u8, },
    FCVTZU_z_p_z_fp162x { Pg: u8, Zn: u8, Zd: u8, },
    FCVT_z_p_z_s2h { Pg: u8, Zn: u8, Zd: u8, },
    FCVT_z_p_z_h2s { Pg: u8, Zn: u8, Zd: u8, },
    BFCVT_z_p_z_s2bf { Pg: u8, Zn: u8, Zd: u8, },
    SCVTF_z_p_z_w2s { Pg: u8, Zn: u8, Zd: u8, },
    UCVTF_z_p_z_w2s { Pg: u8, Zn: u8, Zd: u8, },
    FCVTZS_z_p_z_s2w { Pg: u8, Zn: u8, Zd: u8, },
    FCVTZU_z_p_z_s2w { Pg: u8, Zn: u8, Zd: u8, },
    FCVT_z_p_z_d2h { Pg: u8, Zn: u8, Zd: u8, },
    FCVT_z_p_z_h2d { Pg: u8, Zn: u8, Zd: u8, },
    FCVT_z_p_z_d2s { Pg: u8, Zn: u8, Zd: u8, },
    FCVT_z_p_z_s2d { Pg: u8, Zn: u8, Zd: u8, },
    SCVTF_z_p_z_w2d { Pg: u8, Zn: u8, Zd: u8, },
    UCVTF_z_p_z_w2d { Pg: u8, Zn: u8, Zd: u8, },
    SCVTF_z_p_z_x2s { Pg: u8, Zn: u8, Zd: u8, },
    UCVTF_z_p_z_x2s { Pg: u8, Zn: u8, Zd: u8, },
    SCVTF_z_p_z_x2d { Pg: u8, Zn: u8, Zd: u8, },
    UCVTF_z_p_z_x2d { Pg: u8, Zn: u8, Zd: u8, },
    FCVTZS_z_p_z_d2w { Pg: u8, Zn: u8, Zd: u8, },
    FCVTZU_z_p_z_d2w { Pg: u8, Zn: u8, Zd: u8, },
    FCVTZS_z_p_z_s2x { Pg: u8, Zn: u8, Zd: u8, },
    FCVTZU_z_p_z_s2x { Pg: u8, Zn: u8, Zd: u8, },
    FCVTZS_z_p_z_d2x { Pg: u8, Zn: u8, Zd: u8, },
    FCVTZU_z_p_z_d2x { Pg: u8, Zn: u8, Zd: u8, },
    MOVI_asimdimm_D2_d { a: u8, b: u8, c: u8, d: u8, e: u8, f: u8, g: u8, h: u8, Rd: u8, },
    FMOV_asimdimm_D2_d { a: u8, b: u8, c: u8, d: u8, e: u8, f: u8, g: u8, h: u8, Rd: u8, },
    CNTB_r_s { imm4: u8, pattern: u8, Rd: u8, },
    SQINCB_r_rs_sx { imm4: u8, pattern: u8, Rdn: u8, },
    UQINCB_r_rs_uw { imm4: u8, pattern: u8, Rdn: u8, },
    SQDECB_r_rs_sx { imm4: u8, pattern: u8, Rdn: u8, },
    UQDECB_r_rs_uw { imm4: u8, pattern: u8, Rdn: u8, },
    INCB_r_rs { imm4: u8, pattern: u8, Rdn: u8, },
    DECB_r_rs { imm4: u8, pattern: u8, Rdn: u8, },
    SQINCB_r_rs_x { imm4: u8, pattern: u8, Rdn: u8, },
    UQINCB_r_rs_x { imm4: u8, pattern: u8, Rdn: u8, },
    SQDECB_r_rs_x { imm4: u8, pattern: u8, Rdn: u8, },
    UQDECB_r_rs_x { imm4: u8, pattern: u8, Rdn: u8, },
    SQINCH_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    UQINCH_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    SQDECH_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    UQDECH_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    CNTH_r_s { imm4: u8, pattern: u8, Rd: u8, },
    SQINCH_r_rs_sx { imm4: u8, pattern: u8, Rdn: u8, },
    UQINCH_r_rs_uw { imm4: u8, pattern: u8, Rdn: u8, },
    SQDECH_r_rs_sx { imm4: u8, pattern: u8, Rdn: u8, },
    UQDECH_r_rs_uw { imm4: u8, pattern: u8, Rdn: u8, },
    INCH_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    DECH_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    INCH_r_rs { imm4: u8, pattern: u8, Rdn: u8, },
    DECH_r_rs { imm4: u8, pattern: u8, Rdn: u8, },
    SQINCH_r_rs_x { imm4: u8, pattern: u8, Rdn: u8, },
    UQINCH_r_rs_x { imm4: u8, pattern: u8, Rdn: u8, },
    SQDECH_r_rs_x { imm4: u8, pattern: u8, Rdn: u8, },
    UQDECH_r_rs_x { imm4: u8, pattern: u8, Rdn: u8, },
    SQINCW_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    UQINCW_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    SQDECW_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    UQDECW_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    CNTW_r_s { imm4: u8, pattern: u8, Rd: u8, },
    SQINCW_r_rs_sx { imm4: u8, pattern: u8, Rdn: u8, },
    UQINCW_r_rs_uw { imm4: u8, pattern: u8, Rdn: u8, },
    SQDECW_r_rs_sx { imm4: u8, pattern: u8, Rdn: u8, },
    UQDECW_r_rs_uw { imm4: u8, pattern: u8, Rdn: u8, },
    INCW_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    DECW_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    INCW_r_rs { imm4: u8, pattern: u8, Rdn: u8, },
    DECW_r_rs { imm4: u8, pattern: u8, Rdn: u8, },
    SQINCW_r_rs_x { imm4: u8, pattern: u8, Rdn: u8, },
    UQINCW_r_rs_x { imm4: u8, pattern: u8, Rdn: u8, },
    SQDECW_r_rs_x { imm4: u8, pattern: u8, Rdn: u8, },
    UQDECW_r_rs_x { imm4: u8, pattern: u8, Rdn: u8, },
    SQINCD_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    UQINCD_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    SQDECD_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    UQDECD_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    CNTD_r_s { imm4: u8, pattern: u8, Rd: u8, },
    SQINCD_r_rs_sx { imm4: u8, pattern: u8, Rdn: u8, },
    UQINCD_r_rs_uw { imm4: u8, pattern: u8, Rdn: u8, },
    SQDECD_r_rs_sx { imm4: u8, pattern: u8, Rdn: u8, },
    UQDECD_r_rs_uw { imm4: u8, pattern: u8, Rdn: u8, },
    INCD_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    DECD_z_zs { imm4: u8, pattern: u8, Zdn: u8, },
    INCD_r_rs { imm4: u8, pattern: u8, Rdn: u8, },
    DECD_r_rs { imm4: u8, pattern: u8, Rdn: u8, },
    SQINCD_r_rs_x { imm4: u8, pattern: u8, Rdn: u8, },
    UQINCD_r_rs_x { imm4: u8, pattern: u8, Rdn: u8, },
    SQDECD_r_rs_x { imm4: u8, pattern: u8, Rdn: u8, },
    UQDECD_r_rs_x { imm4: u8, pattern: u8, Rdn: u8, },
    ZIP1_p_pp { size: u8, Pm: u8, Pn: u8, Pd: u8, },
    ZIP2_p_pp { size: u8, Pm: u8, Pn: u8, Pd: u8, },
    UZP1_p_pp { size: u8, Pm: u8, Pn: u8, Pd: u8, },
    UZP2_p_pp { size: u8, Pm: u8, Pn: u8, Pd: u8, },
    TRN1_p_pp { size: u8, Pm: u8, Pn: u8, Pd: u8, },
    TRN2_p_pp { size: u8, Pm: u8, Pn: u8, Pd: u8, },
    ST1_asisdlso_B1_1b { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST3_asisdlso_B3_3b { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST2_asisdlso_B2_2b { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST4_asisdlso_B4_4b { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlso_B1_1b { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD3_asisdlso_B3_3b { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD2_asisdlso_B2_2b { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD4_asisdlso_B4_4b { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST1_asisdlsop_B1_i1b { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST3_asisdlsop_B3_i3b { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST2_asisdlsop_B2_i2b { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST4_asisdlsop_B4_i4b { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlsop_B1_i1b { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD3_asisdlsop_B3_i3b { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD2_asisdlsop_B2_i2b { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD4_asisdlsop_B4_i4b { Q: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    MOVI_asimdimm_N_b { Q: u8, a: u8, b: u8, c: u8, d: u8, e: u8, f: u8, g: u8, h: u8, Rd: u8, },
    FMOV_asimdimm_S_s { Q: u8, a: u8, b: u8, c: u8, d: u8, e: u8, f: u8, g: u8, h: u8, Rd: u8, },
    FMOV_asimdimm_H_h { Q: u8, a: u8, b: u8, c: u8, d: u8, e: u8, f: u8, g: u8, h: u8, Rd: u8, },
    FCMGE_p_p_z0 { size: u8, Pg: u8, Zn: u8, Pd: u8, },
    FCMGT_p_p_z0 { size: u8, Pg: u8, Zn: u8, Pd: u8, },
    FCMLT_p_p_z0 { size: u8, Pg: u8, Zn: u8, Pd: u8, },
    FCMLE_p_p_z0 { size: u8, Pg: u8, Zn: u8, Pd: u8, },
    FCMEQ_p_p_z0 { size: u8, Pg: u8, Zn: u8, Pd: u8, },
    FCMNE_p_p_z0 { size: u8, Pg: u8, Zn: u8, Pd: u8, },
    SXTL_SSHLL_asimdshf_L { Q: u8, immh: u8, Rn: u8, Rd: u8, },
    UXTL_USHLL_asimdshf_L { Q: u8, immh: u8, Rn: u8, Rd: u8, },
    ADD_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    SADDV_r_p_z { size: u8, Pg: u8, Zn: u8, Vd: u8, },
    ASR_z_p_zi { tszh: u8, Pg: u8, tszl: u8, imm3: u8, Zdn: u8, },
    SUB_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    UADDV_r_p_z { size: u8, Pg: u8, Zn: u8, Vd: u8, },
    LSR_z_p_zi { tszh: u8, Pg: u8, tszl: u8, imm3: u8, Zdn: u8, },
    SUBR_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    LSL_z_p_zi { tszh: u8, Pg: u8, tszl: u8, imm3: u8, Zdn: u8, },
    ASRD_z_p_zi { tszh: u8, Pg: u8, tszl: u8, imm3: u8, Zdn: u8, },
    SMAX_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    SMAXV_r_p_z { size: u8, Pg: u8, Zn: u8, Vd: u8, },
    UMAX_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    UMAXV_r_p_z { size: u8, Pg: u8, Zn: u8, Vd: u8, },
    SMIN_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    SMINV_r_p_z { size: u8, Pg: u8, Zn: u8, Vd: u8, },
    UMIN_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    UMINV_r_p_z { size: u8, Pg: u8, Zn: u8, Vd: u8, },
    SABD_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    UABD_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    MUL_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    ASR_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    SXTB_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    LSR_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    UXTB_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    SMULH_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    SXTH_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    UMULH_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    LSL_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    UXTH_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    SDIV_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    ASRR_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    SXTW_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    UDIV_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    LSRR_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    UXTW_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    SDIVR_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    ABS_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    UDIVR_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    LSLR_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    NEG_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    ORR_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    ORV_r_p_z { size: u8, Pg: u8, Zn: u8, Vd: u8, },
    ASR_z_p_zw { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    CLS_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    EOR_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    EORV_r_p_z { size: u8, Pg: u8, Zn: u8, Vd: u8, },
    LSR_z_p_zw { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    CLZ_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    AND_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    ANDV_r_p_z { size: u8, Pg: u8, Zn: u8, Vd: u8, },
    CNT_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    BIC_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    LSL_z_p_zw { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    CNOT_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    FABS_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    FNEG_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    NOT_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    AND_z_zz { Zm: u8, Zn: u8, Zd: u8, },
    MOV_orr_z_zz { Zm: u8, Zn: u8, Zd: u8, },
    ORR_z_zz { Zm: u8, Zn: u8, Zd: u8, },
    EOR_z_zz { Zm: u8, Zn: u8, Zd: u8, },
    BIC_z_zz { Zm: u8, Zn: u8, Zd: u8, },
    CPY_z_p_v { size: u8, Pg: u8, Vn: u8, Zd: u8, },
    MOV_cpy_z_p_v { size: u8, Pg: u8, Vn: u8, Zd: u8, },
    LASTA_r_p_z { size: u8, Pg: u8, Zn: u8, Rd: u8, },
    COMPACT_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    LASTB_r_p_z { size: u8, Pg: u8, Zn: u8, Rd: u8, },
    LASTA_v_p_z { size: u8, Pg: u8, Zn: u8, Vd: u8, },
    LASTB_v_p_z { size: u8, Pg: u8, Zn: u8, Vd: u8, },
    REVB_z_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    REVH_z_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    REVW_z_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    RBIT_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    CLASTA_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    CPY_z_p_r { size: u8, Pg: u8, Rn: u8, Zd: u8, },
    MOV_cpy_z_p_r { size: u8, Pg: u8, Rn: u8, Zd: u8, },
    CLASTB_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    CLASTA_v_p_z { size: u8, Pg: u8, Zm: u8, Vdn: u8, },
    CLASTB_v_p_z { size: u8, Pg: u8, Zm: u8, Vdn: u8, },
    SPLICE_z_p_zz_des { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    CLASTA_r_p_z { size: u8, Pg: u8, Zm: u8, Rdn: u8, },
    CLASTB_r_p_z { size: u8, Pg: u8, Zm: u8, Rdn: u8, },
    ZIP1_z_zz_q { Zm: u8, Zn: u8, Zd: u8, },
    ZIP2_z_zz_q { Zm: u8, Zn: u8, Zd: u8, },
    UZP1_z_zz_q { Zm: u8, Zn: u8, Zd: u8, },
    UZP2_z_zz_q { Zm: u8, Zn: u8, Zd: u8, },
    TRN1_z_zz_q { Zm: u8, Zn: u8, Zd: u8, },
    TRN2_z_zz_q { Zm: u8, Zn: u8, Zd: u8, },
    CASP_CP32_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASPL_CP32_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASPA_CP32_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASPAL_CP32_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASB_C32_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASLB_C32_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASAB_C32_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASALB_C32_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    SMOV_asimdins_W_w { imm5: u8, Rn: u8, Rd: u8, },
    UMOV_asimdins_W_w { imm5: u8, Rn: u8, Rd: u8, },
    MOVI_asimdimm_L_hl { Q: u8, a: u8, b: u8, c: u8, cmode: u8, d: u8, e: u8, f: u8, g: u8, h: u8, Rd: u8, },
    ORR_asimdimm_L_hl { Q: u8, a: u8, b: u8, c: u8, cmode: u8, d: u8, e: u8, f: u8, g: u8, h: u8, Rd: u8, },
    MOVI_asimdimm_M_sm { Q: u8, a: u8, b: u8, c: u8, cmode: u8, d: u8, e: u8, f: u8, g: u8, h: u8, Rd: u8, },
    ADC_32_addsub_carry { Rm: u8, Rn: u8, Rd: u8, },
    UDIV_32_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    SDIV_32_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    LSL_LSLV_32_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    LSLV_32_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    LSR_LSRV_32_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    LSRV_32_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    ASR_ASRV_32_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    ASRV_32_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    ROR_RORV_32_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    RORV_32_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    CRC32B_32C_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    CRC32H_32C_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    CRC32W_32C_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    CRC32CB_32C_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    CRC32CH_32C_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    CRC32CW_32C_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    MUL_MADD_32A_dp_3src { Rm: u8, Rn: u8, Rd: u8, },
    MNEG_MSUB_32A_dp_3src { Rm: u8, Rn: u8, Rd: u8, },
    FMUL_S_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FDIV_S_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FADD_S_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FSUB_S_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FMAX_S_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FMIN_S_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FMAXNM_S_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FMINNM_S_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FNMUL_S_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FMUL_D_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FDIV_D_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FADD_D_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FSUB_D_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FMAX_D_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FMIN_D_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FMAXNM_D_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FMINNM_D_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FNMUL_D_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FMUL_H_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FDIV_H_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FADD_H_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FSUB_H_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FMAX_H_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FMIN_H_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FMAXNM_H_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FMINNM_H_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    FNMUL_H_floatdp2 { Rm: u8, Rn: u8, Rd: u8, },
    CNTP_r_p_p { size: u8, Pg: u8, Pn: u8, Rd: u8, },
    SMAX_z_zi { size: u8, imm8: u8, Zdn: u8, },
    UMAX_z_zi { size: u8, imm8: u8, Zdn: u8, },
    SMIN_z_zi { size: u8, imm8: u8, Zdn: u8, },
    UMIN_z_zi { size: u8, imm8: u8, Zdn: u8, },
    MUL_z_zi { size: u8, imm8: u8, Zdn: u8, },
    FDUP_z_i { size: u8, imm8: u8, Zd: u8, },
    FMOV_fdup_z_i { size: u8, imm8: u8, Zd: u8, },
    MVNI_asimdimm_L_hl { Q: u8, a: u8, b: u8, c: u8, cmode: u8, d: u8, e: u8, f: u8, g: u8, h: u8, Rd: u8, },
    BIC_asimdimm_L_hl { Q: u8, a: u8, b: u8, c: u8, cmode: u8, d: u8, e: u8, f: u8, g: u8, h: u8, Rd: u8, },
    MVNI_asimdimm_M_sm { Q: u8, a: u8, b: u8, c: u8, cmode: u8, d: u8, e: u8, f: u8, g: u8, h: u8, Rd: u8, },
    LDADDB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDCLRB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDEORB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSETB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMAXB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMINB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMAXB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMINB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    SWPB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDADDLB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDCLRLB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDEORLB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSETLB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMAXLB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMINLB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMAXLB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMINLB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    SWPLB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDADDAB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDCLRAB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDEORAB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSETAB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMAXAB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMINAB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMAXAB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMINAB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    SWPAB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDAPRB_32L_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDADDALB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDCLRALB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDEORALB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSETALB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMAXALB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMINALB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMAXALB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMINALB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    SWPALB_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    ADCS_32_addsub_carry { Rm: u8, Rn: u8, Rd: u8, },
    USDOT_z_zzz_s { Zm: u8, Zn: u8, Zda: u8, },
    SDOT_z_zzzi_s { i2: u8, Zm: u8, Zn: u8, Zda: u8, },
    UDOT_z_zzzi_s { i2: u8, Zm: u8, Zn: u8, Zda: u8, },
    USDOT_z_zzzi_s { i2: u8, Zm: u8, Zn: u8, Zda: u8, },
    SUDOT_z_zzzi_s { i2: u8, Zm: u8, Zn: u8, Zda: u8, },
    SDOT_z_zzzi_d { i1: u8, Zm: u8, Zn: u8, Zda: u8, },
    UDOT_z_zzzi_d { i1: u8, Zm: u8, Zn: u8, Zda: u8, },
    SMMLA_z_zzz { Zm: u8, Zn: u8, Zda: u8, },
    USMMLA_z_zzz { Zm: u8, Zn: u8, Zda: u8, },
    UMMLA_z_zzz { Zm: u8, Zn: u8, Zda: u8, },
    CASP_CP64_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASPL_CP64_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASPA_CP64_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASPAL_CP64_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASH_C32_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASLH_C32_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASAH_C32_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASALH_C32_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    INS_asimdins_IR_r { imm5: u8, Rn: u8, Rd: u8, },
    MOV_INS_asimdins_IR_r { imm5: u8, Rn: u8, Rd: u8, },
    SMOV_asimdins_X_x { imm5: u8, Rn: u8, Rd: u8, },
    SMMLA_asimdsame2_G { Rm: u8, Rn: u8, Rd: u8, },
    USMMLA_asimdsame2_G { Rm: u8, Rn: u8, Rd: u8, },
    SBC_32_addsub_carry { Rm: u8, Rn: u8, Rd: u8, },
    SHA1C_QSV_cryptosha3 { Rm: u8, Rn: u8, Rd: u8, },
    DUP_asisdone_only { imm5: u8, Rn: u8, Rd: u8, },
    MOV_DUP_asisdone_only { imm5: u8, Rn: u8, Rd: u8, },
    SHA1P_QSV_cryptosha3 { Rm: u8, Rn: u8, Rd: u8, },
    SHA1M_QSV_cryptosha3 { Rm: u8, Rn: u8, Rd: u8, },
    SHA1SU0_VVV_cryptosha3 { Rm: u8, Rn: u8, Rd: u8, },
    SHA256H_QQV_cryptosha3 { Rm: u8, Rn: u8, Rd: u8, },
    SHA256H2_QQV_cryptosha3 { Rm: u8, Rn: u8, Rd: u8, },
    SHA256SU1_VVV_cryptosha3 { Rm: u8, Rn: u8, Rd: u8, },
    FMULX_asisdsamefp16_only { Rm: u8, Rn: u8, Rd: u8, },
    FCMEQ_asisdsamefp16_only { Rm: u8, Rn: u8, Rd: u8, },
    FRECPS_asisdsamefp16_only { Rm: u8, Rn: u8, Rd: u8, },
    FRSQRTS_asisdsamefp16_only { Rm: u8, Rn: u8, Rd: u8, },
    BFDOT_z_zzzi { i2: u8, Zm: u8, Zn: u8, Zda: u8, },
    BFDOT_z_zzz { Zm: u8, Zn: u8, Zda: u8, },
    BFMMLA_z_zzz { Zm: u8, Zn: u8, Zda: u8, },
    FMLA_z_zzzi_s { i2: u8, Zm: u8, Zn: u8, Zda: u8, },
    FMLS_z_zzzi_s { i2: u8, Zm: u8, Zn: u8, Zda: u8, },
    FMUL_z_zzi_s { i2: u8, Zm: u8, Zn: u8, Zd: u8, },
    FMMLA_z_zzz_s { Zm: u8, Zn: u8, Zda: u8, },
    FMLA_z_zzzi_d { i1: u8, Zm: u8, Zn: u8, Zda: u8, },
    FMLS_z_zzzi_d { i1: u8, Zm: u8, Zn: u8, Zda: u8, },
    FMUL_z_zzi_d { i1: u8, Zm: u8, Zn: u8, Zd: u8, },
    BFMLALB_z_zzz { Zm: u8, Zn: u8, Zda: u8, },
    BFMLALT_z_zzz { Zm: u8, Zn: u8, Zda: u8, },
    FMMLA_z_zzz_d { Zm: u8, Zn: u8, Zda: u8, },
    FADDV_v_p_z { size: u8, Pg: u8, Zn: u8, Vd: u8, },
    FADD_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FRINTN_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    FSUB_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FRINTP_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    FMUL_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FRINTM_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    FSUBR_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FRINTZ_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    FMAXNMV_v_p_z { size: u8, Pg: u8, Zn: u8, Vd: u8, },
    FMAXNM_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FRINTA_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    FMINNMV_v_p_z { size: u8, Pg: u8, Zn: u8, Vd: u8, },
    FMINNM_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FMAXV_v_p_z { size: u8, Pg: u8, Zn: u8, Vd: u8, },
    FMAX_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FRINTX_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    FMINV_v_p_z { size: u8, Pg: u8, Zn: u8, Vd: u8, },
    FMIN_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FRINTI_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    FABD_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FSCALE_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FMULX_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FDIVR_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FRECPX_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    FDIV_z_p_zz { size: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FSQRT_z_p_z { size: u8, Pg: u8, Zn: u8, Zd: u8, },
    FTMAD_z_zzi { size: u8, imm3: u8, Zm: u8, Zdn: u8, },
    FADDA_v_p_z { size: u8, Pg: u8, Zm: u8, Vdn: u8, },
    BFMMLA_asimdsame2_E { Rm: u8, Rn: u8, Rd: u8, },
    UMMLA_asimdsame2_G { Rm: u8, Rn: u8, Rd: u8, },
    LDADDH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDCLRH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDEORH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSETH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMAXH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMINH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMAXH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMINH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    SWPH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDADDLH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDCLRLH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDEORLH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSETLH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMAXLH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMINLH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMAXLH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMINLH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    SWPLH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDADDAH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDCLRAH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDEORAH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSETAH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMAXAH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMINAH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMAXAH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMINAH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    SWPAH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDAPRH_32L_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDADDALH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDCLRALH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDEORALH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSETALH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMAXALH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMINALH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMAXALH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMINALH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    SWPALH_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    SBCS_32_addsub_carry { Rm: u8, Rn: u8, Rd: u8, },
    FCMGE_asisdsamefp16_only { Rm: u8, Rn: u8, Rd: u8, },
    FACGE_asisdsamefp16_only { Rm: u8, Rn: u8, Rd: u8, },
    FABD_asisdsamefp16_only { Rm: u8, Rn: u8, Rd: u8, },
    FCMGT_asisdsamefp16_only { Rm: u8, Rn: u8, Rd: u8, },
    FACGT_asisdsamefp16_only { Rm: u8, Rn: u8, Rd: u8, },
    CAS_C32_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASL_C32_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASA_C32_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASAL_C32_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    ADC_64_addsub_carry { Rm: u8, Rn: u8, Rd: u8, },
    SUBP_64S_dp_2src { Xm: u8, Xn: u8, Xd: u8, },
    UDIV_64_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    SDIV_64_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    IRG_64I_dp_2src { Xm: u8, Xn: u8, Xd: u8, },
    GMI_64G_dp_2src { Xm: u8, Xn: u8, Xd: u8, },
    LSL_LSLV_64_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    LSLV_64_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    LSR_LSRV_64_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    LSRV_64_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    ASR_ASRV_64_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    ASRV_64_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    ROR_RORV_64_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    RORV_64_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    PACGA_64P_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    CRC32X_64C_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    CRC32CX_64C_dp_2src { Rm: u8, Rn: u8, Rd: u8, },
    MUL_MADD_64A_dp_3src { Rm: u8, Rn: u8, Rd: u8, },
    MNEG_MSUB_64A_dp_3src { Rm: u8, Rn: u8, Rd: u8, },
    SMULL_SMADDL_64WA_dp_3src { Rm: u8, Rn: u8, Rd: u8, },
    SMNEGL_SMSUBL_64WA_dp_3src { Rm: u8, Rn: u8, Rd: u8, },
    UMULL_UMADDL_64WA_dp_3src { Rm: u8, Rn: u8, Rd: u8, },
    UMNEGL_UMSUBL_64WA_dp_3src { Rm: u8, Rn: u8, Rd: u8, },
    LDADD_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDCLR_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDEOR_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSET_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMAX_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMIN_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMAX_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMIN_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    SWP_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDADDL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDCLRL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDEORL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSETL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMAXL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMINL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMAXL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMINL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    SWPL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDADDA_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDCLRA_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDEORA_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSETA_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMAXA_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMINA_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMAXA_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMINA_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    SWPA_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDAPR_32L_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDADDAL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDCLRAL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDEORAL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSETAL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMAXAL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMINAL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMAXAL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMINAL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    SWPAL_32_memop { Rs: u8, Rn: u8, Rt: u8, },
    ADCS_64_addsub_carry { Rm: u8, Rn: u8, Rd: u8, },
    RMIF_only_rmif { imm6: u8, Rn: u8, mask: u8, },
    SUBPS_64S_dp_2src { Xm: u8, Xn: u8, Xd: u8, },
    CAS_C64_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASL_C64_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASA_C64_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    CASAL_C64_ldstexcl { Rs: u8, Rn: u8, Rt: u8, },
    SHA512H_QQV_cryptosha512_3 { Rm: u8, Rn: u8, Rd: u8, },
    SHA512H2_QQV_cryptosha512_3 { Rm: u8, Rn: u8, Rd: u8, },
    SHA512SU1_VVV2_cryptosha512_3 { Rm: u8, Rn: u8, Rd: u8, },
    RAX1_VVV2_cryptosha512_3 { Rm: u8, Rn: u8, Rd: u8, },
    SM3PARTW1_VVV4_cryptosha512_3 { Rm: u8, Rn: u8, Rd: u8, },
    SM3PARTW2_VVV4_cryptosha512_3 { Rm: u8, Rn: u8, Rd: u8, },
    SM4EKEY_VVV4_cryptosha512_3 { Rm: u8, Rn: u8, Rd: u8, },
    DC_SYS_CR_systeminstrs { op1: u8, CRm: u8, op2: u8, Rt: u8, },
    IC_SYS_CR_systeminstrs { op1: u8, CRm: u8, op2: u8, Rt: u8, },
    TLBI_SYS_CR_systeminstrs { op1: u8, CRm: u8, op2: u8, Rt: u8, },
    SBC_64_addsub_carry { Rm: u8, Rn: u8, Rd: u8, },
    LDADD_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDCLR_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDEOR_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSET_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMAX_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMIN_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMAX_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMIN_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    SWP_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    ST64BV0_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    ST64BV_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDADDL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDCLRL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDEORL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSETL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMAXL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMINL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMAXL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMINL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    SWPL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDADDA_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDCLRA_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDEORA_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSETA_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMAXA_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMINA_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMAXA_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMINA_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    SWPA_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDAPR_64L_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDADDAL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDCLRAL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDEORAL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSETAL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMAXAL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDSMINAL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMAXAL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    LDUMINAL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    SWPAL_64_memop { Rs: u8, Rn: u8, Rt: u8, },
    SBCS_64_addsub_carry { Rm: u8, Rn: u8, Rd: u8, },
    UDF_only_perm_undef { imm16: u16, },
    MOVPRFX_z_p_z { size: u8, M: u8, Pg: u8, Zn: u8, Zd: u8, },
    ADDVL_r_ri { Rn: u8, imm6: u8, Rd: u8, },
    ADDPL_r_ri { Rn: u8, imm6: u8, Rd: u8, },
    ST1_asisdlsop_DX1_r1d { Q: u8, Rm: u8, Rn: u8, Rt: u8, },
    ST3_asisdlsop_DX3_r3d { Q: u8, Rm: u8, Rn: u8, Rt: u8, },
    ST2_asisdlsop_DX2_r2d { Q: u8, Rm: u8, Rn: u8, Rt: u8, },
    ST4_asisdlsop_DX4_r4d { Q: u8, Rm: u8, Rn: u8, Rt: u8, },
    LD1_asisdlsop_DX1_r1d { Q: u8, Rm: u8, Rn: u8, Rt: u8, },
    LD3_asisdlsop_DX3_r3d { Q: u8, Rm: u8, Rn: u8, Rt: u8, },
    LD2_asisdlsop_DX2_r2d { Q: u8, Rm: u8, Rn: u8, Rt: u8, },
    LD4_asisdlsop_DX4_r4d { Q: u8, Rm: u8, Rn: u8, Rt: u8, },
    TBL_asimdtbl_L1_1 { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    DUP_asimdins_DV_v { Q: u8, imm5: u8, Rn: u8, Rd: u8, },
    DUP_asimdins_DR_r { Q: u8, imm5: u8, Rn: u8, Rd: u8, },
    TBX_asimdtbl_L1_1 { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    TBL_asimdtbl_L2_2 { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    TBX_asimdtbl_L2_2 { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    TBL_asimdtbl_L3_3 { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    TBX_asimdtbl_L3_3 { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    TBL_asimdtbl_L4_4 { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    TBX_asimdtbl_L4_4 { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    AND_asimdsame_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMLAL_asimdsame_F { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMAXNM_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMLA_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FADD_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMULX_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FCMEQ_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMAX_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FRECPS_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    BIC_asimdsame_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    USDOT_asimdsame2_D { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    MOV_ORR_asimdsame_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    ORR_asimdsame_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMLSL_asimdsame_F { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMINNM_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMLS_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FSUB_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMIN_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FRSQRTS_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    ORN_asimdsame_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    MOVI_asimdimm_L_sl { Q: u8, a: u8, b: u8, c: u8, cmode: u8, d: u8, e: u8, f: u8, g: u8, h: u8, Rd: u8, },
    ORR_asimdimm_L_sl { Q: u8, a: u8, b: u8, c: u8, cmode: u8, d: u8, e: u8, f: u8, g: u8, h: u8, Rd: u8, },
    ASR_SBFM_32M_bitfield { immr: u8, Rn: u8, Rd: u8, },
    SCVTF_S32_float2fix { scale: u8, Rn: u8, Rd: u8, },
    UCVTF_S32_float2fix { scale: u8, Rn: u8, Rd: u8, },
    FCVTZS_32S_float2fix { scale: u8, Rn: u8, Rd: u8, },
    FCVTZU_32S_float2fix { scale: u8, Rn: u8, Rd: u8, },
    SCVTF_D32_float2fix { scale: u8, Rn: u8, Rd: u8, },
    UCVTF_D32_float2fix { scale: u8, Rn: u8, Rd: u8, },
    FCVTZS_32D_float2fix { scale: u8, Rn: u8, Rd: u8, },
    FCVTZU_32D_float2fix { scale: u8, Rn: u8, Rd: u8, },
    SCVTF_H32_float2fix { scale: u8, Rn: u8, Rd: u8, },
    UCVTF_H32_float2fix { scale: u8, Rn: u8, Rd: u8, },
    FCVTZS_32H_float2fix { scale: u8, Rn: u8, Rd: u8, },
    FCVTZU_32H_float2fix { scale: u8, Rn: u8, Rd: u8, },
    AND_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    MOV_and_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    BIC_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    EOR_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    NOT_eor_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    MOV_sel_p_p_pp { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    SEL_p_p_pp { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    BRKPA_p_p_pp { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    BRKPB_p_p_pp { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    ADD_z_zi { size: u8, sh: u8, imm8: u8, Zdn: u8, },
    SUB_z_zi { size: u8, sh: u8, imm8: u8, Zdn: u8, },
    SUBR_z_zi { size: u8, sh: u8, imm8: u8, Zdn: u8, },
    SQADD_z_zi { size: u8, sh: u8, imm8: u8, Zdn: u8, },
    UQADD_z_zi { size: u8, sh: u8, imm8: u8, Zdn: u8, },
    SQSUB_z_zi { size: u8, sh: u8, imm8: u8, Zdn: u8, },
    UQSUB_z_zi { size: u8, sh: u8, imm8: u8, Zdn: u8, },
    DUP_z_i { size: u8, sh: u8, imm8: u8, Zd: u8, },
    MOV_dup_z_i { size: u8, sh: u8, imm8: u8, Zd: u8, },
    ANDS_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    MOVS_ands_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    BICS_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    EORS_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    NOTS_eors_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    BRKPAS_p_p_pp { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    BRKPBS_p_p_pp { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    MOV_orr_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    ORR_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    ORN_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    NOR_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    NAND_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    MOVS_orrs_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    ORRS_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    ORNS_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    NORS_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    NANDS_p_p_pp_z { Pm: u8, Pg: u8, Pn: u8, Pd: u8, },
    CMN_ADDS_32S_addsub_ext { Rm: u8, option: u8, imm3: u8, Rn: u8, },
    EOR_asimdsame_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMLAL2_asimdsame_F { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMAXNMP_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FADDP_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMUL_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FCMGE_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FACGE_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMAXP_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FDIV_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    BFDOT_asimdsame2_D { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    BSL_asimdsame_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    BIT_asimdsame_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMLSL2_asimdsame_F { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMINNMP_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FABD_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FCMGT_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FACGT_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMINP_asimdsamefp16_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    BFMLAL_asimdsame2_F { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    BIF_asimdsame_only { Q: u8, Rm: u8, Rn: u8, Rd: u8, },
    MVNI_asimdimm_L_sl { Q: u8, a: u8, b: u8, c: u8, cmode: u8, d: u8, e: u8, f: u8, g: u8, h: u8, Rd: u8, },
    BIC_asimdimm_L_sl { Q: u8, a: u8, b: u8, c: u8, cmode: u8, d: u8, e: u8, f: u8, g: u8, h: u8, Rd: u8, },
    STRB_32BL_ldst_regoff { Rm: u8, S: u8, Rn: u8, Rt: u8, },
    LDRB_32BL_ldst_regoff { Rm: u8, S: u8, Rn: u8, Rt: u8, },
    LDRSB_64BL_ldst_regoff { Rm: u8, S: u8, Rn: u8, Rt: u8, },
    LDRSB_32BL_ldst_regoff { Rm: u8, S: u8, Rn: u8, Rt: u8, },
    STR_BL_ldst_regoff { Rm: u8, S: u8, Rn: u8, Rt: u8, },
    LDR_BL_ldst_regoff { Rm: u8, S: u8, Rn: u8, Rt: u8, },
    LSR_UBFM_32M_bitfield { immr: u8, Rn: u8, Rd: u8, },
    FMULX_asisdsame_only { sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FCMEQ_asisdsame_only { sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FRECPS_asisdsame_only { sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FRSQRTS_asisdsame_only { sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FCADD_z_p_zz { size: u8, rot: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FMLA_z_zzzi_h { i3h: u8, i3l: u8, Zm: u8, Zn: u8, Zda: u8, },
    FMLS_z_zzzi_h { i3h: u8, i3l: u8, Zm: u8, Zn: u8, Zda: u8, },
    FMUL_z_zzi_h { i3h: u8, i3l: u8, Zm: u8, Zn: u8, Zd: u8, },
    BFMLALB_z_zzzi { i3h: u8, Zm: u8, i3l: u8, Zn: u8, Zda: u8, },
    BFMLALT_z_zzzi { i3h: u8, Zm: u8, i3l: u8, Zn: u8, Zda: u8, },
    CMP_SUBS_32S_addsub_ext { Rm: u8, option: u8, imm3: u8, Rn: u8, },
    FCMGE_asisdsame_only { sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FACGE_asisdsame_only { sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FABD_asisdsame_only { sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FCMGT_asisdsame_only { sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FACGT_asisdsame_only { sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    ASR_SBFM_64M_bitfield { immr: u8, Rn: u8, Rd: u8, },
    SCVTF_S64_float2fix { scale: u8, Rn: u8, Rd: u8, },
    UCVTF_S64_float2fix { scale: u8, Rn: u8, Rd: u8, },
    FCVTZS_64S_float2fix { scale: u8, Rn: u8, Rd: u8, },
    FCVTZU_64S_float2fix { scale: u8, Rn: u8, Rd: u8, },
    SCVTF_D64_float2fix { scale: u8, Rn: u8, Rd: u8, },
    UCVTF_D64_float2fix { scale: u8, Rn: u8, Rd: u8, },
    FCVTZS_64D_float2fix { scale: u8, Rn: u8, Rd: u8, },
    FCVTZU_64D_float2fix { scale: u8, Rn: u8, Rd: u8, },
    SCVTF_H64_float2fix { scale: u8, Rn: u8, Rd: u8, },
    UCVTF_H64_float2fix { scale: u8, Rn: u8, Rd: u8, },
    FCVTZS_64H_float2fix { scale: u8, Rn: u8, Rd: u8, },
    FCVTZU_64H_float2fix { scale: u8, Rn: u8, Rd: u8, },
    CMN_ADDS_64S_addsub_ext { Rm: u8, option: u8, imm3: u8, Rn: u8, },
    LSR_UBFM_64M_bitfield { immr: u8, Rn: u8, Rd: u8, },
    SVC_EX_exception { imm16: u16, },
    HVC_EX_exception { imm16: u16, },
    SMC_EX_exception { imm16: u16, },
    BRK_EX_exception { imm16: u16, },
    HLT_EX_exception { imm16: u16, },
    DCPS1_DC_exception { imm16: u16, },
    DCPS2_DC_exception { imm16: u16, },
    DCPS3_DC_exception { imm16: u16, },
    CMP_SUBS_64S_addsub_ext { Rm: u8, option: u8, imm3: u8, Rn: u8, },
    SSHR_asisdshf_R { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SSRA_asisdshf_R { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SRSHR_asisdshf_R { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SRSRA_asisdshf_R { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SHL_asisdshf_R { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SQSHL_asisdshf_R { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SQSHRN_asisdshf_N { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SQRSHRN_asisdshf_N { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SCVTF_asisdshf_C { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    FCVTZS_asisdshf_C { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    USHR_asisdshf_R { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    USRA_asisdshf_R { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    URSHR_asisdshf_R { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    URSRA_asisdshf_R { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SRI_asisdshf_R { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SLI_asisdshf_R { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SQSHLU_asisdshf_R { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    UQSHL_asisdshf_R { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SQSHRUN_asisdshf_N { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SQRSHRUN_asisdshf_N { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    UQSHRN_asisdshf_N { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    UQRSHRN_asisdshf_N { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    UCVTF_asisdshf_C { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    FCVTZU_asisdshf_C { immh: u8, immb: u8, Rn: u8, Rd: u8, },
    ADD_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    SUB_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    SQADD_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    UQADD_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    SQSUB_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    UQSUB_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    INDEX_z_ii { size: u8, imm5b: u8, imm5: u8, Zd: u8, },
    INDEX_z_ri { size: u8, imm5: u8, Rn: u8, Zd: u8, },
    INDEX_z_ir { size: u8, Rm: u8, imm5: u8, Zd: u8, },
    INDEX_z_rr { size: u8, Rm: u8, Rn: u8, Zd: u8, },
    ASR_z_zw { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    LSR_z_zw { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    LSL_z_zw { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    ASR_z_zi { tszh: u8, tszl: u8, imm3: u8, Zn: u8, Zd: u8, },
    LSR_z_zi { tszh: u8, tszl: u8, imm3: u8, Zn: u8, Zd: u8, },
    LSL_z_zi { tszh: u8, tszl: u8, imm3: u8, Zn: u8, Zd: u8, },
    ADR_z_az_d_s32_scaled { Zm: u8, msz: u8, Zn: u8, Zd: u8, },
    FTSSEL_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    ADR_z_az_d_u32_scaled { Zm: u8, msz: u8, Zn: u8, Zd: u8, },
    DUP_z_zi { imm2: u8, tsz: u8, Zn: u8, Zd: u8, },
    MOV_dup_z_zi { imm2: u8, tsz: u8, Zn: u8, Zd: u8, },
    TBL_z_zz_1 { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    ZIP1_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    ZIP2_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    UZP1_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    UZP2_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    TRN1_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    TRN2_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    ST1_asisdlsop_SX1_r1s { Q: u8, Rm: u8, S: u8, Rn: u8, Rt: u8, },
    ST3_asisdlsop_SX3_r3s { Q: u8, Rm: u8, S: u8, Rn: u8, Rt: u8, },
    ST2_asisdlsop_SX2_r2s { Q: u8, Rm: u8, S: u8, Rn: u8, Rt: u8, },
    ST4_asisdlsop_SX4_r4s { Q: u8, Rm: u8, S: u8, Rn: u8, Rt: u8, },
    LD1_asisdlsop_SX1_r1s { Q: u8, Rm: u8, S: u8, Rn: u8, Rt: u8, },
    LD3_asisdlsop_SX3_r3s { Q: u8, Rm: u8, S: u8, Rn: u8, Rt: u8, },
    LD2_asisdlsop_SX2_r2s { Q: u8, Rm: u8, S: u8, Rn: u8, Rt: u8, },
    LD4_asisdlsop_SX4_r4s { Q: u8, Rm: u8, S: u8, Rn: u8, Rt: u8, },
    FMAXNM_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMLA_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FADD_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMULX_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FCMEQ_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMAX_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FRECPS_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMINNM_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMLS_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FSUB_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMIN_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FRSQRTS_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    WHILELT_p_p_rr { size: u8, Rm: u8, sf: u8, Rn: u8, Pd: u8, },
    WHILELE_p_p_rr { size: u8, Rm: u8, sf: u8, Rn: u8, Pd: u8, },
    WHILELO_p_p_rr { size: u8, Rm: u8, sf: u8, Rn: u8, Pd: u8, },
    WHILELS_p_p_rr { size: u8, Rm: u8, sf: u8, Rn: u8, Pd: u8, },
    FMAXNMP_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FADDP_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMUL_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FCMGE_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FACGE_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMAXP_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FDIV_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMINNMP_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FABD_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FCMGT_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FACGT_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMINP_asimdsame_only { Q: u8, sz: u8, Rm: u8, Rn: u8, Rd: u8, },
    MOV_ORR_32_log_imm { immr: u8, imms: u8, Rd: u8, },
    BFC_BFM_32M_bitfield { immr: u8, imms: u8, Rd: u8, },
    SDOT_z_zzz { size: u8, Zm: u8, Zn: u8, Zda: u8, },
    UDOT_z_zzz { size: u8, Zm: u8, Zn: u8, Zda: u8, },
    SQADD_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQSUB_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    CMGT_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    CMGE_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SSHL_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQSHL_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SRSHL_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQRSHL_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    ADD_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    CMTST_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQDMLAL_asisddiff_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQDMLSL_asisddiff_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQDMULH_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQDMULL_asisddiff_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMLA_asisdelem_RH_H { L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    FMLS_asisdelem_RH_H { L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    FMUL_asisdelem_RH_H { L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    FCMLA_z_zzzi_h { i2: u8, Zm: u8, rot: u8, Zn: u8, Zda: u8, },
    FCMLA_z_zzzi_s { i1: u8, Zm: u8, rot: u8, Zn: u8, Zda: u8, },
    FADD_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    FSUB_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    FMUL_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    FTSMUL_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    FRECPS_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    FRSQRTS_z_zz { size: u8, Zm: u8, Zn: u8, Zd: u8, },
    TST_ANDS_32S_log_imm { immr: u8, imms: u8, Rn: u8, },
    SQRDMLAH_asisdsame2_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQRDMLSH_asisdsame2_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UQADD_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UQSUB_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    CMHI_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    CMHS_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    USHL_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UQSHL_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    URSHL_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UQRSHL_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SUB_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    CMEQ_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQRDMULH_asisdsame_only { size: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMULX_asisdelem_RH_H { L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    PRFB_i_p_br_s { Rm: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFB_i_p_ai_s { imm5: u8, Pg: u8, Zn: u8, prfop: u8, },
    PRFH_i_p_br_s { Rm: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFH_i_p_ai_s { imm5: u8, Pg: u8, Zn: u8, prfop: u8, },
    PRFW_i_p_br_s { Rm: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFW_i_p_ai_s { imm5: u8, Pg: u8, Zn: u8, prfop: u8, },
    PRFD_i_p_br_s { Rm: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFD_i_p_ai_s { imm5: u8, Pg: u8, Zn: u8, prfop: u8, },
    LD1RQB_z_p_bi_u8 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1B_z_p_bi_u8 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNT1B_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNF1B_z_p_bi_u8 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1ROB_z_p_bi_u8 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1B_z_p_bi_u16 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD2B_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNF1B_z_p_bi_u16 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1B_z_p_bi_u32 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD3B_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNF1B_z_p_bi_u32 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1B_z_p_bi_u64 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD4B_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNF1B_z_p_bi_u64 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RQH_z_p_bi_u16 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SW_z_p_bi_s64 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNT1H_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNF1SW_z_p_bi_s64 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1ROH_z_p_bi_u16 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1H_z_p_bi_u16 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD2H_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNF1H_z_p_bi_u16 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1H_z_p_bi_u32 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD3H_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNF1H_z_p_bi_u32 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1H_z_p_bi_u64 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD4H_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNF1H_z_p_bi_u64 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RQW_z_p_bi_u32 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SH_z_p_bi_s64 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNT1W_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNF1SH_z_p_bi_s64 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1ROW_z_p_bi_u32 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SH_z_p_bi_s32 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD2W_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNF1SH_z_p_bi_s32 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1W_z_p_bi_u32 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD3W_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNF1W_z_p_bi_u32 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1W_z_p_bi_u64 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD4W_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNF1W_z_p_bi_u64 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RQD_z_p_bi_u64 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SB_z_p_bi_s64 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNT1D_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNF1SB_z_p_bi_s64 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1ROD_z_p_bi_u64 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SB_z_p_bi_s32 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD2D_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNF1SB_z_p_bi_s32 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SB_z_p_bi_s16 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD3D_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNF1SB_z_p_bi_s16 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1D_z_p_bi_u64 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD4D_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNF1D_z_p_bi_u64 { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    BFC_BFM_64M_bitfield { immr: u8, imms: u8, Rd: u8, },
    PRFB_i_p_ai_d { imm5: u8, Pg: u8, Zn: u8, prfop: u8, },
    PRFB_i_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFH_i_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFW_i_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFD_i_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFH_i_p_ai_d { imm5: u8, Pg: u8, Zn: u8, prfop: u8, },
    PRFW_i_p_ai_d { imm5: u8, Pg: u8, Zn: u8, prfop: u8, },
    PRFD_i_p_ai_d { imm5: u8, Pg: u8, Zn: u8, prfop: u8, },
    SM3TT1A_VVV4_crypto3_imm2 { Rm: u8, imm2: u8, Rn: u8, Rd: u8, },
    SM3TT1B_VVV4_crypto3_imm2 { Rm: u8, imm2: u8, Rn: u8, Rd: u8, },
    SM3TT2A_VVV4_crypto3_imm2 { Rm: u8, imm2: u8, Rn: u8, Rd: u8, },
    SM3TT2B_VVV_crypto3_imm2 { Rm: u8, imm2: u8, Rn: u8, Rd: u8, },
    STNT1B_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST2B_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST3B_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST4B_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    STNT1H_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST2H_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST3H_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST4H_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    STNT1W_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST2W_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST3W_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST4W_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    STNT1D_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST2D_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST3D_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST4D_z_p_bi_contiguous { imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    NEGS_SUBS_32_addsub_shift { shift: u8, Rm: u8, imm6: u8, Rd: u8, },
    NEGS_SUBS_64_addsub_shift { shift: u8, Rm: u8, imm6: u8, Rd: u8, },
    SSHR_asimdshf_R { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SSRA_asimdshf_R { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SRSHR_asimdshf_R { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SRSRA_asimdshf_R { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SHL_asimdshf_R { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SQSHL_asimdshf_R { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SHRN_asimdshf_N { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    RSHRN_asimdshf_N { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SQSHRN_asimdshf_N { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SQRSHRN_asimdshf_N { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SSHLL_asimdshf_L { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SCVTF_asimdshf_C { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    FCVTZS_asimdshf_C { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    USHR_asimdshf_R { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    USRA_asimdshf_R { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    URSHR_asimdshf_R { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    URSRA_asimdshf_R { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SRI_asimdshf_R { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SLI_asimdshf_R { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SQSHLU_asimdshf_R { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    UQSHL_asimdshf_R { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SQSHRUN_asimdshf_N { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    SQRSHRUN_asimdshf_N { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    UQSHRN_asimdshf_N { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    UQRSHRN_asimdshf_N { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    USHLL_asimdshf_L { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    UCVTF_asimdshf_C { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    FCVTZU_asimdshf_C { Q: u8, immh: u8, immb: u8, Rn: u8, Rd: u8, },
    ADR_z_az_sd_same_scaled { sz: u8, Zm: u8, msz: u8, Zn: u8, Zd: u8, },
    ORN_orr_z_zi { imm13: u16, Zdn: u8, },
    ORR_z_zi { imm13: u16, Zdn: u8, },
    EXT_z_zi_des { imm8h: u8, imm8l: u8, Zm: u8, Zdn: u8, },
    EON_eor_z_zi { imm13: u16, Zdn: u8, },
    EOR_z_zi { imm13: u16, Zdn: u8, },
    AND_z_zi { imm13: u16, Zdn: u8, },
    BIC_and_z_zi { imm13: u16, Zdn: u8, },
    DUPM_z_i { imm13: u16, Zd: u8, },
    MOV_dupm_z_i { imm13: u16, Zd: u8, },
    ST4_asisdlsep_R4_r { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    ST1_asisdlsep_R4_r4 { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    ST3_asisdlsep_R3_r { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    ST1_asisdlsep_R3_r3 { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    ST1_asisdlsep_R1_r1 { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    ST2_asisdlsep_R2_r { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    ST1_asisdlsep_R2_r2 { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    LD4_asisdlsep_R4_r { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlsep_R4_r4 { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    LD3_asisdlsep_R3_r { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlsep_R3_r3 { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlsep_R1_r1 { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    LD2_asisdlsep_R2_r { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlsep_R2_r2 { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    ST1_asisdlsop_HX1_r1h { Q: u8, Rm: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST3_asisdlsop_HX3_r3h { Q: u8, Rm: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST2_asisdlsop_HX2_r2h { Q: u8, Rm: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST4_asisdlsop_HX4_r4h { Q: u8, Rm: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlsop_HX1_r1h { Q: u8, Rm: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD3_asisdlsop_HX3_r3h { Q: u8, Rm: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD1R_asisdlsop_RX1_r { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    LD3R_asisdlsop_RX3_r { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    LD2_asisdlsop_HX2_r2h { Q: u8, Rm: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD4_asisdlsop_HX4_r4h { Q: u8, Rm: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD2R_asisdlsop_RX2_r { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    LD4R_asisdlsop_RX4_r { Q: u8, Rm: u8, size: u8, Rn: u8, Rt: u8, },
    UZP1_asimdperm_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    TRN1_asimdperm_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    ZIP1_asimdperm_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UZP2_asimdperm_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    TRN2_asimdperm_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    ZIP2_asimdperm_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SDOT_asimdsame2_D { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SADDL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SHADD_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQADD_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SADDW_asimddiff_W { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SRHADD_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SSUBL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SHSUB_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQSUB_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SSUBW_asimddiff_W { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    CMGT_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    CMGE_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    ADDHN_asimddiff_N { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SSHL_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQSHL_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SABAL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SRSHL_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQRSHL_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SUBHN_asimddiff_N { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SMAX_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SMIN_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SABDL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SABD_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SABA_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SMLAL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    ADD_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    CMTST_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQDMLAL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    MLA_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    MUL_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SMLSL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SMAXP_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SMINP_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQDMLSL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQDMULH_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    ADDP_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SMULL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQDMULL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    PMULL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMLA_asimdelem_RH_H { Q: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    FMLS_asimdelem_RH_H { Q: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    FMUL_asimdelem_RH_H { Q: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    SUDOT_asimdelem_D { Q: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    BFDOT_asimdelem_E { Q: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    FMLAL_asimdelem_LH { Q: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    FMLSL_asimdelem_LH { Q: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    USDOT_asimdelem_D { Q: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    BFMLAL_asimdelem_F { Q: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    FCCMP_S_floatccmp { Rm: u8, cond: u8, Rn: u8, nzcv: u8, },
    FCCMPE_S_floatccmp { Rm: u8, cond: u8, Rn: u8, nzcv: u8, },
    FCCMP_D_floatccmp { Rm: u8, cond: u8, Rn: u8, nzcv: u8, },
    FCCMPE_D_floatccmp { Rm: u8, cond: u8, Rn: u8, nzcv: u8, },
    FCCMP_H_floatccmp { Rm: u8, cond: u8, Rn: u8, nzcv: u8, },
    FCCMPE_H_floatccmp { Rm: u8, cond: u8, Rn: u8, nzcv: u8, },
    MVN_ORN_32_log_shift { shift: u8, Rm: u8, imm6: u8, Rd: u8, },
    CMN_ADDS_32_addsub_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, },
    SQRDMLAH_asimdsame2_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQRDMLSH_asimdsame2_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UDOT_asimdsame2_D { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UADDL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UHADD_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UQADD_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UADDW_asimddiff_W { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    URHADD_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    USUBL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UHSUB_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UQSUB_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    USUBW_asimddiff_W { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    CMHI_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    CMHS_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    RADDHN_asimddiff_N { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    USHL_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UQSHL_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UABAL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    URSHL_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UQRSHL_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    RSUBHN_asimddiff_N { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UMAX_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UMIN_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UABDL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UABD_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UABA_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UMLAL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SUB_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    CMEQ_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    MLS_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    PMUL_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UMLSL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UMAXP_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UMINP_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    SQRDMULH_asimdsame_only { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    UMULL_asimddiff_L { Q: u8, size: u8, Rm: u8, Rn: u8, Rd: u8, },
    FMULX_asimdelem_RH_H { Q: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    FMLAL2_asimdelem_LH { Q: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    FMLSL2_asimdelem_LH { Q: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    CMN_ADDS_32S_addsub_imm { sh: u8, imm12: u16, Rn: u8, },
    CCMN_32_condcmp_reg { Rm: u8, cond: u8, Rn: u8, nzcv: u8, },
    CCMN_32_condcmp_imm { imm5: u8, cond: u8, Rn: u8, nzcv: u8, },
    NEG_SUB_32_addsub_shift { shift: u8, Rm: u8, imm6: u8, Rd: u8, },
    FMLA_asisdelem_R_SD { sz: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    FMLS_asisdelem_R_SD { sz: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    FMUL_asisdelem_R_SD { sz: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    TST_ANDS_32_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, },
    CMP_SUBS_32_addsub_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, },
    CMP_SUBS_32S_addsub_imm { sh: u8, imm12: u16, Rn: u8, },
    CCMP_32_condcmp_reg { Rm: u8, cond: u8, Rn: u8, nzcv: u8, },
    CCMP_32_condcmp_imm { imm5: u8, cond: u8, Rn: u8, nzcv: u8, },
    FMULX_asisdelem_R_SD { sz: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    PRFB_i_p_bz_s_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFH_i_p_bz_s_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFW_i_p_bz_s_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFD_i_p_bz_s_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, prfop: u8, },
    LD1SB_z_p_ai_s { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LDFF1SB_z_p_ai_s { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LD1B_z_p_ai_s { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LDFF1B_z_p_ai_s { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LD1SH_z_p_ai_s { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LDFF1SH_z_p_ai_s { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LD1H_z_p_ai_s { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LDFF1H_z_p_ai_s { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LD1W_z_p_ai_s { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LDFF1W_z_p_ai_s { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LDR_p_bi { imm9h: u8, imm9l: u8, Rn: u8, Pt: u8, },
    PRFB_i_p_bi_s { imm6: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFH_i_p_bi_s { imm6: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFW_i_p_bi_s { imm6: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFD_i_p_bi_s { imm6: u8, Pg: u8, Rn: u8, prfop: u8, },
    LD1RQB_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1B_z_p_br_u8 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1B_z_p_br_u8 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNT1B_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1ROB_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1B_z_p_br_u16 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1B_z_p_br_u16 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD2B_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1B_z_p_br_u32 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1B_z_p_br_u32 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD3B_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1B_z_p_br_u64 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1B_z_p_br_u64 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD4B_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RQH_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SW_z_p_br_s64 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SW_z_p_br_s64 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNT1H_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1ROH_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1H_z_p_br_u16 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1H_z_p_br_u16 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD2H_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1H_z_p_br_u32 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1H_z_p_br_u32 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD3H_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1H_z_p_br_u64 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1H_z_p_br_u64 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD4H_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RQW_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SH_z_p_br_s64 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SH_z_p_br_s64 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNT1W_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1ROW_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SH_z_p_br_s32 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SH_z_p_br_s32 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD2W_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1W_z_p_br_u32 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1W_z_p_br_u32 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD3W_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1W_z_p_br_u64 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1W_z_p_br_u64 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD4W_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RQD_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SB_z_p_br_s64 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SB_z_p_br_s64 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDNT1D_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1ROD_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SB_z_p_br_s32 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SB_z_p_br_s32 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD2D_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SB_z_p_br_s16 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SB_z_p_br_s16 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD3D_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1D_z_p_br_u64 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1D_z_p_br_u64 { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD4D_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    MVN_ORN_64_log_shift { shift: u8, Rm: u8, imm6: u8, Rd: u8, },
    CMN_ADDS_64_addsub_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, },
    CMN_ADDS_64S_addsub_imm { sh: u8, imm12: u16, Rn: u8, },
    MOV_ORR_64_log_imm { N: u8, immr: u8, imms: u8, Rd: u8, },
    CCMN_64_condcmp_reg { Rm: u8, cond: u8, Rn: u8, nzcv: u8, },
    CCMN_64_condcmp_imm { imm5: u8, cond: u8, Rn: u8, nzcv: u8, },
    PRFB_i_p_bz_d_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFH_i_p_bz_d_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFW_i_p_bz_d_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, prfop: u8, },
    PRFD_i_p_bz_d_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, prfop: u8, },
    LD1SB_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LDFF1SB_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LD1B_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LDFF1B_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LD1SB_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SB_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1B_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1B_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SH_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LDFF1SH_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LD1H_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LDFF1H_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LD1SH_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SH_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1H_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1H_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SH_z_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SH_z_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1H_z_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1H_z_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SW_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LDFF1SW_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LD1W_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LDFF1W_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LD1SW_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SW_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1W_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1W_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SW_z_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SW_z_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1W_z_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1W_z_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1D_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LDFF1D_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    LD1D_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1D_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1D_z_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1D_z_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    NEG_SUB_64_addsub_shift { shift: u8, Rm: u8, imm6: u8, Rd: u8, },
    STNT1B_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1B_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST2B_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST3B_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1B_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    ST4B_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1B_z_p_ai_s { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    STNT1H_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1H_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST2H_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1H_z_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST3H_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1H_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    ST4H_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1H_z_p_ai_s { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    STNT1W_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1W_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST2W_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1W_z_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST3W_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1W_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    ST4W_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1W_z_p_ai_s { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    STR_p_bi { imm9h: u8, imm9l: u8, Rn: u8, Pt: u8, },
    STNT1D_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1D_z_p_bz_d_64_unscaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST2D_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1D_z_p_bz_d_64_scaled { Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST3D_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1D_z_p_ai_d { imm5: u8, Pg: u8, Zn: u8, Zt: u8, },
    ST1D_z_p_br { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST4D_z_p_br_contiguous { Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    TST_ANDS_64_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, },
    CMP_SUBS_64_addsub_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, },
    CMP_SUBS_64S_addsub_imm { sh: u8, imm12: u16, Rn: u8, },
    TST_ANDS_64S_log_imm { N: u8, immr: u8, imms: u8, Rn: u8, },
    CCMP_64_condcmp_reg { Rm: u8, cond: u8, Rn: u8, nzcv: u8, },
    CCMP_64_condcmp_imm { imm5: u8, cond: u8, Rn: u8, nzcv: u8, },
    CINC_CSINC_32_condsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    CINV_CSINV_32_condsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    CINC_CSINC_64_condsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    CINV_CSINV_64_condsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    CNEG_CSNEG_32_condsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    CNEG_CSNEG_64_condsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    FCPY_z_p_i { size: u8, Pg: u8, imm8: u8, Zd: u8, },
    FMOV_fcpy_z_p_i { size: u8, Pg: u8, imm8: u8, Zd: u8, },
    ST1_asisdlsop_BX1_r1b { Q: u8, Rm: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST3_asisdlsop_BX3_r3b { Q: u8, Rm: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST2_asisdlsop_BX2_r2b { Q: u8, Rm: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    ST4_asisdlsop_BX4_r4b { Q: u8, Rm: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD1_asisdlsop_BX1_r1b { Q: u8, Rm: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD3_asisdlsop_BX3_r3b { Q: u8, Rm: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD2_asisdlsop_BX2_r2b { Q: u8, Rm: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    LD4_asisdlsop_BX4_r4b { Q: u8, Rm: u8, S: u8, size: u8, Rn: u8, Rt: u8, },
    FMLA_asimdelem_R_SD { Q: u8, sz: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    FMLS_asimdelem_R_SD { Q: u8, sz: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    FMUL_asimdelem_R_SD { Q: u8, sz: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    STLURB_32_ldapstl_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDAPURB_32_ldapstl_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDAPURSB_64_ldapstl_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDAPURSB_32_ldapstl_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    CSEL_32_condsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    CSINC_32_condsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    FCSEL_S_floatsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    FCSEL_D_floatsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    FCSEL_H_floatsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    CMPHS_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPLS_cmphs_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPHI_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPLO_cmphi_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPEQ_p_p_zw { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPNE_p_p_zw { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPGE_p_p_zw { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPGT_p_p_zw { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPLT_p_p_zw { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPLE_p_p_zw { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPGE_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPLE_cmpge_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPGT_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPLT_cmpgt_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPEQ_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPNE_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPHS_p_p_zw { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPHI_p_p_zw { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPLO_p_p_zw { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPLS_p_p_zw { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPGE_p_p_zi { size: u8, imm5: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPGT_p_p_zi { size: u8, imm5: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPLT_p_p_zi { size: u8, imm5: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPLE_p_p_zi { size: u8, imm5: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPEQ_p_p_zi { size: u8, imm5: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPNE_p_p_zi { size: u8, imm5: u8, Pg: u8, Zn: u8, Pd: u8, },
    FCADD_asimdsame2_C { Q: u8, size: u8, Rm: u8, rot: u8, Rn: u8, Rd: u8, },
    FMULX_asimdelem_R_SD { Q: u8, sz: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    STURB_32_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    STRB_32_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    STTRB_32_ldst_unpriv { imm9: u16, Rn: u8, Rt: u8, },
    STRB_32_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    STRB_32B_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    LDURB_32_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDRB_32_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    LDTRB_32_ldst_unpriv { imm9: u16, Rn: u8, Rt: u8, },
    LDRB_32_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    LDRB_32B_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    LDURSB_64_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDRSB_64_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    LDTRSB_64_ldst_unpriv { imm9: u16, Rn: u8, Rt: u8, },
    LDRSB_64_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    LDRSB_64B_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    LDURSB_32_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDRSB_32_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    LDTRSB_32_ldst_unpriv { imm9: u16, Rn: u8, Rt: u8, },
    LDRSB_32_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    LDRSB_32B_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    STUR_B_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    STR_B_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    STR_B_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    STR_B_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    LDUR_B_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDR_B_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    LDR_B_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    LDR_B_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    STUR_Q_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    STR_Q_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    STR_Q_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    STR_Q_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    LDUR_Q_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDR_Q_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    LDR_Q_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    LDR_Q_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    STLURH_32_ldapstl_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDAPURH_32_ldapstl_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDAPURSH_64_ldapstl_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDAPURSH_32_ldapstl_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    CSINV_32_condsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    CSNEG_32_condsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    SQDMLAL_asisdelem_L { size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    SQDMLSL_asisdelem_L { size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    SQDMULL_asisdelem_L { size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    SQDMULH_asisdelem_R { size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    SQRDMULH_asisdelem_R { size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    FCMGE_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    FCMLE_fcmge_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    FCMGT_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    FCMLT_fcmgt_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    FCMEQ_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    FCMNE_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    FCMUO_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    FACGE_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    FACLE_facge_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    FACGT_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    FACLT_facgt_p_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Pd: u8, },
    INS_asimdins_IV_v { imm5: u8, imm4: u8, Rn: u8, Rd: u8, },
    MOV_INS_asimdins_IV_v { imm5: u8, imm4: u8, Rn: u8, Rd: u8, },
    STURH_32_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    STRH_32_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    STTRH_32_ldst_unpriv { imm9: u16, Rn: u8, Rt: u8, },
    STRH_32_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    STRH_32_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    LDURH_32_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDRH_32_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    LDTRH_32_ldst_unpriv { imm9: u16, Rn: u8, Rt: u8, },
    LDRH_32_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    LDRH_32_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    LDURSH_64_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDRSH_64_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    LDTRSH_64_ldst_unpriv { imm9: u16, Rn: u8, Rt: u8, },
    LDRSH_64_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    LDRSH_64_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    LDURSH_32_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDRSH_32_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    LDTRSH_32_ldst_unpriv { imm9: u16, Rn: u8, Rt: u8, },
    LDRSH_32_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    LDRSH_32_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    STUR_H_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    STR_H_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    STR_H_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    STR_H_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    LDUR_H_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDR_H_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    LDR_H_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    LDR_H_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    SQRDMLAH_asisdelem_R { size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    SQRDMLSH_asisdelem_R { size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    LD1SB_z_p_bz_s_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SB_z_p_bz_s_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1B_z_p_bz_s_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1B_z_p_bz_s_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RB_z_p_bi_u8 { imm6: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RB_z_p_bi_u16 { imm6: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RB_z_p_bi_u32 { imm6: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RB_z_p_bi_u64 { imm6: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SH_z_p_bz_s_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SH_z_p_bz_s_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1H_z_p_bz_s_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1H_z_p_bz_s_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SH_z_p_bz_s_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SH_z_p_bz_s_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1H_z_p_bz_s_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1H_z_p_bz_s_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RSW_z_p_bi_s64 { imm6: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RH_z_p_bi_u16 { imm6: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RH_z_p_bi_u32 { imm6: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RH_z_p_bi_u64 { imm6: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1W_z_p_bz_s_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1W_z_p_bz_s_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1W_z_p_bz_s_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1W_z_p_bz_s_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RSH_z_p_bi_s64 { imm6: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RSH_z_p_bi_s32 { imm6: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RW_z_p_bi_u32 { imm6: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RW_z_p_bi_u64 { imm6: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDR_z_bi { imm9h: u8, imm9l: u8, Rn: u8, Zt: u8, },
    LD1RSB_z_p_bi_s64 { imm6: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RSB_z_p_bi_s32 { imm6: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RSB_z_p_bi_s16 { imm6: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1RD_z_p_bi_u64 { imm6: u8, Pg: u8, Rn: u8, Zt: u8, },
    STLUR_32_ldapstl_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDAPUR_32_ldapstl_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDAPURSW_64_ldapstl_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    CSEL_64_condsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    CSINC_64_condsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    STUR_32_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    STR_32_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    STTR_32_ldst_unpriv { imm9: u16, Rn: u8, Rt: u8, },
    STR_32_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    STR_32_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    LDUR_32_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDR_32_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    LDTR_32_ldst_unpriv { imm9: u16, Rn: u8, Rt: u8, },
    LDR_32_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    LDR_32_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    LDURSW_64_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDRSW_64_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    LDTRSW_64_ldst_unpriv { imm9: u16, Rn: u8, Rt: u8, },
    LDRSW_64_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    LDRSW_64_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    STUR_S_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    STR_S_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    STR_S_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    STR_S_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    LDUR_S_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDR_S_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    LDR_S_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    LDR_S_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    LD1SB_z_p_bz_d_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SB_z_p_bz_d_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1B_z_p_bz_d_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1B_z_p_bz_d_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SH_z_p_bz_d_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SH_z_p_bz_d_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1H_z_p_bz_d_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1H_z_p_bz_d_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SH_z_p_bz_d_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SH_z_p_bz_d_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1H_z_p_bz_d_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1H_z_p_bz_d_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SW_z_p_bz_d_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SW_z_p_bz_d_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1W_z_p_bz_d_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1W_z_p_bz_d_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1SW_z_p_bz_d_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1SW_z_p_bz_d_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1W_z_p_bz_d_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1W_z_p_bz_d_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1D_z_p_bz_d_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1D_z_p_bz_d_x32_unscaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LD1D_z_p_bz_d_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDFF1D_z_p_bz_d_x32_scaled { xs: u8, Zm: u8, Pg: u8, Rn: u8, Zt: u8, },
    SYS_CR_systeminstrs { op1: u8, CRn: u8, CRm: u8, op2: u8, Rt: u8, },
    SYSL_RC_systeminstrs { op1: u8, CRn: u8, CRm: u8, op2: u8, Rt: u8, },
    STLUR_64_ldapstl_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    STG_64Spost_ldsttags { imm9: u16, Xn: u8, Xt: u8, },
    STG_64Soffset_ldsttags { imm9: u16, Xn: u8, Xt: u8, },
    STG_64Spre_ldsttags { imm9: u16, Xn: u8, Xt: u8, },
    LDAPUR_64_ldapstl_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDG_64Loffset_ldsttags { imm9: u16, Xn: u8, Xt: u8, },
    STZG_64Spost_ldsttags { imm9: u16, Xn: u8, Xt: u8, },
    STZG_64Soffset_ldsttags { imm9: u16, Xn: u8, Xt: u8, },
    STZG_64Spre_ldsttags { imm9: u16, Xn: u8, Xt: u8, },
    ST2G_64Spost_ldsttags { imm9: u16, Xn: u8, Xt: u8, },
    ST2G_64Soffset_ldsttags { imm9: u16, Xn: u8, Xt: u8, },
    ST2G_64Spre_ldsttags { imm9: u16, Xn: u8, Xt: u8, },
    STZ2G_64Spost_ldsttags { imm9: u16, Xn: u8, Xt: u8, },
    STZ2G_64Soffset_ldsttags { imm9: u16, Xn: u8, Xt: u8, },
    STZ2G_64Spre_ldsttags { imm9: u16, Xn: u8, Xt: u8, },
    CSINV_64_condsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    CSNEG_64_condsel { Rm: u8, cond: u8, Rn: u8, Rd: u8, },
    ST1B_z_p_bz_d_x32_unscaled { Zm: u8, xs: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1B_z_p_bi { size: u8, imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1B_z_p_bz_s_x32_unscaled { Zm: u8, xs: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1H_z_p_bz_d_x32_unscaled { Zm: u8, xs: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1H_z_p_bi { size: u8, imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1H_z_p_bz_d_x32_scaled { Zm: u8, xs: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1H_z_p_bz_s_x32_unscaled { Zm: u8, xs: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1H_z_p_bz_s_x32_scaled { Zm: u8, xs: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1W_z_p_bz_d_x32_unscaled { Zm: u8, xs: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1W_z_p_bi { size: u8, imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1W_z_p_bz_d_x32_scaled { Zm: u8, xs: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1W_z_p_bz_s_x32_unscaled { Zm: u8, xs: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1W_z_p_bz_s_x32_scaled { Zm: u8, xs: u8, Pg: u8, Rn: u8, Zt: u8, },
    STR_z_bi { imm9h: u8, imm9l: u8, Rn: u8, Zt: u8, },
    ST1D_z_p_bz_d_x32_unscaled { Zm: u8, xs: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1D_z_p_bi { size: u8, imm4: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1D_z_p_bz_d_x32_scaled { Zm: u8, xs: u8, Pg: u8, Rn: u8, Zt: u8, },
    STUR_64_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    STR_64_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    STTR_64_ldst_unpriv { imm9: u16, Rn: u8, Rt: u8, },
    STR_64_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    STR_64_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    LDUR_64_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDR_64_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    LDTR_64_ldst_unpriv { imm9: u16, Rn: u8, Rt: u8, },
    LDR_64_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    LDR_64_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    PRFUM_P_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    PRFM_P_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    STUR_D_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    STR_D_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    STR_D_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    STR_D_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    LDUR_D_ldst_unscaled { imm9: u16, Rn: u8, Rt: u8, },
    LDR_D_ldst_immpost { imm9: u16, Rn: u8, Rt: u8, },
    LDR_D_ldst_immpre { imm9: u16, Rn: u8, Rt: u8, },
    LDR_D_ldst_regoff { Rm: u8, option: u8, S: u8, Rn: u8, Rt: u8, },
    MLA_z_p_zzz { size: u8, Zm: u8, Pg: u8, Zn: u8, Zda: u8, },
    MLS_z_p_zzz { size: u8, Zm: u8, Pg: u8, Zn: u8, Zda: u8, },
    MAD_z_p_zzz { size: u8, Zm: u8, Pg: u8, Za: u8, Zdn: u8, },
    MSB_z_p_zzz { size: u8, Zm: u8, Pg: u8, Za: u8, Zdn: u8, },
    CPY_z_o_i { size: u8, Pg: u8, sh: u8, imm8: u8, Zd: u8, },
    MOV_cpy_z_o_i { size: u8, Pg: u8, sh: u8, imm8: u8, Zd: u8, },
    CPY_z_p_i { size: u8, Pg: u8, sh: u8, imm8: u8, Zd: u8, },
    MOV_cpy_z_p_i { size: u8, Pg: u8, sh: u8, imm8: u8, Zd: u8, },
    STXRB_SR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STLXRB_SR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDXRB_LR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDAXRB_LR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STLLRB_SL32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STLRB_SL32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDLARB_LR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDARB_LR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    SMLAL_asimdelem_L { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    SQDMLAL_asimdelem_L { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    SMLSL_asimdelem_L { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    SQDMLSL_asimdelem_L { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    MUL_asimdelem_R { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    SMULL_asimdelem_L { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    SQDMULL_asimdelem_L { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    SQDMULH_asimdelem_R { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    SQRDMULH_asimdelem_R { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    SDOT_asimdelem_D { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    EXTR_32_extract { Rm: u8, imms: u8, Rn: u8, Rd: u8, },
    ROR_EXTR_32_extract { Rm: u8, imms: u8, Rn: u8, Rd: u8, },
    MADD_32A_dp_3src { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    MSUB_32A_dp_3src { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    FMADD_S_floatdp3 { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    FMSUB_S_floatdp3 { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    FNMADD_S_floatdp3 { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    FNMSUB_S_floatdp3 { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    FMADD_D_floatdp3 { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    FMSUB_D_floatdp3 { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    FNMADD_D_floatdp3 { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    FNMSUB_D_floatdp3 { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    FMADD_H_floatdp3 { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    FMSUB_H_floatdp3 { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    FNMADD_H_floatdp3 { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    FNMSUB_H_floatdp3 { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    EXT_asimdext_only { Q: u8, Rm: u8, imm4: u8, Rn: u8, Rd: u8, },
    FCMLA_asimdsame2_C { Q: u8, size: u8, Rm: u8, rot: u8, Rn: u8, Rd: u8, },
    MLA_asimdelem_R { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    UMLAL_asimdelem_L { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    MLS_asimdelem_R { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    UMLSL_asimdelem_L { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    UMULL_asimdelem_L { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    SQRDMLAH_asimdelem_R { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    UDOT_asimdelem_D { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    SQRDMLSH_asimdelem_R { Q: u8, size: u8, L: u8, M: u8, Rm: u8, H: u8, Rn: u8, Rd: u8, },
    FCMLA_asimdelem_C_H { Q: u8, L: u8, M: u8, Rm: u8, rot: u8, H: u8, Rn: u8, Rd: u8, },
    FCMLA_asimdelem_C_S { Q: u8, L: u8, M: u8, Rm: u8, rot: u8, H: u8, Rn: u8, Rd: u8, },
    STXRH_SR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STLXRH_SR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDXRH_LR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDAXRH_LR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STLLRH_SL32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STLRH_SL32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDLARH_LR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDARH_LR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    FMLA_z_p_zzz { size: u8, Zm: u8, Pg: u8, Zn: u8, Zda: u8, },
    FMLS_z_p_zzz { size: u8, Zm: u8, Pg: u8, Zn: u8, Zda: u8, },
    FNMLA_z_p_zzz { size: u8, Zm: u8, Pg: u8, Zn: u8, Zda: u8, },
    FNMLS_z_p_zzz { size: u8, Zm: u8, Pg: u8, Zn: u8, Zda: u8, },
    FMAD_z_p_zzz { size: u8, Za: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FMSB_z_p_zzz { size: u8, Za: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FNMAD_z_p_zzz { size: u8, Za: u8, Pg: u8, Zm: u8, Zdn: u8, },
    FNMSB_z_p_zzz { size: u8, Za: u8, Pg: u8, Zm: u8, Zdn: u8, },
    STXR_SR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STLXR_SR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STXP_SP32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STLXP_SP32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDXR_LR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDAXR_LR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDXP_LP32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDAXP_LP32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STLLR_SL32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STLR_SL32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDLAR_LR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDAR_LR32_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    MADD_64A_dp_3src { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    MSUB_64A_dp_3src { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    SMADDL_64WA_dp_3src { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    SMSUBL_64WA_dp_3src { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    SMULH_64_dp_3src { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    UMADDL_64WA_dp_3src { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    UMSUBL_64WA_dp_3src { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    UMULH_64_dp_3src { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    STXR_SR64_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STLXR_SR64_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STXP_SP64_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STLXP_SP64_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDXR_LR64_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDAXR_LR64_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDXP_LP64_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDAXP_LP64_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STLLR_SL64_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STLR_SL64_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDLAR_LR64_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDAR_LR64_ldstexcl { Rs: u8, Rt2: u8, Rn: u8, Rt: u8, },
    EOR3_VVV16_crypto4 { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    BCAX_VVV16_crypto4 { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    SM3SS1_VVV4_crypto4 { Rm: u8, Ra: u8, Rn: u8, Rd: u8, },
    MSR_SR_systemmove { o0: u8, op1: u8, CRn: u8, CRm: u8, op2: u8, Rt: u8, },
    MRS_RS_systemmove { o0: u8, op1: u8, CRn: u8, CRm: u8, op2: u8, Rt: u8, },
    ST1B_z_p_br { size: u8, Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1H_z_p_br { size: u8, Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    ST1W_z_p_br { size: u8, Rm: u8, Pg: u8, Rn: u8, Zt: u8, },
    LDRAA_64_ldst_pac { S: u8, imm9: u16, Rn: u8, Rt: u8, },
    LDRAA_64W_ldst_pac { S: u8, imm9: u16, Rn: u8, Rt: u8, },
    LDRAB_64_ldst_pac { S: u8, imm9: u16, Rn: u8, Rt: u8, },
    LDRAB_64W_ldst_pac { S: u8, imm9: u16, Rn: u8, Rt: u8, },
    MOV_sel_z_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Zd: u8, },
    SEL_z_p_zz { size: u8, Zm: u8, Pg: u8, Zn: u8, Zd: u8, },
    ADD_32_addsub_ext { Rm: u8, option: u8, imm3: u8, Rn: u8, Rd: u8, },
    CMPHS_p_p_zi { size: u8, imm7: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPHI_p_p_zi { size: u8, imm7: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPLO_p_p_zi { size: u8, imm7: u8, Pg: u8, Zn: u8, Pd: u8, },
    CMPLS_p_p_zi { size: u8, imm7: u8, Pg: u8, Zn: u8, Pd: u8, },
    ADDS_32S_addsub_ext { Rm: u8, option: u8, imm3: u8, Rn: u8, Rd: u8, },
    SUB_32_addsub_ext { Rm: u8, option: u8, imm3: u8, Rn: u8, Rd: u8, },
    SUBS_32S_addsub_ext { Rm: u8, option: u8, imm3: u8, Rn: u8, Rd: u8, },
    ADD_64_addsub_ext { Rm: u8, option: u8, imm3: u8, Rn: u8, Rd: u8, },
    EXTR_64_extract { Rm: u8, imms: u8, Rn: u8, Rd: u8, },
    ROR_EXTR_64_extract { Rm: u8, imms: u8, Rn: u8, Rd: u8, },
    ADDS_64S_addsub_ext { Rm: u8, option: u8, imm3: u8, Rn: u8, Rd: u8, },
    SUB_64_addsub_ext { Rm: u8, option: u8, imm3: u8, Rn: u8, Rd: u8, },
    XAR_VVV2_crypto3_imm6 { Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    SUBS_64S_addsub_ext { Rm: u8, option: u8, imm3: u8, Rn: u8, Rd: u8, },
    BFI_BFM_32M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    LSL_UBFM_32M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    BFI_BFM_64M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    LSL_UBFM_64M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    AND_32_log_imm { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    MOV_MOVN_32_movewide { hw: u8, imm16: u16, Rd: u8, },
    MOVN_32_movewide { hw: u8, imm16: u16, Rd: u8, },
    SBFIZ_SBFM_32M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    SBFM_32M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    SBFX_SBFM_32M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    STNP_32_ldstnapair_offs { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDNP_32_ldstnapair_offs { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STP_32_ldstpair_post { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDP_32_ldstpair_post { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STP_32_ldstpair_off { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDP_32_ldstpair_off { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STP_32_ldstpair_pre { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDP_32_ldstpair_pre { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STNP_S_ldstnapair_offs { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDNP_S_ldstnapair_offs { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STP_S_ldstpair_post { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDP_S_ldstpair_post { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STP_S_ldstpair_off { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDP_S_ldstpair_off { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STP_S_ldstpair_pre { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDP_S_ldstpair_pre { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    ORR_32_log_imm { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    BFM_32M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    BFXIL_BFM_32M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    STRB_32_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    LDRB_32_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    LDRSB_64_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    LDRSB_32_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    STR_B_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    LDR_B_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    STR_Q_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    LDR_Q_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    EOR_32_log_imm { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    MOV_MOVZ_32_movewide { hw: u8, imm16: u16, Rd: u8, },
    MOVZ_32_movewide { hw: u8, imm16: u16, Rd: u8, },
    UBFIZ_UBFM_32M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    UBFM_32M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    UBFX_UBFM_32M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    FCMLA_z_p_zzz { size: u8, Zm: u8, rot: u8, Pg: u8, Zn: u8, Zda: u8, },
    STGP_64_ldstpair_post { simm7: u8, Xt2: u8, Xn: u8, Xt: u8, },
    LDPSW_64_ldstpair_post { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STGP_64_ldstpair_off { simm7: u8, Xt2: u8, Xn: u8, Xt: u8, },
    LDPSW_64_ldstpair_off { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STGP_64_ldstpair_pre { simm7: u8, Xt2: u8, Xn: u8, Xt: u8, },
    LDPSW_64_ldstpair_pre { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STNP_D_ldstnapair_offs { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDNP_D_ldstnapair_offs { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STP_D_ldstpair_post { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDP_D_ldstpair_post { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STP_D_ldstpair_off { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDP_D_ldstpair_off { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STP_D_ldstpair_pre { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDP_D_ldstpair_pre { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    ANDS_32S_log_imm { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    MOVK_32_movewide { hw: u8, imm16: u16, Rd: u8, },
    STRH_32_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    LDRH_32_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    LDRSH_64_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    LDRSH_32_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    STR_H_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    LDR_H_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    ADDG_64_addsub_immtags { uimm6: u8, op3: u8, uimm4: u8, Xn: u8, Xd: u8, },
    SBFIZ_SBFM_64M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    SBFM_64M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    SBFX_SBFM_64M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    STNP_64_ldstnapair_offs { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDNP_64_ldstnapair_offs { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STP_64_ldstpair_post { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDP_64_ldstpair_post { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STP_64_ldstpair_off { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDP_64_ldstpair_off { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STP_64_ldstpair_pre { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDP_64_ldstpair_pre { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STNP_Q_ldstnapair_offs { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDNP_Q_ldstnapair_offs { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STP_Q_ldstpair_post { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDP_Q_ldstpair_post { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STP_Q_ldstpair_off { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDP_Q_ldstpair_off { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    STP_Q_ldstpair_pre { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    LDP_Q_ldstpair_pre { imm7: u8, Rt2: u8, Rn: u8, Rt: u8, },
    BFM_64M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    BFXIL_BFM_64M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    STR_32_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    LDR_32_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    LDRSW_64_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    STR_S_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    LDR_S_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    SUBG_64_addsub_immtags { uimm6: u8, op3: u8, uimm4: u8, Xn: u8, Xd: u8, },
    UBFIZ_UBFM_64M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    UBFM_64M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    UBFX_UBFM_64M_bitfield { immr: u8, imms: u8, Rn: u8, Rd: u8, },
    STR_64_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    LDR_64_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    PRFM_P_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    STR_D_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    LDR_D_ldst_pos { imm12: u16, Rn: u8, Rt: u8, },
    AND_32_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    BIC_32_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    ADD_32_addsub_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    ADD_32_addsub_imm { sh: u8, imm12: u16, Rn: u8, Rd: u8, },
    ORR_32_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    ORN_32_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    ADDS_32_addsub_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    ADDS_32S_addsub_imm { sh: u8, imm12: u16, Rn: u8, Rd: u8, },
    EOR_32_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    EON_32_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    SUB_32_addsub_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    SUB_32_addsub_imm { sh: u8, imm12: u16, Rn: u8, Rd: u8, },
    B_only_condbranch { imm19: u32, cond: u8, },
    ANDS_32_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    BICS_32_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    SUBS_32_addsub_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    SUBS_32S_addsub_imm { sh: u8, imm12: u16, Rn: u8, Rd: u8, },
    AND_64_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    BIC_64_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    ADD_64_addsub_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    ADD_64_addsub_imm { sh: u8, imm12: u16, Rn: u8, Rd: u8, },
    AND_64_log_imm { N: u8, immr: u8, imms: u8, Rn: u8, Rd: u8, },
    MOV_MOVN_64_movewide { hw: u8, imm16: u16, Rd: u8, },
    MOVN_64_movewide { hw: u8, imm16: u16, Rd: u8, },
    ORR_64_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    ORN_64_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    ADDS_64_addsub_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    ADDS_64S_addsub_imm { sh: u8, imm12: u16, Rn: u8, Rd: u8, },
    ORR_64_log_imm { N: u8, immr: u8, imms: u8, Rn: u8, Rd: u8, },
    EOR_64_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    EON_64_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    SUB_64_addsub_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    SUB_64_addsub_imm { sh: u8, imm12: u16, Rn: u8, Rd: u8, },
    EOR_64_log_imm { N: u8, immr: u8, imms: u8, Rn: u8, Rd: u8, },
    MOV_MOVZ_64_movewide { hw: u8, imm16: u16, Rd: u8, },
    MOVZ_64_movewide { hw: u8, imm16: u16, Rd: u8, },
    ANDS_64_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    BICS_64_log_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    SUBS_64_addsub_shift { shift: u8, Rm: u8, imm6: u8, Rn: u8, Rd: u8, },
    SUBS_64S_addsub_imm { sh: u8, imm12: u16, Rn: u8, Rd: u8, },
    ANDS_64S_log_imm { N: u8, immr: u8, imms: u8, Rn: u8, Rd: u8, },
    MOVK_64_movewide { hw: u8, imm16: u16, Rd: u8, },
    LDR_32_loadlit { imm19: u32, Rt: u8, },
    LDR_S_loadlit { imm19: u32, Rt: u8, },
    CBZ_32_compbranch { imm19: u32, Rt: u8, },
    CBNZ_32_compbranch { imm19: u32, Rt: u8, },
    LDR_64_loadlit { imm19: u32, Rt: u8, },
    LDR_D_loadlit { imm19: u32, Rt: u8, },
    LDRSW_64_loadlit { imm19: u32, Rt: u8, },
    LDR_Q_loadlit { imm19: u32, Rt: u8, },
    CBZ_64_compbranch { imm19: u32, Rt: u8, },
    CBNZ_64_compbranch { imm19: u32, Rt: u8, },
    PRFM_P_loadlit { imm19: u32, Rt: u8, },
    TBZ_only_testbranch { b5: u8, b40: u8, imm14: u16, Rt: u8, },
    TBNZ_only_testbranch { b5: u8, b40: u8, imm14: u16, Rt: u8, },
    ADR_only_pcreladdr { immlo: u8, immhi: u32, Rd: u8, },
    B_only_branch_imm { imm26: u32, },
    ADRP_only_pcreladdr { immlo: u8, immhi: u32, Rd: u8, },
    BL_only_branch_imm { imm26: u32, },

    UNKNOWN(u32),
}

impl Instruction {
    // Primitive decoding mechanism through repetetive if checking. To be improved later
    pub fn decode(opcode: u32) -> Self {
        if opcode & 0xffffffff == 0x252c9000 {
            return Self::SETFFR_f;
        }
        if opcode & 0xffffffff == 0xd503201f {
            return Self::NOP_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503203f {
            return Self::YIELD_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503205f {
            return Self::WFE_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503207f {
            return Self::WFI_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503209f {
            return Self::SEV_HI_hints;
        }
        if opcode & 0xffffffff == 0xd50320bf {
            return Self::SEVL_HI_hints;
        }
        if opcode & 0xffffffff == 0xd50320df {
            return Self::DGH_HI_hints;
        }
        if opcode & 0xffffffff == 0xd50320ff {
            return Self::XPACLRI_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503211f {
            return Self::PACIA1716_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503215f {
            return Self::PACIB1716_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503219f {
            return Self::AUTIA1716_HI_hints;
        }
        if opcode & 0xffffffff == 0xd50321df {
            return Self::AUTIB1716_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503221f {
            return Self::ESB_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503223f {
            return Self::PSB_HC_hints;
        }
        if opcode & 0xffffffff == 0xd503225f {
            return Self::TSB_HC_hints;
        }
        if opcode & 0xffffffff == 0xd503229f {
            return Self::CSDB_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503231f {
            return Self::PACIAZ_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503233f {
            return Self::PACIASP_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503235f {
            return Self::PACIBZ_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503237f {
            return Self::PACIBSP_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503239f {
            return Self::AUTIAZ_HI_hints;
        }
        if opcode & 0xffffffff == 0xd50323bf {
            return Self::AUTIASP_HI_hints;
        }
        if opcode & 0xffffffff == 0xd50323df {
            return Self::AUTIBZ_HI_hints;
        }
        if opcode & 0xffffffff == 0xd50323ff {
            return Self::AUTIBSP_HI_hints;
        }
        if opcode & 0xffffffff == 0xd503309f {
            return Self::SSBB_only_barriers;
        }
        if opcode & 0xffffffff == 0xd503349f {
            return Self::PSSBB_only_barriers;
        }
        if opcode & 0xffffffff == 0xd65f0bff {
            return Self::RETAA_64E_branch_reg;
        }
        if opcode & 0xffffffff == 0xd65f0fff {
            return Self::RETAB_64E_branch_reg;
        }
        if opcode & 0xffffffff == 0xd69f03e0 {
            return Self::ERET_64E_branch_reg;
        }
        if opcode & 0xffffffff == 0xd69f0bff {
            return Self::ERETAA_64E_branch_reg;
        }
        if opcode & 0xffffffff == 0xd69f0fff {
            return Self::ERETAB_64E_branch_reg;
        }
        if opcode & 0xffffffff == 0xd6bf03e0 {
            return Self::DRPS_64E_branch_reg;
        }
        if opcode & 0xffffff3f == 0xd503241f {
            return Self::BTI_HB_hints {
                op2: ((opcode & 0x000000c0) >> 6) as u8,
            };
        }
        if opcode & 0xfffff3ff == 0xd503323f {
            return Self::DSB_BOn_barriers {
                imm2: ((opcode & 0x00000c00) >> 10) as u8,
            };
        }
        if opcode & 0xfffff0ff == 0xd503309f && (opcode & 0x00000b00 != 0x00000000) {
            return Self::DSB_BO_barriers {
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
            };
        }
        if opcode & 0xfffffff0 == 0x2518e400 {
            return Self::PFALSE_p {
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffff0 == 0x2519f000 {
            return Self::RDFFR_p_f {
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffe1f == 0x25289000 {
            return Self::WRFFR_f_p {
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffff0ff == 0xd500401f {
            return Self::CFINV_M_pstate {
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
            };
        }
        if opcode & 0xfffff0ff == 0xd500403f {
            return Self::XAFLAG_M_pstate {
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
            };
        }
        if opcode & 0xfffff0ff == 0xd500405f {
            return Self::AXFLAG_M_pstate {
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
            };
        }
        if opcode & 0xfffff0ff == 0xd503305f {
            return Self::CLREX_BN_barriers {
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
            };
        }
        if opcode & 0xfffff0ff == 0xd50330bf {
            return Self::DMB_BO_barriers {
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
            };
        }
        if opcode & 0xfffff0ff == 0xd50330df {
            return Self::ISB_BI_barriers {
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
            };
        }
        if opcode & 0xfffff0ff == 0xd50330ff {
            return Self::SB_only_barriers {
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
            };
        }
        if opcode & 0xfffffc1f == 0x3a00080d {
            return Self::SETF8_only_setf {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffffc1f == 0x3a00480d {
            return Self::SETF16_only_setf {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffffffe0 == 0xd5031000 {
            return Self::WFET_only_systeminstrswithreg {
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffffe0 == 0xd5031020 {
            return Self::WFIT_only_systeminstrswithreg {
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffffe0 == 0xd50b7380 {
            return Self::CFP_SYS_CR_systeminstrs {
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffffe0 == 0xd50b73a0 {
            return Self::DVP_SYS_CR_systeminstrs {
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffffe0 == 0xd50b73e0 {
            return Self::CPP_SYS_CR_systeminstrs {
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc1f == 0xd61f0000 {
            return Self::BR_64_branch_reg {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffffc1f == 0xd61f081f {
            return Self::BRAAZ_64_branch_reg {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffffc1f == 0xd61f0c1f {
            return Self::BRABZ_64_branch_reg {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffffc1f == 0xd63f0000 {
            return Self::BLR_64_branch_reg {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffffc1f == 0xd63f081f {
            return Self::BLRAAZ_64_branch_reg {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffffc1f == 0xd63f0c1f {
            return Self::BLRABZ_64_branch_reg {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffffc1f == 0xd65f0000 {
            return Self::RET_64R_branch_reg {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffffffe0 == 0xdac123e0 {
            return Self::PACIZA_64Z_dp_1src {
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffffe0 == 0xdac127e0 {
            return Self::PACIZB_64Z_dp_1src {
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffffe0 == 0xdac12be0 {
            return Self::PACDZA_64Z_dp_1src {
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffffe0 == 0xdac12fe0 {
            return Self::PACDZB_64Z_dp_1src {
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffffe0 == 0xdac133e0 {
            return Self::AUTIZA_64Z_dp_1src {
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffffe0 == 0xdac137e0 {
            return Self::AUTIZB_64Z_dp_1src {
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffffe0 == 0xdac13be0 {
            return Self::AUTDZA_64Z_dp_1src {
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffffe0 == 0xdac13fe0 {
            return Self::AUTDZB_64Z_dp_1src {
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffffe0 == 0xdac143e0 {
            return Self::XPACI_64Z_dp_1src {
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffffe0 == 0xdac147e0 {
            return Self::XPACD_64Z_dp_1src {
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fffe0 == 0x2538c000 {
            return Self::FMOV_dup_z_i {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffff01f == 0xd503201f {
            return Self::HINT_HM_hints {
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
                op2: ((opcode & 0x000000e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffffe10 == 0x05304000 {
            return Self::PUNPKLO_p_p {
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffe10 == 0x05314000 {
            return Self::PUNPKHI_p_p {
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffe10 == 0x2518f000 {
            return Self::RDFFR_p_p_f {
                Pg: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffffc21f == 0x2550c000 {
            return Self::PTEST_p_p {
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffffe10 == 0x2558c000 {
            return Self::PFIRST_p_p_p {
                Pg: ((opcode & 0x000001e0) >> 5) as u8,
                Pdn: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffe10 == 0x2558f000 {
            return Self::RDFFRS_p_p_f {
                Pg: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0fe0 == 0x1a9f07e0 && (opcode & 0x0000e000 != 0x0000e000) {
            return Self::CSET_CSINC_32_condsel {
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0fe0 == 0x5a9f03e0 && (opcode & 0x0000e000 != 0x0000e000) {
            return Self::CSETM_CSINV_32_condsel {
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0fe0 == 0x9a9f07e0 && (opcode & 0x0000e000 != 0x0000e000) {
            return Self::CSET_CSINC_64_condsel {
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0fe0 == 0xda9f03e0 && (opcode & 0x0000e000 != 0x0000e000) {
            return Self::CSETM_CSINV_64_condsel {
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x0420bc00 {
            return Self::MOVPRFX_z_z {
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe10 == 0x05344000 {
            return Self::REV_p_p {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x11000000 {
            return Self::MOV_ADD_32_addsub_imm {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x13001c00 {
            return Self::SXTB_SBFM_32M_bitfield {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x13003c00 {
            return Self::SXTH_SBFM_32M_bitfield {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e200000 {
            return Self::FCVTNS_32S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x1e202000 {
            return Self::FCMP_S_floatcmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x1e202008 {
            return Self::FCMP_SZ_floatcmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x1e202010 {
            return Self::FCMPE_S_floatcmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x1e202018 {
            return Self::FCMPE_SZ_floatcmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e204000 {
            return Self::FMOV_S_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e20c000 {
            return Self::FABS_S_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e210000 {
            return Self::FCVTNU_32S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e214000 {
            return Self::FNEG_S_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e21c000 {
            return Self::FSQRT_S_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e220000 {
            return Self::SCVTF_S32_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e22c000 {
            return Self::FCVT_DS_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e230000 {
            return Self::UCVTF_S32_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e23c000 {
            return Self::FCVT_HS_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e240000 {
            return Self::FCVTAS_32S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e244000 {
            return Self::FRINTN_S_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e24c000 {
            return Self::FRINTP_S_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e250000 {
            return Self::FCVTAU_32S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e254000 {
            return Self::FRINTM_S_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e25c000 {
            return Self::FRINTZ_S_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e260000 {
            return Self::FMOV_32S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e264000 {
            return Self::FRINTA_S_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e270000 {
            return Self::FMOV_S32_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e274000 {
            return Self::FRINTX_S_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e27c000 {
            return Self::FRINTI_S_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e280000 {
            return Self::FCVTPS_32S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e284000 {
            return Self::FRINT32Z_S_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e28c000 {
            return Self::FRINT32X_S_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e290000 {
            return Self::FCVTPU_32S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e294000 {
            return Self::FRINT64Z_S_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e29c000 {
            return Self::FRINT64X_S_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e300000 {
            return Self::FCVTMS_32S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e310000 {
            return Self::FCVTMU_32S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e380000 {
            return Self::FCVTZS_32S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e390000 {
            return Self::FCVTZU_32S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e600000 {
            return Self::FCVTNS_32D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x1e602000 {
            return Self::FCMP_D_floatcmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x1e602008 {
            return Self::FCMP_DZ_floatcmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x1e602010 {
            return Self::FCMPE_D_floatcmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x1e602018 {
            return Self::FCMPE_DZ_floatcmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e604000 {
            return Self::FMOV_D_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e60c000 {
            return Self::FABS_D_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e610000 {
            return Self::FCVTNU_32D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e614000 {
            return Self::FNEG_D_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e61c000 {
            return Self::FSQRT_D_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e620000 {
            return Self::SCVTF_D32_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e624000 {
            return Self::FCVT_SD_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e630000 {
            return Self::UCVTF_D32_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e634000 {
            return Self::BFCVT_BS_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e63c000 {
            return Self::FCVT_HD_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e640000 {
            return Self::FCVTAS_32D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e644000 {
            return Self::FRINTN_D_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e64c000 {
            return Self::FRINTP_D_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e650000 {
            return Self::FCVTAU_32D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e654000 {
            return Self::FRINTM_D_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e65c000 {
            return Self::FRINTZ_D_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e664000 {
            return Self::FRINTA_D_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e674000 {
            return Self::FRINTX_D_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e67c000 {
            return Self::FRINTI_D_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e680000 {
            return Self::FCVTPS_32D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e684000 {
            return Self::FRINT32Z_D_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e68c000 {
            return Self::FRINT32X_D_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e690000 {
            return Self::FCVTPU_32D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e694000 {
            return Self::FRINT64Z_D_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e69c000 {
            return Self::FRINT64X_D_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e700000 {
            return Self::FCVTMS_32D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e710000 {
            return Self::FCVTMU_32D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e780000 {
            return Self::FCVTZS_32D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e790000 {
            return Self::FCVTZU_32D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1e7e0000 {
            return Self::FJCVTZS_32D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee00000 {
            return Self::FCVTNS_32H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x1ee02000 {
            return Self::FCMP_H_floatcmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x1ee02008 {
            return Self::FCMP_HZ_floatcmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x1ee02010 {
            return Self::FCMPE_H_floatcmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x1ee02018 {
            return Self::FCMPE_HZ_floatcmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee04000 {
            return Self::FMOV_H_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee0c000 {
            return Self::FABS_H_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee10000 {
            return Self::FCVTNU_32H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee14000 {
            return Self::FNEG_H_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee1c000 {
            return Self::FSQRT_H_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee20000 {
            return Self::SCVTF_H32_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee24000 {
            return Self::FCVT_SH_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee2c000 {
            return Self::FCVT_DH_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee30000 {
            return Self::UCVTF_H32_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee40000 {
            return Self::FCVTAS_32H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee44000 {
            return Self::FRINTN_H_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee4c000 {
            return Self::FRINTP_H_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee50000 {
            return Self::FCVTAU_32H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee54000 {
            return Self::FRINTM_H_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee5c000 {
            return Self::FRINTZ_H_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee60000 {
            return Self::FMOV_32H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee64000 {
            return Self::FRINTA_H_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee70000 {
            return Self::FMOV_H32_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee74000 {
            return Self::FRINTX_H_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee7c000 {
            return Self::FRINTI_H_floatdp1 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee80000 {
            return Self::FCVTPS_32H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ee90000 {
            return Self::FCVTPU_32H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ef00000 {
            return Self::FCVTMS_32H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ef10000 {
            return Self::FCVTMU_32H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ef80000 {
            return Self::FCVTZS_32H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x1ef90000 {
            return Self::FCVTZU_32H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe10 == 0x2519c400 {
            return Self::PNEXT_p_p_p {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x000001e0) >> 5) as u8,
                Pdn: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0ffe0 == 0x2a0003e0 {
            return Self::MOV_ORR_32_log_shift {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x3820001f {
            return Self::STADDB_LDADDB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x3820101f {
            return Self::STCLRB_LDCLRB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x3820201f {
            return Self::STEORB_LDEORB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x3820301f {
            return Self::STSETB_LDSETB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x3820401f {
            return Self::STSMAXB_LDSMAXB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x3820501f {
            return Self::STSMINB_LDSMINB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x3820601f {
            return Self::STUMAXB_LDUMAXB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x3820701f {
            return Self::STUMINB_LDUMINB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x3860001f {
            return Self::STADDLB_LDADDLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x3860101f {
            return Self::STCLRLB_LDCLRLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x3860201f {
            return Self::STEORLB_LDEORLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x3860301f {
            return Self::STSETLB_LDSETLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x3860401f {
            return Self::STSMAXLB_LDSMAXLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x3860501f {
            return Self::STSMINLB_LDSMINLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x3860601f {
            return Self::STUMAXLB_LDUMAXLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x3860701f {
            return Self::STUMINLB_LDUMINLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x4e284800 {
            return Self::AESE_B_cryptoaes {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x4e285800 {
            return Self::AESD_B_cryptoaes {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x4e286800 {
            return Self::AESMC_B_cryptoaes {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x4e287800 {
            return Self::AESIMC_B_cryptoaes {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x53001c00 {
            return Self::UXTB_UBFM_32M_bitfield {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x53003c00 {
            return Self::UXTH_UBFM_32M_bitfield {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0ffe0 == 0x5a0003e0 {
            return Self::NGC_SBC_32_addsub_carry {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5ac00000 {
            return Self::RBIT_32_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5ac00400 {
            return Self::REV16_32_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5ac00800 {
            return Self::REV_32_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5ac01000 {
            return Self::CLZ_32_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5ac01400 {
            return Self::CLS_32_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5e280800 {
            return Self::SHA1H_SS_cryptosha2 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5e281800 {
            return Self::SHA1SU1_VV_cryptosha2 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5e282800 {
            return Self::SHA256SU0_VV_cryptosha2 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5e79a800 {
            return Self::FCVTNS_asisdmiscfp16_R {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5e79b800 {
            return Self::FCVTMS_asisdmiscfp16_R {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5e79c800 {
            return Self::FCVTAS_asisdmiscfp16_R {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5e79d800 {
            return Self::SCVTF_asisdmiscfp16_R {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5ef8c800 {
            return Self::FCMGT_asisdmiscfp16_FZ {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5ef8d800 {
            return Self::FCMEQ_asisdmiscfp16_FZ {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5ef8e800 {
            return Self::FCMLT_asisdmiscfp16_FZ {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5ef9a800 {
            return Self::FCVTPS_asisdmiscfp16_R {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5ef9b800 {
            return Self::FCVTZS_asisdmiscfp16_R {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5ef9d800 {
            return Self::FRECPE_asisdmiscfp16_R {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x5ef9f800 {
            return Self::FRECPX_asisdmiscfp16_R {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x7820001f {
            return Self::STADDH_LDADDH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x7820101f {
            return Self::STCLRH_LDCLRH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x7820201f {
            return Self::STEORH_LDEORH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x7820301f {
            return Self::STSETH_LDSETH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x7820401f {
            return Self::STSMAXH_LDSMAXH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x7820501f {
            return Self::STSMINH_LDSMINH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x7820601f {
            return Self::STUMAXH_LDUMAXH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x7820701f {
            return Self::STUMINH_LDUMINH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x7860001f {
            return Self::STADDLH_LDADDLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x7860101f {
            return Self::STCLRLH_LDCLRLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x7860201f {
            return Self::STEORLH_LDEORLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x7860301f {
            return Self::STSETLH_LDSETLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x7860401f {
            return Self::STSMAXLH_LDSMAXLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x7860501f {
            return Self::STSMINLH_LDSMINLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x7860601f {
            return Self::STUMAXLH_LDUMAXLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0x7860701f {
            return Self::STUMINLH_LDUMINLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0ffe0 == 0x7a0003e0 {
            return Self::NGCS_SBCS_32_addsub_carry {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x7e79a800 {
            return Self::FCVTNU_asisdmiscfp16_R {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x7e79b800 {
            return Self::FCVTMU_asisdmiscfp16_R {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x7e79c800 {
            return Self::FCVTAU_asisdmiscfp16_R {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x7e79d800 {
            return Self::UCVTF_asisdmiscfp16_R {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x7ef8c800 {
            return Self::FCMGE_asisdmiscfp16_FZ {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x7ef8d800 {
            return Self::FCMLE_asisdmiscfp16_FZ {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x7ef9a800 {
            return Self::FCVTPU_asisdmiscfp16_R {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x7ef9b800 {
            return Self::FCVTZU_asisdmiscfp16_R {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x7ef9d800 {
            return Self::FRSQRTE_asisdmiscfp16_R {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x91000000 {
            return Self::MOV_ADD_64_addsub_imm {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x93401c00 {
            return Self::SXTB_SBFM_64M_bitfield {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x93403c00 {
            return Self::SXTH_SBFM_64M_bitfield {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x93407c00 {
            return Self::SXTW_SBFM_64M_bitfield {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e200000 {
            return Self::FCVTNS_64S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e210000 {
            return Self::FCVTNU_64S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e220000 {
            return Self::SCVTF_S64_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e230000 {
            return Self::UCVTF_S64_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e240000 {
            return Self::FCVTAS_64S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e250000 {
            return Self::FCVTAU_64S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e280000 {
            return Self::FCVTPS_64S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e290000 {
            return Self::FCVTPU_64S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e300000 {
            return Self::FCVTMS_64S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e310000 {
            return Self::FCVTMU_64S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e380000 {
            return Self::FCVTZS_64S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e390000 {
            return Self::FCVTZU_64S_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e600000 {
            return Self::FCVTNS_64D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e610000 {
            return Self::FCVTNU_64D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e620000 {
            return Self::SCVTF_D64_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e630000 {
            return Self::UCVTF_D64_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e640000 {
            return Self::FCVTAS_64D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e650000 {
            return Self::FCVTAU_64D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e660000 {
            return Self::FMOV_64D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e670000 {
            return Self::FMOV_D64_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e680000 {
            return Self::FCVTPS_64D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e690000 {
            return Self::FCVTPU_64D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e700000 {
            return Self::FCVTMS_64D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e710000 {
            return Self::FCVTMU_64D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e780000 {
            return Self::FCVTZS_64D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9e790000 {
            return Self::FCVTZU_64D_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9eae0000 {
            return Self::FMOV_64VX_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9eaf0000 {
            return Self::FMOV_V64I_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9ee00000 {
            return Self::FCVTNS_64H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9ee10000 {
            return Self::FCVTNU_64H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9ee20000 {
            return Self::SCVTF_H64_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9ee30000 {
            return Self::UCVTF_H64_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9ee40000 {
            return Self::FCVTAS_64H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9ee50000 {
            return Self::FCVTAU_64H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9ee60000 {
            return Self::FMOV_64H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9ee70000 {
            return Self::FMOV_H64_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9ee80000 {
            return Self::FCVTPS_64H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9ee90000 {
            return Self::FCVTPU_64H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9ef00000 {
            return Self::FCVTMS_64H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9ef10000 {
            return Self::FCVTMU_64H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9ef80000 {
            return Self::FCVTZS_64H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0x9ef90000 {
            return Self::FCVTZU_64H_float2int {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0ffe0 == 0xaa0003e0 {
            return Self::MOV_ORR_64_log_shift {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xb820001f {
            return Self::STADD_LDADD_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xb820101f {
            return Self::STCLR_LDCLR_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xb820201f {
            return Self::STEOR_LDEOR_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xb820301f {
            return Self::STSET_LDSET_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xb820401f {
            return Self::STSMAX_LDSMAX_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xb820501f {
            return Self::STSMIN_LDSMIN_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xb820601f {
            return Self::STUMAX_LDUMAX_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xb820701f {
            return Self::STUMIN_LDUMIN_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xb860001f {
            return Self::STADDL_LDADDL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xb860101f {
            return Self::STCLRL_LDCLRL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xb860201f {
            return Self::STEORL_LDEORL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xb860301f {
            return Self::STSETL_LDSETL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xb860401f {
            return Self::STSMAXL_LDSMAXL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xb860501f {
            return Self::STSMINL_LDSMINL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xb860601f {
            return Self::STUMAXL_LDUMAXL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xb860701f {
            return Self::STUMINL_LDUMINL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xbac0001f {
            return Self::CMPP_SUBPS_64S_dp_2src {
                Xm: ((opcode & 0x001f0000) >> 16) as u8,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xcec08000 {
            return Self::SHA512SU0_VV2_cryptosha512_2 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xcec08400 {
            return Self::SM4E_VV4_cryptosha512_2 {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff8f01f == 0xd500401f {
            return Self::MSR_SI_pstate {
                op1: ((opcode & 0x00070000) >> 16) as u8,
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
                op2: ((opcode & 0x000000e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xd71f0800 {
            return Self::BRAA_64P_branch_reg {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rm: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xd71f0c00 {
            return Self::BRAB_64P_branch_reg {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rm: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xd73f0800 {
            return Self::BLRAA_64P_branch_reg {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rm: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xd73f0c00 {
            return Self::BLRAB_64P_branch_reg {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rm: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xd9200000 {
            return Self::STZGM_64bulk_ldsttags {
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xd9a00000 {
            return Self::STGM_64bulk_ldsttags {
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xd9e00000 {
            return Self::LDGM_64bulk_ldsttags {
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0ffe0 == 0xda0003e0 {
            return Self::NGC_SBC_64_addsub_carry {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xdac00000 {
            return Self::RBIT_64_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xdac00400 {
            return Self::REV16_64_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xdac00800 {
            return Self::REV32_64_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xdac00c00 {
            return Self::REV_64_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xdac00c00 {
            return Self::REV64_REV_64_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xdac01000 {
            return Self::CLZ_64_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xdac01400 {
            return Self::CLS_64_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xdac10000 {
            return Self::PACIA_64P_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xdac10400 {
            return Self::PACIB_64P_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xdac10800 {
            return Self::PACDA_64P_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xdac10c00 {
            return Self::PACDB_64P_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xdac11000 {
            return Self::AUTIA_64P_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xdac11400 {
            return Self::AUTIB_64P_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xdac11800 {
            return Self::AUTDA_64P_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xdac11c00 {
            return Self::AUTDB_64P_dp_1src {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xf820001f {
            return Self::STADD_LDADD_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xf820101f {
            return Self::STCLR_LDCLR_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xf820201f {
            return Self::STEOR_LDEOR_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xf820301f {
            return Self::STSET_LDSET_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xf820401f {
            return Self::STSMAX_LDSMAX_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xf820501f {
            return Self::STSMIN_LDSMIN_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xf820601f {
            return Self::STUMAX_LDUMAX_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xf820701f {
            return Self::STUMIN_LDUMIN_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xf83f9000 {
            return Self::ST64B_64L_memop {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffffc00 == 0xf83fd000 {
            return Self::LD64B_64L_memop {
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xf860001f {
            return Self::STADDL_LDADDL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xf860101f {
            return Self::STCLRL_LDCLRL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xf860201f {
            return Self::STEORL_LDEORL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xf860301f {
            return Self::STSETL_LDSETL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xf860401f {
            return Self::STSMAXL_LDSMAXL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xf860501f {
            return Self::STSMINL_LDSMINL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xf860601f {
            return Self::STUMAXL_LDUMAXL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0fc1f == 0xf860701f {
            return Self::STUMINL_LDUMINL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe0ffe0 == 0xfa0003e0 {
            return Self::NGCS_SBCS_64_addsub_carry {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffff800 == 0x04bf5000 {
            return Self::RDVL_r_i {
                imm6: ((opcode & 0x000007e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff30ffe0 == 0x05104000 {
            return Self::FMOV_cpy_z_p_i {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x000f0000) >> 16) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0d008400 {
            return Self::ST1_asisdlso_D1_1d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0d00a400 {
            return Self::ST3_asisdlso_D3_3d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0d208400 {
            return Self::ST2_asisdlso_D2_2d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0d20a400 {
            return Self::ST4_asisdlso_D4_4d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0d408400 {
            return Self::LD1_asisdlso_D1_1d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0d40a400 {
            return Self::LD3_asisdlso_D3_3d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0d608400 {
            return Self::LD2_asisdlso_D2_2d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0d60a400 {
            return Self::LD4_asisdlso_D4_4d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0d9f8400 {
            return Self::ST1_asisdlsop_D1_i1d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0d9fa400 {
            return Self::ST3_asisdlsop_D3_i3d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0dbf8400 {
            return Self::ST2_asisdlsop_D2_i2d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0dbfa400 {
            return Self::ST4_asisdlsop_D4_i4d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0ddf8400 {
            return Self::LD1_asisdlsop_D1_i1d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0ddfa400 {
            return Self::LD3_asisdlsop_D3_i3d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0dff8400 {
            return Self::LD2_asisdlsop_D2_i2d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0dffa400 {
            return Self::LD4_asisdlsop_D4_i4d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0e30c800 {
            return Self::FMAXNMV_asimdall_only_H {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0e30f800 {
            return Self::FMAXV_asimdall_only_H {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0e798800 {
            return Self::FRINTN_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0e799800 {
            return Self::FRINTM_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0e79a800 {
            return Self::FCVTNS_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0e79b800 {
            return Self::FCVTMS_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0e79c800 {
            return Self::FCVTAS_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0e79d800 {
            return Self::SCVTF_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0ea16800 {
            return Self::BFCVTN_asimdmisc_4S {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0eb0c800 {
            return Self::FMINNMV_asimdall_only_H {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0eb0f800 {
            return Self::FMINV_asimdall_only_H {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0ef8c800 {
            return Self::FCMGT_asimdmiscfp16_FZ {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0ef8d800 {
            return Self::FCMEQ_asimdmiscfp16_FZ {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0ef8e800 {
            return Self::FCMLT_asimdmiscfp16_FZ {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0ef8f800 {
            return Self::FABS_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0ef98800 {
            return Self::FRINTP_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0ef99800 {
            return Self::FRINTZ_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0ef9a800 {
            return Self::FCVTPS_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0ef9b800 {
            return Self::FCVTZS_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x0ef9d800 {
            return Self::FRECPE_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc10 == 0x2518e000 {
            return Self::PTRUE_p_s {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc10 == 0x2519e000 {
            return Self::PTRUES_p_s {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe00 == 0x25288000 {
            return Self::SQINCP_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000001e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe00 == 0x25288800 {
            return Self::SQINCP_r_p_r_sx {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000001e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe00 == 0x25288c00 {
            return Self::SQINCP_r_p_r_x {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000001e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe00 == 0x25298000 {
            return Self::UQINCP_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000001e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe00 == 0x25298800 {
            return Self::UQINCP_r_p_r_uw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000001e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe00 == 0x25298c00 {
            return Self::UQINCP_r_p_r_x {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000001e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe00 == 0x252a8000 {
            return Self::SQDECP_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000001e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe00 == 0x252a8800 {
            return Self::SQDECP_r_p_r_sx {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000001e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe00 == 0x252a8c00 {
            return Self::SQDECP_r_p_r_x {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000001e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe00 == 0x252b8000 {
            return Self::UQDECP_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000001e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe00 == 0x252b8800 {
            return Self::UQDECP_r_p_r_uw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000001e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe00 == 0x252b8c00 {
            return Self::UQDECP_r_p_r_x {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000001e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe00 == 0x252c8000 {
            return Self::INCP_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000001e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe00 == 0x252c8800 {
            return Self::INCP_r_p_r {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000001e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe00 == 0x252d8000 {
            return Self::DECP_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000001e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffe00 == 0x252d8800 {
            return Self::DECP_r_p_r {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000001e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0fc1f == 0x25a02000 {
            return Self::CTERMEQ_rr {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffa0fc1f == 0x25a02010 {
            return Self::CTERMNE_rr {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2e205800 {
            return Self::MVN_NOT_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2e205800 {
            return Self::NOT_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2e605800 {
            return Self::RBIT_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2e798800 {
            return Self::FRINTA_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2e799800 {
            return Self::FRINTX_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2e79a800 {
            return Self::FCVTNU_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2e79b800 {
            return Self::FCVTMU_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2e79c800 {
            return Self::FCVTAU_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2e79d800 {
            return Self::UCVTF_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2ef8c800 {
            return Self::FCMGE_asimdmiscfp16_FZ {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2ef8d800 {
            return Self::FCMLE_asimdmiscfp16_FZ {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2ef8f800 {
            return Self::FNEG_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2ef99800 {
            return Self::FRINTI_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2ef9a800 {
            return Self::FCVTPU_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2ef9b800 {
            return Self::FCVTZU_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2ef9d800 {
            return Self::FRSQRTE_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffffc00 == 0x2ef9f800 {
            return Self::FSQRT_asimdmiscfp16_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffeffc00 == 0x4e083c00 {
            return Self::MOV_UMOV_asimdins_X_x {
                imm5: ((opcode & 0x00100000) >> 20) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffeffc00 == 0x4e083c00 {
            return Self::UMOV_asimdins_X_x {
                imm5: ((opcode & 0x00100000) >> 20) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x5e21a800 {
            return Self::FCVTNS_asisdmisc_R {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x5e21b800 {
            return Self::FCVTMS_asisdmisc_R {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x5e21c800 {
            return Self::FCVTAS_asisdmisc_R {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x5e21d800 {
            return Self::SCVTF_asisdmisc_R {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x5e30c800 {
            return Self::FMAXNMP_asisdpair_only_H {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x5e30d800 {
            return Self::FADDP_asisdpair_only_H {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x5e30f800 {
            return Self::FMAXP_asisdpair_only_H {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x5ea0c800 {
            return Self::FCMGT_asisdmisc_FZ {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x5ea0d800 {
            return Self::FCMEQ_asisdmisc_FZ {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x5ea0e800 {
            return Self::FCMLT_asisdmisc_FZ {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x5ea1a800 {
            return Self::FCVTPS_asisdmisc_R {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x5ea1b800 {
            return Self::FCVTZS_asisdmisc_R {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x5ea1d800 {
            return Self::FRECPE_asisdmisc_R {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x5ea1f800 {
            return Self::FRECPX_asisdmisc_R {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x5eb0c800 {
            return Self::FMINNMP_asisdpair_only_H {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x5eb0f800 {
            return Self::FMINP_asisdpair_only_H {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe3c0 == 0x65188000 {
            return Self::FADD_z_p_zs {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                i1: ((opcode & 0x00000020) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe3c0 == 0x65198000 {
            return Self::FSUB_z_p_zs {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                i1: ((opcode & 0x00000020) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe3c0 == 0x651a8000 {
            return Self::FMUL_z_p_zs {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                i1: ((opcode & 0x00000020) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe3c0 == 0x651b8000 {
            return Self::FSUBR_z_p_zs {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                i1: ((opcode & 0x00000020) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe3c0 == 0x651c8000 {
            return Self::FMAXNM_z_p_zs {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                i1: ((opcode & 0x00000020) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe3c0 == 0x651d8000 {
            return Self::FMINNM_z_p_zs {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                i1: ((opcode & 0x00000020) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe3c0 == 0x651e8000 {
            return Self::FMAX_z_p_zs {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                i1: ((opcode & 0x00000020) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe3c0 == 0x651f8000 {
            return Self::FMIN_z_p_zs {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                i1: ((opcode & 0x00000020) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x7e216800 {
            return Self::FCVTXN_asisdmisc_N {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x7e21a800 {
            return Self::FCVTNU_asisdmisc_R {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x7e21b800 {
            return Self::FCVTMU_asisdmisc_R {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x7e21c800 {
            return Self::FCVTAU_asisdmisc_R {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x7e21d800 {
            return Self::UCVTF_asisdmisc_R {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x7e30c800 {
            return Self::FMAXNMP_asisdpair_only_SD {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x7e30d800 {
            return Self::FADDP_asisdpair_only_SD {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x7e30f800 {
            return Self::FMAXP_asisdpair_only_SD {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x7ea0c800 {
            return Self::FCMGE_asisdmisc_FZ {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x7ea0d800 {
            return Self::FCMLE_asisdmisc_FZ {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x7ea1a800 {
            return Self::FCVTPU_asisdmisc_R {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x7ea1b800 {
            return Self::FCVTZU_asisdmisc_R {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x7ea1d800 {
            return Self::FRSQRTE_asisdmisc_R {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x7eb0c800 {
            return Self::FMINNMP_asisdpair_only_SD {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffbffc00 == 0x7eb0f800 {
            return Self::FMINP_asisdpair_only_SD {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x0420b800 {
            return Self::FEXPA_z_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x05203800 {
            return Self::DUP_z_r {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x05203800 {
            return Self::MOV_dup_z_r {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x05243800 {
            return Self::INSR_z_r {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x05303800 {
            return Self::SUNPKLO_z_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x05313800 {
            return Self::SUNPKHI_z_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x05323800 {
            return Self::UUNPKLO_z_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x05333800 {
            return Self::UUNPKHI_z_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x05343800 {
            return Self::INSR_z_v {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Vm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x05383800 {
            return Self::REV_z_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffec00 == 0x0d008000 {
            return Self::ST1_asisdlso_S1_1s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffec00 == 0x0d00a000 {
            return Self::ST3_asisdlso_S3_3s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffec00 == 0x0d208000 {
            return Self::ST2_asisdlso_S2_2s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffec00 == 0x0d20a000 {
            return Self::ST4_asisdlso_S4_4s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffec00 == 0x0d408000 {
            return Self::LD1_asisdlso_S1_1s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffec00 == 0x0d40a000 {
            return Self::LD3_asisdlso_S3_3s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffec00 == 0x0d608000 {
            return Self::LD2_asisdlso_S2_2s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffec00 == 0x0d60a000 {
            return Self::LD4_asisdlso_S4_4s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffec00 == 0x0d9f8000 {
            return Self::ST1_asisdlsop_S1_i1s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffec00 == 0x0d9fa000 {
            return Self::ST3_asisdlsop_S3_i3s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffec00 == 0x0dbf8000 {
            return Self::ST2_asisdlsop_S2_i2s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffec00 == 0x0dbfa000 {
            return Self::ST4_asisdlsop_S4_i4s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffec00 == 0x0ddf8000 {
            return Self::LD1_asisdlsop_S1_i1s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffec00 == 0x0ddfa000 {
            return Self::LD3_asisdlsop_S3_i3s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffec00 == 0x0dff8000 {
            return Self::LD2_asisdlsop_S2_i2s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffec00 == 0x0dffa000 {
            return Self::LD4_asisdlsop_S4_i4s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe7fc00 == 0x0e043c00 {
            return Self::MOV_UMOV_asimdins_W_w {
                imm5: ((opcode & 0x00180000) >> 19) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0e216800 {
            return Self::FCVTN_asimdmisc_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0e217800 {
            return Self::FCVTL_asimdmisc_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0e218800 {
            return Self::FRINTN_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0e219800 {
            return Self::FRINTM_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0e21a800 {
            return Self::FCVTNS_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0e21b800 {
            return Self::FCVTMS_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0e21c800 {
            return Self::FCVTAS_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0e21d800 {
            return Self::SCVTF_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0e21e800 {
            return Self::FRINT32Z_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0e21f800 {
            return Self::FRINT64Z_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0ea0c800 {
            return Self::FCMGT_asimdmisc_FZ {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0ea0d800 {
            return Self::FCMEQ_asimdmisc_FZ {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0ea0e800 {
            return Self::FCMLT_asimdmisc_FZ {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0ea0f800 {
            return Self::FABS_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0ea18800 {
            return Self::FRINTP_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0ea19800 {
            return Self::FRINTZ_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0ea1a800 {
            return Self::FCVTPS_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0ea1b800 {
            return Self::FCVTZS_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0ea1c800 {
            return Self::URECPE_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x0ea1d800 {
            return Self::FRECPE_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffc210 == 0x25184000 {
            return Self::BRKN_p_p_pp {
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pdm: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffffc210 == 0x25504000 {
            return Self::BRKAS_p_p_p_z {
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffffc210 == 0x25584000 {
            return Self::BRKNS_p_p_pp {
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pdm: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffffc210 == 0x25d04000 {
            return Self::BRKBS_p_p_p_z {
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2e216800 {
            return Self::FCVTXN_asimdmisc_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2e218800 {
            return Self::FRINTA_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2e219800 {
            return Self::FRINTX_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2e21a800 {
            return Self::FCVTNU_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2e21b800 {
            return Self::FCVTMU_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2e21c800 {
            return Self::FCVTAU_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2e21d800 {
            return Self::UCVTF_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2e21e800 {
            return Self::FRINT32X_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2e21f800 {
            return Self::FRINT64X_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2e30c800 {
            return Self::FMAXNMV_asimdall_only_SD {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2e30f800 {
            return Self::FMAXV_asimdall_only_SD {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2ea0c800 {
            return Self::FCMGE_asimdmisc_FZ {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2ea0d800 {
            return Self::FCMLE_asimdmisc_FZ {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2ea0f800 {
            return Self::FNEG_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2ea19800 {
            return Self::FRINTI_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2ea1a800 {
            return Self::FCVTPU_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2ea1b800 {
            return Self::FCVTZU_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2ea1c800 {
            return Self::URSQRTE_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2ea1d800 {
            return Self::FRSQRTE_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2ea1f800 {
            return Self::FSQRT_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2eb0c800 {
            return Self::FMINNMV_asimdall_only_SD {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfbffc00 == 0x2eb0f800 {
            return Self::FMINV_asimdall_only_SD {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x5e203800 {
            return Self::SUQADD_asisdmisc_R {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x5e207800 {
            return Self::SQABS_asisdmisc_R {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x5e208800 {
            return Self::CMGT_asisdmisc_Z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x5e209800 {
            return Self::CMEQ_asisdmisc_Z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x5e20a800 {
            return Self::CMLT_asisdmisc_Z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x5e20b800 {
            return Self::ABS_asisdmisc_R {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x5e214800 {
            return Self::SQXTN_asisdmisc_N {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x5e31b800 {
            return Self::ADDP_asisdpair_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x650e3000 {
            return Self::FRECPE_z_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x650f3000 {
            return Self::FRSQRTE_z_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x7e203800 {
            return Self::USQADD_asisdmisc_R {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x7e207800 {
            return Self::SQNEG_asisdmisc_R {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x7e208800 {
            return Self::CMGE_asisdmisc_Z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x7e209800 {
            return Self::CMLE_asisdmisc_Z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x7e20b800 {
            return Self::NEG_asisdmisc_R {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x7e212800 {
            return Self::SQXTUN_asisdmisc_N {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ffc00 == 0x7e214800 {
            return Self::UQXTN_asisdmisc_N {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff8fe00 == 0xd5087800 {
            return Self::AT_SYS_CR_systeminstrs {
                op1: ((opcode & 0x00070000) >> 16) as u8,
                CRm: ((opcode & 0x00000100) >> 8) as u8,
                op2: ((opcode & 0x000000e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c000000 {
            return Self::ST4_asisdlse_R4 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c002000 {
            return Self::ST1_asisdlse_R4_4v {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c004000 {
            return Self::ST3_asisdlse_R3 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c006000 {
            return Self::ST1_asisdlse_R3_3v {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c007000 {
            return Self::ST1_asisdlse_R1_1v {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c008000 {
            return Self::ST2_asisdlse_R2 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c00a000 {
            return Self::ST1_asisdlse_R2_2v {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c400000 {
            return Self::LD4_asisdlse_R4 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c402000 {
            return Self::LD1_asisdlse_R4_4v {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c404000 {
            return Self::LD3_asisdlse_R3 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c406000 {
            return Self::LD1_asisdlse_R3_3v {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c407000 {
            return Self::LD1_asisdlse_R1_1v {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c408000 {
            return Self::LD2_asisdlse_R2 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c40a000 {
            return Self::LD1_asisdlse_R2_2v {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c9f0000 {
            return Self::ST4_asisdlsep_I4_i {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c9f2000 {
            return Self::ST1_asisdlsep_I4_i4 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c9f4000 {
            return Self::ST3_asisdlsep_I3_i {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c9f6000 {
            return Self::ST1_asisdlsep_I3_i3 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c9f7000 {
            return Self::ST1_asisdlsep_I1_i1 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c9f8000 {
            return Self::ST2_asisdlsep_I2_i {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0c9fa000 {
            return Self::ST1_asisdlsep_I2_i2 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0cdf0000 {
            return Self::LD4_asisdlsep_I4_i {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0cdf2000 {
            return Self::LD1_asisdlsep_I4_i4 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0cdf4000 {
            return Self::LD3_asisdlsep_I3_i {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0cdf6000 {
            return Self::LD1_asisdlsep_I3_i3 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0cdf7000 {
            return Self::LD1_asisdlsep_I1_i1 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0cdf8000 {
            return Self::LD2_asisdlsep_I2_i {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0cdfa000 {
            return Self::LD1_asisdlsep_I2_i2 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe400 == 0x0d004000 {
            return Self::ST1_asisdlso_H1_1h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe400 == 0x0d006000 {
            return Self::ST3_asisdlso_H3_3h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe400 == 0x0d204000 {
            return Self::ST2_asisdlso_H2_2h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe400 == 0x0d206000 {
            return Self::ST4_asisdlso_H4_4h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe400 == 0x0d404000 {
            return Self::LD1_asisdlso_H1_1h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe400 == 0x0d406000 {
            return Self::LD3_asisdlso_H3_3h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0d40c000 {
            return Self::LD1R_asisdlso_R1 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0d40e000 {
            return Self::LD3R_asisdlso_R3 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe400 == 0x0d604000 {
            return Self::LD2_asisdlso_H2_2h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe400 == 0x0d606000 {
            return Self::LD4_asisdlso_H4_4h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0d60c000 {
            return Self::LD2R_asisdlso_R2 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0d60e000 {
            return Self::LD4R_asisdlso_R4 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe400 == 0x0d9f4000 {
            return Self::ST1_asisdlsop_H1_i1h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe400 == 0x0d9f6000 {
            return Self::ST3_asisdlsop_H3_i3h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe400 == 0x0dbf4000 {
            return Self::ST2_asisdlsop_H2_i2h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe400 == 0x0dbf6000 {
            return Self::ST4_asisdlsop_H4_i4h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe400 == 0x0ddf4000 {
            return Self::LD1_asisdlsop_H1_i1h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe400 == 0x0ddf6000 {
            return Self::LD3_asisdlsop_H3_i3h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0ddfc000 {
            return Self::LD1R_asisdlsop_R1_i {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0ddfe000 {
            return Self::LD3R_asisdlsop_R3_i {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe400 == 0x0dff4000 {
            return Self::LD2_asisdlsop_H2_i2h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe400 == 0x0dff6000 {
            return Self::LD4_asisdlsop_H4_i4h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0dffc000 {
            return Self::LD2R_asisdlsop_R2_i {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbffff000 == 0x0dffe000 {
            return Self::LD4R_asisdlsop_R4_i {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e200800 {
            return Self::REV64_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e201800 {
            return Self::REV16_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e202800 {
            return Self::SADDLP_asimdmisc_P {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e203800 {
            return Self::SUQADD_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e204800 {
            return Self::CLS_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e205800 {
            return Self::CNT_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e206800 {
            return Self::SADALP_asimdmisc_P {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e207800 {
            return Self::SQABS_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e208800 {
            return Self::CMGT_asimdmisc_Z {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e209800 {
            return Self::CMEQ_asimdmisc_Z {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e20a800 {
            return Self::CMLT_asimdmisc_Z {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e20b800 {
            return Self::ABS_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e212800 {
            return Self::XTN_asimdmisc_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e214800 {
            return Self::SQXTN_asimdmisc_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e303800 {
            return Self::SADDLV_asimdall_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e30a800 {
            return Self::SMAXV_asimdall_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e31a800 {
            return Self::SMINV_asimdall_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x0e31b800 {
            return Self::ADDV_asimdall_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe01fe0 == 0x1e201000 {
            return Self::FMOV_S_floatimm {
                imm8: ((opcode & 0x001fe000) >> 13) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe01fe0 == 0x1e601000 {
            return Self::FMOV_D_floatimm {
                imm8: ((opcode & 0x001fe000) >> 13) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe01fe0 == 0x1ee01000 {
            return Self::FMOV_H_floatimm {
                imm8: ((opcode & 0x001fe000) >> 13) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffc200 == 0x25104000 {
            return Self::BRKA_p_p_p {
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                M: ((opcode & 0x00000010) >> 4) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffffc200 == 0x25904000 {
            return Self::BRKB_p_p_p {
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                M: ((opcode & 0x00000010) >> 4) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x2e200800 {
            return Self::REV32_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x2e202800 {
            return Self::UADDLP_asimdmisc_P {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x2e203800 {
            return Self::USQADD_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x2e204800 {
            return Self::CLZ_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x2e206800 {
            return Self::UADALP_asimdmisc_P {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x2e207800 {
            return Self::SQNEG_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x2e208800 {
            return Self::CMGE_asimdmisc_Z {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x2e209800 {
            return Self::CMLE_asimdmisc_Z {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x2e20b800 {
            return Self::NEG_asimdmisc_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x2e212800 {
            return Self::SQXTUN_asimdmisc_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x2e213800 {
            return Self::SHLL_asimdmisc_S {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x2e214800 {
            return Self::UQXTN_asimdmisc_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x2e303800 {
            return Self::UADDLV_asimdall_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x2e30a800 {
            return Self::UMAXV_asimdall_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf3ffc00 == 0x2e31a800 {
            return Self::UMINV_asimdall_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff8fc00 == 0x2f00e400 {
            return Self::MOVI_asimdimm_D_ds {
                a: ((opcode & 0x00040000) >> 18) as u8,
                b: ((opcode & 0x00020000) >> 17) as u8,
                c: ((opcode & 0x00010000) >> 16) as u8,
                d: ((opcode & 0x00000200) >> 9) as u8,
                e: ((opcode & 0x00000100) >> 8) as u8,
                f: ((opcode & 0x00000080) >> 7) as u8,
                g: ((opcode & 0x00000040) >> 6) as u8,
                h: ((opcode & 0x00000020) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x648aa000 {
            return Self::BFCVTNT_z_p_z_s2bf {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x6552a000 {
            return Self::SCVTF_z_p_z_h2fp16 {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x6553a000 {
            return Self::UCVTF_z_p_z_h2fp16 {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x6554a000 {
            return Self::SCVTF_z_p_z_w2fp16 {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x6555a000 {
            return Self::UCVTF_z_p_z_w2fp16 {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x6556a000 {
            return Self::SCVTF_z_p_z_x2fp16 {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x6557a000 {
            return Self::UCVTF_z_p_z_x2fp16 {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x655aa000 {
            return Self::FCVTZS_z_p_z_fp162h {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x655ba000 {
            return Self::FCVTZU_z_p_z_fp162h {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x655ca000 {
            return Self::FCVTZS_z_p_z_fp162w {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x655da000 {
            return Self::FCVTZU_z_p_z_fp162w {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x655ea000 {
            return Self::FCVTZS_z_p_z_fp162x {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x655fa000 {
            return Self::FCVTZU_z_p_z_fp162x {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x6588a000 {
            return Self::FCVT_z_p_z_s2h {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x6589a000 {
            return Self::FCVT_z_p_z_h2s {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x658aa000 {
            return Self::BFCVT_z_p_z_s2bf {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x6594a000 {
            return Self::SCVTF_z_p_z_w2s {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x6595a000 {
            return Self::UCVTF_z_p_z_w2s {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x659ca000 {
            return Self::FCVTZS_z_p_z_s2w {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x659da000 {
            return Self::FCVTZU_z_p_z_s2w {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x65c8a000 {
            return Self::FCVT_z_p_z_d2h {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x65c9a000 {
            return Self::FCVT_z_p_z_h2d {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x65caa000 {
            return Self::FCVT_z_p_z_d2s {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x65cba000 {
            return Self::FCVT_z_p_z_s2d {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x65d0a000 {
            return Self::SCVTF_z_p_z_w2d {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x65d1a000 {
            return Self::UCVTF_z_p_z_w2d {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x65d4a000 {
            return Self::SCVTF_z_p_z_x2s {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x65d5a000 {
            return Self::UCVTF_z_p_z_x2s {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x65d6a000 {
            return Self::SCVTF_z_p_z_x2d {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x65d7a000 {
            return Self::UCVTF_z_p_z_x2d {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x65d8a000 {
            return Self::FCVTZS_z_p_z_d2w {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x65d9a000 {
            return Self::FCVTZU_z_p_z_d2w {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x65dca000 {
            return Self::FCVTZS_z_p_z_s2x {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x65dda000 {
            return Self::FCVTZU_z_p_z_s2x {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x65dea000 {
            return Self::FCVTZS_z_p_z_d2x {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffffe000 == 0x65dfa000 {
            return Self::FCVTZU_z_p_z_d2x {
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff8fc00 == 0x6f00e400 {
            return Self::MOVI_asimdimm_D2_d {
                a: ((opcode & 0x00040000) >> 18) as u8,
                b: ((opcode & 0x00020000) >> 17) as u8,
                c: ((opcode & 0x00010000) >> 16) as u8,
                d: ((opcode & 0x00000200) >> 9) as u8,
                e: ((opcode & 0x00000100) >> 8) as u8,
                f: ((opcode & 0x00000080) >> 7) as u8,
                g: ((opcode & 0x00000040) >> 6) as u8,
                h: ((opcode & 0x00000020) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff8fc00 == 0x6f00f400 {
            return Self::FMOV_asimdimm_D2_d {
                a: ((opcode & 0x00040000) >> 18) as u8,
                b: ((opcode & 0x00020000) >> 17) as u8,
                c: ((opcode & 0x00010000) >> 16) as u8,
                d: ((opcode & 0x00000200) >> 9) as u8,
                e: ((opcode & 0x00000100) >> 8) as u8,
                f: ((opcode & 0x00000080) >> 7) as u8,
                g: ((opcode & 0x00000040) >> 6) as u8,
                h: ((opcode & 0x00000020) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0420e000 {
            return Self::CNTB_r_s {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0420f000 {
            return Self::SQINCB_r_rs_sx {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0420f400 {
            return Self::UQINCB_r_rs_uw {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0420f800 {
            return Self::SQDECB_r_rs_sx {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0420fc00 {
            return Self::UQDECB_r_rs_uw {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0430e000 {
            return Self::INCB_r_rs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0430e400 {
            return Self::DECB_r_rs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0430f000 {
            return Self::SQINCB_r_rs_x {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0430f400 {
            return Self::UQINCB_r_rs_x {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0430f800 {
            return Self::SQDECB_r_rs_x {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0430fc00 {
            return Self::UQDECB_r_rs_x {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0460c000 {
            return Self::SQINCH_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0460c400 {
            return Self::UQINCH_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0460c800 {
            return Self::SQDECH_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0460cc00 {
            return Self::UQDECH_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0460e000 {
            return Self::CNTH_r_s {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0460f000 {
            return Self::SQINCH_r_rs_sx {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0460f400 {
            return Self::UQINCH_r_rs_uw {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0460f800 {
            return Self::SQDECH_r_rs_sx {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0460fc00 {
            return Self::UQDECH_r_rs_uw {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0470c000 {
            return Self::INCH_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0470c400 {
            return Self::DECH_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0470e000 {
            return Self::INCH_r_rs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0470e400 {
            return Self::DECH_r_rs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0470f000 {
            return Self::SQINCH_r_rs_x {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0470f400 {
            return Self::UQINCH_r_rs_x {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0470f800 {
            return Self::SQDECH_r_rs_x {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x0470fc00 {
            return Self::UQDECH_r_rs_x {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04a0c000 {
            return Self::SQINCW_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04a0c400 {
            return Self::UQINCW_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04a0c800 {
            return Self::SQDECW_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04a0cc00 {
            return Self::UQDECW_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04a0e000 {
            return Self::CNTW_r_s {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04a0f000 {
            return Self::SQINCW_r_rs_sx {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04a0f400 {
            return Self::UQINCW_r_rs_uw {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04a0f800 {
            return Self::SQDECW_r_rs_sx {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04a0fc00 {
            return Self::UQDECW_r_rs_uw {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04b0c000 {
            return Self::INCW_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04b0c400 {
            return Self::DECW_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04b0e000 {
            return Self::INCW_r_rs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04b0e400 {
            return Self::DECW_r_rs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04b0f000 {
            return Self::SQINCW_r_rs_x {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04b0f400 {
            return Self::UQINCW_r_rs_x {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04b0f800 {
            return Self::SQDECW_r_rs_x {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04b0fc00 {
            return Self::UQDECW_r_rs_x {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04e0c000 {
            return Self::SQINCD_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04e0c400 {
            return Self::UQINCD_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04e0c800 {
            return Self::SQDECD_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04e0cc00 {
            return Self::UQDECD_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04e0e000 {
            return Self::CNTD_r_s {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04e0f000 {
            return Self::SQINCD_r_rs_sx {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04e0f400 {
            return Self::UQINCD_r_rs_uw {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04e0f800 {
            return Self::SQDECD_r_rs_sx {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04e0fc00 {
            return Self::UQDECD_r_rs_uw {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04f0c000 {
            return Self::INCD_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04f0c400 {
            return Self::DECD_z_zs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04f0e000 {
            return Self::INCD_r_rs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04f0e400 {
            return Self::DECD_r_rs {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04f0f000 {
            return Self::SQINCD_r_rs_x {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04f0f400 {
            return Self::UQINCD_r_rs_x {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04f0f800 {
            return Self::SQDECD_r_rs_x {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0fc00 == 0x04f0fc00 {
            return Self::UQDECD_r_rs_x {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                pattern: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff30fe10 == 0x05204000 {
            return Self::ZIP1_p_pp {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff30fe10 == 0x05204400 {
            return Self::ZIP2_p_pp {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff30fe10 == 0x05204800 {
            return Self::UZP1_p_pp {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff30fe10 == 0x05204c00 {
            return Self::UZP2_p_pp {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff30fe10 == 0x05205000 {
            return Self::TRN1_p_pp {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff30fe10 == 0x05205400 {
            return Self::TRN2_p_pp {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe000 == 0x0d000000 {
            return Self::ST1_asisdlso_B1_1b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe000 == 0x0d002000 {
            return Self::ST3_asisdlso_B3_3b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe000 == 0x0d200000 {
            return Self::ST2_asisdlso_B2_2b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe000 == 0x0d202000 {
            return Self::ST4_asisdlso_B4_4b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe000 == 0x0d400000 {
            return Self::LD1_asisdlso_B1_1b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe000 == 0x0d402000 {
            return Self::LD3_asisdlso_B3_3b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe000 == 0x0d600000 {
            return Self::LD2_asisdlso_B2_2b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe000 == 0x0d602000 {
            return Self::LD4_asisdlso_B4_4b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe000 == 0x0d9f0000 {
            return Self::ST1_asisdlsop_B1_i1b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe000 == 0x0d9f2000 {
            return Self::ST3_asisdlsop_B3_i3b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe000 == 0x0dbf0000 {
            return Self::ST2_asisdlsop_B2_i2b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe000 == 0x0dbf2000 {
            return Self::ST4_asisdlsop_B4_i4b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe000 == 0x0ddf0000 {
            return Self::LD1_asisdlsop_B1_i1b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe000 == 0x0ddf2000 {
            return Self::LD3_asisdlsop_B3_i3b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe000 == 0x0dff0000 {
            return Self::LD2_asisdlsop_B2_i2b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfffe000 == 0x0dff2000 {
            return Self::LD4_asisdlsop_B4_i4b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbff8fc00 == 0x0f00e400 {
            return Self::MOVI_asimdimm_N_b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                a: ((opcode & 0x00040000) >> 18) as u8,
                b: ((opcode & 0x00020000) >> 17) as u8,
                c: ((opcode & 0x00010000) >> 16) as u8,
                d: ((opcode & 0x00000200) >> 9) as u8,
                e: ((opcode & 0x00000100) >> 8) as u8,
                f: ((opcode & 0x00000080) >> 7) as u8,
                g: ((opcode & 0x00000040) >> 6) as u8,
                h: ((opcode & 0x00000020) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbff8fc00 == 0x0f00f400 {
            return Self::FMOV_asimdimm_S_s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                a: ((opcode & 0x00040000) >> 18) as u8,
                b: ((opcode & 0x00020000) >> 17) as u8,
                c: ((opcode & 0x00010000) >> 16) as u8,
                d: ((opcode & 0x00000200) >> 9) as u8,
                e: ((opcode & 0x00000100) >> 8) as u8,
                f: ((opcode & 0x00000080) >> 7) as u8,
                g: ((opcode & 0x00000040) >> 6) as u8,
                h: ((opcode & 0x00000020) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbff8fc00 == 0x0f00fc00 {
            return Self::FMOV_asimdimm_H_h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                a: ((opcode & 0x00040000) >> 18) as u8,
                b: ((opcode & 0x00020000) >> 17) as u8,
                c: ((opcode & 0x00010000) >> 16) as u8,
                d: ((opcode & 0x00000200) >> 9) as u8,
                e: ((opcode & 0x00000100) >> 8) as u8,
                f: ((opcode & 0x00000080) >> 7) as u8,
                g: ((opcode & 0x00000040) >> 6) as u8,
                h: ((opcode & 0x00000020) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe010 == 0x65102000 {
            return Self::FCMGE_p_p_z0 {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe010 == 0x65102010 {
            return Self::FCMGT_p_p_z0 {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe010 == 0x65112000 {
            return Self::FCMLT_p_p_z0 {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe010 == 0x65112010 {
            return Self::FCMLE_p_p_z0 {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe010 == 0x65122000 {
            return Self::FCMEQ_p_p_z0 {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe010 == 0x65132000 {
            return Self::FCMNE_p_p_z0 {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xbf87fc00 == 0x0f00a400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SXTL_SSHLL_asimdshf_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf87fc00 == 0x2f00a400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::UXTL_USHLL_asimdshf_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04000000 {
            return Self::ADD_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04002000 {
            return Self::SADDV_r_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Vd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04008000 {
            return Self::ASR_z_p_zi {
                tszh: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                tszl: ((opcode & 0x00000300) >> 8) as u8,
                imm3: ((opcode & 0x000000e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04010000 {
            return Self::SUB_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04012000 {
            return Self::UADDV_r_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Vd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04018000 {
            return Self::LSR_z_p_zi {
                tszh: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                tszl: ((opcode & 0x00000300) >> 8) as u8,
                imm3: ((opcode & 0x000000e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04030000 {
            return Self::SUBR_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04038000 {
            return Self::LSL_z_p_zi {
                tszh: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                tszl: ((opcode & 0x00000300) >> 8) as u8,
                imm3: ((opcode & 0x000000e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04048000 {
            return Self::ASRD_z_p_zi {
                tszh: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                tszl: ((opcode & 0x00000300) >> 8) as u8,
                imm3: ((opcode & 0x000000e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04080000 {
            return Self::SMAX_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04082000 {
            return Self::SMAXV_r_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Vd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04090000 {
            return Self::UMAX_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04092000 {
            return Self::UMAXV_r_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Vd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x040a0000 {
            return Self::SMIN_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x040a2000 {
            return Self::SMINV_r_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Vd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x040b0000 {
            return Self::UMIN_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x040b2000 {
            return Self::UMINV_r_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Vd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x040c0000 {
            return Self::SABD_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x040d0000 {
            return Self::UABD_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04100000 {
            return Self::MUL_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04108000 {
            return Self::ASR_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x0410a000 {
            return Self::SXTB_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04118000 {
            return Self::LSR_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x0411a000 {
            return Self::UXTB_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04120000 {
            return Self::SMULH_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x0412a000 {
            return Self::SXTH_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04130000 {
            return Self::UMULH_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04138000 {
            return Self::LSL_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x0413a000 {
            return Self::UXTH_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04140000 {
            return Self::SDIV_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04148000 {
            return Self::ASRR_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x0414a000 {
            return Self::SXTW_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04150000 {
            return Self::UDIV_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04158000 {
            return Self::LSRR_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x0415a000 {
            return Self::UXTW_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04160000 {
            return Self::SDIVR_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x0416a000 {
            return Self::ABS_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04170000 {
            return Self::UDIVR_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04178000 {
            return Self::LSLR_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x0417a000 {
            return Self::NEG_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04180000 {
            return Self::ORR_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04182000 {
            return Self::ORV_r_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Vd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04188000 {
            return Self::ASR_z_p_zw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x0418a000 {
            return Self::CLS_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04190000 {
            return Self::EOR_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04192000 {
            return Self::EORV_r_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Vd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x04198000 {
            return Self::LSR_z_p_zw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x0419a000 {
            return Self::CLZ_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x041a0000 {
            return Self::AND_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x041a2000 {
            return Self::ANDV_r_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Vd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x041aa000 {
            return Self::CNT_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x041b0000 {
            return Self::BIC_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x041b8000 {
            return Self::LSL_z_p_zw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x041ba000 {
            return Self::CNOT_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x041ca000 {
            return Self::FABS_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x041da000 {
            return Self::FNEG_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x041ea000 {
            return Self::NOT_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x04203000 {
            return Self::AND_z_zz {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x04603000 {
            return Self::MOV_orr_z_zz {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x04603000 {
            return Self::ORR_z_zz {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x04a03000 {
            return Self::EOR_z_zz {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x04e03000 {
            return Self::BIC_z_zz {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x05208000 {
            return Self::CPY_z_p_v {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Vn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x05208000 {
            return Self::MOV_cpy_z_p_v {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Vn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x0520a000 {
            return Self::LASTA_r_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x05218000 {
            return Self::COMPACT_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x0521a000 {
            return Self::LASTB_r_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x05228000 {
            return Self::LASTA_v_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Vd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x05238000 {
            return Self::LASTB_v_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Vd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x05248000 {
            return Self::REVB_z_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x05258000 {
            return Self::REVH_z_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x05268000 {
            return Self::REVW_z_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x05278000 {
            return Self::RBIT_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x05288000 {
            return Self::CLASTA_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x0528a000 {
            return Self::CPY_z_p_r {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x0528a000 {
            return Self::MOV_cpy_z_p_r {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x05298000 {
            return Self::CLASTB_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x052a8000 {
            return Self::CLASTA_v_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Vdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x052b8000 {
            return Self::CLASTB_v_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Vdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x052c8000 {
            return Self::SPLICE_z_p_zz_des {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x0530a000 {
            return Self::CLASTA_r_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x0531a000 {
            return Self::CLASTB_r_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Rdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x05a00000 {
            return Self::ZIP1_z_zz_q {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x05a00400 {
            return Self::ZIP2_z_zz_q {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x05a00800 {
            return Self::UZP1_z_zz_q {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x05a00c00 {
            return Self::UZP2_z_zz_q {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x05a01800 {
            return Self::TRN1_z_zz_q {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x05a01c00 {
            return Self::TRN2_z_zz_q {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x08207c00 {
            return Self::CASP_CP32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x0820fc00 {
            return Self::CASPL_CP32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x08607c00 {
            return Self::CASPA_CP32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x0860fc00 {
            return Self::CASPAL_CP32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x08a07c00 {
            return Self::CASB_C32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x08a0fc00 {
            return Self::CASLB_C32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x08e07c00 {
            return Self::CASAB_C32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x08e0fc00 {
            return Self::CASALB_C32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x0e002c00 {
            return Self::SMOV_asimdins_W_w {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x0e003c00 {
            return Self::UMOV_asimdins_W_w {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbff8dc00 == 0x0f008400 {
            return Self::MOVI_asimdimm_L_hl {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                a: ((opcode & 0x00040000) >> 18) as u8,
                b: ((opcode & 0x00020000) >> 17) as u8,
                c: ((opcode & 0x00010000) >> 16) as u8,
                cmode: ((opcode & 0x00002000) >> 13) as u8,
                d: ((opcode & 0x00000200) >> 9) as u8,
                e: ((opcode & 0x00000100) >> 8) as u8,
                f: ((opcode & 0x00000080) >> 7) as u8,
                g: ((opcode & 0x00000040) >> 6) as u8,
                h: ((opcode & 0x00000020) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbff8dc00 == 0x0f009400 {
            return Self::ORR_asimdimm_L_hl {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                a: ((opcode & 0x00040000) >> 18) as u8,
                b: ((opcode & 0x00020000) >> 17) as u8,
                c: ((opcode & 0x00010000) >> 16) as u8,
                cmode: ((opcode & 0x00002000) >> 13) as u8,
                d: ((opcode & 0x00000200) >> 9) as u8,
                e: ((opcode & 0x00000100) >> 8) as u8,
                f: ((opcode & 0x00000080) >> 7) as u8,
                g: ((opcode & 0x00000040) >> 6) as u8,
                h: ((opcode & 0x00000020) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbff8ec00 == 0x0f00c400 {
            return Self::MOVI_asimdimm_M_sm {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                a: ((opcode & 0x00040000) >> 18) as u8,
                b: ((opcode & 0x00020000) >> 17) as u8,
                c: ((opcode & 0x00010000) >> 16) as u8,
                cmode: ((opcode & 0x00001000) >> 12) as u8,
                d: ((opcode & 0x00000200) >> 9) as u8,
                e: ((opcode & 0x00000100) >> 8) as u8,
                f: ((opcode & 0x00000080) >> 7) as u8,
                g: ((opcode & 0x00000040) >> 6) as u8,
                h: ((opcode & 0x00000020) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1a000000 {
            return Self::ADC_32_addsub_carry {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ac00800 {
            return Self::UDIV_32_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ac00c00 {
            return Self::SDIV_32_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ac02000 {
            return Self::LSL_LSLV_32_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ac02000 {
            return Self::LSLV_32_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ac02400 {
            return Self::LSR_LSRV_32_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ac02400 {
            return Self::LSRV_32_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ac02800 {
            return Self::ASR_ASRV_32_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ac02800 {
            return Self::ASRV_32_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ac02c00 {
            return Self::ROR_RORV_32_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ac02c00 {
            return Self::RORV_32_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ac04000 {
            return Self::CRC32B_32C_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ac04400 {
            return Self::CRC32H_32C_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ac04800 {
            return Self::CRC32W_32C_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ac05000 {
            return Self::CRC32CB_32C_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ac05400 {
            return Self::CRC32CH_32C_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ac05800 {
            return Self::CRC32CW_32C_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1b007c00 {
            return Self::MUL_MADD_32A_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1b00fc00 {
            return Self::MNEG_MSUB_32A_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e200800 {
            return Self::FMUL_S_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e201800 {
            return Self::FDIV_S_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e202800 {
            return Self::FADD_S_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e203800 {
            return Self::FSUB_S_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e204800 {
            return Self::FMAX_S_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e205800 {
            return Self::FMIN_S_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e206800 {
            return Self::FMAXNM_S_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e207800 {
            return Self::FMINNM_S_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e208800 {
            return Self::FNMUL_S_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e600800 {
            return Self::FMUL_D_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e601800 {
            return Self::FDIV_D_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e602800 {
            return Self::FADD_D_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e603800 {
            return Self::FSUB_D_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e604800 {
            return Self::FMAX_D_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e605800 {
            return Self::FMIN_D_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e606800 {
            return Self::FMAXNM_D_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e607800 {
            return Self::FMINNM_D_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1e608800 {
            return Self::FNMUL_D_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ee00800 {
            return Self::FMUL_H_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ee01800 {
            return Self::FDIV_H_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ee02800 {
            return Self::FADD_H_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ee03800 {
            return Self::FSUB_H_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ee04800 {
            return Self::FMAX_H_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ee05800 {
            return Self::FMIN_H_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ee06800 {
            return Self::FMAXNM_H_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ee07800 {
            return Self::FMINNM_H_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x1ee08800 {
            return Self::FNMUL_H_floatdp2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fc200 == 0x25208000 {
            return Self::CNTP_r_p_p {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x2528c000 {
            return Self::SMAX_z_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x2529c000 {
            return Self::UMAX_z_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x252ac000 {
            return Self::SMIN_z_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x252bc000 {
            return Self::UMIN_z_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x2530c000 {
            return Self::MUL_z_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x2539c000 {
            return Self::FDUP_z_i {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x2539c000 {
            return Self::FMOV_fdup_z_i {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbff8dc00 == 0x2f008400 {
            return Self::MVNI_asimdimm_L_hl {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                a: ((opcode & 0x00040000) >> 18) as u8,
                b: ((opcode & 0x00020000) >> 17) as u8,
                c: ((opcode & 0x00010000) >> 16) as u8,
                cmode: ((opcode & 0x00002000) >> 13) as u8,
                d: ((opcode & 0x00000200) >> 9) as u8,
                e: ((opcode & 0x00000100) >> 8) as u8,
                f: ((opcode & 0x00000080) >> 7) as u8,
                g: ((opcode & 0x00000040) >> 6) as u8,
                h: ((opcode & 0x00000020) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbff8dc00 == 0x2f009400 {
            return Self::BIC_asimdimm_L_hl {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                a: ((opcode & 0x00040000) >> 18) as u8,
                b: ((opcode & 0x00020000) >> 17) as u8,
                c: ((opcode & 0x00010000) >> 16) as u8,
                cmode: ((opcode & 0x00002000) >> 13) as u8,
                d: ((opcode & 0x00000200) >> 9) as u8,
                e: ((opcode & 0x00000100) >> 8) as u8,
                f: ((opcode & 0x00000080) >> 7) as u8,
                g: ((opcode & 0x00000040) >> 6) as u8,
                h: ((opcode & 0x00000020) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbff8ec00 == 0x2f00c400 {
            return Self::MVNI_asimdimm_M_sm {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                a: ((opcode & 0x00040000) >> 18) as u8,
                b: ((opcode & 0x00020000) >> 17) as u8,
                c: ((opcode & 0x00010000) >> 16) as u8,
                cmode: ((opcode & 0x00001000) >> 12) as u8,
                d: ((opcode & 0x00000200) >> 9) as u8,
                e: ((opcode & 0x00000100) >> 8) as u8,
                f: ((opcode & 0x00000080) >> 7) as u8,
                g: ((opcode & 0x00000040) >> 6) as u8,
                h: ((opcode & 0x00000020) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38200000 {
            return Self::LDADDB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38201000 {
            return Self::LDCLRB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38202000 {
            return Self::LDEORB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38203000 {
            return Self::LDSETB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38204000 {
            return Self::LDSMAXB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38205000 {
            return Self::LDSMINB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38206000 {
            return Self::LDUMAXB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38207000 {
            return Self::LDUMINB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38208000 {
            return Self::SWPB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38600000 {
            return Self::LDADDLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38601000 {
            return Self::LDCLRLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38602000 {
            return Self::LDEORLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38603000 {
            return Self::LDSETLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38604000 {
            return Self::LDSMAXLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38605000 {
            return Self::LDSMINLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38606000 {
            return Self::LDUMAXLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38607000 {
            return Self::LDUMINLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38608000 {
            return Self::SWPLB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38a00000 {
            return Self::LDADDAB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38a01000 {
            return Self::LDCLRAB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38a02000 {
            return Self::LDEORAB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38a03000 {
            return Self::LDSETAB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38a04000 {
            return Self::LDSMAXAB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38a05000 {
            return Self::LDSMINAB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38a06000 {
            return Self::LDUMAXAB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38a07000 {
            return Self::LDUMINAB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38a08000 {
            return Self::SWPAB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38a0c000 {
            return Self::LDAPRB_32L_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38e00000 {
            return Self::LDADDALB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38e01000 {
            return Self::LDCLRALB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38e02000 {
            return Self::LDEORALB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38e03000 {
            return Self::LDSETALB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38e04000 {
            return Self::LDSMAXALB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38e05000 {
            return Self::LDSMINALB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38e06000 {
            return Self::LDUMAXALB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38e07000 {
            return Self::LDUMINALB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x38e08000 {
            return Self::SWPALB_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x3a000000 {
            return Self::ADCS_32_addsub_carry {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x44807800 {
            return Self::USDOT_z_zzz_s {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x44a00000 {
            return Self::SDOT_z_zzzi_s {
                i2: ((opcode & 0x00180000) >> 19) as u8,
                Zm: ((opcode & 0x00070000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x44a00400 {
            return Self::UDOT_z_zzzi_s {
                i2: ((opcode & 0x00180000) >> 19) as u8,
                Zm: ((opcode & 0x00070000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x44a01800 {
            return Self::USDOT_z_zzzi_s {
                i2: ((opcode & 0x00180000) >> 19) as u8,
                Zm: ((opcode & 0x00070000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x44a01c00 {
            return Self::SUDOT_z_zzzi_s {
                i2: ((opcode & 0x00180000) >> 19) as u8,
                Zm: ((opcode & 0x00070000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x44e00000 {
            return Self::SDOT_z_zzzi_d {
                i1: ((opcode & 0x00100000) >> 20) as u8,
                Zm: ((opcode & 0x000f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x44e00400 {
            return Self::UDOT_z_zzzi_d {
                i1: ((opcode & 0x00100000) >> 20) as u8,
                Zm: ((opcode & 0x000f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x45009800 {
            return Self::SMMLA_z_zzz {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x45809800 {
            return Self::USMMLA_z_zzz {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x45c09800 {
            return Self::UMMLA_z_zzz {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x48207c00 {
            return Self::CASP_CP64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x4820fc00 {
            return Self::CASPL_CP64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x48607c00 {
            return Self::CASPA_CP64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x4860fc00 {
            return Self::CASPAL_CP64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x48a07c00 {
            return Self::CASH_C32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x48a0fc00 {
            return Self::CASLH_C32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x48e07c00 {
            return Self::CASAH_C32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x48e0fc00 {
            return Self::CASALH_C32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x4e001c00 {
            return Self::INS_asimdins_IR_r {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x4e001c00 {
            return Self::MOV_INS_asimdins_IR_r {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x4e002c00 {
            return Self::SMOV_asimdins_X_x {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x4e80a400 {
            return Self::SMMLA_asimdsame2_G {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x4e80ac00 {
            return Self::USMMLA_asimdsame2_G {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x5a000000 {
            return Self::SBC_32_addsub_carry {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x5e000000 {
            return Self::SHA1C_QSV_cryptosha3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x5e000400 {
            return Self::DUP_asisdone_only {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x5e000400 {
            return Self::MOV_DUP_asisdone_only {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x5e001000 {
            return Self::SHA1P_QSV_cryptosha3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x5e002000 {
            return Self::SHA1M_QSV_cryptosha3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x5e003000 {
            return Self::SHA1SU0_VVV_cryptosha3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x5e004000 {
            return Self::SHA256H_QQV_cryptosha3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x5e005000 {
            return Self::SHA256H2_QQV_cryptosha3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x5e006000 {
            return Self::SHA256SU1_VVV_cryptosha3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x5e401c00 {
            return Self::FMULX_asisdsamefp16_only {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x5e402400 {
            return Self::FCMEQ_asisdsamefp16_only {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x5e403c00 {
            return Self::FRECPS_asisdsamefp16_only {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x5ec03c00 {
            return Self::FRSQRTS_asisdsamefp16_only {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x64604000 {
            return Self::BFDOT_z_zzzi {
                i2: ((opcode & 0x00180000) >> 19) as u8,
                Zm: ((opcode & 0x00070000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x64608000 {
            return Self::BFDOT_z_zzz {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x6460e400 {
            return Self::BFMMLA_z_zzz {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x64a00000 {
            return Self::FMLA_z_zzzi_s {
                i2: ((opcode & 0x00180000) >> 19) as u8,
                Zm: ((opcode & 0x00070000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x64a00400 {
            return Self::FMLS_z_zzzi_s {
                i2: ((opcode & 0x00180000) >> 19) as u8,
                Zm: ((opcode & 0x00070000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x64a02000 {
            return Self::FMUL_z_zzi_s {
                i2: ((opcode & 0x00180000) >> 19) as u8,
                Zm: ((opcode & 0x00070000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x64a0e400 {
            return Self::FMMLA_z_zzz_s {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x64e00000 {
            return Self::FMLA_z_zzzi_d {
                i1: ((opcode & 0x00100000) >> 20) as u8,
                Zm: ((opcode & 0x000f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x64e00400 {
            return Self::FMLS_z_zzzi_d {
                i1: ((opcode & 0x00100000) >> 20) as u8,
                Zm: ((opcode & 0x000f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x64e02000 {
            return Self::FMUL_z_zzi_d {
                i1: ((opcode & 0x00100000) >> 20) as u8,
                Zm: ((opcode & 0x000f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x64e08000 {
            return Self::BFMLALB_z_zzz {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x64e08400 {
            return Self::BFMLALT_z_zzz {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x64e0e400 {
            return Self::FMMLA_z_zzz_d {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x65002000 {
            return Self::FADDV_v_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Vd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x65008000 {
            return Self::FADD_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x6500a000 {
            return Self::FRINTN_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x65018000 {
            return Self::FSUB_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x6501a000 {
            return Self::FRINTP_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x65028000 {
            return Self::FMUL_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x6502a000 {
            return Self::FRINTM_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x65038000 {
            return Self::FSUBR_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x6503a000 {
            return Self::FRINTZ_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x65042000 {
            return Self::FMAXNMV_v_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Vd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x65048000 {
            return Self::FMAXNM_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x6504a000 {
            return Self::FRINTA_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x65052000 {
            return Self::FMINNMV_v_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Vd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x65058000 {
            return Self::FMINNM_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x65062000 {
            return Self::FMAXV_v_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Vd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x65068000 {
            return Self::FMAX_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x6506a000 {
            return Self::FRINTX_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x65072000 {
            return Self::FMINV_v_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Vd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x65078000 {
            return Self::FMIN_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x6507a000 {
            return Self::FRINTI_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x65088000 {
            return Self::FABD_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x65098000 {
            return Self::FSCALE_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x650a8000 {
            return Self::FMULX_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x650c8000 {
            return Self::FDIVR_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x650ca000 {
            return Self::FRECPX_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x650d8000 {
            return Self::FDIV_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x650da000 {
            return Self::FSQRT_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff38fc00 == 0x65108000 {
            return Self::FTMAD_z_zzi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm3: ((opcode & 0x00070000) >> 16) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fe000 == 0x65182000 {
            return Self::FADDA_v_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Vdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x6e40ec00 {
            return Self::BFMMLA_asimdsame2_E {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x6e80a400 {
            return Self::UMMLA_asimdsame2_G {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78200000 {
            return Self::LDADDH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78201000 {
            return Self::LDCLRH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78202000 {
            return Self::LDEORH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78203000 {
            return Self::LDSETH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78204000 {
            return Self::LDSMAXH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78205000 {
            return Self::LDSMINH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78206000 {
            return Self::LDUMAXH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78207000 {
            return Self::LDUMINH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78208000 {
            return Self::SWPH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78600000 {
            return Self::LDADDLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78601000 {
            return Self::LDCLRLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78602000 {
            return Self::LDEORLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78603000 {
            return Self::LDSETLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78604000 {
            return Self::LDSMAXLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78605000 {
            return Self::LDSMINLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78606000 {
            return Self::LDUMAXLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78607000 {
            return Self::LDUMINLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78608000 {
            return Self::SWPLH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78a00000 {
            return Self::LDADDAH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78a01000 {
            return Self::LDCLRAH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78a02000 {
            return Self::LDEORAH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78a03000 {
            return Self::LDSETAH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78a04000 {
            return Self::LDSMAXAH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78a05000 {
            return Self::LDSMINAH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78a06000 {
            return Self::LDUMAXAH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78a07000 {
            return Self::LDUMINAH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78a08000 {
            return Self::SWPAH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78a0c000 {
            return Self::LDAPRH_32L_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78e00000 {
            return Self::LDADDALH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78e01000 {
            return Self::LDCLRALH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78e02000 {
            return Self::LDEORALH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78e03000 {
            return Self::LDSETALH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78e04000 {
            return Self::LDSMAXALH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78e05000 {
            return Self::LDSMINALH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78e06000 {
            return Self::LDUMAXALH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78e07000 {
            return Self::LDUMINALH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x78e08000 {
            return Self::SWPALH_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x7a000000 {
            return Self::SBCS_32_addsub_carry {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x7e402400 {
            return Self::FCMGE_asisdsamefp16_only {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x7e402c00 {
            return Self::FACGE_asisdsamefp16_only {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x7ec01400 {
            return Self::FABD_asisdsamefp16_only {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x7ec02400 {
            return Self::FCMGT_asisdsamefp16_only {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x7ec02c00 {
            return Self::FACGT_asisdsamefp16_only {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x88a07c00 {
            return Self::CAS_C32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x88a0fc00 {
            return Self::CASL_C32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x88e07c00 {
            return Self::CASA_C32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x88e0fc00 {
            return Self::CASAL_C32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9a000000 {
            return Self::ADC_64_addsub_carry {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ac00000 {
            return Self::SUBP_64S_dp_2src {
                Xm: ((opcode & 0x001f0000) >> 16) as u8,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ac00800 {
            return Self::UDIV_64_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ac00c00 {
            return Self::SDIV_64_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ac01000 {
            return Self::IRG_64I_dp_2src {
                Xm: ((opcode & 0x001f0000) >> 16) as u8,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ac01400 {
            return Self::GMI_64G_dp_2src {
                Xm: ((opcode & 0x001f0000) >> 16) as u8,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ac02000 {
            return Self::LSL_LSLV_64_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ac02000 {
            return Self::LSLV_64_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ac02400 {
            return Self::LSR_LSRV_64_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ac02400 {
            return Self::LSRV_64_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ac02800 {
            return Self::ASR_ASRV_64_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ac02800 {
            return Self::ASRV_64_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ac02c00 {
            return Self::ROR_RORV_64_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ac02c00 {
            return Self::RORV_64_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ac03000 {
            return Self::PACGA_64P_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ac04c00 {
            return Self::CRC32X_64C_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ac05c00 {
            return Self::CRC32CX_64C_dp_2src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9b007c00 {
            return Self::MUL_MADD_64A_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9b00fc00 {
            return Self::MNEG_MSUB_64A_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9b207c00 {
            return Self::SMULL_SMADDL_64WA_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9b20fc00 {
            return Self::SMNEGL_SMSUBL_64WA_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ba07c00 {
            return Self::UMULL_UMADDL_64WA_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0x9ba0fc00 {
            return Self::UMNEGL_UMSUBL_64WA_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8200000 {
            return Self::LDADD_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8201000 {
            return Self::LDCLR_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8202000 {
            return Self::LDEOR_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8203000 {
            return Self::LDSET_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8204000 {
            return Self::LDSMAX_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8205000 {
            return Self::LDSMIN_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8206000 {
            return Self::LDUMAX_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8207000 {
            return Self::LDUMIN_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8208000 {
            return Self::SWP_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8600000 {
            return Self::LDADDL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8601000 {
            return Self::LDCLRL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8602000 {
            return Self::LDEORL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8603000 {
            return Self::LDSETL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8604000 {
            return Self::LDSMAXL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8605000 {
            return Self::LDSMINL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8606000 {
            return Self::LDUMAXL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8607000 {
            return Self::LDUMINL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8608000 {
            return Self::SWPL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8a00000 {
            return Self::LDADDA_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8a01000 {
            return Self::LDCLRA_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8a02000 {
            return Self::LDEORA_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8a03000 {
            return Self::LDSETA_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8a04000 {
            return Self::LDSMAXA_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8a05000 {
            return Self::LDSMINA_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8a06000 {
            return Self::LDUMAXA_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8a07000 {
            return Self::LDUMINA_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8a08000 {
            return Self::SWPA_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8a0c000 {
            return Self::LDAPR_32L_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8e00000 {
            return Self::LDADDAL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8e01000 {
            return Self::LDCLRAL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8e02000 {
            return Self::LDEORAL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8e03000 {
            return Self::LDSETAL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8e04000 {
            return Self::LDSMAXAL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8e05000 {
            return Self::LDSMINAL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8e06000 {
            return Self::LDUMAXAL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8e07000 {
            return Self::LDUMINAL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xb8e08000 {
            return Self::SWPAL_32_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xba000000 {
            return Self::ADCS_64_addsub_carry {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe07c10 == 0xba000400 {
            return Self::RMIF_only_rmif {
                imm6: ((opcode & 0x001f8000) >> 15) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                mask: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xbac00000 {
            return Self::SUBPS_64S_dp_2src {
                Xm: ((opcode & 0x001f0000) >> 16) as u8,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xc8a07c00 {
            return Self::CAS_C64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xc8a0fc00 {
            return Self::CASL_C64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xc8e07c00 {
            return Self::CASA_C64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xc8e0fc00 {
            return Self::CASAL_C64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xce608000 {
            return Self::SHA512H_QQV_cryptosha512_3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xce608400 {
            return Self::SHA512H2_QQV_cryptosha512_3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xce608800 {
            return Self::SHA512SU1_VVV2_cryptosha512_3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xce608c00 {
            return Self::RAX1_VVV2_cryptosha512_3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xce60c000 {
            return Self::SM3PARTW1_VVV4_cryptosha512_3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xce60c400 {
            return Self::SM3PARTW2_VVV4_cryptosha512_3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xce60c800 {
            return Self::SM4EKEY_VVV4_cryptosha512_3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff8f000 == 0xd5087000 {
            return Self::DC_SYS_CR_systeminstrs {
                op1: ((opcode & 0x00070000) >> 16) as u8,
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
                op2: ((opcode & 0x000000e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff8f000 == 0xd5087000 {
            return Self::IC_SYS_CR_systeminstrs {
                op1: ((opcode & 0x00070000) >> 16) as u8,
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
                op2: ((opcode & 0x000000e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff8f000 == 0xd5088000 {
            return Self::TLBI_SYS_CR_systeminstrs {
                op1: ((opcode & 0x00070000) >> 16) as u8,
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
                op2: ((opcode & 0x000000e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xda000000 {
            return Self::SBC_64_addsub_carry {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8200000 {
            return Self::LDADD_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8201000 {
            return Self::LDCLR_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8202000 {
            return Self::LDEOR_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8203000 {
            return Self::LDSET_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8204000 {
            return Self::LDSMAX_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8205000 {
            return Self::LDSMIN_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8206000 {
            return Self::LDUMAX_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8207000 {
            return Self::LDUMIN_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8208000 {
            return Self::SWP_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf820a000 {
            return Self::ST64BV0_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf820b000 {
            return Self::ST64BV_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8600000 {
            return Self::LDADDL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8601000 {
            return Self::LDCLRL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8602000 {
            return Self::LDEORL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8603000 {
            return Self::LDSETL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8604000 {
            return Self::LDSMAXL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8605000 {
            return Self::LDSMINL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8606000 {
            return Self::LDUMAXL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8607000 {
            return Self::LDUMINL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8608000 {
            return Self::SWPL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8a00000 {
            return Self::LDADDA_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8a01000 {
            return Self::LDCLRA_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8a02000 {
            return Self::LDEORA_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8a03000 {
            return Self::LDSETA_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8a04000 {
            return Self::LDSMAXA_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8a05000 {
            return Self::LDSMINA_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8a06000 {
            return Self::LDUMAXA_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8a07000 {
            return Self::LDUMINA_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8a08000 {
            return Self::SWPA_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8a0c000 {
            return Self::LDAPR_64L_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8e00000 {
            return Self::LDADDAL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8e01000 {
            return Self::LDCLRAL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8e02000 {
            return Self::LDEORAL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8e03000 {
            return Self::LDSETAL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8e04000 {
            return Self::LDSMAXAL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8e05000 {
            return Self::LDSMINAL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8e06000 {
            return Self::LDUMAXAL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8e07000 {
            return Self::LDUMINAL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xf8e08000 {
            return Self::SWPAL_64_memop {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0fc00 == 0xfa000000 {
            return Self::SBCS_64_addsub_carry {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x00000000 {
            return Self::UDF_only_perm_undef {
                imm16: ((opcode & 0x0000ffff) >> 0) as u16,
            };
        }
        if opcode & 0xff3ee000 == 0x04102000 {
            return Self::MOVPRFX_z_p_z {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                M: ((opcode & 0x00010000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0f800 == 0x04205000 {
            return Self::ADDVL_r_ri {
                Rn: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x000007e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0f800 == 0x04605000 {
            return Self::ADDPL_r_ri {
                Rn: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x000007e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0d808400 {
            return Self::ST1_asisdlsop_DX1_r1d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0d80a400 {
            return Self::ST3_asisdlsop_DX3_r3d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0da08400 {
            return Self::ST2_asisdlsop_DX2_r2d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0da0a400 {
            return Self::ST4_asisdlsop_DX4_r4d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0dc08400 {
            return Self::LD1_asisdlsop_DX1_r1d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0dc0a400 {
            return Self::LD3_asisdlsop_DX3_r3d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0de08400 {
            return Self::LD2_asisdlsop_DX2_r2d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0de0a400 {
            return Self::LD4_asisdlsop_DX4_r4d {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e000000 {
            return Self::TBL_asimdtbl_L1_1 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e000400 {
            return Self::DUP_asimdins_DV_v {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e000c00 {
            return Self::DUP_asimdins_DR_r {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e001000 {
            return Self::TBX_asimdtbl_L1_1 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e002000 {
            return Self::TBL_asimdtbl_L2_2 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e003000 {
            return Self::TBX_asimdtbl_L2_2 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e004000 {
            return Self::TBL_asimdtbl_L3_3 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e005000 {
            return Self::TBX_asimdtbl_L3_3 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e006000 {
            return Self::TBL_asimdtbl_L4_4 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e007000 {
            return Self::TBX_asimdtbl_L4_4 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e201c00 {
            return Self::AND_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e20ec00 {
            return Self::FMLAL_asimdsame_F {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e400400 {
            return Self::FMAXNM_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e400c00 {
            return Self::FMLA_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e401400 {
            return Self::FADD_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e401c00 {
            return Self::FMULX_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e402400 {
            return Self::FCMEQ_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e403400 {
            return Self::FMAX_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e403c00 {
            return Self::FRECPS_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e601c00 {
            return Self::BIC_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0e809c00 {
            return Self::USDOT_asimdsame2_D {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0ea01c00 {
            return Self::MOV_ORR_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0ea01c00 {
            return Self::ORR_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0ea0ec00 {
            return Self::FMLSL_asimdsame_F {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0ec00400 {
            return Self::FMINNM_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0ec00c00 {
            return Self::FMLS_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0ec01400 {
            return Self::FSUB_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0ec03400 {
            return Self::FMIN_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0ec03c00 {
            return Self::FRSQRTS_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x0ee01c00 {
            return Self::ORN_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbff89c00 == 0x0f000400 {
            return Self::MOVI_asimdimm_L_sl {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                a: ((opcode & 0x00040000) >> 18) as u8,
                b: ((opcode & 0x00020000) >> 17) as u8,
                c: ((opcode & 0x00010000) >> 16) as u8,
                cmode: ((opcode & 0x00006000) >> 13) as u8,
                d: ((opcode & 0x00000200) >> 9) as u8,
                e: ((opcode & 0x00000100) >> 8) as u8,
                f: ((opcode & 0x00000080) >> 7) as u8,
                g: ((opcode & 0x00000040) >> 6) as u8,
                h: ((opcode & 0x00000020) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbff89c00 == 0x0f001400 {
            return Self::ORR_asimdimm_L_sl {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                a: ((opcode & 0x00040000) >> 18) as u8,
                b: ((opcode & 0x00020000) >> 17) as u8,
                c: ((opcode & 0x00010000) >> 16) as u8,
                cmode: ((opcode & 0x00006000) >> 13) as u8,
                d: ((opcode & 0x00000200) >> 9) as u8,
                e: ((opcode & 0x00000100) >> 8) as u8,
                f: ((opcode & 0x00000080) >> 7) as u8,
                g: ((opcode & 0x00000040) >> 6) as u8,
                h: ((opcode & 0x00000020) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0fc00 == 0x13007c00 {
            return Self::ASR_SBFM_32M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x1e020000 {
            return Self::SCVTF_S32_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x1e030000 {
            return Self::UCVTF_S32_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x1e180000 {
            return Self::FCVTZS_32S_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x1e190000 {
            return Self::FCVTZU_32S_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x1e420000 {
            return Self::SCVTF_D32_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x1e430000 {
            return Self::UCVTF_D32_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x1e580000 {
            return Self::FCVTZS_32D_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x1e590000 {
            return Self::FCVTZU_32D_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x1ec20000 {
            return Self::SCVTF_H32_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x1ec30000 {
            return Self::UCVTF_H32_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x1ed80000 {
            return Self::FCVTZS_32H_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x1ed90000 {
            return Self::FCVTZU_32H_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25004000 {
            return Self::AND_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25004000 {
            return Self::MOV_and_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25004010 {
            return Self::BIC_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25004200 {
            return Self::EOR_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25004200 {
            return Self::NOT_eor_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25004210 {
            return Self::MOV_sel_p_p_pp {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25004210 {
            return Self::SEL_p_p_pp {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x2500c000 {
            return Self::BRKPA_p_p_pp {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x2500c010 {
            return Self::BRKPB_p_p_pp {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fc000 == 0x2520c000 {
            return Self::ADD_z_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                sh: ((opcode & 0x00002000) >> 13) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fc000 == 0x2521c000 {
            return Self::SUB_z_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                sh: ((opcode & 0x00002000) >> 13) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fc000 == 0x2523c000 {
            return Self::SUBR_z_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                sh: ((opcode & 0x00002000) >> 13) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fc000 == 0x2524c000 {
            return Self::SQADD_z_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                sh: ((opcode & 0x00002000) >> 13) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fc000 == 0x2525c000 {
            return Self::UQADD_z_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                sh: ((opcode & 0x00002000) >> 13) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fc000 == 0x2526c000 {
            return Self::SQSUB_z_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                sh: ((opcode & 0x00002000) >> 13) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fc000 == 0x2527c000 {
            return Self::UQSUB_z_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                sh: ((opcode & 0x00002000) >> 13) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fc000 == 0x2538c000 {
            return Self::DUP_z_i {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                sh: ((opcode & 0x00002000) >> 13) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3fc000 == 0x2538c000 {
            return Self::MOV_dup_z_i {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                sh: ((opcode & 0x00002000) >> 13) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25404000 {
            return Self::ANDS_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25404000 {
            return Self::MOVS_ands_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25404010 {
            return Self::BICS_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25404200 {
            return Self::EORS_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25404200 {
            return Self::NOTS_eors_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x2540c000 {
            return Self::BRKPAS_p_p_pp {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x2540c010 {
            return Self::BRKPBS_p_p_pp {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25804000 {
            return Self::MOV_orr_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25804000 {
            return Self::ORR_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25804010 {
            return Self::ORN_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25804200 {
            return Self::NOR_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25804210 {
            return Self::NAND_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25c04000 {
            return Self::MOVS_orrs_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25c04000 {
            return Self::ORRS_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25c04010 {
            return Self::ORNS_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25c04200 {
            return Self::NORS_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0c210 == 0x25c04210 {
            return Self::NANDS_p_p_pp_z {
                Pm: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Pn: ((opcode & 0x000001e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0001f == 0x2b20001f {
            return Self::CMN_ADDS_32S_addsub_ext {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                imm3: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2e201c00 {
            return Self::EOR_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2e20cc00 {
            return Self::FMLAL2_asimdsame_F {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2e400400 {
            return Self::FMAXNMP_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2e401400 {
            return Self::FADDP_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2e401c00 {
            return Self::FMUL_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2e402400 {
            return Self::FCMGE_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2e402c00 {
            return Self::FACGE_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2e403400 {
            return Self::FMAXP_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2e403c00 {
            return Self::FDIV_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2e40fc00 {
            return Self::BFDOT_asimdsame2_D {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2e601c00 {
            return Self::BSL_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2ea01c00 {
            return Self::BIT_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2ea0cc00 {
            return Self::FMLSL2_asimdsame_F {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2ec00400 {
            return Self::FMINNMP_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2ec01400 {
            return Self::FABD_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2ec02400 {
            return Self::FCMGT_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2ec02c00 {
            return Self::FACGT_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2ec03400 {
            return Self::FMINP_asimdsamefp16_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2ec0fc00 {
            return Self::BFMLAL_asimdsame2_F {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0fc00 == 0x2ee01c00 {
            return Self::BIF_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbff89c00 == 0x2f000400 {
            return Self::MVNI_asimdimm_L_sl {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                a: ((opcode & 0x00040000) >> 18) as u8,
                b: ((opcode & 0x00020000) >> 17) as u8,
                c: ((opcode & 0x00010000) >> 16) as u8,
                cmode: ((opcode & 0x00006000) >> 13) as u8,
                d: ((opcode & 0x00000200) >> 9) as u8,
                e: ((opcode & 0x00000100) >> 8) as u8,
                f: ((opcode & 0x00000080) >> 7) as u8,
                g: ((opcode & 0x00000040) >> 6) as u8,
                h: ((opcode & 0x00000020) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbff89c00 == 0x2f001400 {
            return Self::BIC_asimdimm_L_sl {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                a: ((opcode & 0x00040000) >> 18) as u8,
                b: ((opcode & 0x00020000) >> 17) as u8,
                c: ((opcode & 0x00010000) >> 16) as u8,
                cmode: ((opcode & 0x00006000) >> 13) as u8,
                d: ((opcode & 0x00000200) >> 9) as u8,
                e: ((opcode & 0x00000100) >> 8) as u8,
                f: ((opcode & 0x00000080) >> 7) as u8,
                g: ((opcode & 0x00000040) >> 6) as u8,
                h: ((opcode & 0x00000020) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0ec00 == 0x38206800 {
            return Self::STRB_32BL_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0ec00 == 0x38606800 {
            return Self::LDRB_32BL_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0ec00 == 0x38a06800 {
            return Self::LDRSB_64BL_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0ec00 == 0x38e06800 {
            return Self::LDRSB_32BL_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0ec00 == 0x3c206800 {
            return Self::STR_BL_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0ec00 == 0x3c606800 {
            return Self::LDR_BL_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0fc00 == 0x53007c00 {
            return Self::LSR_UBFM_32M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0fc00 == 0x5e20dc00 {
            return Self::FMULX_asisdsame_only {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0fc00 == 0x5e20e400 {
            return Self::FCMEQ_asisdsame_only {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0fc00 == 0x5e20fc00 {
            return Self::FRECPS_asisdsame_only {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0fc00 == 0x5ea0fc00 {
            return Self::FRSQRTS_asisdsame_only {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff3ee000 == 0x64008000 {
            return Self::FCADD_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                rot: ((opcode & 0x00010000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0fc00 == 0x64200000 {
            return Self::FMLA_z_zzzi_h {
                i3h: ((opcode & 0x00400000) >> 22) as u8,
                i3l: ((opcode & 0x00180000) >> 19) as u8,
                Zm: ((opcode & 0x00070000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0fc00 == 0x64200400 {
            return Self::FMLS_z_zzzi_h {
                i3h: ((opcode & 0x00400000) >> 22) as u8,
                i3l: ((opcode & 0x00180000) >> 19) as u8,
                Zm: ((opcode & 0x00070000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0fc00 == 0x64202000 {
            return Self::FMUL_z_zzi_h {
                i3h: ((opcode & 0x00400000) >> 22) as u8,
                i3l: ((opcode & 0x00180000) >> 19) as u8,
                Zm: ((opcode & 0x00070000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0f400 == 0x64e04000 {
            return Self::BFMLALB_z_zzzi {
                i3h: ((opcode & 0x00180000) >> 19) as u8,
                Zm: ((opcode & 0x00070000) >> 16) as u8,
                i3l: ((opcode & 0x00000800) >> 11) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0f400 == 0x64e04400 {
            return Self::BFMLALT_z_zzzi {
                i3h: ((opcode & 0x00180000) >> 19) as u8,
                Zm: ((opcode & 0x00070000) >> 16) as u8,
                i3l: ((opcode & 0x00000800) >> 11) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0001f == 0x6b20001f {
            return Self::CMP_SUBS_32S_addsub_ext {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                imm3: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffa0fc00 == 0x7e20e400 {
            return Self::FCMGE_asisdsame_only {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0fc00 == 0x7e20ec00 {
            return Self::FACGE_asisdsame_only {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0fc00 == 0x7ea0d400 {
            return Self::FABD_asisdsame_only {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0fc00 == 0x7ea0e400 {
            return Self::FCMGT_asisdsame_only {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0fc00 == 0x7ea0ec00 {
            return Self::FACGT_asisdsame_only {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0fc00 == 0x9340fc00 {
            return Self::ASR_SBFM_64M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x9e020000 {
            return Self::SCVTF_S64_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x9e030000 {
            return Self::UCVTF_S64_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x9e180000 {
            return Self::FCVTZS_64S_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x9e190000 {
            return Self::FCVTZU_64S_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x9e420000 {
            return Self::SCVTF_D64_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x9e430000 {
            return Self::UCVTF_D64_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x9e580000 {
            return Self::FCVTZS_64D_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x9e590000 {
            return Self::FCVTZU_64D_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x9ec20000 {
            return Self::SCVTF_H64_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x9ec30000 {
            return Self::UCVTF_H64_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x9ed80000 {
            return Self::FCVTZS_64H_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffff0000 == 0x9ed90000 {
            return Self::FCVTZU_64H_float2fix {
                scale: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0001f == 0xab20001f {
            return Self::CMN_ADDS_64S_addsub_ext {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                imm3: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffc0fc00 == 0xd340fc00 {
            return Self::LSR_UBFM_64M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0001f == 0xd4000001 {
            return Self::SVC_EX_exception {
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
            };
        }
        if opcode & 0xffe0001f == 0xd4000002 {
            return Self::HVC_EX_exception {
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
            };
        }
        if opcode & 0xffe0001f == 0xd4000003 {
            return Self::SMC_EX_exception {
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
            };
        }
        if opcode & 0xffe0001f == 0xd4200000 {
            return Self::BRK_EX_exception {
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
            };
        }
        if opcode & 0xffe0001f == 0xd4400000 {
            return Self::HLT_EX_exception {
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
            };
        }
        if opcode & 0xffe0001f == 0xd4a00001 {
            return Self::DCPS1_DC_exception {
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
            };
        }
        if opcode & 0xffe0001f == 0xd4a00002 {
            return Self::DCPS2_DC_exception {
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
            };
        }
        if opcode & 0xffe0001f == 0xd4a00003 {
            return Self::DCPS3_DC_exception {
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
            };
        }
        if opcode & 0xffe0001f == 0xeb20001f {
            return Self::CMP_SUBS_64S_addsub_ext {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                imm3: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x5f000400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SSHR_asisdshf_R {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x5f001400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SSRA_asisdshf_R {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x5f002400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SRSHR_asisdshf_R {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x5f003400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SRSRA_asisdshf_R {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x5f005400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SHL_asisdshf_R {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x5f007400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SQSHL_asisdshf_R {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x5f009400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SQSHRN_asisdshf_N {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x5f009c00 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SQRSHRN_asisdshf_N {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x5f00e400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SCVTF_asisdshf_C {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x5f00fc00 && (opcode & 0x00780000 != 0x00000000) {
            return Self::FCVTZS_asisdshf_C {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x7f000400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::USHR_asisdshf_R {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x7f001400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::USRA_asisdshf_R {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x7f002400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::URSHR_asisdshf_R {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x7f003400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::URSRA_asisdshf_R {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x7f004400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SRI_asisdshf_R {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x7f005400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SLI_asisdshf_R {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x7f006400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SQSHLU_asisdshf_R {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x7f007400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::UQSHL_asisdshf_R {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x7f008400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SQSHRUN_asisdshf_N {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x7f008c00 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SQRSHRUN_asisdshf_N {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x7f009400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::UQSHRN_asisdshf_N {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x7f009c00 && (opcode & 0x00780000 != 0x00000000) {
            return Self::UQRSHRN_asisdshf_N {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x7f00e400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::UCVTF_asisdshf_C {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80fc00 == 0x7f00fc00 && (opcode & 0x00780000 != 0x00000000) {
            return Self::FCVTZU_asisdshf_C {
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x04200000 {
            return Self::ADD_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x04200400 {
            return Self::SUB_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x04201000 {
            return Self::SQADD_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x04201400 {
            return Self::UQADD_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x04201800 {
            return Self::SQSUB_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x04201c00 {
            return Self::UQSUB_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x04204000 {
            return Self::INDEX_z_ii {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm5b: ((opcode & 0x001f0000) >> 16) as u8,
                imm5: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x04204400 {
            return Self::INDEX_z_ri {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x04204800 {
            return Self::INDEX_z_ir {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm5: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x04204c00 {
            return Self::INDEX_z_rr {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x04208000 {
            return Self::ASR_z_zw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x04208400 {
            return Self::LSR_z_zw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x04208c00 {
            return Self::LSL_z_zw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x04209000 {
            return Self::ASR_z_zi {
                tszh: ((opcode & 0x00c00000) >> 22) as u8,
                tszl: ((opcode & 0x00180000) >> 19) as u8,
                imm3: ((opcode & 0x00070000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x04209400 {
            return Self::LSR_z_zi {
                tszh: ((opcode & 0x00c00000) >> 22) as u8,
                tszl: ((opcode & 0x00180000) >> 19) as u8,
                imm3: ((opcode & 0x00070000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x04209c00 {
            return Self::LSL_z_zi {
                tszh: ((opcode & 0x00c00000) >> 22) as u8,
                tszl: ((opcode & 0x00180000) >> 19) as u8,
                imm3: ((opcode & 0x00070000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0f000 == 0x0420a000 {
            return Self::ADR_z_az_d_s32_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                msz: ((opcode & 0x00000c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x0420b000 {
            return Self::FTSSEL_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0f000 == 0x0460a000 {
            return Self::ADR_z_az_d_u32_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                msz: ((opcode & 0x00000c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x05202000 {
            return Self::DUP_z_zi {
                imm2: ((opcode & 0x00c00000) >> 22) as u8,
                tsz: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x05202000 {
            return Self::MOV_dup_z_zi {
                imm2: ((opcode & 0x00c00000) >> 22) as u8,
                tsz: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x05203000 {
            return Self::TBL_z_zz_1 {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x05206000 {
            return Self::ZIP1_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x05206400 {
            return Self::ZIP2_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x05206800 {
            return Self::UZP1_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x05206c00 {
            return Self::UZP2_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x05207000 {
            return Self::TRN1_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x05207400 {
            return Self::TRN2_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0ec00 == 0x0d808000 {
            return Self::ST1_asisdlsop_SX1_r1s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0ec00 == 0x0d80a000 {
            return Self::ST3_asisdlsop_SX3_r3s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0ec00 == 0x0da08000 {
            return Self::ST2_asisdlsop_SX2_r2s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0ec00 == 0x0da0a000 {
            return Self::ST4_asisdlsop_SX4_r4s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0ec00 == 0x0dc08000 {
            return Self::LD1_asisdlsop_SX1_r1s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0ec00 == 0x0dc0a000 {
            return Self::LD3_asisdlsop_SX3_r3s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0ec00 == 0x0de08000 {
            return Self::LD2_asisdlsop_SX2_r2s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0ec00 == 0x0de0a000 {
            return Self::LD4_asisdlsop_SX4_r4s {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x0e20c400 {
            return Self::FMAXNM_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x0e20cc00 {
            return Self::FMLA_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x0e20d400 {
            return Self::FADD_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x0e20dc00 {
            return Self::FMULX_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x0e20e400 {
            return Self::FCMEQ_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x0e20f400 {
            return Self::FMAX_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x0e20fc00 {
            return Self::FRECPS_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x0ea0c400 {
            return Self::FMINNM_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x0ea0cc00 {
            return Self::FMLS_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x0ea0d400 {
            return Self::FSUB_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x0ea0f400 {
            return Self::FMIN_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x0ea0fc00 {
            return Self::FRSQRTS_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20ec10 == 0x25200400 {
            return Self::WHILELT_p_p_rr {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                sf: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20ec10 == 0x25200410 {
            return Self::WHILELE_p_p_rr {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                sf: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20ec10 == 0x25200c00 {
            return Self::WHILELO_p_p_rr {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                sf: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20ec10 == 0x25200c10 {
            return Self::WHILELS_p_p_rr {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                sf: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x2e20c400 {
            return Self::FMAXNMP_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x2e20d400 {
            return Self::FADDP_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x2e20dc00 {
            return Self::FMUL_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x2e20e400 {
            return Self::FCMGE_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x2e20ec00 {
            return Self::FACGE_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x2e20f400 {
            return Self::FMAXP_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x2e20fc00 {
            return Self::FDIV_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x2ea0c400 {
            return Self::FMINNMP_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x2ea0d400 {
            return Self::FABD_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x2ea0e400 {
            return Self::FCMGT_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x2ea0ec00 {
            return Self::FACGT_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfa0fc00 == 0x2ea0f400 {
            return Self::FMINP_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc003e0 == 0x320003e0 {
            return Self::MOV_ORR_32_log_imm {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc003e0 == 0x330003e0 {
            return Self::BFC_BFM_32M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x44000000 {
            return Self::SDOT_z_zzz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x44000400 {
            return Self::UDOT_z_zzz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x5e200c00 {
            return Self::SQADD_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x5e202c00 {
            return Self::SQSUB_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x5e203400 {
            return Self::CMGT_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x5e203c00 {
            return Self::CMGE_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x5e204400 {
            return Self::SSHL_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x5e204c00 {
            return Self::SQSHL_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x5e205400 {
            return Self::SRSHL_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x5e205c00 {
            return Self::SQRSHL_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x5e208400 {
            return Self::ADD_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x5e208c00 {
            return Self::CMTST_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x5e209000 {
            return Self::SQDMLAL_asisddiff_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x5e20b000 {
            return Self::SQDMLSL_asisddiff_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x5e20b400 {
            return Self::SQDMULH_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x5e20d000 {
            return Self::SQDMULL_asisddiff_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0f400 == 0x5f001000 {
            return Self::FMLA_asisdelem_RH_H {
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0f400 == 0x5f005000 {
            return Self::FMLS_asisdelem_RH_H {
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0f400 == 0x5f009000 {
            return Self::FMUL_asisdelem_RH_H {
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0f000 == 0x64a01000 {
            return Self::FCMLA_z_zzzi_h {
                i2: ((opcode & 0x00180000) >> 19) as u8,
                Zm: ((opcode & 0x00070000) >> 16) as u8,
                rot: ((opcode & 0x00000c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0f000 == 0x64e01000 {
            return Self::FCMLA_z_zzzi_s {
                i1: ((opcode & 0x00100000) >> 20) as u8,
                Zm: ((opcode & 0x000f0000) >> 16) as u8,
                rot: ((opcode & 0x00000c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x65000000 {
            return Self::FADD_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x65000400 {
            return Self::FSUB_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x65000800 {
            return Self::FMUL_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x65000c00 {
            return Self::FTSMUL_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x65001800 {
            return Self::FRECPS_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x65001c00 {
            return Self::FRSQRTS_z_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0001f == 0x7200001f {
            return Self::TST_ANDS_32S_log_imm {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x7e008400 {
            return Self::SQRDMLAH_asisdsame2_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x7e008c00 {
            return Self::SQRDMLSH_asisdsame2_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x7e200c00 {
            return Self::UQADD_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x7e202c00 {
            return Self::UQSUB_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x7e203400 {
            return Self::CMHI_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x7e203c00 {
            return Self::CMHS_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x7e204400 {
            return Self::USHL_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x7e204c00 {
            return Self::UQSHL_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x7e205400 {
            return Self::URSHL_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x7e205c00 {
            return Self::UQRSHL_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x7e208400 {
            return Self::SUB_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x7e208c00 {
            return Self::CMEQ_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20fc00 == 0x7e20b400 {
            return Self::SQRDMULH_asisdsame_only {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0f400 == 0x7f009000 {
            return Self::FMULX_asisdelem_RH_H {
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e010 == 0x8400c000 {
            return Self::PRFB_i_p_br_s {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e010 == 0x8400e000 {
            return Self::PRFB_i_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e010 == 0x8480c000 {
            return Self::PRFH_i_p_br_s {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e010 == 0x8480e000 {
            return Self::PRFH_i_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e010 == 0x8500c000 {
            return Self::PRFW_i_p_br_s {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e010 == 0x8500e000 {
            return Self::PRFW_i_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e010 == 0x8580c000 {
            return Self::PRFD_i_p_br_s {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e010 == 0x8580e000 {
            return Self::PRFD_i_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa4002000 {
            return Self::LD1RQB_z_p_bi_u8 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa400a000 {
            return Self::LD1B_z_p_bi_u8 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa400e000 {
            return Self::LDNT1B_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa410a000 {
            return Self::LDNF1B_z_p_bi_u8 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa4202000 {
            return Self::LD1ROB_z_p_bi_u8 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa420a000 {
            return Self::LD1B_z_p_bi_u16 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa420e000 {
            return Self::LD2B_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa430a000 {
            return Self::LDNF1B_z_p_bi_u16 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa440a000 {
            return Self::LD1B_z_p_bi_u32 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa440e000 {
            return Self::LD3B_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa450a000 {
            return Self::LDNF1B_z_p_bi_u32 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa460a000 {
            return Self::LD1B_z_p_bi_u64 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa460e000 {
            return Self::LD4B_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa470a000 {
            return Self::LDNF1B_z_p_bi_u64 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa4802000 {
            return Self::LD1RQH_z_p_bi_u16 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa480a000 {
            return Self::LD1SW_z_p_bi_s64 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa480e000 {
            return Self::LDNT1H_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa490a000 {
            return Self::LDNF1SW_z_p_bi_s64 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa4a02000 {
            return Self::LD1ROH_z_p_bi_u16 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa4a0a000 {
            return Self::LD1H_z_p_bi_u16 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa4a0e000 {
            return Self::LD2H_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa4b0a000 {
            return Self::LDNF1H_z_p_bi_u16 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa4c0a000 {
            return Self::LD1H_z_p_bi_u32 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa4c0e000 {
            return Self::LD3H_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa4d0a000 {
            return Self::LDNF1H_z_p_bi_u32 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa4e0a000 {
            return Self::LD1H_z_p_bi_u64 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa4e0e000 {
            return Self::LD4H_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa4f0a000 {
            return Self::LDNF1H_z_p_bi_u64 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa5002000 {
            return Self::LD1RQW_z_p_bi_u32 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa500a000 {
            return Self::LD1SH_z_p_bi_s64 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa500e000 {
            return Self::LDNT1W_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa510a000 {
            return Self::LDNF1SH_z_p_bi_s64 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa5202000 {
            return Self::LD1ROW_z_p_bi_u32 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa520a000 {
            return Self::LD1SH_z_p_bi_s32 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa520e000 {
            return Self::LD2W_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa530a000 {
            return Self::LDNF1SH_z_p_bi_s32 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa540a000 {
            return Self::LD1W_z_p_bi_u32 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa540e000 {
            return Self::LD3W_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa550a000 {
            return Self::LDNF1W_z_p_bi_u32 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa560a000 {
            return Self::LD1W_z_p_bi_u64 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa560e000 {
            return Self::LD4W_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa570a000 {
            return Self::LDNF1W_z_p_bi_u64 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa5802000 {
            return Self::LD1RQD_z_p_bi_u64 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa580a000 {
            return Self::LD1SB_z_p_bi_s64 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa580e000 {
            return Self::LDNT1D_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa590a000 {
            return Self::LDNF1SB_z_p_bi_s64 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa5a02000 {
            return Self::LD1ROD_z_p_bi_u64 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa5a0a000 {
            return Self::LD1SB_z_p_bi_s32 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa5a0e000 {
            return Self::LD2D_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa5b0a000 {
            return Self::LDNF1SB_z_p_bi_s32 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa5c0a000 {
            return Self::LD1SB_z_p_bi_s16 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa5c0e000 {
            return Self::LD3D_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa5d0a000 {
            return Self::LDNF1SB_z_p_bi_s16 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa5e0a000 {
            return Self::LD1D_z_p_bi_u64 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa5e0e000 {
            return Self::LD4D_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xa5f0a000 {
            return Self::LDNF1D_z_p_bi_u64 {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc003e0 == 0xb34003e0 {
            return Self::BFC_BFM_64M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e010 == 0xc400e000 {
            return Self::PRFB_i_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e010 == 0xc4608000 {
            return Self::PRFB_i_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e010 == 0xc460a000 {
            return Self::PRFH_i_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e010 == 0xc460c000 {
            return Self::PRFW_i_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e010 == 0xc460e000 {
            return Self::PRFD_i_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e010 == 0xc480e000 {
            return Self::PRFH_i_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e010 == 0xc500e000 {
            return Self::PRFW_i_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e010 == 0xc580e000 {
            return Self::PRFD_i_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0cc00 == 0xce408000 {
            return Self::SM3TT1A_VVV4_crypto3_imm2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm2: ((opcode & 0x00003000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0cc00 == 0xce408400 {
            return Self::SM3TT1B_VVV4_crypto3_imm2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm2: ((opcode & 0x00003000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0cc00 == 0xce408800 {
            return Self::SM3TT2A_VVV4_crypto3_imm2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm2: ((opcode & 0x00003000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0cc00 == 0xce408c00 {
            return Self::SM3TT2B_VVV_crypto3_imm2 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm2: ((opcode & 0x00003000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xe410e000 {
            return Self::STNT1B_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xe430e000 {
            return Self::ST2B_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xe450e000 {
            return Self::ST3B_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xe470e000 {
            return Self::ST4B_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xe490e000 {
            return Self::STNT1H_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xe4b0e000 {
            return Self::ST2H_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xe4d0e000 {
            return Self::ST3H_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xe4f0e000 {
            return Self::ST4H_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xe510e000 {
            return Self::STNT1W_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xe530e000 {
            return Self::ST2W_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xe550e000 {
            return Self::ST3W_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xe570e000 {
            return Self::ST4W_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xe590e000 {
            return Self::STNT1D_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xe5b0e000 {
            return Self::ST2D_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xe5d0e000 {
            return Self::ST3D_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff0e000 == 0xe5f0e000 {
            return Self::ST4D_z_p_bi_contiguous {
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff2003e0 == 0x6b0003e0 && (opcode & 0x0000001f != 0x0000001f) {
            return Self::NEGS_SUBS_32_addsub_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff2003e0 == 0xeb0003e0 && (opcode & 0x0000001f != 0x0000001f) {
            return Self::NEGS_SUBS_64_addsub_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x0f000400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SSHR_asimdshf_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x0f001400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SSRA_asimdshf_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x0f002400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SRSHR_asimdshf_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x0f003400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SRSRA_asimdshf_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x0f005400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SHL_asimdshf_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x0f007400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SQSHL_asimdshf_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x0f008400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SHRN_asimdshf_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x0f008c00 && (opcode & 0x00780000 != 0x00000000) {
            return Self::RSHRN_asimdshf_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x0f009400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SQSHRN_asimdshf_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x0f009c00 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SQRSHRN_asimdshf_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x0f00a400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SSHLL_asimdshf_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x0f00e400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SCVTF_asimdshf_C {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x0f00fc00 && (opcode & 0x00780000 != 0x00000000) {
            return Self::FCVTZS_asimdshf_C {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x2f000400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::USHR_asimdshf_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x2f001400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::USRA_asimdshf_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x2f002400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::URSHR_asimdshf_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x2f003400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::URSRA_asimdshf_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x2f004400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SRI_asimdshf_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x2f005400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SLI_asimdshf_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x2f006400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SQSHLU_asimdshf_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x2f007400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::UQSHL_asimdshf_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x2f008400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SQSHRUN_asimdshf_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x2f008c00 && (opcode & 0x00780000 != 0x00000000) {
            return Self::SQRSHRUN_asimdshf_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x2f009400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::UQSHRN_asimdshf_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x2f009c00 && (opcode & 0x00780000 != 0x00000000) {
            return Self::UQRSHRN_asimdshf_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x2f00a400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::USHLL_asimdshf_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x2f00e400 && (opcode & 0x00780000 != 0x00000000) {
            return Self::UCVTF_asimdshf_C {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80fc00 == 0x2f00fc00 && (opcode & 0x00780000 != 0x00000000) {
            return Self::FCVTZU_asimdshf_C {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                immh: ((opcode & 0x00780000) >> 19) as u8,
                immb: ((opcode & 0x00070000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0f000 == 0x04a0a000 {
            return Self::ADR_z_az_sd_same_scaled {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                msz: ((opcode & 0x00000c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffc0000 == 0x05000000 {
            return Self::ORN_orr_z_zi {
                imm13: ((opcode & 0x0003ffe0) >> 5) as u16,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffc0000 == 0x05000000 {
            return Self::ORR_z_zi {
                imm13: ((opcode & 0x0003ffe0) >> 5) as u16,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0x05200000 {
            return Self::EXT_z_zi_des {
                imm8h: ((opcode & 0x001f0000) >> 16) as u8,
                imm8l: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffc0000 == 0x05400000 {
            return Self::EON_eor_z_zi {
                imm13: ((opcode & 0x0003ffe0) >> 5) as u16,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffc0000 == 0x05400000 {
            return Self::EOR_z_zi {
                imm13: ((opcode & 0x0003ffe0) >> 5) as u16,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffc0000 == 0x05800000 {
            return Self::AND_z_zi {
                imm13: ((opcode & 0x0003ffe0) >> 5) as u16,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffc0000 == 0x05800000 {
            return Self::BIC_and_z_zi {
                imm13: ((opcode & 0x0003ffe0) >> 5) as u16,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffc0000 == 0x05c00000 {
            return Self::DUPM_z_i {
                imm13: ((opcode & 0x0003ffe0) >> 5) as u16,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfffc0000 == 0x05c00000 {
            return Self::MOV_dupm_z_i {
                imm13: ((opcode & 0x0003ffe0) >> 5) as u16,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0c800000 {
            return Self::ST4_asisdlsep_R4_r {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0c802000 {
            return Self::ST1_asisdlsep_R4_r4 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0c804000 {
            return Self::ST3_asisdlsep_R3_r {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0c806000 {
            return Self::ST1_asisdlsep_R3_r3 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0c807000 {
            return Self::ST1_asisdlsep_R1_r1 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0c808000 {
            return Self::ST2_asisdlsep_R2_r {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0c80a000 {
            return Self::ST1_asisdlsep_R2_r2 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0cc00000 {
            return Self::LD4_asisdlsep_R4_r {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0cc02000 {
            return Self::LD1_asisdlsep_R4_r4 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0cc04000 {
            return Self::LD3_asisdlsep_R3_r {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0cc06000 {
            return Self::LD1_asisdlsep_R3_r3 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0cc07000 {
            return Self::LD1_asisdlsep_R1_r1 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0cc08000 {
            return Self::LD2_asisdlsep_R2_r {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0cc0a000 {
            return Self::LD1_asisdlsep_R2_r2 {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0e400 == 0x0d804000 {
            return Self::ST1_asisdlsop_HX1_r1h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0e400 == 0x0d806000 {
            return Self::ST3_asisdlsop_HX3_r3h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0e400 == 0x0da04000 {
            return Self::ST2_asisdlsop_HX2_r2h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0e400 == 0x0da06000 {
            return Self::ST4_asisdlsop_HX4_r4h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0e400 == 0x0dc04000 {
            return Self::LD1_asisdlsop_HX1_r1h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0e400 == 0x0dc06000 {
            return Self::LD3_asisdlsop_HX3_r3h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0dc0c000 {
            return Self::LD1R_asisdlsop_RX1_r {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0dc0e000 {
            return Self::LD3R_asisdlsop_RX3_r {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0e400 == 0x0de04000 {
            return Self::LD2_asisdlsop_HX2_r2h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0e400 == 0x0de06000 {
            return Self::LD4_asisdlsop_HX4_r4h {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0de0c000 {
            return Self::LD2R_asisdlsop_RX2_r {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0f000 == 0x0de0e000 {
            return Self::LD4R_asisdlsop_RX4_r {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e001800 {
            return Self::UZP1_asimdperm_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e002800 {
            return Self::TRN1_asimdperm_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e003800 {
            return Self::ZIP1_asimdperm_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e005800 {
            return Self::UZP2_asimdperm_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e006800 {
            return Self::TRN2_asimdperm_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e007800 {
            return Self::ZIP2_asimdperm_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e009400 {
            return Self::SDOT_asimdsame2_D {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e200000 {
            return Self::SADDL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e200400 {
            return Self::SHADD_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e200c00 {
            return Self::SQADD_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e201000 {
            return Self::SADDW_asimddiff_W {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e201400 {
            return Self::SRHADD_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e202000 {
            return Self::SSUBL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e202400 {
            return Self::SHSUB_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e202c00 {
            return Self::SQSUB_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e203000 {
            return Self::SSUBW_asimddiff_W {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e203400 {
            return Self::CMGT_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e203c00 {
            return Self::CMGE_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e204000 {
            return Self::ADDHN_asimddiff_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e204400 {
            return Self::SSHL_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e204c00 {
            return Self::SQSHL_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e205000 {
            return Self::SABAL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e205400 {
            return Self::SRSHL_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e205c00 {
            return Self::SQRSHL_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e206000 {
            return Self::SUBHN_asimddiff_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e206400 {
            return Self::SMAX_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e206c00 {
            return Self::SMIN_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e207000 {
            return Self::SABDL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e207400 {
            return Self::SABD_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e207c00 {
            return Self::SABA_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e208000 {
            return Self::SMLAL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e208400 {
            return Self::ADD_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e208c00 {
            return Self::CMTST_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e209000 {
            return Self::SQDMLAL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e209400 {
            return Self::MLA_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e209c00 {
            return Self::MUL_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e20a000 {
            return Self::SMLSL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e20a400 {
            return Self::SMAXP_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e20ac00 {
            return Self::SMINP_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e20b000 {
            return Self::SQDMLSL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e20b400 {
            return Self::SQDMULH_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e20bc00 {
            return Self::ADDP_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e20c000 {
            return Self::SMULL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e20d000 {
            return Self::SQDMULL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x0e20e000 {
            return Self::PMULL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfc0f400 == 0x0f001000 {
            return Self::FMLA_asimdelem_RH_H {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfc0f400 == 0x0f005000 {
            return Self::FMLS_asimdelem_RH_H {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfc0f400 == 0x0f009000 {
            return Self::FMUL_asimdelem_RH_H {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfc0f400 == 0x0f00f000 {
            return Self::SUDOT_asimdelem_D {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfc0f400 == 0x0f40f000 {
            return Self::BFDOT_asimdelem_E {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfc0f400 == 0x0f800000 {
            return Self::FMLAL_asimdelem_LH {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfc0f400 == 0x0f804000 {
            return Self::FMLSL_asimdelem_LH {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfc0f400 == 0x0f80f000 {
            return Self::USDOT_asimdelem_D {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfc0f400 == 0x0fc0f000 {
            return Self::BFMLAL_asimdelem_F {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c10 == 0x1e200400 {
            return Self::FCCMP_S_floatccmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                nzcv: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c10 == 0x1e200410 {
            return Self::FCCMPE_S_floatccmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                nzcv: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c10 == 0x1e600400 {
            return Self::FCCMP_D_floatccmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                nzcv: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c10 == 0x1e600410 {
            return Self::FCCMPE_D_floatccmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                nzcv: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c10 == 0x1ee00400 {
            return Self::FCCMP_H_floatccmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                nzcv: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c10 == 0x1ee00410 {
            return Self::FCCMPE_H_floatccmp {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                nzcv: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff2003e0 == 0x2a2003e0 {
            return Self::MVN_ORN_32_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20001f == 0x2b00001f {
            return Self::CMN_ADDS_32_addsub_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e008400 {
            return Self::SQRDMLAH_asimdsame2_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e008c00 {
            return Self::SQRDMLSH_asimdsame2_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e009400 {
            return Self::UDOT_asimdsame2_D {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e200000 {
            return Self::UADDL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e200400 {
            return Self::UHADD_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e200c00 {
            return Self::UQADD_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e201000 {
            return Self::UADDW_asimddiff_W {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e201400 {
            return Self::URHADD_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e202000 {
            return Self::USUBL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e202400 {
            return Self::UHSUB_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e202c00 {
            return Self::UQSUB_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e203000 {
            return Self::USUBW_asimddiff_W {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e203400 {
            return Self::CMHI_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e203c00 {
            return Self::CMHS_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e204000 {
            return Self::RADDHN_asimddiff_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e204400 {
            return Self::USHL_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e204c00 {
            return Self::UQSHL_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e205000 {
            return Self::UABAL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e205400 {
            return Self::URSHL_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e205c00 {
            return Self::UQRSHL_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e206000 {
            return Self::RSUBHN_asimddiff_N {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e206400 {
            return Self::UMAX_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e206c00 {
            return Self::UMIN_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e207000 {
            return Self::UABDL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e207400 {
            return Self::UABD_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e207c00 {
            return Self::UABA_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e208000 {
            return Self::UMLAL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e208400 {
            return Self::SUB_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e208c00 {
            return Self::CMEQ_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e209400 {
            return Self::MLS_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e209c00 {
            return Self::PMUL_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e20a000 {
            return Self::UMLSL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e20a400 {
            return Self::UMAXP_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e20ac00 {
            return Self::UMINP_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e20b400 {
            return Self::SQRDMULH_asimdsame_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20fc00 == 0x2e20c000 {
            return Self::UMULL_asimddiff_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfc0f400 == 0x2f009000 {
            return Self::FMULX_asimdelem_RH_H {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfc0f400 == 0x2f808000 {
            return Self::FMLAL2_asimdelem_LH {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfc0f400 == 0x2f80c000 {
            return Self::FMLSL2_asimdelem_LH {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80001f == 0x3100001f {
            return Self::CMN_ADDS_32S_addsub_imm {
                sh: ((opcode & 0x00400000) >> 22) as u8,
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe00c10 == 0x3a400000 {
            return Self::CCMN_32_condcmp_reg {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                nzcv: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c10 == 0x3a400800 {
            return Self::CCMN_32_condcmp_imm {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                nzcv: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff2003e0 == 0x4b0003e0 {
            return Self::NEG_SUB_32_addsub_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80f400 == 0x5f801000 {
            return Self::FMLA_asisdelem_R_SD {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80f400 == 0x5f805000 {
            return Self::FMLS_asisdelem_R_SD {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80f400 == 0x5f809000 {
            return Self::FMUL_asisdelem_R_SD {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20001f == 0x6a00001f {
            return Self::TST_ANDS_32_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xff20001f == 0x6b00001f {
            return Self::CMP_SUBS_32_addsub_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xff80001f == 0x7100001f {
            return Self::CMP_SUBS_32S_addsub_imm {
                sh: ((opcode & 0x00400000) >> 22) as u8,
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe00c10 == 0x7a400000 {
            return Self::CCMP_32_condcmp_reg {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                nzcv: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c10 == 0x7a400800 {
            return Self::CCMP_32_condcmp_imm {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                nzcv: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff80f400 == 0x7f809000 {
            return Self::FMULX_asisdelem_R_SD {
                sz: ((opcode & 0x00400000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e010 == 0x84200000 {
            return Self::PRFB_i_p_bz_s_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e010 == 0x84202000 {
            return Self::PRFH_i_p_bz_s_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e010 == 0x84204000 {
            return Self::PRFW_i_p_bz_s_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e010 == 0x84206000 {
            return Self::PRFD_i_p_bz_s_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0x84208000 {
            return Self::LD1SB_z_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0x8420a000 {
            return Self::LDFF1SB_z_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0x8420c000 {
            return Self::LD1B_z_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0x8420e000 {
            return Self::LDFF1B_z_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0x84a08000 {
            return Self::LD1SH_z_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0x84a0a000 {
            return Self::LDFF1SH_z_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0x84a0c000 {
            return Self::LD1H_z_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0x84a0e000 {
            return Self::LDFF1H_z_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0x8520c000 {
            return Self::LD1W_z_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0x8520e000 {
            return Self::LDFF1W_z_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e010 == 0x85800000 {
            return Self::LDR_p_bi {
                imm9h: ((opcode & 0x003f0000) >> 16) as u8,
                imm9l: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Pt: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e010 == 0x85c00000 {
            return Self::PRFB_i_p_bi_s {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e010 == 0x85c02000 {
            return Self::PRFH_i_p_bi_s {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e010 == 0x85c04000 {
            return Self::PRFW_i_p_bi_s {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e010 == 0x85c06000 {
            return Self::PRFD_i_p_bi_s {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4000000 {
            return Self::LD1RQB_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4004000 {
            return Self::LD1B_z_p_br_u8 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4006000 {
            return Self::LDFF1B_z_p_br_u8 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa400c000 {
            return Self::LDNT1B_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4200000 {
            return Self::LD1ROB_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4204000 {
            return Self::LD1B_z_p_br_u16 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4206000 {
            return Self::LDFF1B_z_p_br_u16 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa420c000 {
            return Self::LD2B_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4404000 {
            return Self::LD1B_z_p_br_u32 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4406000 {
            return Self::LDFF1B_z_p_br_u32 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa440c000 {
            return Self::LD3B_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4604000 {
            return Self::LD1B_z_p_br_u64 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4606000 {
            return Self::LDFF1B_z_p_br_u64 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa460c000 {
            return Self::LD4B_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4800000 {
            return Self::LD1RQH_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4804000 {
            return Self::LD1SW_z_p_br_s64 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4806000 {
            return Self::LDFF1SW_z_p_br_s64 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa480c000 {
            return Self::LDNT1H_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4a00000 {
            return Self::LD1ROH_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4a04000 {
            return Self::LD1H_z_p_br_u16 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4a06000 {
            return Self::LDFF1H_z_p_br_u16 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4a0c000 {
            return Self::LD2H_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4c04000 {
            return Self::LD1H_z_p_br_u32 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4c06000 {
            return Self::LDFF1H_z_p_br_u32 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4c0c000 {
            return Self::LD3H_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4e04000 {
            return Self::LD1H_z_p_br_u64 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4e06000 {
            return Self::LDFF1H_z_p_br_u64 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa4e0c000 {
            return Self::LD4H_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5000000 {
            return Self::LD1RQW_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5004000 {
            return Self::LD1SH_z_p_br_s64 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5006000 {
            return Self::LDFF1SH_z_p_br_s64 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa500c000 {
            return Self::LDNT1W_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5200000 {
            return Self::LD1ROW_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5204000 {
            return Self::LD1SH_z_p_br_s32 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5206000 {
            return Self::LDFF1SH_z_p_br_s32 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa520c000 {
            return Self::LD2W_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5404000 {
            return Self::LD1W_z_p_br_u32 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5406000 {
            return Self::LDFF1W_z_p_br_u32 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa540c000 {
            return Self::LD3W_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5604000 {
            return Self::LD1W_z_p_br_u64 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5606000 {
            return Self::LDFF1W_z_p_br_u64 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa560c000 {
            return Self::LD4W_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5800000 {
            return Self::LD1RQD_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5804000 {
            return Self::LD1SB_z_p_br_s64 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5806000 {
            return Self::LDFF1SB_z_p_br_s64 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa580c000 {
            return Self::LDNT1D_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5a00000 {
            return Self::LD1ROD_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5a04000 {
            return Self::LD1SB_z_p_br_s32 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5a06000 {
            return Self::LDFF1SB_z_p_br_s32 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5a0c000 {
            return Self::LD2D_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5c04000 {
            return Self::LD1SB_z_p_br_s16 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5c06000 {
            return Self::LDFF1SB_z_p_br_s16 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5c0c000 {
            return Self::LD3D_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5e04000 {
            return Self::LD1D_z_p_br_u64 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5e06000 {
            return Self::LDFF1D_z_p_br_u64 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xa5e0c000 {
            return Self::LD4D_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff2003e0 == 0xaa2003e0 {
            return Self::MVN_ORN_64_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20001f == 0xab00001f {
            return Self::CMN_ADDS_64_addsub_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xff80001f == 0xb100001f {
            return Self::CMN_ADDS_64S_addsub_imm {
                sh: ((opcode & 0x00400000) >> 22) as u8,
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xff8003e0 == 0xb20003e0 {
            return Self::MOV_ORR_64_log_imm {
                N: ((opcode & 0x00400000) >> 22) as u8,
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c10 == 0xba400000 {
            return Self::CCMN_64_condcmp_reg {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                nzcv: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c10 == 0xba400800 {
            return Self::CCMN_64_condcmp_imm {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                nzcv: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e010 == 0xc4200000 {
            return Self::PRFB_i_p_bz_d_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e010 == 0xc4202000 {
            return Self::PRFH_i_p_bz_d_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e010 == 0xc4204000 {
            return Self::PRFW_i_p_bz_d_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e010 == 0xc4206000 {
            return Self::PRFD_i_p_bz_d_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                prfop: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc4208000 {
            return Self::LD1SB_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc420a000 {
            return Self::LDFF1SB_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc420c000 {
            return Self::LD1B_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc420e000 {
            return Self::LDFF1B_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc4408000 {
            return Self::LD1SB_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc440a000 {
            return Self::LDFF1SB_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc440c000 {
            return Self::LD1B_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc440e000 {
            return Self::LDFF1B_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc4a08000 {
            return Self::LD1SH_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc4a0a000 {
            return Self::LDFF1SH_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc4a0c000 {
            return Self::LD1H_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc4a0e000 {
            return Self::LDFF1H_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc4c08000 {
            return Self::LD1SH_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc4c0a000 {
            return Self::LDFF1SH_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc4c0c000 {
            return Self::LD1H_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc4c0e000 {
            return Self::LDFF1H_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc4e08000 {
            return Self::LD1SH_z_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc4e0a000 {
            return Self::LDFF1SH_z_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc4e0c000 {
            return Self::LD1H_z_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc4e0e000 {
            return Self::LDFF1H_z_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc5208000 {
            return Self::LD1SW_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc520a000 {
            return Self::LDFF1SW_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc520c000 {
            return Self::LD1W_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc520e000 {
            return Self::LDFF1W_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc5408000 {
            return Self::LD1SW_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc540a000 {
            return Self::LDFF1SW_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc540c000 {
            return Self::LD1W_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc540e000 {
            return Self::LDFF1W_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc5608000 {
            return Self::LD1SW_z_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc560a000 {
            return Self::LDFF1SW_z_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc560c000 {
            return Self::LD1W_z_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc560e000 {
            return Self::LDFF1W_z_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc5a0c000 {
            return Self::LD1D_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc5a0e000 {
            return Self::LDFF1D_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc5c0c000 {
            return Self::LD1D_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc5c0e000 {
            return Self::LDFF1D_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc5e0c000 {
            return Self::LD1D_z_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xc5e0e000 {
            return Self::LDFF1D_z_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff2003e0 == 0xcb0003e0 {
            return Self::NEG_SUB_64_addsub_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe4006000 {
            return Self::STNT1B_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe400a000 {
            return Self::ST1B_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe4206000 {
            return Self::ST2B_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe4406000 {
            return Self::ST3B_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe440a000 {
            return Self::ST1B_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe4606000 {
            return Self::ST4B_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe460a000 {
            return Self::ST1B_z_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe4806000 {
            return Self::STNT1H_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe480a000 {
            return Self::ST1H_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe4a06000 {
            return Self::ST2H_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe4a0a000 {
            return Self::ST1H_z_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe4c06000 {
            return Self::ST3H_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe4c0a000 {
            return Self::ST1H_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe4e06000 {
            return Self::ST4H_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe4e0a000 {
            return Self::ST1H_z_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe5006000 {
            return Self::STNT1W_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe500a000 {
            return Self::ST1W_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe5206000 {
            return Self::ST2W_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe520a000 {
            return Self::ST1W_z_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe5406000 {
            return Self::ST3W_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe540a000 {
            return Self::ST1W_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe5606000 {
            return Self::ST4W_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe560a000 {
            return Self::ST1W_z_p_ai_s {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e010 == 0xe5800000 {
            return Self::STR_p_bi {
                imm9h: ((opcode & 0x003f0000) >> 16) as u8,
                imm9l: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Pt: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe5806000 {
            return Self::STNT1D_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe580a000 {
            return Self::ST1D_z_p_bz_d_64_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe5a06000 {
            return Self::ST2D_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe5a0a000 {
            return Self::ST1D_z_p_bz_d_64_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe5c06000 {
            return Self::ST3D_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe5c0a000 {
            return Self::ST1D_z_p_ai_d {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe5e04000 {
            return Self::ST1D_z_p_br {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0e000 == 0xe5e06000 {
            return Self::ST4D_z_p_br_contiguous {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20001f == 0xea00001f {
            return Self::TST_ANDS_64_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xff20001f == 0xeb00001f {
            return Self::CMP_SUBS_64_addsub_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xff80001f == 0xf100001f {
            return Self::CMP_SUBS_64S_addsub_imm {
                sh: ((opcode & 0x00400000) >> 22) as u8,
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xff80001f == 0xf200001f {
            return Self::TST_ANDS_64S_log_imm {
                N: ((opcode & 0x00400000) >> 22) as u8,
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
            };
        }
        if opcode & 0xffe00c10 == 0xfa400000 {
            return Self::CCMP_64_condcmp_reg {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                nzcv: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c10 == 0xfa400800 {
            return Self::CCMP_64_condcmp_imm {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                nzcv: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x1a800400 && (opcode & 0x001f0000 != 0x001f0000) && (opcode & 0x0000e000 != 0x0000e000) && (opcode & 0x000003e0 != 0x000003e0) {
            return Self::CINC_CSINC_32_condsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x5a800000 && (opcode & 0x001f0000 != 0x001f0000) && (opcode & 0x0000e000 != 0x0000e000) && (opcode & 0x000003e0 != 0x000003e0) {
            return Self::CINV_CSINV_32_condsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x9a800400 && (opcode & 0x001f0000 != 0x001f0000) && (opcode & 0x0000e000 != 0x0000e000) && (opcode & 0x000003e0 != 0x000003e0) {
            return Self::CINC_CSINC_64_condsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xda800000 && (opcode & 0x001f0000 != 0x001f0000) && (opcode & 0x0000e000 != 0x0000e000) && (opcode & 0x000003e0 != 0x000003e0) {
            return Self::CINV_CSINV_64_condsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x5a800400 && (opcode & 0x0000e000 != 0x0000e000) {
            return Self::CNEG_CSNEG_32_condsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xda800400 && (opcode & 0x0000e000 != 0x0000e000) {
            return Self::CNEG_CSNEG_64_condsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff30e000 == 0x0510c000 {
            return Self::FCPY_z_p_i {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x000f0000) >> 16) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff30e000 == 0x0510c000 {
            return Self::FMOV_fcpy_z_p_i {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x000f0000) >> 16) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0e000 == 0x0d800000 {
            return Self::ST1_asisdlsop_BX1_r1b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0e000 == 0x0d802000 {
            return Self::ST3_asisdlsop_BX3_r3b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0e000 == 0x0da00000 {
            return Self::ST2_asisdlsop_BX2_r2b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0e000 == 0x0da02000 {
            return Self::ST4_asisdlsop_BX4_r4b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0e000 == 0x0dc00000 {
            return Self::LD1_asisdlsop_BX1_r1b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0e000 == 0x0dc02000 {
            return Self::LD3_asisdlsop_BX3_r3b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0e000 == 0x0de00000 {
            return Self::LD2_asisdlsop_BX2_r2b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe0e000 == 0x0de02000 {
            return Self::LD4_asisdlsop_BX4_r4b {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                size: ((opcode & 0x00000c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80f400 == 0x0f801000 {
            return Self::FMLA_asimdelem_R_SD {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80f400 == 0x0f805000 {
            return Self::FMLS_asimdelem_R_SD {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80f400 == 0x0f809000 {
            return Self::FMUL_asimdelem_R_SD {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x19000000 {
            return Self::STLURB_32_ldapstl_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x19400000 {
            return Self::LDAPURB_32_ldapstl_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x19800000 {
            return Self::LDAPURSB_64_ldapstl_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x19c00000 {
            return Self::LDAPURSB_32_ldapstl_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x1a800000 {
            return Self::CSEL_32_condsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x1a800400 {
            return Self::CSINC_32_condsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x1e200c00 {
            return Self::FCSEL_S_floatsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x1e600c00 {
            return Self::FCSEL_D_floatsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x1ee00c00 {
            return Self::FCSEL_H_floatsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x24000000 {
            return Self::CMPHS_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x24000000 {
            return Self::CMPLS_cmphs_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x24000010 {
            return Self::CMPHI_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x24000010 {
            return Self::CMPLO_cmphi_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x24002000 {
            return Self::CMPEQ_p_p_zw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x24002010 {
            return Self::CMPNE_p_p_zw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x24004000 {
            return Self::CMPGE_p_p_zw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x24004010 {
            return Self::CMPGT_p_p_zw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x24006000 {
            return Self::CMPLT_p_p_zw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x24006010 {
            return Self::CMPLE_p_p_zw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x24008000 {
            return Self::CMPGE_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x24008000 {
            return Self::CMPLE_cmpge_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x24008010 {
            return Self::CMPGT_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x24008010 {
            return Self::CMPLT_cmpgt_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x2400a000 {
            return Self::CMPEQ_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x2400a010 {
            return Self::CMPNE_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x2400c000 {
            return Self::CMPHS_p_p_zw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x2400c010 {
            return Self::CMPHI_p_p_zw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x2400e000 {
            return Self::CMPLO_p_p_zw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x2400e010 {
            return Self::CMPLS_p_p_zw {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x25000000 {
            return Self::CMPGE_p_p_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x25000010 {
            return Self::CMPGT_p_p_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x25002000 {
            return Self::CMPLT_p_p_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x25002010 {
            return Self::CMPLE_p_p_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x25008000 {
            return Self::CMPEQ_p_p_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x25008010 {
            return Self::CMPNE_p_p_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20ec00 == 0x2e00e400 {
            return Self::FCADD_asimdsame2_C {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                rot: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf80f400 == 0x2f809000 {
            return Self::FMULX_asimdelem_R_SD {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                sz: ((opcode & 0x00400000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38000000 {
            return Self::STURB_32_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38000400 {
            return Self::STRB_32_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38000800 {
            return Self::STTRB_32_ldst_unpriv {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38000c00 {
            return Self::STRB_32_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38200800 {
            return Self::STRB_32B_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38400000 {
            return Self::LDURB_32_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38400400 {
            return Self::LDRB_32_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38400800 {
            return Self::LDTRB_32_ldst_unpriv {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38400c00 {
            return Self::LDRB_32_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38600800 {
            return Self::LDRB_32B_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38800000 {
            return Self::LDURSB_64_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38800400 {
            return Self::LDRSB_64_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38800800 {
            return Self::LDTRSB_64_ldst_unpriv {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38800c00 {
            return Self::LDRSB_64_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38a00800 {
            return Self::LDRSB_64B_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38c00000 {
            return Self::LDURSB_32_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38c00400 {
            return Self::LDRSB_32_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38c00800 {
            return Self::LDTRSB_32_ldst_unpriv {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38c00c00 {
            return Self::LDRSB_32_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x38e00800 {
            return Self::LDRSB_32B_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x3c000000 {
            return Self::STUR_B_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x3c000400 {
            return Self::STR_B_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x3c000c00 {
            return Self::STR_B_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x3c200800 {
            return Self::STR_B_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x3c400000 {
            return Self::LDUR_B_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x3c400400 {
            return Self::LDR_B_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x3c400c00 {
            return Self::LDR_B_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x3c600800 {
            return Self::LDR_B_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x3c800000 {
            return Self::STUR_Q_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x3c800400 {
            return Self::STR_Q_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x3c800c00 {
            return Self::STR_Q_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x3ca00800 {
            return Self::STR_Q_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x3cc00000 {
            return Self::LDUR_Q_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x3cc00400 {
            return Self::LDR_Q_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x3cc00c00 {
            return Self::LDR_Q_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x3ce00800 {
            return Self::LDR_Q_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x59000000 {
            return Self::STLURH_32_ldapstl_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x59400000 {
            return Self::LDAPURH_32_ldapstl_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x59800000 {
            return Self::LDAPURSH_64_ldapstl_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x59c00000 {
            return Self::LDAPURSH_32_ldapstl_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x5a800000 {
            return Self::CSINV_32_condsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x5a800400 {
            return Self::CSNEG_32_condsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff00f400 == 0x5f003000 {
            return Self::SQDMLAL_asisdelem_L {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff00f400 == 0x5f007000 {
            return Self::SQDMLSL_asisdelem_L {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff00f400 == 0x5f00b000 {
            return Self::SQDMULL_asisdelem_L {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff00f400 == 0x5f00c000 {
            return Self::SQDMULH_asisdelem_R {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff00f400 == 0x5f00d000 {
            return Self::SQRDMULH_asisdelem_R {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x65004000 {
            return Self::FCMGE_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x65004000 {
            return Self::FCMLE_fcmge_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x65004010 {
            return Self::FCMGT_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x65004010 {
            return Self::FCMLT_fcmgt_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x65006000 {
            return Self::FCMEQ_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x65006010 {
            return Self::FCMNE_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x6500c000 {
            return Self::FCMUO_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x6500c010 {
            return Self::FACGE_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x6500c010 {
            return Self::FACLE_facge_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x6500e010 {
            return Self::FACGT_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e010 == 0x6500e010 {
            return Self::FACLT_facgt_p_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08400 == 0x6e000400 {
            return Self::INS_asimdins_IV_v {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                imm4: ((opcode & 0x00007800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08400 == 0x6e000400 {
            return Self::MOV_INS_asimdins_IV_v {
                imm5: ((opcode & 0x001f0000) >> 16) as u8,
                imm4: ((opcode & 0x00007800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78000000 {
            return Self::STURH_32_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78000400 {
            return Self::STRH_32_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78000800 {
            return Self::STTRH_32_ldst_unpriv {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78000c00 {
            return Self::STRH_32_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78200800 {
            return Self::STRH_32_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78400000 {
            return Self::LDURH_32_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78400400 {
            return Self::LDRH_32_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78400800 {
            return Self::LDTRH_32_ldst_unpriv {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78400c00 {
            return Self::LDRH_32_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78600800 {
            return Self::LDRH_32_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78800000 {
            return Self::LDURSH_64_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78800400 {
            return Self::LDRSH_64_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78800800 {
            return Self::LDTRSH_64_ldst_unpriv {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78800c00 {
            return Self::LDRSH_64_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78a00800 {
            return Self::LDRSH_64_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78c00000 {
            return Self::LDURSH_32_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78c00400 {
            return Self::LDRSH_32_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78c00800 {
            return Self::LDTRSH_32_ldst_unpriv {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78c00c00 {
            return Self::LDRSH_32_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x78e00800 {
            return Self::LDRSH_32_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x7c000000 {
            return Self::STUR_H_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x7c000400 {
            return Self::STR_H_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x7c000c00 {
            return Self::STR_H_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x7c200800 {
            return Self::STR_H_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x7c400000 {
            return Self::LDUR_H_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x7c400400 {
            return Self::LDR_H_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x7c400c00 {
            return Self::LDR_H_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x7c600800 {
            return Self::LDR_H_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff00f400 == 0x7f00d000 {
            return Self::SQRDMLAH_asisdelem_R {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff00f400 == 0x7f00f000 {
            return Self::SQRDMLSH_asisdelem_R {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0x84000000 {
            return Self::LD1SB_z_p_bz_s_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0x84002000 {
            return Self::LDFF1SB_z_p_bz_s_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0x84004000 {
            return Self::LD1B_z_p_bz_s_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0x84006000 {
            return Self::LDFF1B_z_p_bz_s_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x84408000 {
            return Self::LD1RB_z_p_bi_u8 {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x8440a000 {
            return Self::LD1RB_z_p_bi_u16 {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x8440c000 {
            return Self::LD1RB_z_p_bi_u32 {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x8440e000 {
            return Self::LD1RB_z_p_bi_u64 {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0x84800000 {
            return Self::LD1SH_z_p_bz_s_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0x84802000 {
            return Self::LDFF1SH_z_p_bz_s_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0x84804000 {
            return Self::LD1H_z_p_bz_s_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0x84806000 {
            return Self::LDFF1H_z_p_bz_s_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0x84a00000 {
            return Self::LD1SH_z_p_bz_s_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0x84a02000 {
            return Self::LDFF1SH_z_p_bz_s_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0x84a04000 {
            return Self::LD1H_z_p_bz_s_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0x84a06000 {
            return Self::LDFF1H_z_p_bz_s_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x84c08000 {
            return Self::LD1RSW_z_p_bi_s64 {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x84c0a000 {
            return Self::LD1RH_z_p_bi_u16 {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x84c0c000 {
            return Self::LD1RH_z_p_bi_u32 {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x84c0e000 {
            return Self::LD1RH_z_p_bi_u64 {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0x85004000 {
            return Self::LD1W_z_p_bz_s_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0x85006000 {
            return Self::LDFF1W_z_p_bz_s_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0x85204000 {
            return Self::LD1W_z_p_bz_s_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0x85206000 {
            return Self::LDFF1W_z_p_bz_s_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x85408000 {
            return Self::LD1RSH_z_p_bi_s64 {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x8540a000 {
            return Self::LD1RSH_z_p_bi_s32 {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x8540c000 {
            return Self::LD1RW_z_p_bi_u32 {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x8540e000 {
            return Self::LD1RW_z_p_bi_u64 {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x85804000 {
            return Self::LDR_z_bi {
                imm9h: ((opcode & 0x003f0000) >> 16) as u8,
                imm9l: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x85c08000 {
            return Self::LD1RSB_z_p_bi_s64 {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x85c0a000 {
            return Self::LD1RSB_z_p_bi_s32 {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x85c0c000 {
            return Self::LD1RSB_z_p_bi_s16 {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0x85c0e000 {
            return Self::LD1RD_z_p_bi_u64 {
                imm6: ((opcode & 0x003f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x99000000 {
            return Self::STLUR_32_ldapstl_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x99400000 {
            return Self::LDAPUR_32_ldapstl_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x99800000 {
            return Self::LDAPURSW_64_ldapstl_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x9a800000 {
            return Self::CSEL_64_condsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0x9a800400 {
            return Self::CSINC_64_condsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xb8000000 {
            return Self::STUR_32_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xb8000400 {
            return Self::STR_32_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xb8000800 {
            return Self::STTR_32_ldst_unpriv {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xb8000c00 {
            return Self::STR_32_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xb8200800 {
            return Self::STR_32_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xb8400000 {
            return Self::LDUR_32_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xb8400400 {
            return Self::LDR_32_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xb8400800 {
            return Self::LDTR_32_ldst_unpriv {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xb8400c00 {
            return Self::LDR_32_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xb8600800 {
            return Self::LDR_32_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xb8800000 {
            return Self::LDURSW_64_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xb8800400 {
            return Self::LDRSW_64_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xb8800800 {
            return Self::LDTRSW_64_ldst_unpriv {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xb8800c00 {
            return Self::LDRSW_64_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xb8a00800 {
            return Self::LDRSW_64_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xbc000000 {
            return Self::STUR_S_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xbc000400 {
            return Self::STR_S_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xbc000c00 {
            return Self::STR_S_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xbc200800 {
            return Self::STR_S_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xbc400000 {
            return Self::LDUR_S_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xbc400400 {
            return Self::LDR_S_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xbc400c00 {
            return Self::LDR_S_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xbc600800 {
            return Self::LDR_S_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc4000000 {
            return Self::LD1SB_z_p_bz_d_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc4002000 {
            return Self::LDFF1SB_z_p_bz_d_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc4004000 {
            return Self::LD1B_z_p_bz_d_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc4006000 {
            return Self::LDFF1B_z_p_bz_d_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc4800000 {
            return Self::LD1SH_z_p_bz_d_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc4802000 {
            return Self::LDFF1SH_z_p_bz_d_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc4804000 {
            return Self::LD1H_z_p_bz_d_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc4806000 {
            return Self::LDFF1H_z_p_bz_d_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc4a00000 {
            return Self::LD1SH_z_p_bz_d_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc4a02000 {
            return Self::LDFF1SH_z_p_bz_d_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc4a04000 {
            return Self::LD1H_z_p_bz_d_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc4a06000 {
            return Self::LDFF1H_z_p_bz_d_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc5000000 {
            return Self::LD1SW_z_p_bz_d_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc5002000 {
            return Self::LDFF1SW_z_p_bz_d_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc5004000 {
            return Self::LD1W_z_p_bz_d_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc5006000 {
            return Self::LDFF1W_z_p_bz_d_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc5200000 {
            return Self::LD1SW_z_p_bz_d_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc5202000 {
            return Self::LDFF1SW_z_p_bz_d_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc5204000 {
            return Self::LD1W_z_p_bz_d_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc5206000 {
            return Self::LDFF1W_z_p_bz_d_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc5804000 {
            return Self::LD1D_z_p_bz_d_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc5806000 {
            return Self::LDFF1D_z_p_bz_d_x32_unscaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc5a04000 {
            return Self::LD1D_z_p_bz_d_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa0e000 == 0xc5a06000 {
            return Self::LDFF1D_z_p_bz_d_x32_scaled {
                xs: ((opcode & 0x00400000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff80000 == 0xd5080000 {
            return Self::SYS_CR_systeminstrs {
                op1: ((opcode & 0x00070000) >> 16) as u8,
                CRn: ((opcode & 0x0000f000) >> 12) as u8,
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
                op2: ((opcode & 0x000000e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff80000 == 0xd5280000 {
            return Self::SYSL_RC_systeminstrs {
                op1: ((opcode & 0x00070000) >> 16) as u8,
                CRn: ((opcode & 0x0000f000) >> 12) as u8,
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
                op2: ((opcode & 0x000000e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xd9000000 {
            return Self::STLUR_64_ldapstl_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xd9200400 {
            return Self::STG_64Spost_ldsttags {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xd9200800 {
            return Self::STG_64Soffset_ldsttags {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xd9200c00 {
            return Self::STG_64Spre_ldsttags {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xd9400000 {
            return Self::LDAPUR_64_ldapstl_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xd9600000 {
            return Self::LDG_64Loffset_ldsttags {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xd9600400 {
            return Self::STZG_64Spost_ldsttags {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xd9600800 {
            return Self::STZG_64Soffset_ldsttags {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xd9600c00 {
            return Self::STZG_64Spre_ldsttags {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xd9a00400 {
            return Self::ST2G_64Spost_ldsttags {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xd9a00800 {
            return Self::ST2G_64Soffset_ldsttags {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xd9a00c00 {
            return Self::ST2G_64Spre_ldsttags {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xd9e00400 {
            return Self::STZ2G_64Spost_ldsttags {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xd9e00800 {
            return Self::STZ2G_64Soffset_ldsttags {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xd9e00c00 {
            return Self::STZ2G_64Spre_ldsttags {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xda800000 {
            return Self::CSINV_64_condsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xda800400 {
            return Self::CSNEG_64_condsel {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                cond: ((opcode & 0x0000f000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0a000 == 0xe4008000 {
            return Self::ST1B_z_p_bz_d_x32_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                xs: ((opcode & 0x00004000) >> 14) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff90e000 == 0xe400e000 {
            return Self::ST1B_z_p_bi {
                size: ((opcode & 0x00600000) >> 21) as u8,
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0a000 == 0xe4408000 {
            return Self::ST1B_z_p_bz_s_x32_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                xs: ((opcode & 0x00004000) >> 14) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0a000 == 0xe4808000 {
            return Self::ST1H_z_p_bz_d_x32_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                xs: ((opcode & 0x00004000) >> 14) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff90e000 == 0xe480e000 {
            return Self::ST1H_z_p_bi {
                size: ((opcode & 0x00600000) >> 21) as u8,
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0a000 == 0xe4a08000 {
            return Self::ST1H_z_p_bz_d_x32_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                xs: ((opcode & 0x00004000) >> 14) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0a000 == 0xe4c08000 {
            return Self::ST1H_z_p_bz_s_x32_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                xs: ((opcode & 0x00004000) >> 14) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0a000 == 0xe4e08000 {
            return Self::ST1H_z_p_bz_s_x32_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                xs: ((opcode & 0x00004000) >> 14) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0a000 == 0xe5008000 {
            return Self::ST1W_z_p_bz_d_x32_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                xs: ((opcode & 0x00004000) >> 14) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff90e000 == 0xe500e000 {
            return Self::ST1W_z_p_bi {
                size: ((opcode & 0x00600000) >> 21) as u8,
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0a000 == 0xe5208000 {
            return Self::ST1W_z_p_bz_d_x32_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                xs: ((opcode & 0x00004000) >> 14) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0a000 == 0xe5408000 {
            return Self::ST1W_z_p_bz_s_x32_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                xs: ((opcode & 0x00004000) >> 14) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0a000 == 0xe5608000 {
            return Self::ST1W_z_p_bz_s_x32_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                xs: ((opcode & 0x00004000) >> 14) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc0e000 == 0xe5804000 {
            return Self::STR_z_bi {
                imm9h: ((opcode & 0x003f0000) >> 16) as u8,
                imm9l: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0a000 == 0xe5808000 {
            return Self::ST1D_z_p_bz_d_x32_unscaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                xs: ((opcode & 0x00004000) >> 14) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff90e000 == 0xe580e000 {
            return Self::ST1D_z_p_bi {
                size: ((opcode & 0x00600000) >> 21) as u8,
                imm4: ((opcode & 0x000f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe0a000 == 0xe5a08000 {
            return Self::ST1D_z_p_bz_d_x32_scaled {
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                xs: ((opcode & 0x00004000) >> 14) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xf8000000 {
            return Self::STUR_64_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xf8000400 {
            return Self::STR_64_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xf8000800 {
            return Self::STTR_64_ldst_unpriv {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xf8000c00 {
            return Self::STR_64_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xf8200800 {
            return Self::STR_64_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xf8400000 {
            return Self::LDUR_64_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xf8400400 {
            return Self::LDR_64_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xf8400800 {
            return Self::LDTR_64_ldst_unpriv {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xf8400c00 {
            return Self::LDR_64_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xf8600800 {
            return Self::LDR_64_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xf8800000 {
            return Self::PRFUM_P_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xf8a00800 {
            return Self::PRFM_P_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xfc000000 {
            return Self::STUR_D_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xfc000400 {
            return Self::STR_D_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xfc000c00 {
            return Self::STR_D_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xfc200800 {
            return Self::STR_D_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xfc400000 {
            return Self::LDUR_D_ldst_unscaled {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xfc400400 {
            return Self::LDR_D_ldst_immpost {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xfc400c00 {
            return Self::LDR_D_ldst_immpre {
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00c00 == 0xfc600800 {
            return Self::LDR_D_ldst_regoff {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                S: ((opcode & 0x00001000) >> 12) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e000 == 0x04004000 {
            return Self::MLA_z_p_zzz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e000 == 0x04006000 {
            return Self::MLS_z_p_zzz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e000 == 0x0400c000 {
            return Self::MAD_z_p_zzz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Za: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e000 == 0x0400e000 {
            return Self::MSB_z_p_zzz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Za: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff30c000 == 0x05100000 {
            return Self::CPY_z_o_i {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x000f0000) >> 16) as u8,
                sh: ((opcode & 0x00002000) >> 13) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff30c000 == 0x05100000 {
            return Self::MOV_cpy_z_o_i {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x000f0000) >> 16) as u8,
                sh: ((opcode & 0x00002000) >> 13) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff30c000 == 0x05104000 {
            return Self::CPY_z_p_i {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x000f0000) >> 16) as u8,
                sh: ((opcode & 0x00002000) >> 13) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff30c000 == 0x05104000 {
            return Self::MOV_cpy_z_p_i {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Pg: ((opcode & 0x000f0000) >> 16) as u8,
                sh: ((opcode & 0x00002000) >> 13) as u8,
                imm8: ((opcode & 0x00001fe0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x08000000 {
            return Self::STXRB_SR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x08008000 {
            return Self::STLXRB_SR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x08400000 {
            return Self::LDXRB_LR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x08408000 {
            return Self::LDAXRB_LR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x08800000 {
            return Self::STLLRB_SL32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x08808000 {
            return Self::STLRB_SL32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x08c00000 {
            return Self::LDLARB_LR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x08c08000 {
            return Self::LDARB_LR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x0f002000 {
            return Self::SMLAL_asimdelem_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x0f003000 {
            return Self::SQDMLAL_asimdelem_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x0f006000 {
            return Self::SMLSL_asimdelem_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x0f007000 {
            return Self::SQDMLSL_asimdelem_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x0f008000 {
            return Self::MUL_asimdelem_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x0f00a000 {
            return Self::SMULL_asimdelem_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x0f00b000 {
            return Self::SQDMULL_asimdelem_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x0f00c000 {
            return Self::SQDMULH_asimdelem_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x0f00d000 {
            return Self::SQRDMULH_asimdelem_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x0f00e000 {
            return Self::SDOT_asimdelem_D {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x13800000 {
            return Self::EXTR_32_extract {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imms: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x13800000 {
            return Self::ROR_EXTR_32_extract {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imms: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x1b000000 {
            return Self::MADD_32A_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x1b008000 {
            return Self::MSUB_32A_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x1f000000 {
            return Self::FMADD_S_floatdp3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x1f008000 {
            return Self::FMSUB_S_floatdp3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x1f200000 {
            return Self::FNMADD_S_floatdp3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x1f208000 {
            return Self::FNMSUB_S_floatdp3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x1f400000 {
            return Self::FMADD_D_floatdp3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x1f408000 {
            return Self::FMSUB_D_floatdp3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x1f600000 {
            return Self::FNMADD_D_floatdp3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x1f608000 {
            return Self::FNMSUB_D_floatdp3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x1fc00000 {
            return Self::FMADD_H_floatdp3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x1fc08000 {
            return Self::FMSUB_H_floatdp3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x1fe00000 {
            return Self::FNMADD_H_floatdp3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x1fe08000 {
            return Self::FNMSUB_H_floatdp3 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfe08400 == 0x2e000000 {
            return Self::EXT_asimdext_only {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm4: ((opcode & 0x00007800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf20e400 == 0x2e00c400 {
            return Self::FCMLA_asimdsame2_C {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                rot: ((opcode & 0x00001800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x2f000000 {
            return Self::MLA_asimdelem_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x2f002000 {
            return Self::UMLAL_asimdelem_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x2f004000 {
            return Self::MLS_asimdelem_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x2f006000 {
            return Self::UMLSL_asimdelem_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x2f00a000 {
            return Self::UMULL_asimdelem_L {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x2f00d000 {
            return Self::SQRDMLAH_asimdelem_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x2f00e000 {
            return Self::UDOT_asimdelem_D {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbf00f400 == 0x2f00f000 {
            return Self::SQRDMLSH_asimdelem_R {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                size: ((opcode & 0x00c00000) >> 22) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfc09400 == 0x2f401000 {
            return Self::FCMLA_asimdelem_C_H {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                rot: ((opcode & 0x00006000) >> 13) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xbfc09400 == 0x2f801000 {
            return Self::FCMLA_asimdelem_C_S {
                Q: ((opcode & 0x40000000) >> 30) as u8,
                L: ((opcode & 0x00200000) >> 21) as u8,
                M: ((opcode & 0x00100000) >> 20) as u8,
                Rm: ((opcode & 0x000f0000) >> 16) as u8,
                rot: ((opcode & 0x00006000) >> 13) as u8,
                H: ((opcode & 0x00000800) >> 11) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x48000000 {
            return Self::STXRH_SR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x48008000 {
            return Self::STLXRH_SR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x48400000 {
            return Self::LDXRH_LR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x48408000 {
            return Self::LDAXRH_LR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x48800000 {
            return Self::STLLRH_SL32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x48808000 {
            return Self::STLRH_SL32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x48c00000 {
            return Self::LDLARH_LR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x48c08000 {
            return Self::LDARH_LR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e000 == 0x65200000 {
            return Self::FMLA_z_p_zzz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e000 == 0x65202000 {
            return Self::FMLS_z_p_zzz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e000 == 0x65204000 {
            return Self::FNMLA_z_p_zzz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e000 == 0x65206000 {
            return Self::FNMLS_z_p_zzz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e000 == 0x65208000 {
            return Self::FMAD_z_p_zzz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Za: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e000 == 0x6520a000 {
            return Self::FMSB_z_p_zzz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Za: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e000 == 0x6520c000 {
            return Self::FNMAD_z_p_zzz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Za: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20e000 == 0x6520e000 {
            return Self::FNMSB_z_p_zzz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Za: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zm: ((opcode & 0x000003e0) >> 5) as u8,
                Zdn: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x88000000 {
            return Self::STXR_SR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x88008000 {
            return Self::STLXR_SR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x88200000 {
            return Self::STXP_SP32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x88208000 {
            return Self::STLXP_SP32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x88400000 {
            return Self::LDXR_LR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x88408000 {
            return Self::LDAXR_LR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x88600000 {
            return Self::LDXP_LP32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x88608000 {
            return Self::LDAXP_LP32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x88800000 {
            return Self::STLLR_SL32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x88808000 {
            return Self::STLR_SL32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x88c00000 {
            return Self::LDLAR_LR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x88c08000 {
            return Self::LDAR_LR32_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x9b000000 {
            return Self::MADD_64A_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x9b008000 {
            return Self::MSUB_64A_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x9b200000 {
            return Self::SMADDL_64WA_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x9b208000 {
            return Self::SMSUBL_64WA_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x9b400000 {
            return Self::SMULH_64_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x9ba00000 {
            return Self::UMADDL_64WA_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x9ba08000 {
            return Self::UMSUBL_64WA_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0x9bc00000 {
            return Self::UMULH_64_dp_3src {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0xc8000000 {
            return Self::STXR_SR64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0xc8008000 {
            return Self::STLXR_SR64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0xc8200000 {
            return Self::STXP_SP64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0xc8208000 {
            return Self::STLXP_SP64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0xc8400000 {
            return Self::LDXR_LR64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0xc8408000 {
            return Self::LDAXR_LR64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0xc8600000 {
            return Self::LDXP_LP64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0xc8608000 {
            return Self::LDAXP_LP64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0xc8800000 {
            return Self::STLLR_SL64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0xc8808000 {
            return Self::STLR_SL64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0xc8c00000 {
            return Self::LDLAR_LR64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0xc8c08000 {
            return Self::LDAR_LR64_ldstexcl {
                Rs: ((opcode & 0x001f0000) >> 16) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0xce000000 {
            return Self::EOR3_VVV16_crypto4 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0xce200000 {
            return Self::BCAX_VVV16_crypto4 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe08000 == 0xce400000 {
            return Self::SM3SS1_VVV4_crypto4 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Ra: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff00000 == 0xd5100000 {
            return Self::MSR_SR_systemmove {
                o0: ((opcode & 0x00080000) >> 19) as u8,
                op1: ((opcode & 0x00070000) >> 16) as u8,
                CRn: ((opcode & 0x0000f000) >> 12) as u8,
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
                op2: ((opcode & 0x000000e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfff00000 == 0xd5300000 {
            return Self::MRS_RS_systemmove {
                o0: ((opcode & 0x00080000) >> 19) as u8,
                op1: ((opcode & 0x00070000) >> 16) as u8,
                CRn: ((opcode & 0x0000f000) >> 12) as u8,
                CRm: ((opcode & 0x00000f00) >> 8) as u8,
                op2: ((opcode & 0x000000e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80e000 == 0xe4004000 {
            return Self::ST1B_z_p_br {
                size: ((opcode & 0x00600000) >> 21) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80e000 == 0xe4804000 {
            return Self::ST1H_z_p_br {
                size: ((opcode & 0x00600000) >> 21) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff80e000 == 0xe5004000 {
            return Self::ST1W_z_p_br {
                size: ((opcode & 0x00600000) >> 21) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Zt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa00c00 == 0xf8200400 {
            return Self::LDRAA_64_ldst_pac {
                S: ((opcode & 0x00400000) >> 22) as u8,
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa00c00 == 0xf8200c00 {
            return Self::LDRAA_64W_ldst_pac {
                S: ((opcode & 0x00400000) >> 22) as u8,
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa00c00 == 0xf8a00400 {
            return Self::LDRAB_64_ldst_pac {
                S: ((opcode & 0x00400000) >> 22) as u8,
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffa00c00 == 0xf8a00c00 {
            return Self::LDRAB_64W_ldst_pac {
                S: ((opcode & 0x00400000) >> 22) as u8,
                imm9: ((opcode & 0x001ff000) >> 12) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20c000 == 0x0520c000 {
            return Self::MOV_sel_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff20c000 == 0x0520c000 {
            return Self::SEL_z_p_zz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                Pg: ((opcode & 0x00003c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00000 == 0x0b200000 {
            return Self::ADD_32_addsub_ext {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                imm3: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff202010 == 0x24200000 {
            return Self::CMPHS_p_p_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm7: ((opcode & 0x001fc000) >> 14) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff202010 == 0x24200010 {
            return Self::CMPHI_p_p_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm7: ((opcode & 0x001fc000) >> 14) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff202010 == 0x24202000 {
            return Self::CMPLO_p_p_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm7: ((opcode & 0x001fc000) >> 14) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff202010 == 0x24202010 {
            return Self::CMPLS_p_p_zi {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                imm7: ((opcode & 0x001fc000) >> 14) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Pd: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00000 == 0x2b200000 {
            return Self::ADDS_32S_addsub_ext {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                imm3: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00000 == 0x4b200000 {
            return Self::SUB_32_addsub_ext {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                imm3: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00000 == 0x6b200000 {
            return Self::SUBS_32S_addsub_ext {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                imm3: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00000 == 0x8b200000 {
            return Self::ADD_64_addsub_ext {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                imm3: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00000 == 0x93c00000 {
            return Self::EXTR_64_extract {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00000 == 0x93c00000 {
            return Self::ROR_EXTR_64_extract {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00000 == 0xab200000 {
            return Self::ADDS_64S_addsub_ext {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                imm3: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00000 == 0xcb200000 {
            return Self::SUB_64_addsub_ext {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                imm3: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00000 == 0xce800000 {
            return Self::XAR_VVV2_crypto3_imm6 {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffe00000 == 0xeb200000 {
            return Self::SUBS_64S_addsub_ext {
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                option: ((opcode & 0x0000e000) >> 13) as u8,
                imm3: ((opcode & 0x00001c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x33000000 && (opcode & 0x000003e0 != 0x000003e0) {
            return Self::BFI_BFM_32M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x53000000 && (opcode & 0x00007c00 != 0x00007c00) {
            return Self::LSL_UBFM_32M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xb3400000 && (opcode & 0x000003e0 != 0x000003e0) {
            return Self::BFI_BFM_64M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xd3400000 && (opcode & 0x00007c00 != 0x00007c00) {
            return Self::LSL_UBFM_64M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x12000000 {
            return Self::AND_32_log_imm {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x12800000 {
            return Self::MOV_MOVN_32_movewide {
                hw: ((opcode & 0x00200000) >> 21) as u8,
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x12800000 {
            return Self::MOVN_32_movewide {
                hw: ((opcode & 0x00200000) >> 21) as u8,
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x13000000 {
            return Self::SBFIZ_SBFM_32M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x13000000 {
            return Self::SBFM_32M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x13000000 {
            return Self::SBFX_SBFM_32M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x28000000 {
            return Self::STNP_32_ldstnapair_offs {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x28400000 {
            return Self::LDNP_32_ldstnapair_offs {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x28800000 {
            return Self::STP_32_ldstpair_post {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x28c00000 {
            return Self::LDP_32_ldstpair_post {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x29000000 {
            return Self::STP_32_ldstpair_off {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x29400000 {
            return Self::LDP_32_ldstpair_off {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x29800000 {
            return Self::STP_32_ldstpair_pre {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x29c00000 {
            return Self::LDP_32_ldstpair_pre {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x2c000000 {
            return Self::STNP_S_ldstnapair_offs {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x2c400000 {
            return Self::LDNP_S_ldstnapair_offs {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x2c800000 {
            return Self::STP_S_ldstpair_post {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x2cc00000 {
            return Self::LDP_S_ldstpair_post {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x2d000000 {
            return Self::STP_S_ldstpair_off {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x2d400000 {
            return Self::LDP_S_ldstpair_off {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x2d800000 {
            return Self::STP_S_ldstpair_pre {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x2dc00000 {
            return Self::LDP_S_ldstpair_pre {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x32000000 {
            return Self::ORR_32_log_imm {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x33000000 {
            return Self::BFM_32M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x33000000 {
            return Self::BFXIL_BFM_32M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x39000000 {
            return Self::STRB_32_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x39400000 {
            return Self::LDRB_32_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x39800000 {
            return Self::LDRSB_64_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x39c00000 {
            return Self::LDRSB_32_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x3d000000 {
            return Self::STR_B_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x3d400000 {
            return Self::LDR_B_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x3d800000 {
            return Self::STR_Q_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x3dc00000 {
            return Self::LDR_Q_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x52000000 {
            return Self::EOR_32_log_imm {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x52800000 {
            return Self::MOV_MOVZ_32_movewide {
                hw: ((opcode & 0x00200000) >> 21) as u8,
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x52800000 {
            return Self::MOVZ_32_movewide {
                hw: ((opcode & 0x00200000) >> 21) as u8,
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x53000000 {
            return Self::UBFIZ_UBFM_32M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x53000000 {
            return Self::UBFM_32M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x53000000 {
            return Self::UBFX_UBFM_32M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff208000 == 0x64000000 {
            return Self::FCMLA_z_p_zzz {
                size: ((opcode & 0x00c00000) >> 22) as u8,
                Zm: ((opcode & 0x001f0000) >> 16) as u8,
                rot: ((opcode & 0x00006000) >> 13) as u8,
                Pg: ((opcode & 0x00001c00) >> 10) as u8,
                Zn: ((opcode & 0x000003e0) >> 5) as u8,
                Zda: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x68800000 {
            return Self::STGP_64_ldstpair_post {
                simm7: ((opcode & 0x003f8000) >> 15) as u8,
                Xt2: ((opcode & 0x00007c00) >> 10) as u8,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x68c00000 {
            return Self::LDPSW_64_ldstpair_post {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x69000000 {
            return Self::STGP_64_ldstpair_off {
                simm7: ((opcode & 0x003f8000) >> 15) as u8,
                Xt2: ((opcode & 0x00007c00) >> 10) as u8,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x69400000 {
            return Self::LDPSW_64_ldstpair_off {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x69800000 {
            return Self::STGP_64_ldstpair_pre {
                simm7: ((opcode & 0x003f8000) >> 15) as u8,
                Xt2: ((opcode & 0x00007c00) >> 10) as u8,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x69c00000 {
            return Self::LDPSW_64_ldstpair_pre {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x6c000000 {
            return Self::STNP_D_ldstnapair_offs {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x6c400000 {
            return Self::LDNP_D_ldstnapair_offs {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x6c800000 {
            return Self::STP_D_ldstpair_post {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x6cc00000 {
            return Self::LDP_D_ldstpair_post {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x6d000000 {
            return Self::STP_D_ldstpair_off {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x6d400000 {
            return Self::LDP_D_ldstpair_off {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x6d800000 {
            return Self::STP_D_ldstpair_pre {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x6dc00000 {
            return Self::LDP_D_ldstpair_pre {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x72000000 {
            return Self::ANDS_32S_log_imm {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x72800000 {
            return Self::MOVK_32_movewide {
                hw: ((opcode & 0x00200000) >> 21) as u8,
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x79000000 {
            return Self::STRH_32_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x79400000 {
            return Self::LDRH_32_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x79800000 {
            return Self::LDRSH_64_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x79c00000 {
            return Self::LDRSH_32_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x7d000000 {
            return Self::STR_H_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x7d400000 {
            return Self::LDR_H_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x91800000 {
            return Self::ADDG_64_addsub_immtags {
                uimm6: ((opcode & 0x003f0000) >> 16) as u8,
                op3: ((opcode & 0x0000c000) >> 14) as u8,
                uimm4: ((opcode & 0x00003c00) >> 10) as u8,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x93400000 {
            return Self::SBFIZ_SBFM_64M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x93400000 {
            return Self::SBFM_64M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0x93400000 {
            return Self::SBFX_SBFM_64M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xa8000000 {
            return Self::STNP_64_ldstnapair_offs {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xa8400000 {
            return Self::LDNP_64_ldstnapair_offs {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xa8800000 {
            return Self::STP_64_ldstpair_post {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xa8c00000 {
            return Self::LDP_64_ldstpair_post {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xa9000000 {
            return Self::STP_64_ldstpair_off {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xa9400000 {
            return Self::LDP_64_ldstpair_off {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xa9800000 {
            return Self::STP_64_ldstpair_pre {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xa9c00000 {
            return Self::LDP_64_ldstpair_pre {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xac000000 {
            return Self::STNP_Q_ldstnapair_offs {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xac400000 {
            return Self::LDNP_Q_ldstnapair_offs {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xac800000 {
            return Self::STP_Q_ldstpair_post {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xacc00000 {
            return Self::LDP_Q_ldstpair_post {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xad000000 {
            return Self::STP_Q_ldstpair_off {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xad400000 {
            return Self::LDP_Q_ldstpair_off {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xad800000 {
            return Self::STP_Q_ldstpair_pre {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xadc00000 {
            return Self::LDP_Q_ldstpair_pre {
                imm7: ((opcode & 0x003f8000) >> 15) as u8,
                Rt2: ((opcode & 0x00007c00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xb3400000 {
            return Self::BFM_64M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xb3400000 {
            return Self::BFXIL_BFM_64M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xb9000000 {
            return Self::STR_32_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xb9400000 {
            return Self::LDR_32_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xb9800000 {
            return Self::LDRSW_64_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xbd000000 {
            return Self::STR_S_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xbd400000 {
            return Self::LDR_S_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xd1800000 {
            return Self::SUBG_64_addsub_immtags {
                uimm6: ((opcode & 0x003f0000) >> 16) as u8,
                op3: ((opcode & 0x0000c000) >> 14) as u8,
                uimm4: ((opcode & 0x00003c00) >> 10) as u8,
                Xn: ((opcode & 0x000003e0) >> 5) as u8,
                Xd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xd3400000 {
            return Self::UBFIZ_UBFM_64M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xd3400000 {
            return Self::UBFM_64M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xd3400000 {
            return Self::UBFX_UBFM_64M_bitfield {
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xf9000000 {
            return Self::STR_64_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xf9400000 {
            return Self::LDR_64_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xf9800000 {
            return Self::PRFM_P_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xfd000000 {
            return Self::STR_D_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xffc00000 == 0xfd400000 {
            return Self::LDR_D_ldst_pos {
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0x0a000000 {
            return Self::AND_32_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0x0a200000 {
            return Self::BIC_32_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0x0b000000 {
            return Self::ADD_32_addsub_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0x11000000 {
            return Self::ADD_32_addsub_imm {
                sh: ((opcode & 0x00400000) >> 22) as u8,
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0x2a000000 {
            return Self::ORR_32_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0x2a200000 {
            return Self::ORN_32_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0x2b000000 {
            return Self::ADDS_32_addsub_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0x31000000 {
            return Self::ADDS_32S_addsub_imm {
                sh: ((opcode & 0x00400000) >> 22) as u8,
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0x4a000000 {
            return Self::EOR_32_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0x4a200000 {
            return Self::EON_32_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0x4b000000 {
            return Self::SUB_32_addsub_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0x51000000 {
            return Self::SUB_32_addsub_imm {
                sh: ((opcode & 0x00400000) >> 22) as u8,
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff000010 == 0x54000000 {
            return Self::B_only_condbranch {
                imm19: ((opcode & 0x00ffffe0) >> 5) as u32,
                cond: ((opcode & 0x0000000f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0x6a000000 {
            return Self::ANDS_32_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0x6a200000 {
            return Self::BICS_32_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0x6b000000 {
            return Self::SUBS_32_addsub_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0x71000000 {
            return Self::SUBS_32S_addsub_imm {
                sh: ((opcode & 0x00400000) >> 22) as u8,
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0x8a000000 {
            return Self::AND_64_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0x8a200000 {
            return Self::BIC_64_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0x8b000000 {
            return Self::ADD_64_addsub_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0x91000000 {
            return Self::ADD_64_addsub_imm {
                sh: ((opcode & 0x00400000) >> 22) as u8,
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0x92000000 {
            return Self::AND_64_log_imm {
                N: ((opcode & 0x00400000) >> 22) as u8,
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0x92800000 {
            return Self::MOV_MOVN_64_movewide {
                hw: ((opcode & 0x00600000) >> 21) as u8,
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0x92800000 {
            return Self::MOVN_64_movewide {
                hw: ((opcode & 0x00600000) >> 21) as u8,
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0xaa000000 {
            return Self::ORR_64_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0xaa200000 {
            return Self::ORN_64_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0xab000000 {
            return Self::ADDS_64_addsub_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0xb1000000 {
            return Self::ADDS_64S_addsub_imm {
                sh: ((opcode & 0x00400000) >> 22) as u8,
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0xb2000000 {
            return Self::ORR_64_log_imm {
                N: ((opcode & 0x00400000) >> 22) as u8,
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0xca000000 {
            return Self::EOR_64_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0xca200000 {
            return Self::EON_64_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0xcb000000 {
            return Self::SUB_64_addsub_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0xd1000000 {
            return Self::SUB_64_addsub_imm {
                sh: ((opcode & 0x00400000) >> 22) as u8,
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0xd2000000 {
            return Self::EOR_64_log_imm {
                N: ((opcode & 0x00400000) >> 22) as u8,
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0xd2800000 {
            return Self::MOV_MOVZ_64_movewide {
                hw: ((opcode & 0x00600000) >> 21) as u8,
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0xd2800000 {
            return Self::MOVZ_64_movewide {
                hw: ((opcode & 0x00600000) >> 21) as u8,
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0xea000000 {
            return Self::ANDS_64_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0xea200000 {
            return Self::BICS_64_log_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff200000 == 0xeb000000 {
            return Self::SUBS_64_addsub_shift {
                shift: ((opcode & 0x00c00000) >> 22) as u8,
                Rm: ((opcode & 0x001f0000) >> 16) as u8,
                imm6: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0xf1000000 {
            return Self::SUBS_64S_addsub_imm {
                sh: ((opcode & 0x00400000) >> 22) as u8,
                imm12: ((opcode & 0x003ffc00) >> 10) as u16,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0xf2000000 {
            return Self::ANDS_64S_log_imm {
                N: ((opcode & 0x00400000) >> 22) as u8,
                immr: ((opcode & 0x003f0000) >> 16) as u8,
                imms: ((opcode & 0x0000fc00) >> 10) as u8,
                Rn: ((opcode & 0x000003e0) >> 5) as u8,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff800000 == 0xf2800000 {
            return Self::MOVK_64_movewide {
                hw: ((opcode & 0x00600000) >> 21) as u8,
                imm16: ((opcode & 0x001fffe0) >> 5) as u16,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff000000 == 0x18000000 {
            return Self::LDR_32_loadlit {
                imm19: ((opcode & 0x00ffffe0) >> 5) as u32,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff000000 == 0x1c000000 {
            return Self::LDR_S_loadlit {
                imm19: ((opcode & 0x00ffffe0) >> 5) as u32,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff000000 == 0x34000000 {
            return Self::CBZ_32_compbranch {
                imm19: ((opcode & 0x00ffffe0) >> 5) as u32,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff000000 == 0x35000000 {
            return Self::CBNZ_32_compbranch {
                imm19: ((opcode & 0x00ffffe0) >> 5) as u32,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff000000 == 0x58000000 {
            return Self::LDR_64_loadlit {
                imm19: ((opcode & 0x00ffffe0) >> 5) as u32,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff000000 == 0x5c000000 {
            return Self::LDR_D_loadlit {
                imm19: ((opcode & 0x00ffffe0) >> 5) as u32,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff000000 == 0x98000000 {
            return Self::LDRSW_64_loadlit {
                imm19: ((opcode & 0x00ffffe0) >> 5) as u32,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff000000 == 0x9c000000 {
            return Self::LDR_Q_loadlit {
                imm19: ((opcode & 0x00ffffe0) >> 5) as u32,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff000000 == 0xb4000000 {
            return Self::CBZ_64_compbranch {
                imm19: ((opcode & 0x00ffffe0) >> 5) as u32,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff000000 == 0xb5000000 {
            return Self::CBNZ_64_compbranch {
                imm19: ((opcode & 0x00ffffe0) >> 5) as u32,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xff000000 == 0xd8000000 {
            return Self::PRFM_P_loadlit {
                imm19: ((opcode & 0x00ffffe0) >> 5) as u32,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0x7f000000 == 0x36000000 {
            return Self::TBZ_only_testbranch {
                b5: ((opcode & 0x80000000) >> 31) as u8,
                b40: ((opcode & 0x00f80000) >> 19) as u8,
                imm14: ((opcode & 0x0007ffe0) >> 5) as u16,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0x7f000000 == 0x37000000 {
            return Self::TBNZ_only_testbranch {
                b5: ((opcode & 0x80000000) >> 31) as u8,
                b40: ((opcode & 0x00f80000) >> 19) as u8,
                imm14: ((opcode & 0x0007ffe0) >> 5) as u16,
                Rt: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0x9f000000 == 0x10000000 {
            return Self::ADR_only_pcreladdr {
                immlo: ((opcode & 0x60000000) >> 29) as u8,
                immhi: ((opcode & 0x00ffffe0) >> 5) as u32,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfc000000 == 0x14000000 {
            return Self::B_only_branch_imm {
                imm26: ((opcode & 0x03ffffff) >> 0) as u32,
            };
        }
        if opcode & 0x9f000000 == 0x90000000 {
            return Self::ADRP_only_pcreladdr {
                immlo: ((opcode & 0x60000000) >> 29) as u8,
                immhi: ((opcode & 0x00ffffe0) >> 5) as u32,
                Rd: ((opcode & 0x0000001f) >> 0) as u8,
            };
        }
        if opcode & 0xfc000000 == 0x94000000 {
            return Self::BL_only_branch_imm {
                imm26: ((opcode & 0x03ffffff) >> 0) as u32,
            };
        }
        
        Self::UNKNOWN(opcode)
    }

    pub fn encode(&self) -> u32 {
        match self {
            Self::SETFFR_f => 0x252c9000,
            Self::NOP_HI_hints => 0xd503201f,
            Self::YIELD_HI_hints => 0xd503203f,
            Self::WFE_HI_hints => 0xd503205f,
            Self::WFI_HI_hints => 0xd503207f,
            Self::SEV_HI_hints => 0xd503209f,
            Self::SEVL_HI_hints => 0xd50320bf,
            Self::DGH_HI_hints => 0xd50320df,
            Self::XPACLRI_HI_hints => 0xd50320ff,
            Self::PACIA1716_HI_hints => 0xd503211f,
            Self::PACIB1716_HI_hints => 0xd503215f,
            Self::AUTIA1716_HI_hints => 0xd503219f,
            Self::AUTIB1716_HI_hints => 0xd50321df,
            Self::ESB_HI_hints => 0xd503221f,
            Self::PSB_HC_hints => 0xd503223f,
            Self::TSB_HC_hints => 0xd503225f,
            Self::CSDB_HI_hints => 0xd503229f,
            Self::PACIAZ_HI_hints => 0xd503231f,
            Self::PACIASP_HI_hints => 0xd503233f,
            Self::PACIBZ_HI_hints => 0xd503235f,
            Self::PACIBSP_HI_hints => 0xd503237f,
            Self::AUTIAZ_HI_hints => 0xd503239f,
            Self::AUTIASP_HI_hints => 0xd50323bf,
            Self::AUTIBZ_HI_hints => 0xd50323df,
            Self::AUTIBSP_HI_hints => 0xd50323ff,
            Self::SSBB_only_barriers => 0xd503309f,
            Self::PSSBB_only_barriers => 0xd503349f,
            Self::RETAA_64E_branch_reg => 0xd65f0bff,
            Self::RETAB_64E_branch_reg => 0xd65f0fff,
            Self::ERET_64E_branch_reg => 0xd69f03e0,
            Self::ERETAA_64E_branch_reg => 0xd69f0bff,
            Self::ERETAB_64E_branch_reg => 0xd69f0fff,
            Self::DRPS_64E_branch_reg => 0xd6bf03e0,
            Self::BTI_HB_hints { op2, } => 0xd503241f
                | ((*op2 as u32) << 6),
            Self::DSB_BOn_barriers { imm2, } => 0xd503323f
                | ((*imm2 as u32) << 10),
            Self::DSB_BO_barriers { CRm, } => 0xd503309f
                | ((*CRm as u32) << 8),
            Self::PFALSE_p { Pd, } => 0x2518e400
                | ((*Pd as u32) << 0),
            Self::RDFFR_p_f { Pd, } => 0x2519f000
                | ((*Pd as u32) << 0),
            Self::WRFFR_f_p { Pn, } => 0x25289000
                | ((*Pn as u32) << 5),
            Self::CFINV_M_pstate { CRm, } => 0xd500401f
                | ((*CRm as u32) << 8),
            Self::XAFLAG_M_pstate { CRm, } => 0xd500403f
                | ((*CRm as u32) << 8),
            Self::AXFLAG_M_pstate { CRm, } => 0xd500405f
                | ((*CRm as u32) << 8),
            Self::CLREX_BN_barriers { CRm, } => 0xd503305f
                | ((*CRm as u32) << 8),
            Self::DMB_BO_barriers { CRm, } => 0xd50330bf
                | ((*CRm as u32) << 8),
            Self::ISB_BI_barriers { CRm, } => 0xd50330df
                | ((*CRm as u32) << 8),
            Self::SB_only_barriers { CRm, } => 0xd50330ff
                | ((*CRm as u32) << 8),
            Self::SETF8_only_setf { Rn, } => 0x3a00080d
                | ((*Rn as u32) << 5),
            Self::SETF16_only_setf { Rn, } => 0x3a00480d
                | ((*Rn as u32) << 5),
            Self::WFET_only_systeminstrswithreg { Rd, } => 0xd5031000
                | ((*Rd as u32) << 0),
            Self::WFIT_only_systeminstrswithreg { Rd, } => 0xd5031020
                | ((*Rd as u32) << 0),
            Self::CFP_SYS_CR_systeminstrs { Rt, } => 0xd50b7380
                | ((*Rt as u32) << 0),
            Self::DVP_SYS_CR_systeminstrs { Rt, } => 0xd50b73a0
                | ((*Rt as u32) << 0),
            Self::CPP_SYS_CR_systeminstrs { Rt, } => 0xd50b73e0
                | ((*Rt as u32) << 0),
            Self::BR_64_branch_reg { Rn, } => 0xd61f0000
                | ((*Rn as u32) << 5),
            Self::BRAAZ_64_branch_reg { Rn, } => 0xd61f081f
                | ((*Rn as u32) << 5),
            Self::BRABZ_64_branch_reg { Rn, } => 0xd61f0c1f
                | ((*Rn as u32) << 5),
            Self::BLR_64_branch_reg { Rn, } => 0xd63f0000
                | ((*Rn as u32) << 5),
            Self::BLRAAZ_64_branch_reg { Rn, } => 0xd63f081f
                | ((*Rn as u32) << 5),
            Self::BLRABZ_64_branch_reg { Rn, } => 0xd63f0c1f
                | ((*Rn as u32) << 5),
            Self::RET_64R_branch_reg { Rn, } => 0xd65f0000
                | ((*Rn as u32) << 5),
            Self::PACIZA_64Z_dp_1src { Rd, } => 0xdac123e0
                | ((*Rd as u32) << 0),
            Self::PACIZB_64Z_dp_1src { Rd, } => 0xdac127e0
                | ((*Rd as u32) << 0),
            Self::PACDZA_64Z_dp_1src { Rd, } => 0xdac12be0
                | ((*Rd as u32) << 0),
            Self::PACDZB_64Z_dp_1src { Rd, } => 0xdac12fe0
                | ((*Rd as u32) << 0),
            Self::AUTIZA_64Z_dp_1src { Rd, } => 0xdac133e0
                | ((*Rd as u32) << 0),
            Self::AUTIZB_64Z_dp_1src { Rd, } => 0xdac137e0
                | ((*Rd as u32) << 0),
            Self::AUTDZA_64Z_dp_1src { Rd, } => 0xdac13be0
                | ((*Rd as u32) << 0),
            Self::AUTDZB_64Z_dp_1src { Rd, } => 0xdac13fe0
                | ((*Rd as u32) << 0),
            Self::XPACI_64Z_dp_1src { Rd, } => 0xdac143e0
                | ((*Rd as u32) << 0),
            Self::XPACD_64Z_dp_1src { Rd, } => 0xdac147e0
                | ((*Rd as u32) << 0),
            Self::FMOV_dup_z_i { size, Zd, } => 0x2538c000
                | ((*size as u32) << 22)
                | ((*Zd as u32) << 0),
            Self::HINT_HM_hints { CRm, op2, } => 0xd503201f
                | ((*CRm as u32) << 8)
                | ((*op2 as u32) << 5),
            Self::PUNPKLO_p_p { Pn, Pd, } => 0x05304000
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::PUNPKHI_p_p { Pn, Pd, } => 0x05314000
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::RDFFR_p_p_f { Pg, Pd, } => 0x2518f000
                | ((*Pg as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::PTEST_p_p { Pg, Pn, } => 0x2550c000
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5),
            Self::PFIRST_p_p_p { Pg, Pdn, } => 0x2558c000
                | ((*Pg as u32) << 5)
                | ((*Pdn as u32) << 0),
            Self::RDFFRS_p_p_f { Pg, Pd, } => 0x2558f000
                | ((*Pg as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CSET_CSINC_32_condsel { cond, Rd, } => 0x1a9f07e0
                | ((*cond as u32) << 12)
                | ((*Rd as u32) << 0),
            Self::CSETM_CSINV_32_condsel { cond, Rd, } => 0x5a9f03e0
                | ((*cond as u32) << 12)
                | ((*Rd as u32) << 0),
            Self::CSET_CSINC_64_condsel { cond, Rd, } => 0x9a9f07e0
                | ((*cond as u32) << 12)
                | ((*Rd as u32) << 0),
            Self::CSETM_CSINV_64_condsel { cond, Rd, } => 0xda9f03e0
                | ((*cond as u32) << 12)
                | ((*Rd as u32) << 0),
            Self::MOVPRFX_z_z { Zn, Zd, } => 0x0420bc00
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::REV_p_p { size, Pn, Pd, } => 0x05344000
                | ((*size as u32) << 22)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::MOV_ADD_32_addsub_imm { Rn, Rd, } => 0x11000000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SXTB_SBFM_32M_bitfield { Rn, Rd, } => 0x13001c00
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SXTH_SBFM_32M_bitfield { Rn, Rd, } => 0x13003c00
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNS_32S_float2int { Rn, Rd, } => 0x1e200000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMP_S_floatcmp { Rm, Rn, } => 0x1e202000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::FCMP_SZ_floatcmp { Rm, Rn, } => 0x1e202008
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::FCMPE_S_floatcmp { Rm, Rn, } => 0x1e202010
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::FCMPE_SZ_floatcmp { Rm, Rn, } => 0x1e202018
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::FMOV_S_floatdp1 { Rn, Rd, } => 0x1e204000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FABS_S_floatdp1 { Rn, Rd, } => 0x1e20c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNU_32S_float2int { Rn, Rd, } => 0x1e210000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FNEG_S_floatdp1 { Rn, Rd, } => 0x1e214000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FSQRT_S_floatdp1 { Rn, Rd, } => 0x1e21c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_S32_float2int { Rn, Rd, } => 0x1e220000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVT_DS_floatdp1 { Rn, Rd, } => 0x1e22c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_S32_float2int { Rn, Rd, } => 0x1e230000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVT_HS_floatdp1 { Rn, Rd, } => 0x1e23c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAS_32S_float2int { Rn, Rd, } => 0x1e240000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTN_S_floatdp1 { Rn, Rd, } => 0x1e244000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTP_S_floatdp1 { Rn, Rd, } => 0x1e24c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAU_32S_float2int { Rn, Rd, } => 0x1e250000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTM_S_floatdp1 { Rn, Rd, } => 0x1e254000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTZ_S_floatdp1 { Rn, Rd, } => 0x1e25c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMOV_32S_float2int { Rn, Rd, } => 0x1e260000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTA_S_floatdp1 { Rn, Rd, } => 0x1e264000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMOV_S32_float2int { Rn, Rd, } => 0x1e270000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTX_S_floatdp1 { Rn, Rd, } => 0x1e274000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTI_S_floatdp1 { Rn, Rd, } => 0x1e27c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPS_32S_float2int { Rn, Rd, } => 0x1e280000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINT32Z_S_floatdp1 { Rn, Rd, } => 0x1e284000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINT32X_S_floatdp1 { Rn, Rd, } => 0x1e28c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPU_32S_float2int { Rn, Rd, } => 0x1e290000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINT64Z_S_floatdp1 { Rn, Rd, } => 0x1e294000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINT64X_S_floatdp1 { Rn, Rd, } => 0x1e29c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMS_32S_float2int { Rn, Rd, } => 0x1e300000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMU_32S_float2int { Rn, Rd, } => 0x1e310000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_32S_float2int { Rn, Rd, } => 0x1e380000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_32S_float2int { Rn, Rd, } => 0x1e390000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNS_32D_float2int { Rn, Rd, } => 0x1e600000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMP_D_floatcmp { Rm, Rn, } => 0x1e602000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::FCMP_DZ_floatcmp { Rm, Rn, } => 0x1e602008
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::FCMPE_D_floatcmp { Rm, Rn, } => 0x1e602010
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::FCMPE_DZ_floatcmp { Rm, Rn, } => 0x1e602018
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::FMOV_D_floatdp1 { Rn, Rd, } => 0x1e604000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FABS_D_floatdp1 { Rn, Rd, } => 0x1e60c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNU_32D_float2int { Rn, Rd, } => 0x1e610000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FNEG_D_floatdp1 { Rn, Rd, } => 0x1e614000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FSQRT_D_floatdp1 { Rn, Rd, } => 0x1e61c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_D32_float2int { Rn, Rd, } => 0x1e620000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVT_SD_floatdp1 { Rn, Rd, } => 0x1e624000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_D32_float2int { Rn, Rd, } => 0x1e630000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BFCVT_BS_floatdp1 { Rn, Rd, } => 0x1e634000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVT_HD_floatdp1 { Rn, Rd, } => 0x1e63c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAS_32D_float2int { Rn, Rd, } => 0x1e640000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTN_D_floatdp1 { Rn, Rd, } => 0x1e644000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTP_D_floatdp1 { Rn, Rd, } => 0x1e64c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAU_32D_float2int { Rn, Rd, } => 0x1e650000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTM_D_floatdp1 { Rn, Rd, } => 0x1e654000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTZ_D_floatdp1 { Rn, Rd, } => 0x1e65c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTA_D_floatdp1 { Rn, Rd, } => 0x1e664000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTX_D_floatdp1 { Rn, Rd, } => 0x1e674000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTI_D_floatdp1 { Rn, Rd, } => 0x1e67c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPS_32D_float2int { Rn, Rd, } => 0x1e680000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINT32Z_D_floatdp1 { Rn, Rd, } => 0x1e684000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINT32X_D_floatdp1 { Rn, Rd, } => 0x1e68c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPU_32D_float2int { Rn, Rd, } => 0x1e690000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINT64Z_D_floatdp1 { Rn, Rd, } => 0x1e694000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINT64X_D_floatdp1 { Rn, Rd, } => 0x1e69c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMS_32D_float2int { Rn, Rd, } => 0x1e700000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMU_32D_float2int { Rn, Rd, } => 0x1e710000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_32D_float2int { Rn, Rd, } => 0x1e780000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_32D_float2int { Rn, Rd, } => 0x1e790000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FJCVTZS_32D_float2int { Rn, Rd, } => 0x1e7e0000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNS_32H_float2int { Rn, Rd, } => 0x1ee00000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMP_H_floatcmp { Rm, Rn, } => 0x1ee02000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::FCMP_HZ_floatcmp { Rm, Rn, } => 0x1ee02008
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::FCMPE_H_floatcmp { Rm, Rn, } => 0x1ee02010
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::FCMPE_HZ_floatcmp { Rm, Rn, } => 0x1ee02018
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::FMOV_H_floatdp1 { Rn, Rd, } => 0x1ee04000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FABS_H_floatdp1 { Rn, Rd, } => 0x1ee0c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNU_32H_float2int { Rn, Rd, } => 0x1ee10000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FNEG_H_floatdp1 { Rn, Rd, } => 0x1ee14000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FSQRT_H_floatdp1 { Rn, Rd, } => 0x1ee1c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_H32_float2int { Rn, Rd, } => 0x1ee20000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVT_SH_floatdp1 { Rn, Rd, } => 0x1ee24000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVT_DH_floatdp1 { Rn, Rd, } => 0x1ee2c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_H32_float2int { Rn, Rd, } => 0x1ee30000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAS_32H_float2int { Rn, Rd, } => 0x1ee40000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTN_H_floatdp1 { Rn, Rd, } => 0x1ee44000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTP_H_floatdp1 { Rn, Rd, } => 0x1ee4c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAU_32H_float2int { Rn, Rd, } => 0x1ee50000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTM_H_floatdp1 { Rn, Rd, } => 0x1ee54000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTZ_H_floatdp1 { Rn, Rd, } => 0x1ee5c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMOV_32H_float2int { Rn, Rd, } => 0x1ee60000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTA_H_floatdp1 { Rn, Rd, } => 0x1ee64000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMOV_H32_float2int { Rn, Rd, } => 0x1ee70000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTX_H_floatdp1 { Rn, Rd, } => 0x1ee74000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTI_H_floatdp1 { Rn, Rd, } => 0x1ee7c000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPS_32H_float2int { Rn, Rd, } => 0x1ee80000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPU_32H_float2int { Rn, Rd, } => 0x1ee90000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMS_32H_float2int { Rn, Rd, } => 0x1ef00000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMU_32H_float2int { Rn, Rd, } => 0x1ef10000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_32H_float2int { Rn, Rd, } => 0x1ef80000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_32H_float2int { Rn, Rd, } => 0x1ef90000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::PNEXT_p_p_p { size, Pg, Pdn, } => 0x2519c400
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 5)
                | ((*Pdn as u32) << 0),
            Self::MOV_ORR_32_log_shift { Rm, Rd, } => 0x2a0003e0
                | ((*Rm as u32) << 16)
                | ((*Rd as u32) << 0),
            Self::STADDB_LDADDB_32_memop { Rs, Rn, } => 0x3820001f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STCLRB_LDCLRB_32_memop { Rs, Rn, } => 0x3820101f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STEORB_LDEORB_32_memop { Rs, Rn, } => 0x3820201f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSETB_LDSETB_32_memop { Rs, Rn, } => 0x3820301f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSMAXB_LDSMAXB_32_memop { Rs, Rn, } => 0x3820401f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSMINB_LDSMINB_32_memop { Rs, Rn, } => 0x3820501f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STUMAXB_LDUMAXB_32_memop { Rs, Rn, } => 0x3820601f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STUMINB_LDUMINB_32_memop { Rs, Rn, } => 0x3820701f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STADDLB_LDADDLB_32_memop { Rs, Rn, } => 0x3860001f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STCLRLB_LDCLRLB_32_memop { Rs, Rn, } => 0x3860101f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STEORLB_LDEORLB_32_memop { Rs, Rn, } => 0x3860201f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSETLB_LDSETLB_32_memop { Rs, Rn, } => 0x3860301f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSMAXLB_LDSMAXLB_32_memop { Rs, Rn, } => 0x3860401f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSMINLB_LDSMINLB_32_memop { Rs, Rn, } => 0x3860501f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STUMAXLB_LDUMAXLB_32_memop { Rs, Rn, } => 0x3860601f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STUMINLB_LDUMINLB_32_memop { Rs, Rn, } => 0x3860701f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::AESE_B_cryptoaes { Rn, Rd, } => 0x4e284800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::AESD_B_cryptoaes { Rn, Rd, } => 0x4e285800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::AESMC_B_cryptoaes { Rn, Rd, } => 0x4e286800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::AESIMC_B_cryptoaes { Rn, Rd, } => 0x4e287800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UXTB_UBFM_32M_bitfield { Rn, Rd, } => 0x53001c00
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UXTH_UBFM_32M_bitfield { Rn, Rd, } => 0x53003c00
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::NGC_SBC_32_addsub_carry { Rm, Rd, } => 0x5a0003e0
                | ((*Rm as u32) << 16)
                | ((*Rd as u32) << 0),
            Self::RBIT_32_dp_1src { Rn, Rd, } => 0x5ac00000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::REV16_32_dp_1src { Rn, Rd, } => 0x5ac00400
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::REV_32_dp_1src { Rn, Rd, } => 0x5ac00800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CLZ_32_dp_1src { Rn, Rd, } => 0x5ac01000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CLS_32_dp_1src { Rn, Rd, } => 0x5ac01400
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHA1H_SS_cryptosha2 { Rn, Rd, } => 0x5e280800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHA1SU1_VV_cryptosha2 { Rn, Rd, } => 0x5e281800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHA256SU0_VV_cryptosha2 { Rn, Rd, } => 0x5e282800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNS_asisdmiscfp16_R { Rn, Rd, } => 0x5e79a800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMS_asisdmiscfp16_R { Rn, Rd, } => 0x5e79b800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAS_asisdmiscfp16_R { Rn, Rd, } => 0x5e79c800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_asisdmiscfp16_R { Rn, Rd, } => 0x5e79d800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGT_asisdmiscfp16_FZ { Rn, Rd, } => 0x5ef8c800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMEQ_asisdmiscfp16_FZ { Rn, Rd, } => 0x5ef8d800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMLT_asisdmiscfp16_FZ { Rn, Rd, } => 0x5ef8e800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPS_asisdmiscfp16_R { Rn, Rd, } => 0x5ef9a800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_asisdmiscfp16_R { Rn, Rd, } => 0x5ef9b800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRECPE_asisdmiscfp16_R { Rn, Rd, } => 0x5ef9d800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRECPX_asisdmiscfp16_R { Rn, Rd, } => 0x5ef9f800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::STADDH_LDADDH_32_memop { Rs, Rn, } => 0x7820001f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STCLRH_LDCLRH_32_memop { Rs, Rn, } => 0x7820101f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STEORH_LDEORH_32_memop { Rs, Rn, } => 0x7820201f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSETH_LDSETH_32_memop { Rs, Rn, } => 0x7820301f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSMAXH_LDSMAXH_32_memop { Rs, Rn, } => 0x7820401f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSMINH_LDSMINH_32_memop { Rs, Rn, } => 0x7820501f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STUMAXH_LDUMAXH_32_memop { Rs, Rn, } => 0x7820601f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STUMINH_LDUMINH_32_memop { Rs, Rn, } => 0x7820701f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STADDLH_LDADDLH_32_memop { Rs, Rn, } => 0x7860001f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STCLRLH_LDCLRLH_32_memop { Rs, Rn, } => 0x7860101f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STEORLH_LDEORLH_32_memop { Rs, Rn, } => 0x7860201f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSETLH_LDSETLH_32_memop { Rs, Rn, } => 0x7860301f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSMAXLH_LDSMAXLH_32_memop { Rs, Rn, } => 0x7860401f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSMINLH_LDSMINLH_32_memop { Rs, Rn, } => 0x7860501f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STUMAXLH_LDUMAXLH_32_memop { Rs, Rn, } => 0x7860601f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STUMINLH_LDUMINLH_32_memop { Rs, Rn, } => 0x7860701f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::NGCS_SBCS_32_addsub_carry { Rm, Rd, } => 0x7a0003e0
                | ((*Rm as u32) << 16)
                | ((*Rd as u32) << 0),
            Self::FCVTNU_asisdmiscfp16_R { Rn, Rd, } => 0x7e79a800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMU_asisdmiscfp16_R { Rn, Rd, } => 0x7e79b800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAU_asisdmiscfp16_R { Rn, Rd, } => 0x7e79c800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_asisdmiscfp16_R { Rn, Rd, } => 0x7e79d800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGE_asisdmiscfp16_FZ { Rn, Rd, } => 0x7ef8c800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMLE_asisdmiscfp16_FZ { Rn, Rd, } => 0x7ef8d800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPU_asisdmiscfp16_R { Rn, Rd, } => 0x7ef9a800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_asisdmiscfp16_R { Rn, Rd, } => 0x7ef9b800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRSQRTE_asisdmiscfp16_R { Rn, Rd, } => 0x7ef9d800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOV_ADD_64_addsub_imm { Rn, Rd, } => 0x91000000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SXTB_SBFM_64M_bitfield { Rn, Rd, } => 0x93401c00
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SXTH_SBFM_64M_bitfield { Rn, Rd, } => 0x93403c00
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SXTW_SBFM_64M_bitfield { Rn, Rd, } => 0x93407c00
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNS_64S_float2int { Rn, Rd, } => 0x9e200000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNU_64S_float2int { Rn, Rd, } => 0x9e210000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_S64_float2int { Rn, Rd, } => 0x9e220000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_S64_float2int { Rn, Rd, } => 0x9e230000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAS_64S_float2int { Rn, Rd, } => 0x9e240000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAU_64S_float2int { Rn, Rd, } => 0x9e250000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPS_64S_float2int { Rn, Rd, } => 0x9e280000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPU_64S_float2int { Rn, Rd, } => 0x9e290000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMS_64S_float2int { Rn, Rd, } => 0x9e300000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMU_64S_float2int { Rn, Rd, } => 0x9e310000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_64S_float2int { Rn, Rd, } => 0x9e380000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_64S_float2int { Rn, Rd, } => 0x9e390000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNS_64D_float2int { Rn, Rd, } => 0x9e600000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNU_64D_float2int { Rn, Rd, } => 0x9e610000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_D64_float2int { Rn, Rd, } => 0x9e620000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_D64_float2int { Rn, Rd, } => 0x9e630000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAS_64D_float2int { Rn, Rd, } => 0x9e640000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAU_64D_float2int { Rn, Rd, } => 0x9e650000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMOV_64D_float2int { Rn, Rd, } => 0x9e660000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMOV_D64_float2int { Rn, Rd, } => 0x9e670000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPS_64D_float2int { Rn, Rd, } => 0x9e680000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPU_64D_float2int { Rn, Rd, } => 0x9e690000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMS_64D_float2int { Rn, Rd, } => 0x9e700000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMU_64D_float2int { Rn, Rd, } => 0x9e710000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_64D_float2int { Rn, Rd, } => 0x9e780000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_64D_float2int { Rn, Rd, } => 0x9e790000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMOV_64VX_float2int { Rn, Rd, } => 0x9eae0000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMOV_V64I_float2int { Rn, Rd, } => 0x9eaf0000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNS_64H_float2int { Rn, Rd, } => 0x9ee00000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNU_64H_float2int { Rn, Rd, } => 0x9ee10000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_H64_float2int { Rn, Rd, } => 0x9ee20000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_H64_float2int { Rn, Rd, } => 0x9ee30000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAS_64H_float2int { Rn, Rd, } => 0x9ee40000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAU_64H_float2int { Rn, Rd, } => 0x9ee50000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMOV_64H_float2int { Rn, Rd, } => 0x9ee60000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMOV_H64_float2int { Rn, Rd, } => 0x9ee70000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPS_64H_float2int { Rn, Rd, } => 0x9ee80000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPU_64H_float2int { Rn, Rd, } => 0x9ee90000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMS_64H_float2int { Rn, Rd, } => 0x9ef00000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMU_64H_float2int { Rn, Rd, } => 0x9ef10000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_64H_float2int { Rn, Rd, } => 0x9ef80000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_64H_float2int { Rn, Rd, } => 0x9ef90000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOV_ORR_64_log_shift { Rm, Rd, } => 0xaa0003e0
                | ((*Rm as u32) << 16)
                | ((*Rd as u32) << 0),
            Self::STADD_LDADD_32_memop { Rs, Rn, } => 0xb820001f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STCLR_LDCLR_32_memop { Rs, Rn, } => 0xb820101f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STEOR_LDEOR_32_memop { Rs, Rn, } => 0xb820201f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSET_LDSET_32_memop { Rs, Rn, } => 0xb820301f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSMAX_LDSMAX_32_memop { Rs, Rn, } => 0xb820401f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSMIN_LDSMIN_32_memop { Rs, Rn, } => 0xb820501f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STUMAX_LDUMAX_32_memop { Rs, Rn, } => 0xb820601f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STUMIN_LDUMIN_32_memop { Rs, Rn, } => 0xb820701f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STADDL_LDADDL_32_memop { Rs, Rn, } => 0xb860001f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STCLRL_LDCLRL_32_memop { Rs, Rn, } => 0xb860101f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STEORL_LDEORL_32_memop { Rs, Rn, } => 0xb860201f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSETL_LDSETL_32_memop { Rs, Rn, } => 0xb860301f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSMAXL_LDSMAXL_32_memop { Rs, Rn, } => 0xb860401f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSMINL_LDSMINL_32_memop { Rs, Rn, } => 0xb860501f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STUMAXL_LDUMAXL_32_memop { Rs, Rn, } => 0xb860601f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STUMINL_LDUMINL_32_memop { Rs, Rn, } => 0xb860701f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::CMPP_SUBPS_64S_dp_2src { Xm, Xn, } => 0xbac0001f
                | ((*Xm as u32) << 16)
                | ((*Xn as u32) << 5),
            Self::SHA512SU0_VV2_cryptosha512_2 { Rn, Rd, } => 0xcec08000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SM4E_VV4_cryptosha512_2 { Rn, Rd, } => 0xcec08400
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MSR_SI_pstate { op1, CRm, op2, } => 0xd500401f
                | ((*op1 as u32) << 16)
                | ((*CRm as u32) << 8)
                | ((*op2 as u32) << 5),
            Self::BRAA_64P_branch_reg { Rn, Rm, } => 0xd71f0800
                | ((*Rn as u32) << 5)
                | ((*Rm as u32) << 0),
            Self::BRAB_64P_branch_reg { Rn, Rm, } => 0xd71f0c00
                | ((*Rn as u32) << 5)
                | ((*Rm as u32) << 0),
            Self::BLRAA_64P_branch_reg { Rn, Rm, } => 0xd73f0800
                | ((*Rn as u32) << 5)
                | ((*Rm as u32) << 0),
            Self::BLRAB_64P_branch_reg { Rn, Rm, } => 0xd73f0c00
                | ((*Rn as u32) << 5)
                | ((*Rm as u32) << 0),
            Self::STZGM_64bulk_ldsttags { Xn, Xt, } => 0xd9200000
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::STGM_64bulk_ldsttags { Xn, Xt, } => 0xd9a00000
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::LDGM_64bulk_ldsttags { Xn, Xt, } => 0xd9e00000
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::NGC_SBC_64_addsub_carry { Rm, Rd, } => 0xda0003e0
                | ((*Rm as u32) << 16)
                | ((*Rd as u32) << 0),
            Self::RBIT_64_dp_1src { Rn, Rd, } => 0xdac00000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::REV16_64_dp_1src { Rn, Rd, } => 0xdac00400
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::REV32_64_dp_1src { Rn, Rd, } => 0xdac00800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::REV_64_dp_1src { Rn, Rd, } => 0xdac00c00
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::REV64_REV_64_dp_1src { Rn, Rd, } => 0xdac00c00
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CLZ_64_dp_1src { Rn, Rd, } => 0xdac01000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CLS_64_dp_1src { Rn, Rd, } => 0xdac01400
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::PACIA_64P_dp_1src { Rn, Rd, } => 0xdac10000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::PACIB_64P_dp_1src { Rn, Rd, } => 0xdac10400
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::PACDA_64P_dp_1src { Rn, Rd, } => 0xdac10800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::PACDB_64P_dp_1src { Rn, Rd, } => 0xdac10c00
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::AUTIA_64P_dp_1src { Rn, Rd, } => 0xdac11000
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::AUTIB_64P_dp_1src { Rn, Rd, } => 0xdac11400
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::AUTDA_64P_dp_1src { Rn, Rd, } => 0xdac11800
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::AUTDB_64P_dp_1src { Rn, Rd, } => 0xdac11c00
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::STADD_LDADD_64_memop { Rs, Rn, } => 0xf820001f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STCLR_LDCLR_64_memop { Rs, Rn, } => 0xf820101f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STEOR_LDEOR_64_memop { Rs, Rn, } => 0xf820201f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSET_LDSET_64_memop { Rs, Rn, } => 0xf820301f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSMAX_LDSMAX_64_memop { Rs, Rn, } => 0xf820401f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSMIN_LDSMIN_64_memop { Rs, Rn, } => 0xf820501f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STUMAX_LDUMAX_64_memop { Rs, Rn, } => 0xf820601f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STUMIN_LDUMIN_64_memop { Rs, Rn, } => 0xf820701f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::ST64B_64L_memop { Rn, Rt, } => 0xf83f9000
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD64B_64L_memop { Rn, Rt, } => 0xf83fd000
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STADDL_LDADDL_64_memop { Rs, Rn, } => 0xf860001f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STCLRL_LDCLRL_64_memop { Rs, Rn, } => 0xf860101f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STEORL_LDEORL_64_memop { Rs, Rn, } => 0xf860201f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSETL_LDSETL_64_memop { Rs, Rn, } => 0xf860301f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSMAXL_LDSMAXL_64_memop { Rs, Rn, } => 0xf860401f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STSMINL_LDSMINL_64_memop { Rs, Rn, } => 0xf860501f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STUMAXL_LDUMAXL_64_memop { Rs, Rn, } => 0xf860601f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::STUMINL_LDUMINL_64_memop { Rs, Rn, } => 0xf860701f
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::NGCS_SBCS_64_addsub_carry { Rm, Rd, } => 0xfa0003e0
                | ((*Rm as u32) << 16)
                | ((*Rd as u32) << 0),
            Self::RDVL_r_i { imm6, Rd, } => 0x04bf5000
                | ((*imm6 as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMOV_cpy_z_p_i { size, Pg, Zd, } => 0x05104000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 16)
                | ((*Zd as u32) << 0),
            Self::ST1_asisdlso_D1_1d { Q, Rn, Rt, } => 0x0d008400
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST3_asisdlso_D3_3d { Q, Rn, Rt, } => 0x0d00a400
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST2_asisdlso_D2_2d { Q, Rn, Rt, } => 0x0d208400
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST4_asisdlso_D4_4d { Q, Rn, Rt, } => 0x0d20a400
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlso_D1_1d { Q, Rn, Rt, } => 0x0d408400
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3_asisdlso_D3_3d { Q, Rn, Rt, } => 0x0d40a400
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2_asisdlso_D2_2d { Q, Rn, Rt, } => 0x0d608400
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4_asisdlso_D4_4d { Q, Rn, Rt, } => 0x0d60a400
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlsop_D1_i1d { Q, Rn, Rt, } => 0x0d9f8400
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST3_asisdlsop_D3_i3d { Q, Rn, Rt, } => 0x0d9fa400
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST2_asisdlsop_D2_i2d { Q, Rn, Rt, } => 0x0dbf8400
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST4_asisdlsop_D4_i4d { Q, Rn, Rt, } => 0x0dbfa400
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlsop_D1_i1d { Q, Rn, Rt, } => 0x0ddf8400
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3_asisdlsop_D3_i3d { Q, Rn, Rt, } => 0x0ddfa400
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2_asisdlsop_D2_i2d { Q, Rn, Rt, } => 0x0dff8400
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4_asisdlsop_D4_i4d { Q, Rn, Rt, } => 0x0dffa400
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::FMAXNMV_asimdall_only_H { Q, Rn, Rd, } => 0x0e30c800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAXV_asimdall_only_H { Q, Rn, Rd, } => 0x0e30f800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTN_asimdmiscfp16_R { Q, Rn, Rd, } => 0x0e798800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTM_asimdmiscfp16_R { Q, Rn, Rd, } => 0x0e799800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNS_asimdmiscfp16_R { Q, Rn, Rd, } => 0x0e79a800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMS_asimdmiscfp16_R { Q, Rn, Rd, } => 0x0e79b800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAS_asimdmiscfp16_R { Q, Rn, Rd, } => 0x0e79c800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_asimdmiscfp16_R { Q, Rn, Rd, } => 0x0e79d800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BFCVTN_asimdmisc_4S { Q, Rn, Rd, } => 0x0ea16800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINNMV_asimdall_only_H { Q, Rn, Rd, } => 0x0eb0c800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINV_asimdall_only_H { Q, Rn, Rd, } => 0x0eb0f800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGT_asimdmiscfp16_FZ { Q, Rn, Rd, } => 0x0ef8c800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMEQ_asimdmiscfp16_FZ { Q, Rn, Rd, } => 0x0ef8d800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMLT_asimdmiscfp16_FZ { Q, Rn, Rd, } => 0x0ef8e800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FABS_asimdmiscfp16_R { Q, Rn, Rd, } => 0x0ef8f800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTP_asimdmiscfp16_R { Q, Rn, Rd, } => 0x0ef98800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTZ_asimdmiscfp16_R { Q, Rn, Rd, } => 0x0ef99800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPS_asimdmiscfp16_R { Q, Rn, Rd, } => 0x0ef9a800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_asimdmiscfp16_R { Q, Rn, Rd, } => 0x0ef9b800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRECPE_asimdmiscfp16_R { Q, Rn, Rd, } => 0x0ef9d800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::PTRUE_p_s { size, pattern, Pd, } => 0x2518e000
                | ((*size as u32) << 22)
                | ((*pattern as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::PTRUES_p_s { size, pattern, Pd, } => 0x2519e000
                | ((*size as u32) << 22)
                | ((*pattern as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::SQINCP_z_p_z { size, Pm, Zdn, } => 0x25288000
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SQINCP_r_p_r_sx { size, Pm, Rdn, } => 0x25288800
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQINCP_r_p_r_x { size, Pm, Rdn, } => 0x25288c00
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQINCP_z_p_z { size, Pm, Zdn, } => 0x25298000
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UQINCP_r_p_r_uw { size, Pm, Rdn, } => 0x25298800
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQINCP_r_p_r_x { size, Pm, Rdn, } => 0x25298c00
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQDECP_z_p_z { size, Pm, Zdn, } => 0x252a8000
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SQDECP_r_p_r_sx { size, Pm, Rdn, } => 0x252a8800
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQDECP_r_p_r_x { size, Pm, Rdn, } => 0x252a8c00
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQDECP_z_p_z { size, Pm, Zdn, } => 0x252b8000
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UQDECP_r_p_r_uw { size, Pm, Rdn, } => 0x252b8800
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQDECP_r_p_r_x { size, Pm, Rdn, } => 0x252b8c00
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::INCP_z_p_z { size, Pm, Zdn, } => 0x252c8000
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::INCP_r_p_r { size, Pm, Rdn, } => 0x252c8800
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::DECP_z_p_z { size, Pm, Zdn, } => 0x252d8000
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::DECP_r_p_r { size, Pm, Rdn, } => 0x252d8800
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::CTERMEQ_rr { sz, Rm, Rn, } => 0x25a02000
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::CTERMNE_rr { sz, Rm, Rn, } => 0x25a02010
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5),
            Self::MVN_NOT_asimdmisc_R { Q, Rn, Rd, } => 0x2e205800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::NOT_asimdmisc_R { Q, Rn, Rd, } => 0x2e205800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::RBIT_asimdmisc_R { Q, Rn, Rd, } => 0x2e605800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTA_asimdmiscfp16_R { Q, Rn, Rd, } => 0x2e798800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTX_asimdmiscfp16_R { Q, Rn, Rd, } => 0x2e799800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNU_asimdmiscfp16_R { Q, Rn, Rd, } => 0x2e79a800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMU_asimdmiscfp16_R { Q, Rn, Rd, } => 0x2e79b800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAU_asimdmiscfp16_R { Q, Rn, Rd, } => 0x2e79c800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_asimdmiscfp16_R { Q, Rn, Rd, } => 0x2e79d800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGE_asimdmiscfp16_FZ { Q, Rn, Rd, } => 0x2ef8c800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMLE_asimdmiscfp16_FZ { Q, Rn, Rd, } => 0x2ef8d800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FNEG_asimdmiscfp16_R { Q, Rn, Rd, } => 0x2ef8f800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTI_asimdmiscfp16_R { Q, Rn, Rd, } => 0x2ef99800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPU_asimdmiscfp16_R { Q, Rn, Rd, } => 0x2ef9a800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_asimdmiscfp16_R { Q, Rn, Rd, } => 0x2ef9b800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRSQRTE_asimdmiscfp16_R { Q, Rn, Rd, } => 0x2ef9d800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FSQRT_asimdmiscfp16_R { Q, Rn, Rd, } => 0x2ef9f800
                | ((*Q as u32) << 30)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOV_UMOV_asimdins_X_x { imm5, Rn, Rd, } => 0x4e083c00
                | ((*imm5 as u32) << 20)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMOV_asimdins_X_x { imm5, Rn, Rd, } => 0x4e083c00
                | ((*imm5 as u32) << 20)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNS_asisdmisc_R { sz, Rn, Rd, } => 0x5e21a800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMS_asisdmisc_R { sz, Rn, Rd, } => 0x5e21b800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAS_asisdmisc_R { sz, Rn, Rd, } => 0x5e21c800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_asisdmisc_R { sz, Rn, Rd, } => 0x5e21d800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAXNMP_asisdpair_only_H { sz, Rn, Rd, } => 0x5e30c800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FADDP_asisdpair_only_H { sz, Rn, Rd, } => 0x5e30d800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAXP_asisdpair_only_H { sz, Rn, Rd, } => 0x5e30f800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGT_asisdmisc_FZ { sz, Rn, Rd, } => 0x5ea0c800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMEQ_asisdmisc_FZ { sz, Rn, Rd, } => 0x5ea0d800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMLT_asisdmisc_FZ { sz, Rn, Rd, } => 0x5ea0e800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPS_asisdmisc_R { sz, Rn, Rd, } => 0x5ea1a800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_asisdmisc_R { sz, Rn, Rd, } => 0x5ea1b800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRECPE_asisdmisc_R { sz, Rn, Rd, } => 0x5ea1d800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRECPX_asisdmisc_R { sz, Rn, Rd, } => 0x5ea1f800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINNMP_asisdpair_only_H { sz, Rn, Rd, } => 0x5eb0c800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINP_asisdpair_only_H { sz, Rn, Rd, } => 0x5eb0f800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FADD_z_p_zs { size, Pg, i1, Zdn, } => 0x65188000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*i1 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FSUB_z_p_zs { size, Pg, i1, Zdn, } => 0x65198000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*i1 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FMUL_z_p_zs { size, Pg, i1, Zdn, } => 0x651a8000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*i1 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FSUBR_z_p_zs { size, Pg, i1, Zdn, } => 0x651b8000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*i1 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FMAXNM_z_p_zs { size, Pg, i1, Zdn, } => 0x651c8000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*i1 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FMINNM_z_p_zs { size, Pg, i1, Zdn, } => 0x651d8000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*i1 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FMAX_z_p_zs { size, Pg, i1, Zdn, } => 0x651e8000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*i1 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FMIN_z_p_zs { size, Pg, i1, Zdn, } => 0x651f8000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*i1 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FCVTXN_asisdmisc_N { sz, Rn, Rd, } => 0x7e216800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNU_asisdmisc_R { sz, Rn, Rd, } => 0x7e21a800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMU_asisdmisc_R { sz, Rn, Rd, } => 0x7e21b800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAU_asisdmisc_R { sz, Rn, Rd, } => 0x7e21c800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_asisdmisc_R { sz, Rn, Rd, } => 0x7e21d800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAXNMP_asisdpair_only_SD { sz, Rn, Rd, } => 0x7e30c800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FADDP_asisdpair_only_SD { sz, Rn, Rd, } => 0x7e30d800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAXP_asisdpair_only_SD { sz, Rn, Rd, } => 0x7e30f800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGE_asisdmisc_FZ { sz, Rn, Rd, } => 0x7ea0c800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMLE_asisdmisc_FZ { sz, Rn, Rd, } => 0x7ea0d800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPU_asisdmisc_R { sz, Rn, Rd, } => 0x7ea1a800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_asisdmisc_R { sz, Rn, Rd, } => 0x7ea1b800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRSQRTE_asisdmisc_R { sz, Rn, Rd, } => 0x7ea1d800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINNMP_asisdpair_only_SD { sz, Rn, Rd, } => 0x7eb0c800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINP_asisdpair_only_SD { sz, Rn, Rd, } => 0x7eb0f800
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FEXPA_z_z { size, Zn, Zd, } => 0x0420b800
                | ((*size as u32) << 22)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::DUP_z_r { size, Rn, Zd, } => 0x05203800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::MOV_dup_z_r { size, Rn, Zd, } => 0x05203800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::INSR_z_r { size, Rm, Zdn, } => 0x05243800
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SUNPKLO_z_z { size, Zn, Zd, } => 0x05303800
                | ((*size as u32) << 22)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::SUNPKHI_z_z { size, Zn, Zd, } => 0x05313800
                | ((*size as u32) << 22)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UUNPKLO_z_z { size, Zn, Zd, } => 0x05323800
                | ((*size as u32) << 22)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UUNPKHI_z_z { size, Zn, Zd, } => 0x05333800
                | ((*size as u32) << 22)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::INSR_z_v { size, Vm, Zdn, } => 0x05343800
                | ((*size as u32) << 22)
                | ((*Vm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::REV_z_z { size, Zn, Zd, } => 0x05383800
                | ((*size as u32) << 22)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ST1_asisdlso_S1_1s { Q, S, Rn, Rt, } => 0x0d008000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST3_asisdlso_S3_3s { Q, S, Rn, Rt, } => 0x0d00a000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST2_asisdlso_S2_2s { Q, S, Rn, Rt, } => 0x0d208000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST4_asisdlso_S4_4s { Q, S, Rn, Rt, } => 0x0d20a000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlso_S1_1s { Q, S, Rn, Rt, } => 0x0d408000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3_asisdlso_S3_3s { Q, S, Rn, Rt, } => 0x0d40a000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2_asisdlso_S2_2s { Q, S, Rn, Rt, } => 0x0d608000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4_asisdlso_S4_4s { Q, S, Rn, Rt, } => 0x0d60a000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlsop_S1_i1s { Q, S, Rn, Rt, } => 0x0d9f8000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST3_asisdlsop_S3_i3s { Q, S, Rn, Rt, } => 0x0d9fa000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST2_asisdlsop_S2_i2s { Q, S, Rn, Rt, } => 0x0dbf8000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST4_asisdlsop_S4_i4s { Q, S, Rn, Rt, } => 0x0dbfa000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlsop_S1_i1s { Q, S, Rn, Rt, } => 0x0ddf8000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3_asisdlsop_S3_i3s { Q, S, Rn, Rt, } => 0x0ddfa000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2_asisdlsop_S2_i2s { Q, S, Rn, Rt, } => 0x0dff8000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4_asisdlsop_S4_i4s { Q, S, Rn, Rt, } => 0x0dffa000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::MOV_UMOV_asimdins_W_w { imm5, Rn, Rd, } => 0x0e043c00
                | ((*imm5 as u32) << 19)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTN_asimdmisc_N { Q, sz, Rn, Rd, } => 0x0e216800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTL_asimdmisc_L { Q, sz, Rn, Rd, } => 0x0e217800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTN_asimdmisc_R { Q, sz, Rn, Rd, } => 0x0e218800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTM_asimdmisc_R { Q, sz, Rn, Rd, } => 0x0e219800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNS_asimdmisc_R { Q, sz, Rn, Rd, } => 0x0e21a800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMS_asimdmisc_R { Q, sz, Rn, Rd, } => 0x0e21b800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAS_asimdmisc_R { Q, sz, Rn, Rd, } => 0x0e21c800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_asimdmisc_R { Q, sz, Rn, Rd, } => 0x0e21d800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINT32Z_asimdmisc_R { Q, sz, Rn, Rd, } => 0x0e21e800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINT64Z_asimdmisc_R { Q, sz, Rn, Rd, } => 0x0e21f800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGT_asimdmisc_FZ { Q, sz, Rn, Rd, } => 0x0ea0c800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMEQ_asimdmisc_FZ { Q, sz, Rn, Rd, } => 0x0ea0d800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMLT_asimdmisc_FZ { Q, sz, Rn, Rd, } => 0x0ea0e800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FABS_asimdmisc_R { Q, sz, Rn, Rd, } => 0x0ea0f800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTP_asimdmisc_R { Q, sz, Rn, Rd, } => 0x0ea18800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTZ_asimdmisc_R { Q, sz, Rn, Rd, } => 0x0ea19800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPS_asimdmisc_R { Q, sz, Rn, Rd, } => 0x0ea1a800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_asimdmisc_R { Q, sz, Rn, Rd, } => 0x0ea1b800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::URECPE_asimdmisc_R { Q, sz, Rn, Rd, } => 0x0ea1c800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRECPE_asimdmisc_R { Q, sz, Rn, Rd, } => 0x0ea1d800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BRKN_p_p_pp { Pg, Pn, Pdm, } => 0x25184000
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pdm as u32) << 0),
            Self::BRKAS_p_p_p_z { Pg, Pn, Pd, } => 0x25504000
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::BRKNS_p_p_pp { Pg, Pn, Pdm, } => 0x25584000
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pdm as u32) << 0),
            Self::BRKBS_p_p_p_z { Pg, Pn, Pd, } => 0x25d04000
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FCVTXN_asimdmisc_N { Q, sz, Rn, Rd, } => 0x2e216800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTA_asimdmisc_R { Q, sz, Rn, Rd, } => 0x2e218800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTX_asimdmisc_R { Q, sz, Rn, Rd, } => 0x2e219800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTNU_asimdmisc_R { Q, sz, Rn, Rd, } => 0x2e21a800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTMU_asimdmisc_R { Q, sz, Rn, Rd, } => 0x2e21b800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTAU_asimdmisc_R { Q, sz, Rn, Rd, } => 0x2e21c800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_asimdmisc_R { Q, sz, Rn, Rd, } => 0x2e21d800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINT32X_asimdmisc_R { Q, sz, Rn, Rd, } => 0x2e21e800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINT64X_asimdmisc_R { Q, sz, Rn, Rd, } => 0x2e21f800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAXNMV_asimdall_only_SD { Q, sz, Rn, Rd, } => 0x2e30c800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAXV_asimdall_only_SD { Q, sz, Rn, Rd, } => 0x2e30f800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGE_asimdmisc_FZ { Q, sz, Rn, Rd, } => 0x2ea0c800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMLE_asimdmisc_FZ { Q, sz, Rn, Rd, } => 0x2ea0d800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FNEG_asimdmisc_R { Q, sz, Rn, Rd, } => 0x2ea0f800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRINTI_asimdmisc_R { Q, sz, Rn, Rd, } => 0x2ea19800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTPU_asimdmisc_R { Q, sz, Rn, Rd, } => 0x2ea1a800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_asimdmisc_R { Q, sz, Rn, Rd, } => 0x2ea1b800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::URSQRTE_asimdmisc_R { Q, sz, Rn, Rd, } => 0x2ea1c800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRSQRTE_asimdmisc_R { Q, sz, Rn, Rd, } => 0x2ea1d800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FSQRT_asimdmisc_R { Q, sz, Rn, Rd, } => 0x2ea1f800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINNMV_asimdall_only_SD { Q, sz, Rn, Rd, } => 0x2eb0c800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINV_asimdall_only_SD { Q, sz, Rn, Rd, } => 0x2eb0f800
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUQADD_asisdmisc_R { size, Rn, Rd, } => 0x5e203800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQABS_asisdmisc_R { size, Rn, Rd, } => 0x5e207800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMGT_asisdmisc_Z { size, Rn, Rd, } => 0x5e208800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMEQ_asisdmisc_Z { size, Rn, Rd, } => 0x5e209800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMLT_asisdmisc_Z { size, Rn, Rd, } => 0x5e20a800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ABS_asisdmisc_R { size, Rn, Rd, } => 0x5e20b800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQXTN_asisdmisc_N { size, Rn, Rd, } => 0x5e214800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADDP_asisdpair_only { size, Rn, Rd, } => 0x5e31b800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRECPE_z_z { size, Zn, Zd, } => 0x650e3000
                | ((*size as u32) << 22)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FRSQRTE_z_z { size, Zn, Zd, } => 0x650f3000
                | ((*size as u32) << 22)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::USQADD_asisdmisc_R { size, Rn, Rd, } => 0x7e203800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQNEG_asisdmisc_R { size, Rn, Rd, } => 0x7e207800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMGE_asisdmisc_Z { size, Rn, Rd, } => 0x7e208800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMLE_asisdmisc_Z { size, Rn, Rd, } => 0x7e209800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::NEG_asisdmisc_R { size, Rn, Rd, } => 0x7e20b800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQXTUN_asisdmisc_N { size, Rn, Rd, } => 0x7e212800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UQXTN_asisdmisc_N { size, Rn, Rd, } => 0x7e214800
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::AT_SYS_CR_systeminstrs { op1, CRm, op2, Rt, } => 0xd5087800
                | ((*op1 as u32) << 16)
                | ((*CRm as u32) << 8)
                | ((*op2 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST4_asisdlse_R4 { Q, size, Rn, Rt, } => 0x0c000000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlse_R4_4v { Q, size, Rn, Rt, } => 0x0c002000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST3_asisdlse_R3 { Q, size, Rn, Rt, } => 0x0c004000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlse_R3_3v { Q, size, Rn, Rt, } => 0x0c006000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlse_R1_1v { Q, size, Rn, Rt, } => 0x0c007000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST2_asisdlse_R2 { Q, size, Rn, Rt, } => 0x0c008000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlse_R2_2v { Q, size, Rn, Rt, } => 0x0c00a000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4_asisdlse_R4 { Q, size, Rn, Rt, } => 0x0c400000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlse_R4_4v { Q, size, Rn, Rt, } => 0x0c402000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3_asisdlse_R3 { Q, size, Rn, Rt, } => 0x0c404000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlse_R3_3v { Q, size, Rn, Rt, } => 0x0c406000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlse_R1_1v { Q, size, Rn, Rt, } => 0x0c407000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2_asisdlse_R2 { Q, size, Rn, Rt, } => 0x0c408000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlse_R2_2v { Q, size, Rn, Rt, } => 0x0c40a000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST4_asisdlsep_I4_i { Q, size, Rn, Rt, } => 0x0c9f0000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlsep_I4_i4 { Q, size, Rn, Rt, } => 0x0c9f2000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST3_asisdlsep_I3_i { Q, size, Rn, Rt, } => 0x0c9f4000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlsep_I3_i3 { Q, size, Rn, Rt, } => 0x0c9f6000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlsep_I1_i1 { Q, size, Rn, Rt, } => 0x0c9f7000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST2_asisdlsep_I2_i { Q, size, Rn, Rt, } => 0x0c9f8000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlsep_I2_i2 { Q, size, Rn, Rt, } => 0x0c9fa000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4_asisdlsep_I4_i { Q, size, Rn, Rt, } => 0x0cdf0000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlsep_I4_i4 { Q, size, Rn, Rt, } => 0x0cdf2000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3_asisdlsep_I3_i { Q, size, Rn, Rt, } => 0x0cdf4000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlsep_I3_i3 { Q, size, Rn, Rt, } => 0x0cdf6000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlsep_I1_i1 { Q, size, Rn, Rt, } => 0x0cdf7000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2_asisdlsep_I2_i { Q, size, Rn, Rt, } => 0x0cdf8000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlsep_I2_i2 { Q, size, Rn, Rt, } => 0x0cdfa000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlso_H1_1h { Q, S, size, Rn, Rt, } => 0x0d004000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST3_asisdlso_H3_3h { Q, S, size, Rn, Rt, } => 0x0d006000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST2_asisdlso_H2_2h { Q, S, size, Rn, Rt, } => 0x0d204000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST4_asisdlso_H4_4h { Q, S, size, Rn, Rt, } => 0x0d206000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlso_H1_1h { Q, S, size, Rn, Rt, } => 0x0d404000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3_asisdlso_H3_3h { Q, S, size, Rn, Rt, } => 0x0d406000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1R_asisdlso_R1 { Q, size, Rn, Rt, } => 0x0d40c000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3R_asisdlso_R3 { Q, size, Rn, Rt, } => 0x0d40e000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2_asisdlso_H2_2h { Q, S, size, Rn, Rt, } => 0x0d604000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4_asisdlso_H4_4h { Q, S, size, Rn, Rt, } => 0x0d606000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2R_asisdlso_R2 { Q, size, Rn, Rt, } => 0x0d60c000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4R_asisdlso_R4 { Q, size, Rn, Rt, } => 0x0d60e000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlsop_H1_i1h { Q, S, size, Rn, Rt, } => 0x0d9f4000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST3_asisdlsop_H3_i3h { Q, S, size, Rn, Rt, } => 0x0d9f6000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST2_asisdlsop_H2_i2h { Q, S, size, Rn, Rt, } => 0x0dbf4000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST4_asisdlsop_H4_i4h { Q, S, size, Rn, Rt, } => 0x0dbf6000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlsop_H1_i1h { Q, S, size, Rn, Rt, } => 0x0ddf4000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3_asisdlsop_H3_i3h { Q, S, size, Rn, Rt, } => 0x0ddf6000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1R_asisdlsop_R1_i { Q, size, Rn, Rt, } => 0x0ddfc000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3R_asisdlsop_R3_i { Q, size, Rn, Rt, } => 0x0ddfe000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2_asisdlsop_H2_i2h { Q, S, size, Rn, Rt, } => 0x0dff4000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4_asisdlsop_H4_i4h { Q, S, size, Rn, Rt, } => 0x0dff6000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2R_asisdlsop_R2_i { Q, size, Rn, Rt, } => 0x0dffc000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4R_asisdlsop_R4_i { Q, size, Rn, Rt, } => 0x0dffe000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::REV64_asimdmisc_R { Q, size, Rn, Rd, } => 0x0e200800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::REV16_asimdmisc_R { Q, size, Rn, Rd, } => 0x0e201800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SADDLP_asimdmisc_P { Q, size, Rn, Rd, } => 0x0e202800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUQADD_asimdmisc_R { Q, size, Rn, Rd, } => 0x0e203800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CLS_asimdmisc_R { Q, size, Rn, Rd, } => 0x0e204800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CNT_asimdmisc_R { Q, size, Rn, Rd, } => 0x0e205800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SADALP_asimdmisc_P { Q, size, Rn, Rd, } => 0x0e206800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQABS_asimdmisc_R { Q, size, Rn, Rd, } => 0x0e207800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMGT_asimdmisc_Z { Q, size, Rn, Rd, } => 0x0e208800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMEQ_asimdmisc_Z { Q, size, Rn, Rd, } => 0x0e209800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMLT_asimdmisc_Z { Q, size, Rn, Rd, } => 0x0e20a800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ABS_asimdmisc_R { Q, size, Rn, Rd, } => 0x0e20b800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::XTN_asimdmisc_N { Q, size, Rn, Rd, } => 0x0e212800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQXTN_asimdmisc_N { Q, size, Rn, Rd, } => 0x0e214800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SADDLV_asimdall_only { Q, size, Rn, Rd, } => 0x0e303800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMAXV_asimdall_only { Q, size, Rn, Rd, } => 0x0e30a800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMINV_asimdall_only { Q, size, Rn, Rd, } => 0x0e31a800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADDV_asimdall_only { Q, size, Rn, Rd, } => 0x0e31b800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMOV_S_floatimm { imm8, Rd, } => 0x1e201000
                | ((*imm8 as u32) << 13)
                | ((*Rd as u32) << 0),
            Self::FMOV_D_floatimm { imm8, Rd, } => 0x1e601000
                | ((*imm8 as u32) << 13)
                | ((*Rd as u32) << 0),
            Self::FMOV_H_floatimm { imm8, Rd, } => 0x1ee01000
                | ((*imm8 as u32) << 13)
                | ((*Rd as u32) << 0),
            Self::BRKA_p_p_p { Pg, Pn, M, Pd, } => 0x25104000
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*M as u32) << 4)
                | ((*Pd as u32) << 0),
            Self::BRKB_p_p_p { Pg, Pn, M, Pd, } => 0x25904000
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*M as u32) << 4)
                | ((*Pd as u32) << 0),
            Self::REV32_asimdmisc_R { Q, size, Rn, Rd, } => 0x2e200800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UADDLP_asimdmisc_P { Q, size, Rn, Rd, } => 0x2e202800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::USQADD_asimdmisc_R { Q, size, Rn, Rd, } => 0x2e203800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CLZ_asimdmisc_R { Q, size, Rn, Rd, } => 0x2e204800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UADALP_asimdmisc_P { Q, size, Rn, Rd, } => 0x2e206800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQNEG_asimdmisc_R { Q, size, Rn, Rd, } => 0x2e207800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMGE_asimdmisc_Z { Q, size, Rn, Rd, } => 0x2e208800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMLE_asimdmisc_Z { Q, size, Rn, Rd, } => 0x2e209800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::NEG_asimdmisc_R { Q, size, Rn, Rd, } => 0x2e20b800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQXTUN_asimdmisc_N { Q, size, Rn, Rd, } => 0x2e212800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHLL_asimdmisc_S { Q, size, Rn, Rd, } => 0x2e213800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UQXTN_asimdmisc_N { Q, size, Rn, Rd, } => 0x2e214800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UADDLV_asimdall_only { Q, size, Rn, Rd, } => 0x2e303800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMAXV_asimdall_only { Q, size, Rn, Rd, } => 0x2e30a800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMINV_asimdall_only { Q, size, Rn, Rd, } => 0x2e31a800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOVI_asimdimm_D_ds { a, b, c, d, e, f, g, h, Rd, } => 0x2f00e400
                | ((*a as u32) << 18)
                | ((*b as u32) << 17)
                | ((*c as u32) << 16)
                | ((*d as u32) << 9)
                | ((*e as u32) << 8)
                | ((*f as u32) << 7)
                | ((*g as u32) << 6)
                | ((*h as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BFCVTNT_z_p_z_s2bf { Pg, Zn, Zd, } => 0x648aa000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::SCVTF_z_p_z_h2fp16 { Pg, Zn, Zd, } => 0x6552a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UCVTF_z_p_z_h2fp16 { Pg, Zn, Zd, } => 0x6553a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::SCVTF_z_p_z_w2fp16 { Pg, Zn, Zd, } => 0x6554a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UCVTF_z_p_z_w2fp16 { Pg, Zn, Zd, } => 0x6555a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::SCVTF_z_p_z_x2fp16 { Pg, Zn, Zd, } => 0x6556a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UCVTF_z_p_z_x2fp16 { Pg, Zn, Zd, } => 0x6557a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVTZS_z_p_z_fp162h { Pg, Zn, Zd, } => 0x655aa000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVTZU_z_p_z_fp162h { Pg, Zn, Zd, } => 0x655ba000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVTZS_z_p_z_fp162w { Pg, Zn, Zd, } => 0x655ca000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVTZU_z_p_z_fp162w { Pg, Zn, Zd, } => 0x655da000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVTZS_z_p_z_fp162x { Pg, Zn, Zd, } => 0x655ea000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVTZU_z_p_z_fp162x { Pg, Zn, Zd, } => 0x655fa000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVT_z_p_z_s2h { Pg, Zn, Zd, } => 0x6588a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVT_z_p_z_h2s { Pg, Zn, Zd, } => 0x6589a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::BFCVT_z_p_z_s2bf { Pg, Zn, Zd, } => 0x658aa000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::SCVTF_z_p_z_w2s { Pg, Zn, Zd, } => 0x6594a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UCVTF_z_p_z_w2s { Pg, Zn, Zd, } => 0x6595a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVTZS_z_p_z_s2w { Pg, Zn, Zd, } => 0x659ca000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVTZU_z_p_z_s2w { Pg, Zn, Zd, } => 0x659da000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVT_z_p_z_d2h { Pg, Zn, Zd, } => 0x65c8a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVT_z_p_z_h2d { Pg, Zn, Zd, } => 0x65c9a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVT_z_p_z_d2s { Pg, Zn, Zd, } => 0x65caa000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVT_z_p_z_s2d { Pg, Zn, Zd, } => 0x65cba000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::SCVTF_z_p_z_w2d { Pg, Zn, Zd, } => 0x65d0a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UCVTF_z_p_z_w2d { Pg, Zn, Zd, } => 0x65d1a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::SCVTF_z_p_z_x2s { Pg, Zn, Zd, } => 0x65d4a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UCVTF_z_p_z_x2s { Pg, Zn, Zd, } => 0x65d5a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::SCVTF_z_p_z_x2d { Pg, Zn, Zd, } => 0x65d6a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UCVTF_z_p_z_x2d { Pg, Zn, Zd, } => 0x65d7a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVTZS_z_p_z_d2w { Pg, Zn, Zd, } => 0x65d8a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVTZU_z_p_z_d2w { Pg, Zn, Zd, } => 0x65d9a000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVTZS_z_p_z_s2x { Pg, Zn, Zd, } => 0x65dca000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVTZU_z_p_z_s2x { Pg, Zn, Zd, } => 0x65dda000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVTZS_z_p_z_d2x { Pg, Zn, Zd, } => 0x65dea000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FCVTZU_z_p_z_d2x { Pg, Zn, Zd, } => 0x65dfa000
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::MOVI_asimdimm_D2_d { a, b, c, d, e, f, g, h, Rd, } => 0x6f00e400
                | ((*a as u32) << 18)
                | ((*b as u32) << 17)
                | ((*c as u32) << 16)
                | ((*d as u32) << 9)
                | ((*e as u32) << 8)
                | ((*f as u32) << 7)
                | ((*g as u32) << 6)
                | ((*h as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMOV_asimdimm_D2_d { a, b, c, d, e, f, g, h, Rd, } => 0x6f00f400
                | ((*a as u32) << 18)
                | ((*b as u32) << 17)
                | ((*c as u32) << 16)
                | ((*d as u32) << 9)
                | ((*e as u32) << 8)
                | ((*f as u32) << 7)
                | ((*g as u32) << 6)
                | ((*h as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CNTB_r_s { imm4, pattern, Rd, } => 0x0420e000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQINCB_r_rs_sx { imm4, pattern, Rdn, } => 0x0420f000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQINCB_r_rs_uw { imm4, pattern, Rdn, } => 0x0420f400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQDECB_r_rs_sx { imm4, pattern, Rdn, } => 0x0420f800
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQDECB_r_rs_uw { imm4, pattern, Rdn, } => 0x0420fc00
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::INCB_r_rs { imm4, pattern, Rdn, } => 0x0430e000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::DECB_r_rs { imm4, pattern, Rdn, } => 0x0430e400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQINCB_r_rs_x { imm4, pattern, Rdn, } => 0x0430f000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQINCB_r_rs_x { imm4, pattern, Rdn, } => 0x0430f400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQDECB_r_rs_x { imm4, pattern, Rdn, } => 0x0430f800
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQDECB_r_rs_x { imm4, pattern, Rdn, } => 0x0430fc00
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQINCH_z_zs { imm4, pattern, Zdn, } => 0x0460c000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UQINCH_z_zs { imm4, pattern, Zdn, } => 0x0460c400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SQDECH_z_zs { imm4, pattern, Zdn, } => 0x0460c800
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UQDECH_z_zs { imm4, pattern, Zdn, } => 0x0460cc00
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::CNTH_r_s { imm4, pattern, Rd, } => 0x0460e000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQINCH_r_rs_sx { imm4, pattern, Rdn, } => 0x0460f000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQINCH_r_rs_uw { imm4, pattern, Rdn, } => 0x0460f400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQDECH_r_rs_sx { imm4, pattern, Rdn, } => 0x0460f800
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQDECH_r_rs_uw { imm4, pattern, Rdn, } => 0x0460fc00
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::INCH_z_zs { imm4, pattern, Zdn, } => 0x0470c000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::DECH_z_zs { imm4, pattern, Zdn, } => 0x0470c400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::INCH_r_rs { imm4, pattern, Rdn, } => 0x0470e000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::DECH_r_rs { imm4, pattern, Rdn, } => 0x0470e400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQINCH_r_rs_x { imm4, pattern, Rdn, } => 0x0470f000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQINCH_r_rs_x { imm4, pattern, Rdn, } => 0x0470f400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQDECH_r_rs_x { imm4, pattern, Rdn, } => 0x0470f800
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQDECH_r_rs_x { imm4, pattern, Rdn, } => 0x0470fc00
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQINCW_z_zs { imm4, pattern, Zdn, } => 0x04a0c000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UQINCW_z_zs { imm4, pattern, Zdn, } => 0x04a0c400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SQDECW_z_zs { imm4, pattern, Zdn, } => 0x04a0c800
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UQDECW_z_zs { imm4, pattern, Zdn, } => 0x04a0cc00
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::CNTW_r_s { imm4, pattern, Rd, } => 0x04a0e000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQINCW_r_rs_sx { imm4, pattern, Rdn, } => 0x04a0f000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQINCW_r_rs_uw { imm4, pattern, Rdn, } => 0x04a0f400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQDECW_r_rs_sx { imm4, pattern, Rdn, } => 0x04a0f800
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQDECW_r_rs_uw { imm4, pattern, Rdn, } => 0x04a0fc00
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::INCW_z_zs { imm4, pattern, Zdn, } => 0x04b0c000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::DECW_z_zs { imm4, pattern, Zdn, } => 0x04b0c400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::INCW_r_rs { imm4, pattern, Rdn, } => 0x04b0e000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::DECW_r_rs { imm4, pattern, Rdn, } => 0x04b0e400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQINCW_r_rs_x { imm4, pattern, Rdn, } => 0x04b0f000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQINCW_r_rs_x { imm4, pattern, Rdn, } => 0x04b0f400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQDECW_r_rs_x { imm4, pattern, Rdn, } => 0x04b0f800
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQDECW_r_rs_x { imm4, pattern, Rdn, } => 0x04b0fc00
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQINCD_z_zs { imm4, pattern, Zdn, } => 0x04e0c000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UQINCD_z_zs { imm4, pattern, Zdn, } => 0x04e0c400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SQDECD_z_zs { imm4, pattern, Zdn, } => 0x04e0c800
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UQDECD_z_zs { imm4, pattern, Zdn, } => 0x04e0cc00
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::CNTD_r_s { imm4, pattern, Rd, } => 0x04e0e000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQINCD_r_rs_sx { imm4, pattern, Rdn, } => 0x04e0f000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQINCD_r_rs_uw { imm4, pattern, Rdn, } => 0x04e0f400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQDECD_r_rs_sx { imm4, pattern, Rdn, } => 0x04e0f800
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQDECD_r_rs_uw { imm4, pattern, Rdn, } => 0x04e0fc00
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::INCD_z_zs { imm4, pattern, Zdn, } => 0x04f0c000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::DECD_z_zs { imm4, pattern, Zdn, } => 0x04f0c400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::INCD_r_rs { imm4, pattern, Rdn, } => 0x04f0e000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::DECD_r_rs { imm4, pattern, Rdn, } => 0x04f0e400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQINCD_r_rs_x { imm4, pattern, Rdn, } => 0x04f0f000
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQINCD_r_rs_x { imm4, pattern, Rdn, } => 0x04f0f400
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::SQDECD_r_rs_x { imm4, pattern, Rdn, } => 0x04f0f800
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::UQDECD_r_rs_x { imm4, pattern, Rdn, } => 0x04f0fc00
                | ((*imm4 as u32) << 16)
                | ((*pattern as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::ZIP1_p_pp { size, Pm, Pn, Pd, } => 0x05204000
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 16)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::ZIP2_p_pp { size, Pm, Pn, Pd, } => 0x05204400
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 16)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::UZP1_p_pp { size, Pm, Pn, Pd, } => 0x05204800
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 16)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::UZP2_p_pp { size, Pm, Pn, Pd, } => 0x05204c00
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 16)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::TRN1_p_pp { size, Pm, Pn, Pd, } => 0x05205000
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 16)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::TRN2_p_pp { size, Pm, Pn, Pd, } => 0x05205400
                | ((*size as u32) << 22)
                | ((*Pm as u32) << 16)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::ST1_asisdlso_B1_1b { Q, S, size, Rn, Rt, } => 0x0d000000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST3_asisdlso_B3_3b { Q, S, size, Rn, Rt, } => 0x0d002000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST2_asisdlso_B2_2b { Q, S, size, Rn, Rt, } => 0x0d200000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST4_asisdlso_B4_4b { Q, S, size, Rn, Rt, } => 0x0d202000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlso_B1_1b { Q, S, size, Rn, Rt, } => 0x0d400000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3_asisdlso_B3_3b { Q, S, size, Rn, Rt, } => 0x0d402000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2_asisdlso_B2_2b { Q, S, size, Rn, Rt, } => 0x0d600000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4_asisdlso_B4_4b { Q, S, size, Rn, Rt, } => 0x0d602000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlsop_B1_i1b { Q, S, size, Rn, Rt, } => 0x0d9f0000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST3_asisdlsop_B3_i3b { Q, S, size, Rn, Rt, } => 0x0d9f2000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST2_asisdlsop_B2_i2b { Q, S, size, Rn, Rt, } => 0x0dbf0000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST4_asisdlsop_B4_i4b { Q, S, size, Rn, Rt, } => 0x0dbf2000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlsop_B1_i1b { Q, S, size, Rn, Rt, } => 0x0ddf0000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3_asisdlsop_B3_i3b { Q, S, size, Rn, Rt, } => 0x0ddf2000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2_asisdlsop_B2_i2b { Q, S, size, Rn, Rt, } => 0x0dff0000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4_asisdlsop_B4_i4b { Q, S, size, Rn, Rt, } => 0x0dff2000
                | ((*Q as u32) << 30)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::MOVI_asimdimm_N_b { Q, a, b, c, d, e, f, g, h, Rd, } => 0x0f00e400
                | ((*Q as u32) << 30)
                | ((*a as u32) << 18)
                | ((*b as u32) << 17)
                | ((*c as u32) << 16)
                | ((*d as u32) << 9)
                | ((*e as u32) << 8)
                | ((*f as u32) << 7)
                | ((*g as u32) << 6)
                | ((*h as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMOV_asimdimm_S_s { Q, a, b, c, d, e, f, g, h, Rd, } => 0x0f00f400
                | ((*Q as u32) << 30)
                | ((*a as u32) << 18)
                | ((*b as u32) << 17)
                | ((*c as u32) << 16)
                | ((*d as u32) << 9)
                | ((*e as u32) << 8)
                | ((*f as u32) << 7)
                | ((*g as u32) << 6)
                | ((*h as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMOV_asimdimm_H_h { Q, a, b, c, d, e, f, g, h, Rd, } => 0x0f00fc00
                | ((*Q as u32) << 30)
                | ((*a as u32) << 18)
                | ((*b as u32) << 17)
                | ((*c as u32) << 16)
                | ((*d as u32) << 9)
                | ((*e as u32) << 8)
                | ((*f as u32) << 7)
                | ((*g as u32) << 6)
                | ((*h as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGE_p_p_z0 { size, Pg, Zn, Pd, } => 0x65102000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FCMGT_p_p_z0 { size, Pg, Zn, Pd, } => 0x65102010
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FCMLT_p_p_z0 { size, Pg, Zn, Pd, } => 0x65112000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FCMLE_p_p_z0 { size, Pg, Zn, Pd, } => 0x65112010
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FCMEQ_p_p_z0 { size, Pg, Zn, Pd, } => 0x65122000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FCMNE_p_p_z0 { size, Pg, Zn, Pd, } => 0x65132000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::SXTL_SSHLL_asimdshf_L { Q, immh, Rn, Rd, } => 0x0f00a400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UXTL_USHLL_asimdshf_L { Q, immh, Rn, Rd, } => 0x2f00a400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADD_z_p_zz { size, Pg, Zm, Zdn, } => 0x04000000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SADDV_r_p_z { size, Pg, Zn, Vd, } => 0x04002000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Vd as u32) << 0),
            Self::ASR_z_p_zi { tszh, Pg, tszl, imm3, Zdn, } => 0x04008000
                | ((*tszh as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*tszl as u32) << 8)
                | ((*imm3 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SUB_z_p_zz { size, Pg, Zm, Zdn, } => 0x04010000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UADDV_r_p_z { size, Pg, Zn, Vd, } => 0x04012000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Vd as u32) << 0),
            Self::LSR_z_p_zi { tszh, Pg, tszl, imm3, Zdn, } => 0x04018000
                | ((*tszh as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*tszl as u32) << 8)
                | ((*imm3 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SUBR_z_p_zz { size, Pg, Zm, Zdn, } => 0x04030000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::LSL_z_p_zi { tszh, Pg, tszl, imm3, Zdn, } => 0x04038000
                | ((*tszh as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*tszl as u32) << 8)
                | ((*imm3 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::ASRD_z_p_zi { tszh, Pg, tszl, imm3, Zdn, } => 0x04048000
                | ((*tszh as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*tszl as u32) << 8)
                | ((*imm3 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SMAX_z_p_zz { size, Pg, Zm, Zdn, } => 0x04080000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SMAXV_r_p_z { size, Pg, Zn, Vd, } => 0x04082000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Vd as u32) << 0),
            Self::UMAX_z_p_zz { size, Pg, Zm, Zdn, } => 0x04090000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UMAXV_r_p_z { size, Pg, Zn, Vd, } => 0x04092000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Vd as u32) << 0),
            Self::SMIN_z_p_zz { size, Pg, Zm, Zdn, } => 0x040a0000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SMINV_r_p_z { size, Pg, Zn, Vd, } => 0x040a2000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Vd as u32) << 0),
            Self::UMIN_z_p_zz { size, Pg, Zm, Zdn, } => 0x040b0000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UMINV_r_p_z { size, Pg, Zn, Vd, } => 0x040b2000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Vd as u32) << 0),
            Self::SABD_z_p_zz { size, Pg, Zm, Zdn, } => 0x040c0000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UABD_z_p_zz { size, Pg, Zm, Zdn, } => 0x040d0000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::MUL_z_p_zz { size, Pg, Zm, Zdn, } => 0x04100000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::ASR_z_p_zz { size, Pg, Zm, Zdn, } => 0x04108000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SXTB_z_p_z { size, Pg, Zn, Zd, } => 0x0410a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::LSR_z_p_zz { size, Pg, Zm, Zdn, } => 0x04118000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UXTB_z_p_z { size, Pg, Zn, Zd, } => 0x0411a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::SMULH_z_p_zz { size, Pg, Zm, Zdn, } => 0x04120000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SXTH_z_p_z { size, Pg, Zn, Zd, } => 0x0412a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UMULH_z_p_zz { size, Pg, Zm, Zdn, } => 0x04130000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::LSL_z_p_zz { size, Pg, Zm, Zdn, } => 0x04138000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UXTH_z_p_z { size, Pg, Zn, Zd, } => 0x0413a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::SDIV_z_p_zz { size, Pg, Zm, Zdn, } => 0x04140000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::ASRR_z_p_zz { size, Pg, Zm, Zdn, } => 0x04148000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SXTW_z_p_z { size, Pg, Zn, Zd, } => 0x0414a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UDIV_z_p_zz { size, Pg, Zm, Zdn, } => 0x04150000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::LSRR_z_p_zz { size, Pg, Zm, Zdn, } => 0x04158000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UXTW_z_p_z { size, Pg, Zn, Zd, } => 0x0415a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::SDIVR_z_p_zz { size, Pg, Zm, Zdn, } => 0x04160000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::ABS_z_p_z { size, Pg, Zn, Zd, } => 0x0416a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UDIVR_z_p_zz { size, Pg, Zm, Zdn, } => 0x04170000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::LSLR_z_p_zz { size, Pg, Zm, Zdn, } => 0x04178000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::NEG_z_p_z { size, Pg, Zn, Zd, } => 0x0417a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ORR_z_p_zz { size, Pg, Zm, Zdn, } => 0x04180000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::ORV_r_p_z { size, Pg, Zn, Vd, } => 0x04182000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Vd as u32) << 0),
            Self::ASR_z_p_zw { size, Pg, Zm, Zdn, } => 0x04188000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::CLS_z_p_z { size, Pg, Zn, Zd, } => 0x0418a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::EOR_z_p_zz { size, Pg, Zm, Zdn, } => 0x04190000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::EORV_r_p_z { size, Pg, Zn, Vd, } => 0x04192000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Vd as u32) << 0),
            Self::LSR_z_p_zw { size, Pg, Zm, Zdn, } => 0x04198000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::CLZ_z_p_z { size, Pg, Zn, Zd, } => 0x0419a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::AND_z_p_zz { size, Pg, Zm, Zdn, } => 0x041a0000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::ANDV_r_p_z { size, Pg, Zn, Vd, } => 0x041a2000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Vd as u32) << 0),
            Self::CNT_z_p_z { size, Pg, Zn, Zd, } => 0x041aa000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::BIC_z_p_zz { size, Pg, Zm, Zdn, } => 0x041b0000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::LSL_z_p_zw { size, Pg, Zm, Zdn, } => 0x041b8000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::CNOT_z_p_z { size, Pg, Zn, Zd, } => 0x041ba000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FABS_z_p_z { size, Pg, Zn, Zd, } => 0x041ca000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FNEG_z_p_z { size, Pg, Zn, Zd, } => 0x041da000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::NOT_z_p_z { size, Pg, Zn, Zd, } => 0x041ea000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::AND_z_zz { Zm, Zn, Zd, } => 0x04203000
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::MOV_orr_z_zz { Zm, Zn, Zd, } => 0x04603000
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ORR_z_zz { Zm, Zn, Zd, } => 0x04603000
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::EOR_z_zz { Zm, Zn, Zd, } => 0x04a03000
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::BIC_z_zz { Zm, Zn, Zd, } => 0x04e03000
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::CPY_z_p_v { size, Pg, Vn, Zd, } => 0x05208000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Vn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::MOV_cpy_z_p_v { size, Pg, Vn, Zd, } => 0x05208000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Vn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::LASTA_r_p_z { size, Pg, Zn, Rd, } => 0x0520a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::COMPACT_z_p_z { size, Pg, Zn, Zd, } => 0x05218000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::LASTB_r_p_z { size, Pg, Zn, Rd, } => 0x0521a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::LASTA_v_p_z { size, Pg, Zn, Vd, } => 0x05228000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Vd as u32) << 0),
            Self::LASTB_v_p_z { size, Pg, Zn, Vd, } => 0x05238000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Vd as u32) << 0),
            Self::REVB_z_z { size, Pg, Zn, Zd, } => 0x05248000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::REVH_z_z { size, Pg, Zn, Zd, } => 0x05258000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::REVW_z_z { size, Pg, Zn, Zd, } => 0x05268000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::RBIT_z_p_z { size, Pg, Zn, Zd, } => 0x05278000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::CLASTA_z_p_zz { size, Pg, Zm, Zdn, } => 0x05288000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::CPY_z_p_r { size, Pg, Rn, Zd, } => 0x0528a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::MOV_cpy_z_p_r { size, Pg, Rn, Zd, } => 0x0528a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::CLASTB_z_p_zz { size, Pg, Zm, Zdn, } => 0x05298000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::CLASTA_v_p_z { size, Pg, Zm, Vdn, } => 0x052a8000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Vdn as u32) << 0),
            Self::CLASTB_v_p_z { size, Pg, Zm, Vdn, } => 0x052b8000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Vdn as u32) << 0),
            Self::SPLICE_z_p_zz_des { size, Pg, Zm, Zdn, } => 0x052c8000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::CLASTA_r_p_z { size, Pg, Zm, Rdn, } => 0x0530a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::CLASTB_r_p_z { size, Pg, Zm, Rdn, } => 0x0531a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Rdn as u32) << 0),
            Self::ZIP1_z_zz_q { Zm, Zn, Zd, } => 0x05a00000
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ZIP2_z_zz_q { Zm, Zn, Zd, } => 0x05a00400
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UZP1_z_zz_q { Zm, Zn, Zd, } => 0x05a00800
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UZP2_z_zz_q { Zm, Zn, Zd, } => 0x05a00c00
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::TRN1_z_zz_q { Zm, Zn, Zd, } => 0x05a01800
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::TRN2_z_zz_q { Zm, Zn, Zd, } => 0x05a01c00
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::CASP_CP32_ldstexcl { Rs, Rn, Rt, } => 0x08207c00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASPL_CP32_ldstexcl { Rs, Rn, Rt, } => 0x0820fc00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASPA_CP32_ldstexcl { Rs, Rn, Rt, } => 0x08607c00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASPAL_CP32_ldstexcl { Rs, Rn, Rt, } => 0x0860fc00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASB_C32_ldstexcl { Rs, Rn, Rt, } => 0x08a07c00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASLB_C32_ldstexcl { Rs, Rn, Rt, } => 0x08a0fc00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASAB_C32_ldstexcl { Rs, Rn, Rt, } => 0x08e07c00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASALB_C32_ldstexcl { Rs, Rn, Rt, } => 0x08e0fc00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SMOV_asimdins_W_w { imm5, Rn, Rd, } => 0x0e002c00
                | ((*imm5 as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMOV_asimdins_W_w { imm5, Rn, Rd, } => 0x0e003c00
                | ((*imm5 as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOVI_asimdimm_L_hl { Q, a, b, c, cmode, d, e, f, g, h, Rd, } => 0x0f008400
                | ((*Q as u32) << 30)
                | ((*a as u32) << 18)
                | ((*b as u32) << 17)
                | ((*c as u32) << 16)
                | ((*cmode as u32) << 13)
                | ((*d as u32) << 9)
                | ((*e as u32) << 8)
                | ((*f as u32) << 7)
                | ((*g as u32) << 6)
                | ((*h as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ORR_asimdimm_L_hl { Q, a, b, c, cmode, d, e, f, g, h, Rd, } => 0x0f009400
                | ((*Q as u32) << 30)
                | ((*a as u32) << 18)
                | ((*b as u32) << 17)
                | ((*c as u32) << 16)
                | ((*cmode as u32) << 13)
                | ((*d as u32) << 9)
                | ((*e as u32) << 8)
                | ((*f as u32) << 7)
                | ((*g as u32) << 6)
                | ((*h as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOVI_asimdimm_M_sm { Q, a, b, c, cmode, d, e, f, g, h, Rd, } => 0x0f00c400
                | ((*Q as u32) << 30)
                | ((*a as u32) << 18)
                | ((*b as u32) << 17)
                | ((*c as u32) << 16)
                | ((*cmode as u32) << 12)
                | ((*d as u32) << 9)
                | ((*e as u32) << 8)
                | ((*f as u32) << 7)
                | ((*g as u32) << 6)
                | ((*h as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADC_32_addsub_carry { Rm, Rn, Rd, } => 0x1a000000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UDIV_32_dp_2src { Rm, Rn, Rd, } => 0x1ac00800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SDIV_32_dp_2src { Rm, Rn, Rd, } => 0x1ac00c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::LSL_LSLV_32_dp_2src { Rm, Rn, Rd, } => 0x1ac02000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::LSLV_32_dp_2src { Rm, Rn, Rd, } => 0x1ac02000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::LSR_LSRV_32_dp_2src { Rm, Rn, Rd, } => 0x1ac02400
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::LSRV_32_dp_2src { Rm, Rn, Rd, } => 0x1ac02400
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ASR_ASRV_32_dp_2src { Rm, Rn, Rd, } => 0x1ac02800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ASRV_32_dp_2src { Rm, Rn, Rd, } => 0x1ac02800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ROR_RORV_32_dp_2src { Rm, Rn, Rd, } => 0x1ac02c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::RORV_32_dp_2src { Rm, Rn, Rd, } => 0x1ac02c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CRC32B_32C_dp_2src { Rm, Rn, Rd, } => 0x1ac04000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CRC32H_32C_dp_2src { Rm, Rn, Rd, } => 0x1ac04400
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CRC32W_32C_dp_2src { Rm, Rn, Rd, } => 0x1ac04800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CRC32CB_32C_dp_2src { Rm, Rn, Rd, } => 0x1ac05000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CRC32CH_32C_dp_2src { Rm, Rn, Rd, } => 0x1ac05400
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CRC32CW_32C_dp_2src { Rm, Rn, Rd, } => 0x1ac05800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MUL_MADD_32A_dp_3src { Rm, Rn, Rd, } => 0x1b007c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MNEG_MSUB_32A_dp_3src { Rm, Rn, Rd, } => 0x1b00fc00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMUL_S_floatdp2 { Rm, Rn, Rd, } => 0x1e200800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FDIV_S_floatdp2 { Rm, Rn, Rd, } => 0x1e201800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FADD_S_floatdp2 { Rm, Rn, Rd, } => 0x1e202800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FSUB_S_floatdp2 { Rm, Rn, Rd, } => 0x1e203800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAX_S_floatdp2 { Rm, Rn, Rd, } => 0x1e204800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMIN_S_floatdp2 { Rm, Rn, Rd, } => 0x1e205800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAXNM_S_floatdp2 { Rm, Rn, Rd, } => 0x1e206800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINNM_S_floatdp2 { Rm, Rn, Rd, } => 0x1e207800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FNMUL_S_floatdp2 { Rm, Rn, Rd, } => 0x1e208800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMUL_D_floatdp2 { Rm, Rn, Rd, } => 0x1e600800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FDIV_D_floatdp2 { Rm, Rn, Rd, } => 0x1e601800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FADD_D_floatdp2 { Rm, Rn, Rd, } => 0x1e602800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FSUB_D_floatdp2 { Rm, Rn, Rd, } => 0x1e603800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAX_D_floatdp2 { Rm, Rn, Rd, } => 0x1e604800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMIN_D_floatdp2 { Rm, Rn, Rd, } => 0x1e605800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAXNM_D_floatdp2 { Rm, Rn, Rd, } => 0x1e606800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINNM_D_floatdp2 { Rm, Rn, Rd, } => 0x1e607800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FNMUL_D_floatdp2 { Rm, Rn, Rd, } => 0x1e608800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMUL_H_floatdp2 { Rm, Rn, Rd, } => 0x1ee00800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FDIV_H_floatdp2 { Rm, Rn, Rd, } => 0x1ee01800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FADD_H_floatdp2 { Rm, Rn, Rd, } => 0x1ee02800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FSUB_H_floatdp2 { Rm, Rn, Rd, } => 0x1ee03800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAX_H_floatdp2 { Rm, Rn, Rd, } => 0x1ee04800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMIN_H_floatdp2 { Rm, Rn, Rd, } => 0x1ee05800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAXNM_H_floatdp2 { Rm, Rn, Rd, } => 0x1ee06800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINNM_H_floatdp2 { Rm, Rn, Rd, } => 0x1ee07800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FNMUL_H_floatdp2 { Rm, Rn, Rd, } => 0x1ee08800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CNTP_r_p_p { size, Pg, Pn, Rd, } => 0x25208000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMAX_z_zi { size, imm8, Zdn, } => 0x2528c000
                | ((*size as u32) << 22)
                | ((*imm8 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UMAX_z_zi { size, imm8, Zdn, } => 0x2529c000
                | ((*size as u32) << 22)
                | ((*imm8 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SMIN_z_zi { size, imm8, Zdn, } => 0x252ac000
                | ((*size as u32) << 22)
                | ((*imm8 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UMIN_z_zi { size, imm8, Zdn, } => 0x252bc000
                | ((*size as u32) << 22)
                | ((*imm8 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::MUL_z_zi { size, imm8, Zdn, } => 0x2530c000
                | ((*size as u32) << 22)
                | ((*imm8 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FDUP_z_i { size, imm8, Zd, } => 0x2539c000
                | ((*size as u32) << 22)
                | ((*imm8 as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FMOV_fdup_z_i { size, imm8, Zd, } => 0x2539c000
                | ((*size as u32) << 22)
                | ((*imm8 as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::MVNI_asimdimm_L_hl { Q, a, b, c, cmode, d, e, f, g, h, Rd, } => 0x2f008400
                | ((*Q as u32) << 30)
                | ((*a as u32) << 18)
                | ((*b as u32) << 17)
                | ((*c as u32) << 16)
                | ((*cmode as u32) << 13)
                | ((*d as u32) << 9)
                | ((*e as u32) << 8)
                | ((*f as u32) << 7)
                | ((*g as u32) << 6)
                | ((*h as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BIC_asimdimm_L_hl { Q, a, b, c, cmode, d, e, f, g, h, Rd, } => 0x2f009400
                | ((*Q as u32) << 30)
                | ((*a as u32) << 18)
                | ((*b as u32) << 17)
                | ((*c as u32) << 16)
                | ((*cmode as u32) << 13)
                | ((*d as u32) << 9)
                | ((*e as u32) << 8)
                | ((*f as u32) << 7)
                | ((*g as u32) << 6)
                | ((*h as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MVNI_asimdimm_M_sm { Q, a, b, c, cmode, d, e, f, g, h, Rd, } => 0x2f00c400
                | ((*Q as u32) << 30)
                | ((*a as u32) << 18)
                | ((*b as u32) << 17)
                | ((*c as u32) << 16)
                | ((*cmode as u32) << 12)
                | ((*d as u32) << 9)
                | ((*e as u32) << 8)
                | ((*f as u32) << 7)
                | ((*g as u32) << 6)
                | ((*h as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::LDADDB_32_memop { Rs, Rn, Rt, } => 0x38200000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDCLRB_32_memop { Rs, Rn, Rt, } => 0x38201000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDEORB_32_memop { Rs, Rn, Rt, } => 0x38202000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSETB_32_memop { Rs, Rn, Rt, } => 0x38203000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMAXB_32_memop { Rs, Rn, Rt, } => 0x38204000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMINB_32_memop { Rs, Rn, Rt, } => 0x38205000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMAXB_32_memop { Rs, Rn, Rt, } => 0x38206000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMINB_32_memop { Rs, Rn, Rt, } => 0x38207000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SWPB_32_memop { Rs, Rn, Rt, } => 0x38208000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDADDLB_32_memop { Rs, Rn, Rt, } => 0x38600000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDCLRLB_32_memop { Rs, Rn, Rt, } => 0x38601000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDEORLB_32_memop { Rs, Rn, Rt, } => 0x38602000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSETLB_32_memop { Rs, Rn, Rt, } => 0x38603000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMAXLB_32_memop { Rs, Rn, Rt, } => 0x38604000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMINLB_32_memop { Rs, Rn, Rt, } => 0x38605000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMAXLB_32_memop { Rs, Rn, Rt, } => 0x38606000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMINLB_32_memop { Rs, Rn, Rt, } => 0x38607000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SWPLB_32_memop { Rs, Rn, Rt, } => 0x38608000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDADDAB_32_memop { Rs, Rn, Rt, } => 0x38a00000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDCLRAB_32_memop { Rs, Rn, Rt, } => 0x38a01000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDEORAB_32_memop { Rs, Rn, Rt, } => 0x38a02000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSETAB_32_memop { Rs, Rn, Rt, } => 0x38a03000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMAXAB_32_memop { Rs, Rn, Rt, } => 0x38a04000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMINAB_32_memop { Rs, Rn, Rt, } => 0x38a05000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMAXAB_32_memop { Rs, Rn, Rt, } => 0x38a06000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMINAB_32_memop { Rs, Rn, Rt, } => 0x38a07000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SWPAB_32_memop { Rs, Rn, Rt, } => 0x38a08000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAPRB_32L_memop { Rs, Rn, Rt, } => 0x38a0c000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDADDALB_32_memop { Rs, Rn, Rt, } => 0x38e00000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDCLRALB_32_memop { Rs, Rn, Rt, } => 0x38e01000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDEORALB_32_memop { Rs, Rn, Rt, } => 0x38e02000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSETALB_32_memop { Rs, Rn, Rt, } => 0x38e03000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMAXALB_32_memop { Rs, Rn, Rt, } => 0x38e04000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMINALB_32_memop { Rs, Rn, Rt, } => 0x38e05000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMAXALB_32_memop { Rs, Rn, Rt, } => 0x38e06000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMINALB_32_memop { Rs, Rn, Rt, } => 0x38e07000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SWPALB_32_memop { Rs, Rn, Rt, } => 0x38e08000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ADCS_32_addsub_carry { Rm, Rn, Rd, } => 0x3a000000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::USDOT_z_zzz_s { Zm, Zn, Zda, } => 0x44807800
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::SDOT_z_zzzi_s { i2, Zm, Zn, Zda, } => 0x44a00000
                | ((*i2 as u32) << 19)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::UDOT_z_zzzi_s { i2, Zm, Zn, Zda, } => 0x44a00400
                | ((*i2 as u32) << 19)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::USDOT_z_zzzi_s { i2, Zm, Zn, Zda, } => 0x44a01800
                | ((*i2 as u32) << 19)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::SUDOT_z_zzzi_s { i2, Zm, Zn, Zda, } => 0x44a01c00
                | ((*i2 as u32) << 19)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::SDOT_z_zzzi_d { i1, Zm, Zn, Zda, } => 0x44e00000
                | ((*i1 as u32) << 20)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::UDOT_z_zzzi_d { i1, Zm, Zn, Zda, } => 0x44e00400
                | ((*i1 as u32) << 20)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::SMMLA_z_zzz { Zm, Zn, Zda, } => 0x45009800
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::USMMLA_z_zzz { Zm, Zn, Zda, } => 0x45809800
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::UMMLA_z_zzz { Zm, Zn, Zda, } => 0x45c09800
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::CASP_CP64_ldstexcl { Rs, Rn, Rt, } => 0x48207c00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASPL_CP64_ldstexcl { Rs, Rn, Rt, } => 0x4820fc00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASPA_CP64_ldstexcl { Rs, Rn, Rt, } => 0x48607c00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASPAL_CP64_ldstexcl { Rs, Rn, Rt, } => 0x4860fc00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASH_C32_ldstexcl { Rs, Rn, Rt, } => 0x48a07c00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASLH_C32_ldstexcl { Rs, Rn, Rt, } => 0x48a0fc00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASAH_C32_ldstexcl { Rs, Rn, Rt, } => 0x48e07c00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASALH_C32_ldstexcl { Rs, Rn, Rt, } => 0x48e0fc00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::INS_asimdins_IR_r { imm5, Rn, Rd, } => 0x4e001c00
                | ((*imm5 as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOV_INS_asimdins_IR_r { imm5, Rn, Rd, } => 0x4e001c00
                | ((*imm5 as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMOV_asimdins_X_x { imm5, Rn, Rd, } => 0x4e002c00
                | ((*imm5 as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMMLA_asimdsame2_G { Rm, Rn, Rd, } => 0x4e80a400
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::USMMLA_asimdsame2_G { Rm, Rn, Rd, } => 0x4e80ac00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SBC_32_addsub_carry { Rm, Rn, Rd, } => 0x5a000000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHA1C_QSV_cryptosha3 { Rm, Rn, Rd, } => 0x5e000000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::DUP_asisdone_only { imm5, Rn, Rd, } => 0x5e000400
                | ((*imm5 as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOV_DUP_asisdone_only { imm5, Rn, Rd, } => 0x5e000400
                | ((*imm5 as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHA1P_QSV_cryptosha3 { Rm, Rn, Rd, } => 0x5e001000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHA1M_QSV_cryptosha3 { Rm, Rn, Rd, } => 0x5e002000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHA1SU0_VVV_cryptosha3 { Rm, Rn, Rd, } => 0x5e003000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHA256H_QQV_cryptosha3 { Rm, Rn, Rd, } => 0x5e004000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHA256H2_QQV_cryptosha3 { Rm, Rn, Rd, } => 0x5e005000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHA256SU1_VVV_cryptosha3 { Rm, Rn, Rd, } => 0x5e006000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMULX_asisdsamefp16_only { Rm, Rn, Rd, } => 0x5e401c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMEQ_asisdsamefp16_only { Rm, Rn, Rd, } => 0x5e402400
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRECPS_asisdsamefp16_only { Rm, Rn, Rd, } => 0x5e403c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRSQRTS_asisdsamefp16_only { Rm, Rn, Rd, } => 0x5ec03c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BFDOT_z_zzzi { i2, Zm, Zn, Zda, } => 0x64604000
                | ((*i2 as u32) << 19)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::BFDOT_z_zzz { Zm, Zn, Zda, } => 0x64608000
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::BFMMLA_z_zzz { Zm, Zn, Zda, } => 0x6460e400
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::FMLA_z_zzzi_s { i2, Zm, Zn, Zda, } => 0x64a00000
                | ((*i2 as u32) << 19)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::FMLS_z_zzzi_s { i2, Zm, Zn, Zda, } => 0x64a00400
                | ((*i2 as u32) << 19)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::FMUL_z_zzi_s { i2, Zm, Zn, Zd, } => 0x64a02000
                | ((*i2 as u32) << 19)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FMMLA_z_zzz_s { Zm, Zn, Zda, } => 0x64a0e400
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::FMLA_z_zzzi_d { i1, Zm, Zn, Zda, } => 0x64e00000
                | ((*i1 as u32) << 20)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::FMLS_z_zzzi_d { i1, Zm, Zn, Zda, } => 0x64e00400
                | ((*i1 as u32) << 20)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::FMUL_z_zzi_d { i1, Zm, Zn, Zd, } => 0x64e02000
                | ((*i1 as u32) << 20)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::BFMLALB_z_zzz { Zm, Zn, Zda, } => 0x64e08000
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::BFMLALT_z_zzz { Zm, Zn, Zda, } => 0x64e08400
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::FMMLA_z_zzz_d { Zm, Zn, Zda, } => 0x64e0e400
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::FADDV_v_p_z { size, Pg, Zn, Vd, } => 0x65002000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Vd as u32) << 0),
            Self::FADD_z_p_zz { size, Pg, Zm, Zdn, } => 0x65008000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FRINTN_z_p_z { size, Pg, Zn, Zd, } => 0x6500a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FSUB_z_p_zz { size, Pg, Zm, Zdn, } => 0x65018000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FRINTP_z_p_z { size, Pg, Zn, Zd, } => 0x6501a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FMUL_z_p_zz { size, Pg, Zm, Zdn, } => 0x65028000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FRINTM_z_p_z { size, Pg, Zn, Zd, } => 0x6502a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FSUBR_z_p_zz { size, Pg, Zm, Zdn, } => 0x65038000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FRINTZ_z_p_z { size, Pg, Zn, Zd, } => 0x6503a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FMAXNMV_v_p_z { size, Pg, Zn, Vd, } => 0x65042000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Vd as u32) << 0),
            Self::FMAXNM_z_p_zz { size, Pg, Zm, Zdn, } => 0x65048000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FRINTA_z_p_z { size, Pg, Zn, Zd, } => 0x6504a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FMINNMV_v_p_z { size, Pg, Zn, Vd, } => 0x65052000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Vd as u32) << 0),
            Self::FMINNM_z_p_zz { size, Pg, Zm, Zdn, } => 0x65058000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FMAXV_v_p_z { size, Pg, Zn, Vd, } => 0x65062000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Vd as u32) << 0),
            Self::FMAX_z_p_zz { size, Pg, Zm, Zdn, } => 0x65068000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FRINTX_z_p_z { size, Pg, Zn, Zd, } => 0x6506a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FMINV_v_p_z { size, Pg, Zn, Vd, } => 0x65072000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Vd as u32) << 0),
            Self::FMIN_z_p_zz { size, Pg, Zm, Zdn, } => 0x65078000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FRINTI_z_p_z { size, Pg, Zn, Zd, } => 0x6507a000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FABD_z_p_zz { size, Pg, Zm, Zdn, } => 0x65088000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FSCALE_z_p_zz { size, Pg, Zm, Zdn, } => 0x65098000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FMULX_z_p_zz { size, Pg, Zm, Zdn, } => 0x650a8000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FDIVR_z_p_zz { size, Pg, Zm, Zdn, } => 0x650c8000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FRECPX_z_p_z { size, Pg, Zn, Zd, } => 0x650ca000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FDIV_z_p_zz { size, Pg, Zm, Zdn, } => 0x650d8000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FSQRT_z_p_z { size, Pg, Zn, Zd, } => 0x650da000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FTMAD_z_zzi { size, imm3, Zm, Zdn, } => 0x65108000
                | ((*size as u32) << 22)
                | ((*imm3 as u32) << 16)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FADDA_v_p_z { size, Pg, Zm, Vdn, } => 0x65182000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Vdn as u32) << 0),
            Self::BFMMLA_asimdsame2_E { Rm, Rn, Rd, } => 0x6e40ec00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMMLA_asimdsame2_G { Rm, Rn, Rd, } => 0x6e80a400
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::LDADDH_32_memop { Rs, Rn, Rt, } => 0x78200000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDCLRH_32_memop { Rs, Rn, Rt, } => 0x78201000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDEORH_32_memop { Rs, Rn, Rt, } => 0x78202000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSETH_32_memop { Rs, Rn, Rt, } => 0x78203000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMAXH_32_memop { Rs, Rn, Rt, } => 0x78204000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMINH_32_memop { Rs, Rn, Rt, } => 0x78205000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMAXH_32_memop { Rs, Rn, Rt, } => 0x78206000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMINH_32_memop { Rs, Rn, Rt, } => 0x78207000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SWPH_32_memop { Rs, Rn, Rt, } => 0x78208000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDADDLH_32_memop { Rs, Rn, Rt, } => 0x78600000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDCLRLH_32_memop { Rs, Rn, Rt, } => 0x78601000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDEORLH_32_memop { Rs, Rn, Rt, } => 0x78602000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSETLH_32_memop { Rs, Rn, Rt, } => 0x78603000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMAXLH_32_memop { Rs, Rn, Rt, } => 0x78604000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMINLH_32_memop { Rs, Rn, Rt, } => 0x78605000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMAXLH_32_memop { Rs, Rn, Rt, } => 0x78606000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMINLH_32_memop { Rs, Rn, Rt, } => 0x78607000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SWPLH_32_memop { Rs, Rn, Rt, } => 0x78608000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDADDAH_32_memop { Rs, Rn, Rt, } => 0x78a00000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDCLRAH_32_memop { Rs, Rn, Rt, } => 0x78a01000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDEORAH_32_memop { Rs, Rn, Rt, } => 0x78a02000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSETAH_32_memop { Rs, Rn, Rt, } => 0x78a03000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMAXAH_32_memop { Rs, Rn, Rt, } => 0x78a04000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMINAH_32_memop { Rs, Rn, Rt, } => 0x78a05000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMAXAH_32_memop { Rs, Rn, Rt, } => 0x78a06000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMINAH_32_memop { Rs, Rn, Rt, } => 0x78a07000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SWPAH_32_memop { Rs, Rn, Rt, } => 0x78a08000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAPRH_32L_memop { Rs, Rn, Rt, } => 0x78a0c000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDADDALH_32_memop { Rs, Rn, Rt, } => 0x78e00000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDCLRALH_32_memop { Rs, Rn, Rt, } => 0x78e01000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDEORALH_32_memop { Rs, Rn, Rt, } => 0x78e02000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSETALH_32_memop { Rs, Rn, Rt, } => 0x78e03000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMAXALH_32_memop { Rs, Rn, Rt, } => 0x78e04000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMINALH_32_memop { Rs, Rn, Rt, } => 0x78e05000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMAXALH_32_memop { Rs, Rn, Rt, } => 0x78e06000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMINALH_32_memop { Rs, Rn, Rt, } => 0x78e07000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SWPALH_32_memop { Rs, Rn, Rt, } => 0x78e08000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SBCS_32_addsub_carry { Rm, Rn, Rd, } => 0x7a000000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGE_asisdsamefp16_only { Rm, Rn, Rd, } => 0x7e402400
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FACGE_asisdsamefp16_only { Rm, Rn, Rd, } => 0x7e402c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FABD_asisdsamefp16_only { Rm, Rn, Rd, } => 0x7ec01400
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGT_asisdsamefp16_only { Rm, Rn, Rd, } => 0x7ec02400
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FACGT_asisdsamefp16_only { Rm, Rn, Rd, } => 0x7ec02c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CAS_C32_ldstexcl { Rs, Rn, Rt, } => 0x88a07c00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASL_C32_ldstexcl { Rs, Rn, Rt, } => 0x88a0fc00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASA_C32_ldstexcl { Rs, Rn, Rt, } => 0x88e07c00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASAL_C32_ldstexcl { Rs, Rn, Rt, } => 0x88e0fc00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ADC_64_addsub_carry { Rm, Rn, Rd, } => 0x9a000000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUBP_64S_dp_2src { Xm, Xn, Xd, } => 0x9ac00000
                | ((*Xm as u32) << 16)
                | ((*Xn as u32) << 5)
                | ((*Xd as u32) << 0),
            Self::UDIV_64_dp_2src { Rm, Rn, Rd, } => 0x9ac00800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SDIV_64_dp_2src { Rm, Rn, Rd, } => 0x9ac00c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::IRG_64I_dp_2src { Xm, Xn, Xd, } => 0x9ac01000
                | ((*Xm as u32) << 16)
                | ((*Xn as u32) << 5)
                | ((*Xd as u32) << 0),
            Self::GMI_64G_dp_2src { Xm, Xn, Xd, } => 0x9ac01400
                | ((*Xm as u32) << 16)
                | ((*Xn as u32) << 5)
                | ((*Xd as u32) << 0),
            Self::LSL_LSLV_64_dp_2src { Rm, Rn, Rd, } => 0x9ac02000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::LSLV_64_dp_2src { Rm, Rn, Rd, } => 0x9ac02000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::LSR_LSRV_64_dp_2src { Rm, Rn, Rd, } => 0x9ac02400
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::LSRV_64_dp_2src { Rm, Rn, Rd, } => 0x9ac02400
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ASR_ASRV_64_dp_2src { Rm, Rn, Rd, } => 0x9ac02800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ASRV_64_dp_2src { Rm, Rn, Rd, } => 0x9ac02800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ROR_RORV_64_dp_2src { Rm, Rn, Rd, } => 0x9ac02c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::RORV_64_dp_2src { Rm, Rn, Rd, } => 0x9ac02c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::PACGA_64P_dp_2src { Rm, Rn, Rd, } => 0x9ac03000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CRC32X_64C_dp_2src { Rm, Rn, Rd, } => 0x9ac04c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CRC32CX_64C_dp_2src { Rm, Rn, Rd, } => 0x9ac05c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MUL_MADD_64A_dp_3src { Rm, Rn, Rd, } => 0x9b007c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MNEG_MSUB_64A_dp_3src { Rm, Rn, Rd, } => 0x9b00fc00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMULL_SMADDL_64WA_dp_3src { Rm, Rn, Rd, } => 0x9b207c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMNEGL_SMSUBL_64WA_dp_3src { Rm, Rn, Rd, } => 0x9b20fc00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMULL_UMADDL_64WA_dp_3src { Rm, Rn, Rd, } => 0x9ba07c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMNEGL_UMSUBL_64WA_dp_3src { Rm, Rn, Rd, } => 0x9ba0fc00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::LDADD_32_memop { Rs, Rn, Rt, } => 0xb8200000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDCLR_32_memop { Rs, Rn, Rt, } => 0xb8201000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDEOR_32_memop { Rs, Rn, Rt, } => 0xb8202000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSET_32_memop { Rs, Rn, Rt, } => 0xb8203000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMAX_32_memop { Rs, Rn, Rt, } => 0xb8204000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMIN_32_memop { Rs, Rn, Rt, } => 0xb8205000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMAX_32_memop { Rs, Rn, Rt, } => 0xb8206000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMIN_32_memop { Rs, Rn, Rt, } => 0xb8207000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SWP_32_memop { Rs, Rn, Rt, } => 0xb8208000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDADDL_32_memop { Rs, Rn, Rt, } => 0xb8600000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDCLRL_32_memop { Rs, Rn, Rt, } => 0xb8601000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDEORL_32_memop { Rs, Rn, Rt, } => 0xb8602000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSETL_32_memop { Rs, Rn, Rt, } => 0xb8603000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMAXL_32_memop { Rs, Rn, Rt, } => 0xb8604000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMINL_32_memop { Rs, Rn, Rt, } => 0xb8605000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMAXL_32_memop { Rs, Rn, Rt, } => 0xb8606000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMINL_32_memop { Rs, Rn, Rt, } => 0xb8607000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SWPL_32_memop { Rs, Rn, Rt, } => 0xb8608000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDADDA_32_memop { Rs, Rn, Rt, } => 0xb8a00000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDCLRA_32_memop { Rs, Rn, Rt, } => 0xb8a01000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDEORA_32_memop { Rs, Rn, Rt, } => 0xb8a02000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSETA_32_memop { Rs, Rn, Rt, } => 0xb8a03000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMAXA_32_memop { Rs, Rn, Rt, } => 0xb8a04000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMINA_32_memop { Rs, Rn, Rt, } => 0xb8a05000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMAXA_32_memop { Rs, Rn, Rt, } => 0xb8a06000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMINA_32_memop { Rs, Rn, Rt, } => 0xb8a07000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SWPA_32_memop { Rs, Rn, Rt, } => 0xb8a08000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAPR_32L_memop { Rs, Rn, Rt, } => 0xb8a0c000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDADDAL_32_memop { Rs, Rn, Rt, } => 0xb8e00000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDCLRAL_32_memop { Rs, Rn, Rt, } => 0xb8e01000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDEORAL_32_memop { Rs, Rn, Rt, } => 0xb8e02000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSETAL_32_memop { Rs, Rn, Rt, } => 0xb8e03000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMAXAL_32_memop { Rs, Rn, Rt, } => 0xb8e04000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMINAL_32_memop { Rs, Rn, Rt, } => 0xb8e05000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMAXAL_32_memop { Rs, Rn, Rt, } => 0xb8e06000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMINAL_32_memop { Rs, Rn, Rt, } => 0xb8e07000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SWPAL_32_memop { Rs, Rn, Rt, } => 0xb8e08000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ADCS_64_addsub_carry { Rm, Rn, Rd, } => 0xba000000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::RMIF_only_rmif { imm6, Rn, mask, } => 0xba000400
                | ((*imm6 as u32) << 15)
                | ((*Rn as u32) << 5)
                | ((*mask as u32) << 0),
            Self::SUBPS_64S_dp_2src { Xm, Xn, Xd, } => 0xbac00000
                | ((*Xm as u32) << 16)
                | ((*Xn as u32) << 5)
                | ((*Xd as u32) << 0),
            Self::CAS_C64_ldstexcl { Rs, Rn, Rt, } => 0xc8a07c00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASL_C64_ldstexcl { Rs, Rn, Rt, } => 0xc8a0fc00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASA_C64_ldstexcl { Rs, Rn, Rt, } => 0xc8e07c00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CASAL_C64_ldstexcl { Rs, Rn, Rt, } => 0xc8e0fc00
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SHA512H_QQV_cryptosha512_3 { Rm, Rn, Rd, } => 0xce608000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHA512H2_QQV_cryptosha512_3 { Rm, Rn, Rd, } => 0xce608400
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHA512SU1_VVV2_cryptosha512_3 { Rm, Rn, Rd, } => 0xce608800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::RAX1_VVV2_cryptosha512_3 { Rm, Rn, Rd, } => 0xce608c00
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SM3PARTW1_VVV4_cryptosha512_3 { Rm, Rn, Rd, } => 0xce60c000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SM3PARTW2_VVV4_cryptosha512_3 { Rm, Rn, Rd, } => 0xce60c400
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SM4EKEY_VVV4_cryptosha512_3 { Rm, Rn, Rd, } => 0xce60c800
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::DC_SYS_CR_systeminstrs { op1, CRm, op2, Rt, } => 0xd5087000
                | ((*op1 as u32) << 16)
                | ((*CRm as u32) << 8)
                | ((*op2 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::IC_SYS_CR_systeminstrs { op1, CRm, op2, Rt, } => 0xd5087000
                | ((*op1 as u32) << 16)
                | ((*CRm as u32) << 8)
                | ((*op2 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::TLBI_SYS_CR_systeminstrs { op1, CRm, op2, Rt, } => 0xd5088000
                | ((*op1 as u32) << 16)
                | ((*CRm as u32) << 8)
                | ((*op2 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SBC_64_addsub_carry { Rm, Rn, Rd, } => 0xda000000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::LDADD_64_memop { Rs, Rn, Rt, } => 0xf8200000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDCLR_64_memop { Rs, Rn, Rt, } => 0xf8201000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDEOR_64_memop { Rs, Rn, Rt, } => 0xf8202000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSET_64_memop { Rs, Rn, Rt, } => 0xf8203000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMAX_64_memop { Rs, Rn, Rt, } => 0xf8204000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMIN_64_memop { Rs, Rn, Rt, } => 0xf8205000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMAX_64_memop { Rs, Rn, Rt, } => 0xf8206000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMIN_64_memop { Rs, Rn, Rt, } => 0xf8207000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SWP_64_memop { Rs, Rn, Rt, } => 0xf8208000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST64BV0_64_memop { Rs, Rn, Rt, } => 0xf820a000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST64BV_64_memop { Rs, Rn, Rt, } => 0xf820b000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDADDL_64_memop { Rs, Rn, Rt, } => 0xf8600000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDCLRL_64_memop { Rs, Rn, Rt, } => 0xf8601000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDEORL_64_memop { Rs, Rn, Rt, } => 0xf8602000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSETL_64_memop { Rs, Rn, Rt, } => 0xf8603000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMAXL_64_memop { Rs, Rn, Rt, } => 0xf8604000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMINL_64_memop { Rs, Rn, Rt, } => 0xf8605000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMAXL_64_memop { Rs, Rn, Rt, } => 0xf8606000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMINL_64_memop { Rs, Rn, Rt, } => 0xf8607000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SWPL_64_memop { Rs, Rn, Rt, } => 0xf8608000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDADDA_64_memop { Rs, Rn, Rt, } => 0xf8a00000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDCLRA_64_memop { Rs, Rn, Rt, } => 0xf8a01000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDEORA_64_memop { Rs, Rn, Rt, } => 0xf8a02000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSETA_64_memop { Rs, Rn, Rt, } => 0xf8a03000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMAXA_64_memop { Rs, Rn, Rt, } => 0xf8a04000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMINA_64_memop { Rs, Rn, Rt, } => 0xf8a05000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMAXA_64_memop { Rs, Rn, Rt, } => 0xf8a06000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMINA_64_memop { Rs, Rn, Rt, } => 0xf8a07000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SWPA_64_memop { Rs, Rn, Rt, } => 0xf8a08000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAPR_64L_memop { Rs, Rn, Rt, } => 0xf8a0c000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDADDAL_64_memop { Rs, Rn, Rt, } => 0xf8e00000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDCLRAL_64_memop { Rs, Rn, Rt, } => 0xf8e01000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDEORAL_64_memop { Rs, Rn, Rt, } => 0xf8e02000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSETAL_64_memop { Rs, Rn, Rt, } => 0xf8e03000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMAXAL_64_memop { Rs, Rn, Rt, } => 0xf8e04000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDSMINAL_64_memop { Rs, Rn, Rt, } => 0xf8e05000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMAXAL_64_memop { Rs, Rn, Rt, } => 0xf8e06000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUMINAL_64_memop { Rs, Rn, Rt, } => 0xf8e07000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SWPAL_64_memop { Rs, Rn, Rt, } => 0xf8e08000
                | ((*Rs as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SBCS_64_addsub_carry { Rm, Rn, Rd, } => 0xfa000000
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UDF_only_perm_undef { imm16, } => 0x00000000
                | ((*imm16 as u32) << 0),
            Self::MOVPRFX_z_p_z { size, M, Pg, Zn, Zd, } => 0x04102000
                | ((*size as u32) << 22)
                | ((*M as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ADDVL_r_ri { Rn, imm6, Rd, } => 0x04205000
                | ((*Rn as u32) << 16)
                | ((*imm6 as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADDPL_r_ri { Rn, imm6, Rd, } => 0x04605000
                | ((*Rn as u32) << 16)
                | ((*imm6 as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ST1_asisdlsop_DX1_r1d { Q, Rm, Rn, Rt, } => 0x0d808400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST3_asisdlsop_DX3_r3d { Q, Rm, Rn, Rt, } => 0x0d80a400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST2_asisdlsop_DX2_r2d { Q, Rm, Rn, Rt, } => 0x0da08400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST4_asisdlsop_DX4_r4d { Q, Rm, Rn, Rt, } => 0x0da0a400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlsop_DX1_r1d { Q, Rm, Rn, Rt, } => 0x0dc08400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3_asisdlsop_DX3_r3d { Q, Rm, Rn, Rt, } => 0x0dc0a400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2_asisdlsop_DX2_r2d { Q, Rm, Rn, Rt, } => 0x0de08400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4_asisdlsop_DX4_r4d { Q, Rm, Rn, Rt, } => 0x0de0a400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::TBL_asimdtbl_L1_1 { Q, Rm, Rn, Rd, } => 0x0e000000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::DUP_asimdins_DV_v { Q, imm5, Rn, Rd, } => 0x0e000400
                | ((*Q as u32) << 30)
                | ((*imm5 as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::DUP_asimdins_DR_r { Q, imm5, Rn, Rd, } => 0x0e000c00
                | ((*Q as u32) << 30)
                | ((*imm5 as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::TBX_asimdtbl_L1_1 { Q, Rm, Rn, Rd, } => 0x0e001000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::TBL_asimdtbl_L2_2 { Q, Rm, Rn, Rd, } => 0x0e002000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::TBX_asimdtbl_L2_2 { Q, Rm, Rn, Rd, } => 0x0e003000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::TBL_asimdtbl_L3_3 { Q, Rm, Rn, Rd, } => 0x0e004000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::TBX_asimdtbl_L3_3 { Q, Rm, Rn, Rd, } => 0x0e005000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::TBL_asimdtbl_L4_4 { Q, Rm, Rn, Rd, } => 0x0e006000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::TBX_asimdtbl_L4_4 { Q, Rm, Rn, Rd, } => 0x0e007000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::AND_asimdsame_only { Q, Rm, Rn, Rd, } => 0x0e201c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLAL_asimdsame_F { Q, Rm, Rn, Rd, } => 0x0e20ec00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAXNM_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x0e400400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLA_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x0e400c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FADD_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x0e401400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMULX_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x0e401c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMEQ_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x0e402400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAX_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x0e403400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRECPS_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x0e403c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BIC_asimdsame_only { Q, Rm, Rn, Rd, } => 0x0e601c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::USDOT_asimdsame2_D { Q, Rm, Rn, Rd, } => 0x0e809c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOV_ORR_asimdsame_only { Q, Rm, Rn, Rd, } => 0x0ea01c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ORR_asimdsame_only { Q, Rm, Rn, Rd, } => 0x0ea01c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLSL_asimdsame_F { Q, Rm, Rn, Rd, } => 0x0ea0ec00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINNM_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x0ec00400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLS_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x0ec00c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FSUB_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x0ec01400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMIN_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x0ec03400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRSQRTS_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x0ec03c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ORN_asimdsame_only { Q, Rm, Rn, Rd, } => 0x0ee01c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOVI_asimdimm_L_sl { Q, a, b, c, cmode, d, e, f, g, h, Rd, } => 0x0f000400
                | ((*Q as u32) << 30)
                | ((*a as u32) << 18)
                | ((*b as u32) << 17)
                | ((*c as u32) << 16)
                | ((*cmode as u32) << 13)
                | ((*d as u32) << 9)
                | ((*e as u32) << 8)
                | ((*f as u32) << 7)
                | ((*g as u32) << 6)
                | ((*h as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ORR_asimdimm_L_sl { Q, a, b, c, cmode, d, e, f, g, h, Rd, } => 0x0f001400
                | ((*Q as u32) << 30)
                | ((*a as u32) << 18)
                | ((*b as u32) << 17)
                | ((*c as u32) << 16)
                | ((*cmode as u32) << 13)
                | ((*d as u32) << 9)
                | ((*e as u32) << 8)
                | ((*f as u32) << 7)
                | ((*g as u32) << 6)
                | ((*h as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ASR_SBFM_32M_bitfield { immr, Rn, Rd, } => 0x13007c00
                | ((*immr as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_S32_float2fix { scale, Rn, Rd, } => 0x1e020000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_S32_float2fix { scale, Rn, Rd, } => 0x1e030000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_32S_float2fix { scale, Rn, Rd, } => 0x1e180000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_32S_float2fix { scale, Rn, Rd, } => 0x1e190000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_D32_float2fix { scale, Rn, Rd, } => 0x1e420000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_D32_float2fix { scale, Rn, Rd, } => 0x1e430000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_32D_float2fix { scale, Rn, Rd, } => 0x1e580000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_32D_float2fix { scale, Rn, Rd, } => 0x1e590000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_H32_float2fix { scale, Rn, Rd, } => 0x1ec20000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_H32_float2fix { scale, Rn, Rd, } => 0x1ec30000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_32H_float2fix { scale, Rn, Rd, } => 0x1ed80000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_32H_float2fix { scale, Rn, Rd, } => 0x1ed90000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::AND_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25004000
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::MOV_and_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25004000
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::BIC_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25004010
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::EOR_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25004200
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::NOT_eor_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25004200
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::MOV_sel_p_p_pp { Pm, Pg, Pn, Pd, } => 0x25004210
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::SEL_p_p_pp { Pm, Pg, Pn, Pd, } => 0x25004210
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::BRKPA_p_p_pp { Pm, Pg, Pn, Pd, } => 0x2500c000
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::BRKPB_p_p_pp { Pm, Pg, Pn, Pd, } => 0x2500c010
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::ADD_z_zi { size, sh, imm8, Zdn, } => 0x2520c000
                | ((*size as u32) << 22)
                | ((*sh as u32) << 13)
                | ((*imm8 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SUB_z_zi { size, sh, imm8, Zdn, } => 0x2521c000
                | ((*size as u32) << 22)
                | ((*sh as u32) << 13)
                | ((*imm8 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SUBR_z_zi { size, sh, imm8, Zdn, } => 0x2523c000
                | ((*size as u32) << 22)
                | ((*sh as u32) << 13)
                | ((*imm8 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SQADD_z_zi { size, sh, imm8, Zdn, } => 0x2524c000
                | ((*size as u32) << 22)
                | ((*sh as u32) << 13)
                | ((*imm8 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UQADD_z_zi { size, sh, imm8, Zdn, } => 0x2525c000
                | ((*size as u32) << 22)
                | ((*sh as u32) << 13)
                | ((*imm8 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::SQSUB_z_zi { size, sh, imm8, Zdn, } => 0x2526c000
                | ((*size as u32) << 22)
                | ((*sh as u32) << 13)
                | ((*imm8 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::UQSUB_z_zi { size, sh, imm8, Zdn, } => 0x2527c000
                | ((*size as u32) << 22)
                | ((*sh as u32) << 13)
                | ((*imm8 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::DUP_z_i { size, sh, imm8, Zd, } => 0x2538c000
                | ((*size as u32) << 22)
                | ((*sh as u32) << 13)
                | ((*imm8 as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::MOV_dup_z_i { size, sh, imm8, Zd, } => 0x2538c000
                | ((*size as u32) << 22)
                | ((*sh as u32) << 13)
                | ((*imm8 as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ANDS_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25404000
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::MOVS_ands_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25404000
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::BICS_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25404010
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::EORS_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25404200
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::NOTS_eors_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25404200
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::BRKPAS_p_p_pp { Pm, Pg, Pn, Pd, } => 0x2540c000
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::BRKPBS_p_p_pp { Pm, Pg, Pn, Pd, } => 0x2540c010
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::MOV_orr_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25804000
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::ORR_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25804000
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::ORN_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25804010
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::NOR_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25804200
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::NAND_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25804210
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::MOVS_orrs_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25c04000
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::ORRS_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25c04000
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::ORNS_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25c04010
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::NORS_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25c04200
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::NANDS_p_p_pp_z { Pm, Pg, Pn, Pd, } => 0x25c04210
                | ((*Pm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Pn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMN_ADDS_32S_addsub_ext { Rm, option, imm3, Rn, } => 0x2b20001f
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*imm3 as u32) << 10)
                | ((*Rn as u32) << 5),
            Self::EOR_asimdsame_only { Q, Rm, Rn, Rd, } => 0x2e201c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLAL2_asimdsame_F { Q, Rm, Rn, Rd, } => 0x2e20cc00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAXNMP_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x2e400400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FADDP_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x2e401400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMUL_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x2e401c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGE_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x2e402400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FACGE_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x2e402c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAXP_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x2e403400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FDIV_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x2e403c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BFDOT_asimdsame2_D { Q, Rm, Rn, Rd, } => 0x2e40fc00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BSL_asimdsame_only { Q, Rm, Rn, Rd, } => 0x2e601c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BIT_asimdsame_only { Q, Rm, Rn, Rd, } => 0x2ea01c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLSL2_asimdsame_F { Q, Rm, Rn, Rd, } => 0x2ea0cc00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINNMP_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x2ec00400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FABD_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x2ec01400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGT_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x2ec02400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FACGT_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x2ec02c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINP_asimdsamefp16_only { Q, Rm, Rn, Rd, } => 0x2ec03400
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BFMLAL_asimdsame2_F { Q, Rm, Rn, Rd, } => 0x2ec0fc00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BIF_asimdsame_only { Q, Rm, Rn, Rd, } => 0x2ee01c00
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MVNI_asimdimm_L_sl { Q, a, b, c, cmode, d, e, f, g, h, Rd, } => 0x2f000400
                | ((*Q as u32) << 30)
                | ((*a as u32) << 18)
                | ((*b as u32) << 17)
                | ((*c as u32) << 16)
                | ((*cmode as u32) << 13)
                | ((*d as u32) << 9)
                | ((*e as u32) << 8)
                | ((*f as u32) << 7)
                | ((*g as u32) << 6)
                | ((*h as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BIC_asimdimm_L_sl { Q, a, b, c, cmode, d, e, f, g, h, Rd, } => 0x2f001400
                | ((*Q as u32) << 30)
                | ((*a as u32) << 18)
                | ((*b as u32) << 17)
                | ((*c as u32) << 16)
                | ((*cmode as u32) << 13)
                | ((*d as u32) << 9)
                | ((*e as u32) << 8)
                | ((*f as u32) << 7)
                | ((*g as u32) << 6)
                | ((*h as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::STRB_32BL_ldst_regoff { Rm, S, Rn, Rt, } => 0x38206800
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRB_32BL_ldst_regoff { Rm, S, Rn, Rt, } => 0x38606800
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSB_64BL_ldst_regoff { Rm, S, Rn, Rt, } => 0x38a06800
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSB_32BL_ldst_regoff { Rm, S, Rn, Rt, } => 0x38e06800
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_BL_ldst_regoff { Rm, S, Rn, Rt, } => 0x3c206800
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_BL_ldst_regoff { Rm, S, Rn, Rt, } => 0x3c606800
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LSR_UBFM_32M_bitfield { immr, Rn, Rd, } => 0x53007c00
                | ((*immr as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMULX_asisdsame_only { sz, Rm, Rn, Rd, } => 0x5e20dc00
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMEQ_asisdsame_only { sz, Rm, Rn, Rd, } => 0x5e20e400
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRECPS_asisdsame_only { sz, Rm, Rn, Rd, } => 0x5e20fc00
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRSQRTS_asisdsame_only { sz, Rm, Rn, Rd, } => 0x5ea0fc00
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCADD_z_p_zz { size, rot, Pg, Zm, Zdn, } => 0x64008000
                | ((*size as u32) << 22)
                | ((*rot as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FMLA_z_zzzi_h { i3h, i3l, Zm, Zn, Zda, } => 0x64200000
                | ((*i3h as u32) << 22)
                | ((*i3l as u32) << 19)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::FMLS_z_zzzi_h { i3h, i3l, Zm, Zn, Zda, } => 0x64200400
                | ((*i3h as u32) << 22)
                | ((*i3l as u32) << 19)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::FMUL_z_zzi_h { i3h, i3l, Zm, Zn, Zd, } => 0x64202000
                | ((*i3h as u32) << 22)
                | ((*i3l as u32) << 19)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::BFMLALB_z_zzzi { i3h, Zm, i3l, Zn, Zda, } => 0x64e04000
                | ((*i3h as u32) << 19)
                | ((*Zm as u32) << 16)
                | ((*i3l as u32) << 11)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::BFMLALT_z_zzzi { i3h, Zm, i3l, Zn, Zda, } => 0x64e04400
                | ((*i3h as u32) << 19)
                | ((*Zm as u32) << 16)
                | ((*i3l as u32) << 11)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::CMP_SUBS_32S_addsub_ext { Rm, option, imm3, Rn, } => 0x6b20001f
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*imm3 as u32) << 10)
                | ((*Rn as u32) << 5),
            Self::FCMGE_asisdsame_only { sz, Rm, Rn, Rd, } => 0x7e20e400
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FACGE_asisdsame_only { sz, Rm, Rn, Rd, } => 0x7e20ec00
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FABD_asisdsame_only { sz, Rm, Rn, Rd, } => 0x7ea0d400
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGT_asisdsame_only { sz, Rm, Rn, Rd, } => 0x7ea0e400
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FACGT_asisdsame_only { sz, Rm, Rn, Rd, } => 0x7ea0ec00
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ASR_SBFM_64M_bitfield { immr, Rn, Rd, } => 0x9340fc00
                | ((*immr as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_S64_float2fix { scale, Rn, Rd, } => 0x9e020000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_S64_float2fix { scale, Rn, Rd, } => 0x9e030000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_64S_float2fix { scale, Rn, Rd, } => 0x9e180000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_64S_float2fix { scale, Rn, Rd, } => 0x9e190000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_D64_float2fix { scale, Rn, Rd, } => 0x9e420000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_D64_float2fix { scale, Rn, Rd, } => 0x9e430000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_64D_float2fix { scale, Rn, Rd, } => 0x9e580000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_64D_float2fix { scale, Rn, Rd, } => 0x9e590000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_H64_float2fix { scale, Rn, Rd, } => 0x9ec20000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_H64_float2fix { scale, Rn, Rd, } => 0x9ec30000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_64H_float2fix { scale, Rn, Rd, } => 0x9ed80000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_64H_float2fix { scale, Rn, Rd, } => 0x9ed90000
                | ((*scale as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMN_ADDS_64S_addsub_ext { Rm, option, imm3, Rn, } => 0xab20001f
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*imm3 as u32) << 10)
                | ((*Rn as u32) << 5),
            Self::LSR_UBFM_64M_bitfield { immr, Rn, Rd, } => 0xd340fc00
                | ((*immr as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SVC_EX_exception { imm16, } => 0xd4000001
                | ((*imm16 as u32) << 5),
            Self::HVC_EX_exception { imm16, } => 0xd4000002
                | ((*imm16 as u32) << 5),
            Self::SMC_EX_exception { imm16, } => 0xd4000003
                | ((*imm16 as u32) << 5),
            Self::BRK_EX_exception { imm16, } => 0xd4200000
                | ((*imm16 as u32) << 5),
            Self::HLT_EX_exception { imm16, } => 0xd4400000
                | ((*imm16 as u32) << 5),
            Self::DCPS1_DC_exception { imm16, } => 0xd4a00001
                | ((*imm16 as u32) << 5),
            Self::DCPS2_DC_exception { imm16, } => 0xd4a00002
                | ((*imm16 as u32) << 5),
            Self::DCPS3_DC_exception { imm16, } => 0xd4a00003
                | ((*imm16 as u32) << 5),
            Self::CMP_SUBS_64S_addsub_ext { Rm, option, imm3, Rn, } => 0xeb20001f
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*imm3 as u32) << 10)
                | ((*Rn as u32) << 5),
            Self::SSHR_asisdshf_R { immh, immb, Rn, Rd, } => 0x5f000400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SSRA_asisdshf_R { immh, immb, Rn, Rd, } => 0x5f001400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SRSHR_asisdshf_R { immh, immb, Rn, Rd, } => 0x5f002400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SRSRA_asisdshf_R { immh, immb, Rn, Rd, } => 0x5f003400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHL_asisdshf_R { immh, immb, Rn, Rd, } => 0x5f005400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQSHL_asisdshf_R { immh, immb, Rn, Rd, } => 0x5f007400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQSHRN_asisdshf_N { immh, immb, Rn, Rd, } => 0x5f009400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQRSHRN_asisdshf_N { immh, immb, Rn, Rd, } => 0x5f009c00
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_asisdshf_C { immh, immb, Rn, Rd, } => 0x5f00e400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_asisdshf_C { immh, immb, Rn, Rd, } => 0x5f00fc00
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::USHR_asisdshf_R { immh, immb, Rn, Rd, } => 0x7f000400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::USRA_asisdshf_R { immh, immb, Rn, Rd, } => 0x7f001400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::URSHR_asisdshf_R { immh, immb, Rn, Rd, } => 0x7f002400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::URSRA_asisdshf_R { immh, immb, Rn, Rd, } => 0x7f003400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SRI_asisdshf_R { immh, immb, Rn, Rd, } => 0x7f004400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SLI_asisdshf_R { immh, immb, Rn, Rd, } => 0x7f005400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQSHLU_asisdshf_R { immh, immb, Rn, Rd, } => 0x7f006400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UQSHL_asisdshf_R { immh, immb, Rn, Rd, } => 0x7f007400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQSHRUN_asisdshf_N { immh, immb, Rn, Rd, } => 0x7f008400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQRSHRUN_asisdshf_N { immh, immb, Rn, Rd, } => 0x7f008c00
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UQSHRN_asisdshf_N { immh, immb, Rn, Rd, } => 0x7f009400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UQRSHRN_asisdshf_N { immh, immb, Rn, Rd, } => 0x7f009c00
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_asisdshf_C { immh, immb, Rn, Rd, } => 0x7f00e400
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_asisdshf_C { immh, immb, Rn, Rd, } => 0x7f00fc00
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADD_z_zz { size, Zm, Zn, Zd, } => 0x04200000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::SUB_z_zz { size, Zm, Zn, Zd, } => 0x04200400
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::SQADD_z_zz { size, Zm, Zn, Zd, } => 0x04201000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UQADD_z_zz { size, Zm, Zn, Zd, } => 0x04201400
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::SQSUB_z_zz { size, Zm, Zn, Zd, } => 0x04201800
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UQSUB_z_zz { size, Zm, Zn, Zd, } => 0x04201c00
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::INDEX_z_ii { size, imm5b, imm5, Zd, } => 0x04204000
                | ((*size as u32) << 22)
                | ((*imm5b as u32) << 16)
                | ((*imm5 as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::INDEX_z_ri { size, imm5, Rn, Zd, } => 0x04204400
                | ((*size as u32) << 22)
                | ((*imm5 as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::INDEX_z_ir { size, Rm, imm5, Zd, } => 0x04204800
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm5 as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::INDEX_z_rr { size, Rm, Rn, Zd, } => 0x04204c00
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ASR_z_zw { size, Zm, Zn, Zd, } => 0x04208000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::LSR_z_zw { size, Zm, Zn, Zd, } => 0x04208400
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::LSL_z_zw { size, Zm, Zn, Zd, } => 0x04208c00
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ASR_z_zi { tszh, tszl, imm3, Zn, Zd, } => 0x04209000
                | ((*tszh as u32) << 22)
                | ((*tszl as u32) << 19)
                | ((*imm3 as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::LSR_z_zi { tszh, tszl, imm3, Zn, Zd, } => 0x04209400
                | ((*tszh as u32) << 22)
                | ((*tszl as u32) << 19)
                | ((*imm3 as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::LSL_z_zi { tszh, tszl, imm3, Zn, Zd, } => 0x04209c00
                | ((*tszh as u32) << 22)
                | ((*tszl as u32) << 19)
                | ((*imm3 as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ADR_z_az_d_s32_scaled { Zm, msz, Zn, Zd, } => 0x0420a000
                | ((*Zm as u32) << 16)
                | ((*msz as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FTSSEL_z_zz { size, Zm, Zn, Zd, } => 0x0420b000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ADR_z_az_d_u32_scaled { Zm, msz, Zn, Zd, } => 0x0460a000
                | ((*Zm as u32) << 16)
                | ((*msz as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::DUP_z_zi { imm2, tsz, Zn, Zd, } => 0x05202000
                | ((*imm2 as u32) << 22)
                | ((*tsz as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::MOV_dup_z_zi { imm2, tsz, Zn, Zd, } => 0x05202000
                | ((*imm2 as u32) << 22)
                | ((*tsz as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::TBL_z_zz_1 { size, Zm, Zn, Zd, } => 0x05203000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ZIP1_z_zz { size, Zm, Zn, Zd, } => 0x05206000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ZIP2_z_zz { size, Zm, Zn, Zd, } => 0x05206400
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UZP1_z_zz { size, Zm, Zn, Zd, } => 0x05206800
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::UZP2_z_zz { size, Zm, Zn, Zd, } => 0x05206c00
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::TRN1_z_zz { size, Zm, Zn, Zd, } => 0x05207000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::TRN2_z_zz { size, Zm, Zn, Zd, } => 0x05207400
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ST1_asisdlsop_SX1_r1s { Q, Rm, S, Rn, Rt, } => 0x0d808000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST3_asisdlsop_SX3_r3s { Q, Rm, S, Rn, Rt, } => 0x0d80a000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST2_asisdlsop_SX2_r2s { Q, Rm, S, Rn, Rt, } => 0x0da08000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST4_asisdlsop_SX4_r4s { Q, Rm, S, Rn, Rt, } => 0x0da0a000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlsop_SX1_r1s { Q, Rm, S, Rn, Rt, } => 0x0dc08000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3_asisdlsop_SX3_r3s { Q, Rm, S, Rn, Rt, } => 0x0dc0a000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2_asisdlsop_SX2_r2s { Q, Rm, S, Rn, Rt, } => 0x0de08000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4_asisdlsop_SX4_r4s { Q, Rm, S, Rn, Rt, } => 0x0de0a000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::FMAXNM_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x0e20c400
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLA_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x0e20cc00
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FADD_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x0e20d400
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMULX_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x0e20dc00
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMEQ_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x0e20e400
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAX_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x0e20f400
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRECPS_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x0e20fc00
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINNM_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x0ea0c400
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLS_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x0ea0cc00
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FSUB_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x0ea0d400
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMIN_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x0ea0f400
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FRSQRTS_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x0ea0fc00
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::WHILELT_p_p_rr { size, Rm, sf, Rn, Pd, } => 0x25200400
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*sf as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::WHILELE_p_p_rr { size, Rm, sf, Rn, Pd, } => 0x25200410
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*sf as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::WHILELO_p_p_rr { size, Rm, sf, Rn, Pd, } => 0x25200c00
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*sf as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::WHILELS_p_p_rr { size, Rm, sf, Rn, Pd, } => 0x25200c10
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*sf as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FMAXNMP_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x2e20c400
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FADDP_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x2e20d400
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMUL_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x2e20dc00
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGE_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x2e20e400
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FACGE_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x2e20ec00
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMAXP_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x2e20f400
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FDIV_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x2e20fc00
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINNMP_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x2ea0c400
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FABD_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x2ea0d400
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGT_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x2ea0e400
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FACGT_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x2ea0ec00
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMINP_asimdsame_only { Q, sz, Rm, Rn, Rd, } => 0x2ea0f400
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOV_ORR_32_log_imm { immr, imms, Rd, } => 0x320003e0
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rd as u32) << 0),
            Self::BFC_BFM_32M_bitfield { immr, imms, Rd, } => 0x330003e0
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rd as u32) << 0),
            Self::SDOT_z_zzz { size, Zm, Zn, Zda, } => 0x44000000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::UDOT_z_zzz { size, Zm, Zn, Zda, } => 0x44000400
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::SQADD_asisdsame_only { size, Rm, Rn, Rd, } => 0x5e200c00
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQSUB_asisdsame_only { size, Rm, Rn, Rd, } => 0x5e202c00
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMGT_asisdsame_only { size, Rm, Rn, Rd, } => 0x5e203400
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMGE_asisdsame_only { size, Rm, Rn, Rd, } => 0x5e203c00
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SSHL_asisdsame_only { size, Rm, Rn, Rd, } => 0x5e204400
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQSHL_asisdsame_only { size, Rm, Rn, Rd, } => 0x5e204c00
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SRSHL_asisdsame_only { size, Rm, Rn, Rd, } => 0x5e205400
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQRSHL_asisdsame_only { size, Rm, Rn, Rd, } => 0x5e205c00
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADD_asisdsame_only { size, Rm, Rn, Rd, } => 0x5e208400
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMTST_asisdsame_only { size, Rm, Rn, Rd, } => 0x5e208c00
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQDMLAL_asisddiff_only { size, Rm, Rn, Rd, } => 0x5e209000
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQDMLSL_asisddiff_only { size, Rm, Rn, Rd, } => 0x5e20b000
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQDMULH_asisdsame_only { size, Rm, Rn, Rd, } => 0x5e20b400
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQDMULL_asisddiff_only { size, Rm, Rn, Rd, } => 0x5e20d000
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLA_asisdelem_RH_H { L, M, Rm, H, Rn, Rd, } => 0x5f001000
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLS_asisdelem_RH_H { L, M, Rm, H, Rn, Rd, } => 0x5f005000
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMUL_asisdelem_RH_H { L, M, Rm, H, Rn, Rd, } => 0x5f009000
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMLA_z_zzzi_h { i2, Zm, rot, Zn, Zda, } => 0x64a01000
                | ((*i2 as u32) << 19)
                | ((*Zm as u32) << 16)
                | ((*rot as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::FCMLA_z_zzzi_s { i1, Zm, rot, Zn, Zda, } => 0x64e01000
                | ((*i1 as u32) << 20)
                | ((*Zm as u32) << 16)
                | ((*rot as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::FADD_z_zz { size, Zm, Zn, Zd, } => 0x65000000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FSUB_z_zz { size, Zm, Zn, Zd, } => 0x65000400
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FMUL_z_zz { size, Zm, Zn, Zd, } => 0x65000800
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FTSMUL_z_zz { size, Zm, Zn, Zd, } => 0x65000c00
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FRECPS_z_zz { size, Zm, Zn, Zd, } => 0x65001800
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FRSQRTS_z_zz { size, Zm, Zn, Zd, } => 0x65001c00
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::TST_ANDS_32S_log_imm { immr, imms, Rn, } => 0x7200001f
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5),
            Self::SQRDMLAH_asisdsame2_only { size, Rm, Rn, Rd, } => 0x7e008400
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQRDMLSH_asisdsame2_only { size, Rm, Rn, Rd, } => 0x7e008c00
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UQADD_asisdsame_only { size, Rm, Rn, Rd, } => 0x7e200c00
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UQSUB_asisdsame_only { size, Rm, Rn, Rd, } => 0x7e202c00
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMHI_asisdsame_only { size, Rm, Rn, Rd, } => 0x7e203400
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMHS_asisdsame_only { size, Rm, Rn, Rd, } => 0x7e203c00
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::USHL_asisdsame_only { size, Rm, Rn, Rd, } => 0x7e204400
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UQSHL_asisdsame_only { size, Rm, Rn, Rd, } => 0x7e204c00
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::URSHL_asisdsame_only { size, Rm, Rn, Rd, } => 0x7e205400
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UQRSHL_asisdsame_only { size, Rm, Rn, Rd, } => 0x7e205c00
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUB_asisdsame_only { size, Rm, Rn, Rd, } => 0x7e208400
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMEQ_asisdsame_only { size, Rm, Rn, Rd, } => 0x7e208c00
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQRDMULH_asisdsame_only { size, Rm, Rn, Rd, } => 0x7e20b400
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMULX_asisdelem_RH_H { L, M, Rm, H, Rn, Rd, } => 0x7f009000
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::PRFB_i_p_br_s { Rm, Pg, Rn, prfop, } => 0x8400c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFB_i_p_ai_s { imm5, Pg, Zn, prfop, } => 0x8400e000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFH_i_p_br_s { Rm, Pg, Rn, prfop, } => 0x8480c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFH_i_p_ai_s { imm5, Pg, Zn, prfop, } => 0x8480e000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFW_i_p_br_s { Rm, Pg, Rn, prfop, } => 0x8500c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFW_i_p_ai_s { imm5, Pg, Zn, prfop, } => 0x8500e000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFD_i_p_br_s { Rm, Pg, Rn, prfop, } => 0x8580c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFD_i_p_ai_s { imm5, Pg, Zn, prfop, } => 0x8580e000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::LD1RQB_z_p_bi_u8 { imm4, Pg, Rn, Zt, } => 0xa4002000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1B_z_p_bi_u8 { imm4, Pg, Rn, Zt, } => 0xa400a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNT1B_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xa400e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNF1B_z_p_bi_u8 { imm4, Pg, Rn, Zt, } => 0xa410a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1ROB_z_p_bi_u8 { imm4, Pg, Rn, Zt, } => 0xa4202000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1B_z_p_bi_u16 { imm4, Pg, Rn, Zt, } => 0xa420a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD2B_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xa420e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNF1B_z_p_bi_u16 { imm4, Pg, Rn, Zt, } => 0xa430a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1B_z_p_bi_u32 { imm4, Pg, Rn, Zt, } => 0xa440a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD3B_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xa440e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNF1B_z_p_bi_u32 { imm4, Pg, Rn, Zt, } => 0xa450a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1B_z_p_bi_u64 { imm4, Pg, Rn, Zt, } => 0xa460a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD4B_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xa460e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNF1B_z_p_bi_u64 { imm4, Pg, Rn, Zt, } => 0xa470a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RQH_z_p_bi_u16 { imm4, Pg, Rn, Zt, } => 0xa4802000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SW_z_p_bi_s64 { imm4, Pg, Rn, Zt, } => 0xa480a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNT1H_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xa480e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNF1SW_z_p_bi_s64 { imm4, Pg, Rn, Zt, } => 0xa490a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1ROH_z_p_bi_u16 { imm4, Pg, Rn, Zt, } => 0xa4a02000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1H_z_p_bi_u16 { imm4, Pg, Rn, Zt, } => 0xa4a0a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD2H_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xa4a0e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNF1H_z_p_bi_u16 { imm4, Pg, Rn, Zt, } => 0xa4b0a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1H_z_p_bi_u32 { imm4, Pg, Rn, Zt, } => 0xa4c0a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD3H_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xa4c0e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNF1H_z_p_bi_u32 { imm4, Pg, Rn, Zt, } => 0xa4d0a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1H_z_p_bi_u64 { imm4, Pg, Rn, Zt, } => 0xa4e0a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD4H_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xa4e0e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNF1H_z_p_bi_u64 { imm4, Pg, Rn, Zt, } => 0xa4f0a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RQW_z_p_bi_u32 { imm4, Pg, Rn, Zt, } => 0xa5002000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SH_z_p_bi_s64 { imm4, Pg, Rn, Zt, } => 0xa500a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNT1W_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xa500e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNF1SH_z_p_bi_s64 { imm4, Pg, Rn, Zt, } => 0xa510a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1ROW_z_p_bi_u32 { imm4, Pg, Rn, Zt, } => 0xa5202000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SH_z_p_bi_s32 { imm4, Pg, Rn, Zt, } => 0xa520a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD2W_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xa520e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNF1SH_z_p_bi_s32 { imm4, Pg, Rn, Zt, } => 0xa530a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1W_z_p_bi_u32 { imm4, Pg, Rn, Zt, } => 0xa540a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD3W_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xa540e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNF1W_z_p_bi_u32 { imm4, Pg, Rn, Zt, } => 0xa550a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1W_z_p_bi_u64 { imm4, Pg, Rn, Zt, } => 0xa560a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD4W_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xa560e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNF1W_z_p_bi_u64 { imm4, Pg, Rn, Zt, } => 0xa570a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RQD_z_p_bi_u64 { imm4, Pg, Rn, Zt, } => 0xa5802000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SB_z_p_bi_s64 { imm4, Pg, Rn, Zt, } => 0xa580a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNT1D_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xa580e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNF1SB_z_p_bi_s64 { imm4, Pg, Rn, Zt, } => 0xa590a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1ROD_z_p_bi_u64 { imm4, Pg, Rn, Zt, } => 0xa5a02000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SB_z_p_bi_s32 { imm4, Pg, Rn, Zt, } => 0xa5a0a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD2D_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xa5a0e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNF1SB_z_p_bi_s32 { imm4, Pg, Rn, Zt, } => 0xa5b0a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SB_z_p_bi_s16 { imm4, Pg, Rn, Zt, } => 0xa5c0a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD3D_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xa5c0e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNF1SB_z_p_bi_s16 { imm4, Pg, Rn, Zt, } => 0xa5d0a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1D_z_p_bi_u64 { imm4, Pg, Rn, Zt, } => 0xa5e0a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD4D_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xa5e0e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNF1D_z_p_bi_u64 { imm4, Pg, Rn, Zt, } => 0xa5f0a000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::BFC_BFM_64M_bitfield { immr, imms, Rd, } => 0xb34003e0
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rd as u32) << 0),
            Self::PRFB_i_p_ai_d { imm5, Pg, Zn, prfop, } => 0xc400e000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFB_i_p_bz_d_64_scaled { Zm, Pg, Rn, prfop, } => 0xc4608000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFH_i_p_bz_d_64_scaled { Zm, Pg, Rn, prfop, } => 0xc460a000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFW_i_p_bz_d_64_scaled { Zm, Pg, Rn, prfop, } => 0xc460c000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFD_i_p_bz_d_64_scaled { Zm, Pg, Rn, prfop, } => 0xc460e000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFH_i_p_ai_d { imm5, Pg, Zn, prfop, } => 0xc480e000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFW_i_p_ai_d { imm5, Pg, Zn, prfop, } => 0xc500e000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFD_i_p_ai_d { imm5, Pg, Zn, prfop, } => 0xc580e000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::SM3TT1A_VVV4_crypto3_imm2 { Rm, imm2, Rn, Rd, } => 0xce408000
                | ((*Rm as u32) << 16)
                | ((*imm2 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SM3TT1B_VVV4_crypto3_imm2 { Rm, imm2, Rn, Rd, } => 0xce408400
                | ((*Rm as u32) << 16)
                | ((*imm2 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SM3TT2A_VVV4_crypto3_imm2 { Rm, imm2, Rn, Rd, } => 0xce408800
                | ((*Rm as u32) << 16)
                | ((*imm2 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SM3TT2B_VVV_crypto3_imm2 { Rm, imm2, Rn, Rd, } => 0xce408c00
                | ((*Rm as u32) << 16)
                | ((*imm2 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::STNT1B_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xe410e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST2B_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xe430e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST3B_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xe450e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST4B_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xe470e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::STNT1H_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xe490e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST2H_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xe4b0e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST3H_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xe4d0e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST4H_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xe4f0e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::STNT1W_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xe510e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST2W_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xe530e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST3W_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xe550e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST4W_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xe570e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::STNT1D_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xe590e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST2D_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xe5b0e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST3D_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xe5d0e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST4D_z_p_bi_contiguous { imm4, Pg, Rn, Zt, } => 0xe5f0e000
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::NEGS_SUBS_32_addsub_shift { shift, Rm, imm6, Rd, } => 0x6b0003e0
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rd as u32) << 0),
            Self::NEGS_SUBS_64_addsub_shift { shift, Rm, imm6, Rd, } => 0xeb0003e0
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rd as u32) << 0),
            Self::SSHR_asimdshf_R { Q, immh, immb, Rn, Rd, } => 0x0f000400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SSRA_asimdshf_R { Q, immh, immb, Rn, Rd, } => 0x0f001400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SRSHR_asimdshf_R { Q, immh, immb, Rn, Rd, } => 0x0f002400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SRSRA_asimdshf_R { Q, immh, immb, Rn, Rd, } => 0x0f003400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHL_asimdshf_R { Q, immh, immb, Rn, Rd, } => 0x0f005400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQSHL_asimdshf_R { Q, immh, immb, Rn, Rd, } => 0x0f007400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHRN_asimdshf_N { Q, immh, immb, Rn, Rd, } => 0x0f008400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::RSHRN_asimdshf_N { Q, immh, immb, Rn, Rd, } => 0x0f008c00
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQSHRN_asimdshf_N { Q, immh, immb, Rn, Rd, } => 0x0f009400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQRSHRN_asimdshf_N { Q, immh, immb, Rn, Rd, } => 0x0f009c00
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SSHLL_asimdshf_L { Q, immh, immb, Rn, Rd, } => 0x0f00a400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SCVTF_asimdshf_C { Q, immh, immb, Rn, Rd, } => 0x0f00e400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZS_asimdshf_C { Q, immh, immb, Rn, Rd, } => 0x0f00fc00
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::USHR_asimdshf_R { Q, immh, immb, Rn, Rd, } => 0x2f000400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::USRA_asimdshf_R { Q, immh, immb, Rn, Rd, } => 0x2f001400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::URSHR_asimdshf_R { Q, immh, immb, Rn, Rd, } => 0x2f002400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::URSRA_asimdshf_R { Q, immh, immb, Rn, Rd, } => 0x2f003400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SRI_asimdshf_R { Q, immh, immb, Rn, Rd, } => 0x2f004400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SLI_asimdshf_R { Q, immh, immb, Rn, Rd, } => 0x2f005400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQSHLU_asimdshf_R { Q, immh, immb, Rn, Rd, } => 0x2f006400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UQSHL_asimdshf_R { Q, immh, immb, Rn, Rd, } => 0x2f007400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQSHRUN_asimdshf_N { Q, immh, immb, Rn, Rd, } => 0x2f008400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQRSHRUN_asimdshf_N { Q, immh, immb, Rn, Rd, } => 0x2f008c00
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UQSHRN_asimdshf_N { Q, immh, immb, Rn, Rd, } => 0x2f009400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UQRSHRN_asimdshf_N { Q, immh, immb, Rn, Rd, } => 0x2f009c00
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::USHLL_asimdshf_L { Q, immh, immb, Rn, Rd, } => 0x2f00a400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UCVTF_asimdshf_C { Q, immh, immb, Rn, Rd, } => 0x2f00e400
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCVTZU_asimdshf_C { Q, immh, immb, Rn, Rd, } => 0x2f00fc00
                | ((*Q as u32) << 30)
                | ((*immh as u32) << 19)
                | ((*immb as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADR_z_az_sd_same_scaled { sz, Zm, msz, Zn, Zd, } => 0x04a0a000
                | ((*sz as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*msz as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ORN_orr_z_zi { imm13, Zdn, } => 0x05000000
                | ((*imm13 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::ORR_z_zi { imm13, Zdn, } => 0x05000000
                | ((*imm13 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::EXT_z_zi_des { imm8h, imm8l, Zm, Zdn, } => 0x05200000
                | ((*imm8h as u32) << 16)
                | ((*imm8l as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::EON_eor_z_zi { imm13, Zdn, } => 0x05400000
                | ((*imm13 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::EOR_z_zi { imm13, Zdn, } => 0x05400000
                | ((*imm13 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::AND_z_zi { imm13, Zdn, } => 0x05800000
                | ((*imm13 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::BIC_and_z_zi { imm13, Zdn, } => 0x05800000
                | ((*imm13 as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::DUPM_z_i { imm13, Zd, } => 0x05c00000
                | ((*imm13 as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::MOV_dupm_z_i { imm13, Zd, } => 0x05c00000
                | ((*imm13 as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ST4_asisdlsep_R4_r { Q, Rm, size, Rn, Rt, } => 0x0c800000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlsep_R4_r4 { Q, Rm, size, Rn, Rt, } => 0x0c802000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST3_asisdlsep_R3_r { Q, Rm, size, Rn, Rt, } => 0x0c804000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlsep_R3_r3 { Q, Rm, size, Rn, Rt, } => 0x0c806000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlsep_R1_r1 { Q, Rm, size, Rn, Rt, } => 0x0c807000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST2_asisdlsep_R2_r { Q, Rm, size, Rn, Rt, } => 0x0c808000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlsep_R2_r2 { Q, Rm, size, Rn, Rt, } => 0x0c80a000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4_asisdlsep_R4_r { Q, Rm, size, Rn, Rt, } => 0x0cc00000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlsep_R4_r4 { Q, Rm, size, Rn, Rt, } => 0x0cc02000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3_asisdlsep_R3_r { Q, Rm, size, Rn, Rt, } => 0x0cc04000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlsep_R3_r3 { Q, Rm, size, Rn, Rt, } => 0x0cc06000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlsep_R1_r1 { Q, Rm, size, Rn, Rt, } => 0x0cc07000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2_asisdlsep_R2_r { Q, Rm, size, Rn, Rt, } => 0x0cc08000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlsep_R2_r2 { Q, Rm, size, Rn, Rt, } => 0x0cc0a000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1_asisdlsop_HX1_r1h { Q, Rm, S, size, Rn, Rt, } => 0x0d804000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST3_asisdlsop_HX3_r3h { Q, Rm, S, size, Rn, Rt, } => 0x0d806000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST2_asisdlsop_HX2_r2h { Q, Rm, S, size, Rn, Rt, } => 0x0da04000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST4_asisdlsop_HX4_r4h { Q, Rm, S, size, Rn, Rt, } => 0x0da06000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlsop_HX1_r1h { Q, Rm, S, size, Rn, Rt, } => 0x0dc04000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3_asisdlsop_HX3_r3h { Q, Rm, S, size, Rn, Rt, } => 0x0dc06000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1R_asisdlsop_RX1_r { Q, Rm, size, Rn, Rt, } => 0x0dc0c000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3R_asisdlsop_RX3_r { Q, Rm, size, Rn, Rt, } => 0x0dc0e000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2_asisdlsop_HX2_r2h { Q, Rm, S, size, Rn, Rt, } => 0x0de04000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4_asisdlsop_HX4_r4h { Q, Rm, S, size, Rn, Rt, } => 0x0de06000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*size as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2R_asisdlsop_RX2_r { Q, Rm, size, Rn, Rt, } => 0x0de0c000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4R_asisdlsop_RX4_r { Q, Rm, size, Rn, Rt, } => 0x0de0e000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::UZP1_asimdperm_only { Q, size, Rm, Rn, Rd, } => 0x0e001800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::TRN1_asimdperm_only { Q, size, Rm, Rn, Rd, } => 0x0e002800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ZIP1_asimdperm_only { Q, size, Rm, Rn, Rd, } => 0x0e003800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UZP2_asimdperm_only { Q, size, Rm, Rn, Rd, } => 0x0e005800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::TRN2_asimdperm_only { Q, size, Rm, Rn, Rd, } => 0x0e006800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ZIP2_asimdperm_only { Q, size, Rm, Rn, Rd, } => 0x0e007800
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SDOT_asimdsame2_D { Q, size, Rm, Rn, Rd, } => 0x0e009400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SADDL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x0e200000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHADD_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e200400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQADD_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e200c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SADDW_asimddiff_W { Q, size, Rm, Rn, Rd, } => 0x0e201000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SRHADD_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e201400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SSUBL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x0e202000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SHSUB_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e202400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQSUB_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e202c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SSUBW_asimddiff_W { Q, size, Rm, Rn, Rd, } => 0x0e203000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMGT_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e203400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMGE_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e203c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADDHN_asimddiff_N { Q, size, Rm, Rn, Rd, } => 0x0e204000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SSHL_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e204400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQSHL_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e204c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SABAL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x0e205000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SRSHL_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e205400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQRSHL_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e205c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUBHN_asimddiff_N { Q, size, Rm, Rn, Rd, } => 0x0e206000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMAX_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e206400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMIN_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e206c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SABDL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x0e207000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SABD_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e207400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SABA_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e207c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMLAL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x0e208000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADD_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e208400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMTST_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e208c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQDMLAL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x0e209000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MLA_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e209400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MUL_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e209c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMLSL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x0e20a000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMAXP_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e20a400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMINP_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e20ac00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQDMLSL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x0e20b000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQDMULH_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e20b400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADDP_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x0e20bc00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMULL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x0e20c000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQDMULL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x0e20d000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::PMULL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x0e20e000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLA_asimdelem_RH_H { Q, L, M, Rm, H, Rn, Rd, } => 0x0f001000
                | ((*Q as u32) << 30)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLS_asimdelem_RH_H { Q, L, M, Rm, H, Rn, Rd, } => 0x0f005000
                | ((*Q as u32) << 30)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMUL_asimdelem_RH_H { Q, L, M, Rm, H, Rn, Rd, } => 0x0f009000
                | ((*Q as u32) << 30)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUDOT_asimdelem_D { Q, L, M, Rm, H, Rn, Rd, } => 0x0f00f000
                | ((*Q as u32) << 30)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BFDOT_asimdelem_E { Q, L, M, Rm, H, Rn, Rd, } => 0x0f40f000
                | ((*Q as u32) << 30)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLAL_asimdelem_LH { Q, L, M, Rm, H, Rn, Rd, } => 0x0f800000
                | ((*Q as u32) << 30)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLSL_asimdelem_LH { Q, L, M, Rm, H, Rn, Rd, } => 0x0f804000
                | ((*Q as u32) << 30)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::USDOT_asimdelem_D { Q, L, M, Rm, H, Rn, Rd, } => 0x0f80f000
                | ((*Q as u32) << 30)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BFMLAL_asimdelem_F { Q, L, M, Rm, H, Rn, Rd, } => 0x0fc0f000
                | ((*Q as u32) << 30)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCCMP_S_floatccmp { Rm, cond, Rn, nzcv, } => 0x1e200400
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*nzcv as u32) << 0),
            Self::FCCMPE_S_floatccmp { Rm, cond, Rn, nzcv, } => 0x1e200410
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*nzcv as u32) << 0),
            Self::FCCMP_D_floatccmp { Rm, cond, Rn, nzcv, } => 0x1e600400
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*nzcv as u32) << 0),
            Self::FCCMPE_D_floatccmp { Rm, cond, Rn, nzcv, } => 0x1e600410
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*nzcv as u32) << 0),
            Self::FCCMP_H_floatccmp { Rm, cond, Rn, nzcv, } => 0x1ee00400
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*nzcv as u32) << 0),
            Self::FCCMPE_H_floatccmp { Rm, cond, Rn, nzcv, } => 0x1ee00410
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*nzcv as u32) << 0),
            Self::MVN_ORN_32_log_shift { shift, Rm, imm6, Rd, } => 0x2a2003e0
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rd as u32) << 0),
            Self::CMN_ADDS_32_addsub_shift { shift, Rm, imm6, Rn, } => 0x2b00001f
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5),
            Self::SQRDMLAH_asimdsame2_only { Q, size, Rm, Rn, Rd, } => 0x2e008400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQRDMLSH_asimdsame2_only { Q, size, Rm, Rn, Rd, } => 0x2e008c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UDOT_asimdsame2_D { Q, size, Rm, Rn, Rd, } => 0x2e009400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UADDL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x2e200000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UHADD_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e200400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UQADD_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e200c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UADDW_asimddiff_W { Q, size, Rm, Rn, Rd, } => 0x2e201000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::URHADD_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e201400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::USUBL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x2e202000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UHSUB_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e202400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UQSUB_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e202c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::USUBW_asimddiff_W { Q, size, Rm, Rn, Rd, } => 0x2e203000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMHI_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e203400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMHS_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e203c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::RADDHN_asimddiff_N { Q, size, Rm, Rn, Rd, } => 0x2e204000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::USHL_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e204400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UQSHL_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e204c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UABAL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x2e205000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::URSHL_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e205400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UQRSHL_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e205c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::RSUBHN_asimddiff_N { Q, size, Rm, Rn, Rd, } => 0x2e206000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMAX_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e206400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMIN_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e206c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UABDL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x2e207000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UABD_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e207400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UABA_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e207c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMLAL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x2e208000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUB_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e208400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMEQ_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e208c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MLS_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e209400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::PMUL_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e209c00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMLSL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x2e20a000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMAXP_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e20a400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMINP_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e20ac00
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQRDMULH_asimdsame_only { Q, size, Rm, Rn, Rd, } => 0x2e20b400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMULL_asimddiff_L { Q, size, Rm, Rn, Rd, } => 0x2e20c000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMULX_asimdelem_RH_H { Q, L, M, Rm, H, Rn, Rd, } => 0x2f009000
                | ((*Q as u32) << 30)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLAL2_asimdelem_LH { Q, L, M, Rm, H, Rn, Rd, } => 0x2f808000
                | ((*Q as u32) << 30)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLSL2_asimdelem_LH { Q, L, M, Rm, H, Rn, Rd, } => 0x2f80c000
                | ((*Q as u32) << 30)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMN_ADDS_32S_addsub_imm { sh, imm12, Rn, } => 0x3100001f
                | ((*sh as u32) << 22)
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5),
            Self::CCMN_32_condcmp_reg { Rm, cond, Rn, nzcv, } => 0x3a400000
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*nzcv as u32) << 0),
            Self::CCMN_32_condcmp_imm { imm5, cond, Rn, nzcv, } => 0x3a400800
                | ((*imm5 as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*nzcv as u32) << 0),
            Self::NEG_SUB_32_addsub_shift { shift, Rm, imm6, Rd, } => 0x4b0003e0
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rd as u32) << 0),
            Self::FMLA_asisdelem_R_SD { sz, L, M, Rm, H, Rn, Rd, } => 0x5f801000
                | ((*sz as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLS_asisdelem_R_SD { sz, L, M, Rm, H, Rn, Rd, } => 0x5f805000
                | ((*sz as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMUL_asisdelem_R_SD { sz, L, M, Rm, H, Rn, Rd, } => 0x5f809000
                | ((*sz as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::TST_ANDS_32_log_shift { shift, Rm, imm6, Rn, } => 0x6a00001f
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5),
            Self::CMP_SUBS_32_addsub_shift { shift, Rm, imm6, Rn, } => 0x6b00001f
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5),
            Self::CMP_SUBS_32S_addsub_imm { sh, imm12, Rn, } => 0x7100001f
                | ((*sh as u32) << 22)
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5),
            Self::CCMP_32_condcmp_reg { Rm, cond, Rn, nzcv, } => 0x7a400000
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*nzcv as u32) << 0),
            Self::CCMP_32_condcmp_imm { imm5, cond, Rn, nzcv, } => 0x7a400800
                | ((*imm5 as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*nzcv as u32) << 0),
            Self::FMULX_asisdelem_R_SD { sz, L, M, Rm, H, Rn, Rd, } => 0x7f809000
                | ((*sz as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::PRFB_i_p_bz_s_x32_scaled { xs, Zm, Pg, Rn, prfop, } => 0x84200000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFH_i_p_bz_s_x32_scaled { xs, Zm, Pg, Rn, prfop, } => 0x84202000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFW_i_p_bz_s_x32_scaled { xs, Zm, Pg, Rn, prfop, } => 0x84204000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFD_i_p_bz_s_x32_scaled { xs, Zm, Pg, Rn, prfop, } => 0x84206000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::LD1SB_z_p_ai_s { imm5, Pg, Zn, Zt, } => 0x84208000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SB_z_p_ai_s { imm5, Pg, Zn, Zt, } => 0x8420a000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1B_z_p_ai_s { imm5, Pg, Zn, Zt, } => 0x8420c000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1B_z_p_ai_s { imm5, Pg, Zn, Zt, } => 0x8420e000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SH_z_p_ai_s { imm5, Pg, Zn, Zt, } => 0x84a08000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SH_z_p_ai_s { imm5, Pg, Zn, Zt, } => 0x84a0a000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1H_z_p_ai_s { imm5, Pg, Zn, Zt, } => 0x84a0c000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1H_z_p_ai_s { imm5, Pg, Zn, Zt, } => 0x84a0e000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1W_z_p_ai_s { imm5, Pg, Zn, Zt, } => 0x8520c000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1W_z_p_ai_s { imm5, Pg, Zn, Zt, } => 0x8520e000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDR_p_bi { imm9h, imm9l, Rn, Pt, } => 0x85800000
                | ((*imm9h as u32) << 16)
                | ((*imm9l as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Pt as u32) << 0),
            Self::PRFB_i_p_bi_s { imm6, Pg, Rn, prfop, } => 0x85c00000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFH_i_p_bi_s { imm6, Pg, Rn, prfop, } => 0x85c02000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFW_i_p_bi_s { imm6, Pg, Rn, prfop, } => 0x85c04000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFD_i_p_bi_s { imm6, Pg, Rn, prfop, } => 0x85c06000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::LD1RQB_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa4000000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1B_z_p_br_u8 { Rm, Pg, Rn, Zt, } => 0xa4004000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1B_z_p_br_u8 { Rm, Pg, Rn, Zt, } => 0xa4006000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNT1B_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa400c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1ROB_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa4200000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1B_z_p_br_u16 { Rm, Pg, Rn, Zt, } => 0xa4204000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1B_z_p_br_u16 { Rm, Pg, Rn, Zt, } => 0xa4206000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD2B_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa420c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1B_z_p_br_u32 { Rm, Pg, Rn, Zt, } => 0xa4404000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1B_z_p_br_u32 { Rm, Pg, Rn, Zt, } => 0xa4406000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD3B_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa440c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1B_z_p_br_u64 { Rm, Pg, Rn, Zt, } => 0xa4604000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1B_z_p_br_u64 { Rm, Pg, Rn, Zt, } => 0xa4606000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD4B_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa460c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RQH_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa4800000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SW_z_p_br_s64 { Rm, Pg, Rn, Zt, } => 0xa4804000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SW_z_p_br_s64 { Rm, Pg, Rn, Zt, } => 0xa4806000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNT1H_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa480c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1ROH_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa4a00000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1H_z_p_br_u16 { Rm, Pg, Rn, Zt, } => 0xa4a04000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1H_z_p_br_u16 { Rm, Pg, Rn, Zt, } => 0xa4a06000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD2H_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa4a0c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1H_z_p_br_u32 { Rm, Pg, Rn, Zt, } => 0xa4c04000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1H_z_p_br_u32 { Rm, Pg, Rn, Zt, } => 0xa4c06000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD3H_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa4c0c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1H_z_p_br_u64 { Rm, Pg, Rn, Zt, } => 0xa4e04000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1H_z_p_br_u64 { Rm, Pg, Rn, Zt, } => 0xa4e06000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD4H_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa4e0c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RQW_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa5000000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SH_z_p_br_s64 { Rm, Pg, Rn, Zt, } => 0xa5004000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SH_z_p_br_s64 { Rm, Pg, Rn, Zt, } => 0xa5006000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNT1W_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa500c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1ROW_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa5200000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SH_z_p_br_s32 { Rm, Pg, Rn, Zt, } => 0xa5204000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SH_z_p_br_s32 { Rm, Pg, Rn, Zt, } => 0xa5206000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD2W_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa520c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1W_z_p_br_u32 { Rm, Pg, Rn, Zt, } => 0xa5404000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1W_z_p_br_u32 { Rm, Pg, Rn, Zt, } => 0xa5406000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD3W_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa540c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1W_z_p_br_u64 { Rm, Pg, Rn, Zt, } => 0xa5604000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1W_z_p_br_u64 { Rm, Pg, Rn, Zt, } => 0xa5606000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD4W_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa560c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RQD_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa5800000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SB_z_p_br_s64 { Rm, Pg, Rn, Zt, } => 0xa5804000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SB_z_p_br_s64 { Rm, Pg, Rn, Zt, } => 0xa5806000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDNT1D_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa580c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1ROD_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa5a00000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SB_z_p_br_s32 { Rm, Pg, Rn, Zt, } => 0xa5a04000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SB_z_p_br_s32 { Rm, Pg, Rn, Zt, } => 0xa5a06000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD2D_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa5a0c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SB_z_p_br_s16 { Rm, Pg, Rn, Zt, } => 0xa5c04000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SB_z_p_br_s16 { Rm, Pg, Rn, Zt, } => 0xa5c06000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD3D_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa5c0c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1D_z_p_br_u64 { Rm, Pg, Rn, Zt, } => 0xa5e04000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1D_z_p_br_u64 { Rm, Pg, Rn, Zt, } => 0xa5e06000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD4D_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xa5e0c000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::MVN_ORN_64_log_shift { shift, Rm, imm6, Rd, } => 0xaa2003e0
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rd as u32) << 0),
            Self::CMN_ADDS_64_addsub_shift { shift, Rm, imm6, Rn, } => 0xab00001f
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5),
            Self::CMN_ADDS_64S_addsub_imm { sh, imm12, Rn, } => 0xb100001f
                | ((*sh as u32) << 22)
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5),
            Self::MOV_ORR_64_log_imm { N, immr, imms, Rd, } => 0xb20003e0
                | ((*N as u32) << 22)
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rd as u32) << 0),
            Self::CCMN_64_condcmp_reg { Rm, cond, Rn, nzcv, } => 0xba400000
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*nzcv as u32) << 0),
            Self::CCMN_64_condcmp_imm { imm5, cond, Rn, nzcv, } => 0xba400800
                | ((*imm5 as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*nzcv as u32) << 0),
            Self::PRFB_i_p_bz_d_x32_scaled { xs, Zm, Pg, Rn, prfop, } => 0xc4200000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFH_i_p_bz_d_x32_scaled { xs, Zm, Pg, Rn, prfop, } => 0xc4202000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFW_i_p_bz_d_x32_scaled { xs, Zm, Pg, Rn, prfop, } => 0xc4204000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::PRFD_i_p_bz_d_x32_scaled { xs, Zm, Pg, Rn, prfop, } => 0xc4206000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*prfop as u32) << 0),
            Self::LD1SB_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xc4208000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SB_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xc420a000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1B_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xc420c000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1B_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xc420e000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SB_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xc4408000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SB_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xc440a000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1B_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xc440c000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1B_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xc440e000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SH_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xc4a08000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SH_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xc4a0a000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1H_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xc4a0c000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1H_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xc4a0e000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SH_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xc4c08000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SH_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xc4c0a000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1H_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xc4c0c000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1H_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xc4c0e000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SH_z_p_bz_d_64_scaled { Zm, Pg, Rn, Zt, } => 0xc4e08000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SH_z_p_bz_d_64_scaled { Zm, Pg, Rn, Zt, } => 0xc4e0a000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1H_z_p_bz_d_64_scaled { Zm, Pg, Rn, Zt, } => 0xc4e0c000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1H_z_p_bz_d_64_scaled { Zm, Pg, Rn, Zt, } => 0xc4e0e000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SW_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xc5208000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SW_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xc520a000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1W_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xc520c000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1W_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xc520e000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SW_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xc5408000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SW_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xc540a000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1W_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xc540c000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1W_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xc540e000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SW_z_p_bz_d_64_scaled { Zm, Pg, Rn, Zt, } => 0xc5608000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SW_z_p_bz_d_64_scaled { Zm, Pg, Rn, Zt, } => 0xc560a000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1W_z_p_bz_d_64_scaled { Zm, Pg, Rn, Zt, } => 0xc560c000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1W_z_p_bz_d_64_scaled { Zm, Pg, Rn, Zt, } => 0xc560e000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1D_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xc5a0c000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1D_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xc5a0e000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1D_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xc5c0c000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1D_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xc5c0e000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1D_z_p_bz_d_64_scaled { Zm, Pg, Rn, Zt, } => 0xc5e0c000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1D_z_p_bz_d_64_scaled { Zm, Pg, Rn, Zt, } => 0xc5e0e000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::NEG_SUB_64_addsub_shift { shift, Rm, imm6, Rd, } => 0xcb0003e0
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rd as u32) << 0),
            Self::STNT1B_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xe4006000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1B_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xe400a000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST2B_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xe4206000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST3B_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xe4406000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1B_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xe440a000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST4B_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xe4606000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1B_z_p_ai_s { imm5, Pg, Zn, Zt, } => 0xe460a000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::STNT1H_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xe4806000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1H_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xe480a000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST2H_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xe4a06000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1H_z_p_bz_d_64_scaled { Zm, Pg, Rn, Zt, } => 0xe4a0a000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST3H_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xe4c06000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1H_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xe4c0a000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST4H_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xe4e06000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1H_z_p_ai_s { imm5, Pg, Zn, Zt, } => 0xe4e0a000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::STNT1W_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xe5006000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1W_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xe500a000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST2W_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xe5206000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1W_z_p_bz_d_64_scaled { Zm, Pg, Rn, Zt, } => 0xe520a000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST3W_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xe5406000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1W_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xe540a000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST4W_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xe5606000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1W_z_p_ai_s { imm5, Pg, Zn, Zt, } => 0xe560a000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::STR_p_bi { imm9h, imm9l, Rn, Pt, } => 0xe5800000
                | ((*imm9h as u32) << 16)
                | ((*imm9l as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Pt as u32) << 0),
            Self::STNT1D_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xe5806000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1D_z_p_bz_d_64_unscaled { Zm, Pg, Rn, Zt, } => 0xe580a000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST2D_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xe5a06000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1D_z_p_bz_d_64_scaled { Zm, Pg, Rn, Zt, } => 0xe5a0a000
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST3D_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xe5c06000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1D_z_p_ai_d { imm5, Pg, Zn, Zt, } => 0xe5c0a000
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1D_z_p_br { Rm, Pg, Rn, Zt, } => 0xe5e04000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST4D_z_p_br_contiguous { Rm, Pg, Rn, Zt, } => 0xe5e06000
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::TST_ANDS_64_log_shift { shift, Rm, imm6, Rn, } => 0xea00001f
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5),
            Self::CMP_SUBS_64_addsub_shift { shift, Rm, imm6, Rn, } => 0xeb00001f
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5),
            Self::CMP_SUBS_64S_addsub_imm { sh, imm12, Rn, } => 0xf100001f
                | ((*sh as u32) << 22)
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5),
            Self::TST_ANDS_64S_log_imm { N, immr, imms, Rn, } => 0xf200001f
                | ((*N as u32) << 22)
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5),
            Self::CCMP_64_condcmp_reg { Rm, cond, Rn, nzcv, } => 0xfa400000
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*nzcv as u32) << 0),
            Self::CCMP_64_condcmp_imm { imm5, cond, Rn, nzcv, } => 0xfa400800
                | ((*imm5 as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*nzcv as u32) << 0),
            Self::CINC_CSINC_32_condsel { Rm, cond, Rn, Rd, } => 0x1a800400
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CINV_CSINV_32_condsel { Rm, cond, Rn, Rd, } => 0x5a800000
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CINC_CSINC_64_condsel { Rm, cond, Rn, Rd, } => 0x9a800400
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CINV_CSINV_64_condsel { Rm, cond, Rn, Rd, } => 0xda800000
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CNEG_CSNEG_32_condsel { Rm, cond, Rn, Rd, } => 0x5a800400
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CNEG_CSNEG_64_condsel { Rm, cond, Rn, Rd, } => 0xda800400
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCPY_z_p_i { size, Pg, imm8, Zd, } => 0x0510c000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 16)
                | ((*imm8 as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::FMOV_fcpy_z_p_i { size, Pg, imm8, Zd, } => 0x0510c000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 16)
                | ((*imm8 as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ST1_asisdlsop_BX1_r1b { Q, Rm, S, size, Rn, Rt, } => 0x0d800000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST3_asisdlsop_BX3_r3b { Q, Rm, S, size, Rn, Rt, } => 0x0d802000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST2_asisdlsop_BX2_r2b { Q, Rm, S, size, Rn, Rt, } => 0x0da00000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST4_asisdlsop_BX4_r4b { Q, Rm, S, size, Rn, Rt, } => 0x0da02000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1_asisdlsop_BX1_r1b { Q, Rm, S, size, Rn, Rt, } => 0x0dc00000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD3_asisdlsop_BX3_r3b { Q, Rm, S, size, Rn, Rt, } => 0x0dc02000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD2_asisdlsop_BX2_r2b { Q, Rm, S, size, Rn, Rt, } => 0x0de00000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD4_asisdlsop_BX4_r4b { Q, Rm, S, size, Rn, Rt, } => 0x0de02000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*S as u32) << 12)
                | ((*size as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::FMLA_asimdelem_R_SD { Q, sz, L, M, Rm, H, Rn, Rd, } => 0x0f801000
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMLS_asimdelem_R_SD { Q, sz, L, M, Rm, H, Rn, Rd, } => 0x0f805000
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMUL_asimdelem_R_SD { Q, sz, L, M, Rm, H, Rn, Rd, } => 0x0f809000
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::STLURB_32_ldapstl_unscaled { imm9, Rn, Rt, } => 0x19000000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAPURB_32_ldapstl_unscaled { imm9, Rn, Rt, } => 0x19400000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAPURSB_64_ldapstl_unscaled { imm9, Rn, Rt, } => 0x19800000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAPURSB_32_ldapstl_unscaled { imm9, Rn, Rt, } => 0x19c00000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CSEL_32_condsel { Rm, cond, Rn, Rd, } => 0x1a800000
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CSINC_32_condsel { Rm, cond, Rn, Rd, } => 0x1a800400
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCSEL_S_floatsel { Rm, cond, Rn, Rd, } => 0x1e200c00
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCSEL_D_floatsel { Rm, cond, Rn, Rd, } => 0x1e600c00
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCSEL_H_floatsel { Rm, cond, Rn, Rd, } => 0x1ee00c00
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMPHS_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x24000000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPLS_cmphs_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x24000000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPHI_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x24000010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPLO_cmphi_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x24000010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPEQ_p_p_zw { size, Zm, Pg, Zn, Pd, } => 0x24002000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPNE_p_p_zw { size, Zm, Pg, Zn, Pd, } => 0x24002010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPGE_p_p_zw { size, Zm, Pg, Zn, Pd, } => 0x24004000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPGT_p_p_zw { size, Zm, Pg, Zn, Pd, } => 0x24004010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPLT_p_p_zw { size, Zm, Pg, Zn, Pd, } => 0x24006000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPLE_p_p_zw { size, Zm, Pg, Zn, Pd, } => 0x24006010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPGE_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x24008000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPLE_cmpge_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x24008000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPGT_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x24008010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPLT_cmpgt_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x24008010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPEQ_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x2400a000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPNE_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x2400a010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPHS_p_p_zw { size, Zm, Pg, Zn, Pd, } => 0x2400c000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPHI_p_p_zw { size, Zm, Pg, Zn, Pd, } => 0x2400c010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPLO_p_p_zw { size, Zm, Pg, Zn, Pd, } => 0x2400e000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPLS_p_p_zw { size, Zm, Pg, Zn, Pd, } => 0x2400e010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPGE_p_p_zi { size, imm5, Pg, Zn, Pd, } => 0x25000000
                | ((*size as u32) << 22)
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPGT_p_p_zi { size, imm5, Pg, Zn, Pd, } => 0x25000010
                | ((*size as u32) << 22)
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPLT_p_p_zi { size, imm5, Pg, Zn, Pd, } => 0x25002000
                | ((*size as u32) << 22)
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPLE_p_p_zi { size, imm5, Pg, Zn, Pd, } => 0x25002010
                | ((*size as u32) << 22)
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPEQ_p_p_zi { size, imm5, Pg, Zn, Pd, } => 0x25008000
                | ((*size as u32) << 22)
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPNE_p_p_zi { size, imm5, Pg, Zn, Pd, } => 0x25008010
                | ((*size as u32) << 22)
                | ((*imm5 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FCADD_asimdsame2_C { Q, size, Rm, rot, Rn, Rd, } => 0x2e00e400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*rot as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMULX_asimdelem_R_SD { Q, sz, L, M, Rm, H, Rn, Rd, } => 0x2f809000
                | ((*Q as u32) << 30)
                | ((*sz as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::STURB_32_ldst_unscaled { imm9, Rn, Rt, } => 0x38000000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STRB_32_ldst_immpost { imm9, Rn, Rt, } => 0x38000400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STTRB_32_ldst_unpriv { imm9, Rn, Rt, } => 0x38000800
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STRB_32_ldst_immpre { imm9, Rn, Rt, } => 0x38000c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STRB_32B_ldst_regoff { Rm, option, S, Rn, Rt, } => 0x38200800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDURB_32_ldst_unscaled { imm9, Rn, Rt, } => 0x38400000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRB_32_ldst_immpost { imm9, Rn, Rt, } => 0x38400400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDTRB_32_ldst_unpriv { imm9, Rn, Rt, } => 0x38400800
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRB_32_ldst_immpre { imm9, Rn, Rt, } => 0x38400c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRB_32B_ldst_regoff { Rm, option, S, Rn, Rt, } => 0x38600800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDURSB_64_ldst_unscaled { imm9, Rn, Rt, } => 0x38800000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSB_64_ldst_immpost { imm9, Rn, Rt, } => 0x38800400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDTRSB_64_ldst_unpriv { imm9, Rn, Rt, } => 0x38800800
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSB_64_ldst_immpre { imm9, Rn, Rt, } => 0x38800c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSB_64B_ldst_regoff { Rm, option, S, Rn, Rt, } => 0x38a00800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDURSB_32_ldst_unscaled { imm9, Rn, Rt, } => 0x38c00000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSB_32_ldst_immpost { imm9, Rn, Rt, } => 0x38c00400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDTRSB_32_ldst_unpriv { imm9, Rn, Rt, } => 0x38c00800
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSB_32_ldst_immpre { imm9, Rn, Rt, } => 0x38c00c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSB_32B_ldst_regoff { Rm, option, S, Rn, Rt, } => 0x38e00800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STUR_B_ldst_unscaled { imm9, Rn, Rt, } => 0x3c000000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_B_ldst_immpost { imm9, Rn, Rt, } => 0x3c000400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_B_ldst_immpre { imm9, Rn, Rt, } => 0x3c000c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_B_ldst_regoff { Rm, option, S, Rn, Rt, } => 0x3c200800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUR_B_ldst_unscaled { imm9, Rn, Rt, } => 0x3c400000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_B_ldst_immpost { imm9, Rn, Rt, } => 0x3c400400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_B_ldst_immpre { imm9, Rn, Rt, } => 0x3c400c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_B_ldst_regoff { Rm, option, S, Rn, Rt, } => 0x3c600800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STUR_Q_ldst_unscaled { imm9, Rn, Rt, } => 0x3c800000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_Q_ldst_immpost { imm9, Rn, Rt, } => 0x3c800400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_Q_ldst_immpre { imm9, Rn, Rt, } => 0x3c800c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_Q_ldst_regoff { Rm, option, S, Rn, Rt, } => 0x3ca00800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUR_Q_ldst_unscaled { imm9, Rn, Rt, } => 0x3cc00000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_Q_ldst_immpost { imm9, Rn, Rt, } => 0x3cc00400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_Q_ldst_immpre { imm9, Rn, Rt, } => 0x3cc00c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_Q_ldst_regoff { Rm, option, S, Rn, Rt, } => 0x3ce00800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STLURH_32_ldapstl_unscaled { imm9, Rn, Rt, } => 0x59000000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAPURH_32_ldapstl_unscaled { imm9, Rn, Rt, } => 0x59400000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAPURSH_64_ldapstl_unscaled { imm9, Rn, Rt, } => 0x59800000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAPURSH_32_ldapstl_unscaled { imm9, Rn, Rt, } => 0x59c00000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CSINV_32_condsel { Rm, cond, Rn, Rd, } => 0x5a800000
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CSNEG_32_condsel { Rm, cond, Rn, Rd, } => 0x5a800400
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQDMLAL_asisdelem_L { size, L, M, Rm, H, Rn, Rd, } => 0x5f003000
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQDMLSL_asisdelem_L { size, L, M, Rm, H, Rn, Rd, } => 0x5f007000
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQDMULL_asisdelem_L { size, L, M, Rm, H, Rn, Rd, } => 0x5f00b000
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQDMULH_asisdelem_R { size, L, M, Rm, H, Rn, Rd, } => 0x5f00c000
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQRDMULH_asisdelem_R { size, L, M, Rm, H, Rn, Rd, } => 0x5f00d000
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMGE_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x65004000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FCMLE_fcmge_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x65004000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FCMGT_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x65004010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FCMLT_fcmgt_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x65004010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FCMEQ_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x65006000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FCMNE_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x65006010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FCMUO_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x6500c000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FACGE_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x6500c010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FACLE_facge_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x6500c010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FACGT_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x6500e010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::FACLT_facgt_p_p_zz { size, Zm, Pg, Zn, Pd, } => 0x6500e010
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::INS_asimdins_IV_v { imm5, imm4, Rn, Rd, } => 0x6e000400
                | ((*imm5 as u32) << 16)
                | ((*imm4 as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOV_INS_asimdins_IV_v { imm5, imm4, Rn, Rd, } => 0x6e000400
                | ((*imm5 as u32) << 16)
                | ((*imm4 as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::STURH_32_ldst_unscaled { imm9, Rn, Rt, } => 0x78000000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STRH_32_ldst_immpost { imm9, Rn, Rt, } => 0x78000400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STTRH_32_ldst_unpriv { imm9, Rn, Rt, } => 0x78000800
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STRH_32_ldst_immpre { imm9, Rn, Rt, } => 0x78000c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STRH_32_ldst_regoff { Rm, option, S, Rn, Rt, } => 0x78200800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDURH_32_ldst_unscaled { imm9, Rn, Rt, } => 0x78400000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRH_32_ldst_immpost { imm9, Rn, Rt, } => 0x78400400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDTRH_32_ldst_unpriv { imm9, Rn, Rt, } => 0x78400800
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRH_32_ldst_immpre { imm9, Rn, Rt, } => 0x78400c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRH_32_ldst_regoff { Rm, option, S, Rn, Rt, } => 0x78600800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDURSH_64_ldst_unscaled { imm9, Rn, Rt, } => 0x78800000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSH_64_ldst_immpost { imm9, Rn, Rt, } => 0x78800400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDTRSH_64_ldst_unpriv { imm9, Rn, Rt, } => 0x78800800
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSH_64_ldst_immpre { imm9, Rn, Rt, } => 0x78800c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSH_64_ldst_regoff { Rm, option, S, Rn, Rt, } => 0x78a00800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDURSH_32_ldst_unscaled { imm9, Rn, Rt, } => 0x78c00000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSH_32_ldst_immpost { imm9, Rn, Rt, } => 0x78c00400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDTRSH_32_ldst_unpriv { imm9, Rn, Rt, } => 0x78c00800
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSH_32_ldst_immpre { imm9, Rn, Rt, } => 0x78c00c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSH_32_ldst_regoff { Rm, option, S, Rn, Rt, } => 0x78e00800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STUR_H_ldst_unscaled { imm9, Rn, Rt, } => 0x7c000000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_H_ldst_immpost { imm9, Rn, Rt, } => 0x7c000400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_H_ldst_immpre { imm9, Rn, Rt, } => 0x7c000c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_H_ldst_regoff { Rm, option, S, Rn, Rt, } => 0x7c200800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUR_H_ldst_unscaled { imm9, Rn, Rt, } => 0x7c400000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_H_ldst_immpost { imm9, Rn, Rt, } => 0x7c400400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_H_ldst_immpre { imm9, Rn, Rt, } => 0x7c400c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_H_ldst_regoff { Rm, option, S, Rn, Rt, } => 0x7c600800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SQRDMLAH_asisdelem_R { size, L, M, Rm, H, Rn, Rd, } => 0x7f00d000
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQRDMLSH_asisdelem_R { size, L, M, Rm, H, Rn, Rd, } => 0x7f00f000
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::LD1SB_z_p_bz_s_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0x84000000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SB_z_p_bz_s_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0x84002000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1B_z_p_bz_s_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0x84004000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1B_z_p_bz_s_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0x84006000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RB_z_p_bi_u8 { imm6, Pg, Rn, Zt, } => 0x84408000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RB_z_p_bi_u16 { imm6, Pg, Rn, Zt, } => 0x8440a000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RB_z_p_bi_u32 { imm6, Pg, Rn, Zt, } => 0x8440c000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RB_z_p_bi_u64 { imm6, Pg, Rn, Zt, } => 0x8440e000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SH_z_p_bz_s_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0x84800000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SH_z_p_bz_s_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0x84802000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1H_z_p_bz_s_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0x84804000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1H_z_p_bz_s_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0x84806000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SH_z_p_bz_s_x32_scaled { xs, Zm, Pg, Rn, Zt, } => 0x84a00000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SH_z_p_bz_s_x32_scaled { xs, Zm, Pg, Rn, Zt, } => 0x84a02000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1H_z_p_bz_s_x32_scaled { xs, Zm, Pg, Rn, Zt, } => 0x84a04000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1H_z_p_bz_s_x32_scaled { xs, Zm, Pg, Rn, Zt, } => 0x84a06000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RSW_z_p_bi_s64 { imm6, Pg, Rn, Zt, } => 0x84c08000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RH_z_p_bi_u16 { imm6, Pg, Rn, Zt, } => 0x84c0a000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RH_z_p_bi_u32 { imm6, Pg, Rn, Zt, } => 0x84c0c000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RH_z_p_bi_u64 { imm6, Pg, Rn, Zt, } => 0x84c0e000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1W_z_p_bz_s_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0x85004000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1W_z_p_bz_s_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0x85006000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1W_z_p_bz_s_x32_scaled { xs, Zm, Pg, Rn, Zt, } => 0x85204000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1W_z_p_bz_s_x32_scaled { xs, Zm, Pg, Rn, Zt, } => 0x85206000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RSH_z_p_bi_s64 { imm6, Pg, Rn, Zt, } => 0x85408000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RSH_z_p_bi_s32 { imm6, Pg, Rn, Zt, } => 0x8540a000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RW_z_p_bi_u32 { imm6, Pg, Rn, Zt, } => 0x8540c000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RW_z_p_bi_u64 { imm6, Pg, Rn, Zt, } => 0x8540e000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDR_z_bi { imm9h, imm9l, Rn, Zt, } => 0x85804000
                | ((*imm9h as u32) << 16)
                | ((*imm9l as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RSB_z_p_bi_s64 { imm6, Pg, Rn, Zt, } => 0x85c08000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RSB_z_p_bi_s32 { imm6, Pg, Rn, Zt, } => 0x85c0a000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RSB_z_p_bi_s16 { imm6, Pg, Rn, Zt, } => 0x85c0c000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1RD_z_p_bi_u64 { imm6, Pg, Rn, Zt, } => 0x85c0e000
                | ((*imm6 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::STLUR_32_ldapstl_unscaled { imm9, Rn, Rt, } => 0x99000000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAPUR_32_ldapstl_unscaled { imm9, Rn, Rt, } => 0x99400000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAPURSW_64_ldapstl_unscaled { imm9, Rn, Rt, } => 0x99800000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CSEL_64_condsel { Rm, cond, Rn, Rd, } => 0x9a800000
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CSINC_64_condsel { Rm, cond, Rn, Rd, } => 0x9a800400
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::STUR_32_ldst_unscaled { imm9, Rn, Rt, } => 0xb8000000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_32_ldst_immpost { imm9, Rn, Rt, } => 0xb8000400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STTR_32_ldst_unpriv { imm9, Rn, Rt, } => 0xb8000800
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_32_ldst_immpre { imm9, Rn, Rt, } => 0xb8000c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_32_ldst_regoff { Rm, option, S, Rn, Rt, } => 0xb8200800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUR_32_ldst_unscaled { imm9, Rn, Rt, } => 0xb8400000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_32_ldst_immpost { imm9, Rn, Rt, } => 0xb8400400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDTR_32_ldst_unpriv { imm9, Rn, Rt, } => 0xb8400800
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_32_ldst_immpre { imm9, Rn, Rt, } => 0xb8400c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_32_ldst_regoff { Rm, option, S, Rn, Rt, } => 0xb8600800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDURSW_64_ldst_unscaled { imm9, Rn, Rt, } => 0xb8800000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSW_64_ldst_immpost { imm9, Rn, Rt, } => 0xb8800400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDTRSW_64_ldst_unpriv { imm9, Rn, Rt, } => 0xb8800800
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSW_64_ldst_immpre { imm9, Rn, Rt, } => 0xb8800c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSW_64_ldst_regoff { Rm, option, S, Rn, Rt, } => 0xb8a00800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STUR_S_ldst_unscaled { imm9, Rn, Rt, } => 0xbc000000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_S_ldst_immpost { imm9, Rn, Rt, } => 0xbc000400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_S_ldst_immpre { imm9, Rn, Rt, } => 0xbc000c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_S_ldst_regoff { Rm, option, S, Rn, Rt, } => 0xbc200800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUR_S_ldst_unscaled { imm9, Rn, Rt, } => 0xbc400000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_S_ldst_immpost { imm9, Rn, Rt, } => 0xbc400400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_S_ldst_immpre { imm9, Rn, Rt, } => 0xbc400c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_S_ldst_regoff { Rm, option, S, Rn, Rt, } => 0xbc600800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LD1SB_z_p_bz_d_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0xc4000000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SB_z_p_bz_d_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0xc4002000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1B_z_p_bz_d_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0xc4004000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1B_z_p_bz_d_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0xc4006000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SH_z_p_bz_d_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0xc4800000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SH_z_p_bz_d_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0xc4802000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1H_z_p_bz_d_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0xc4804000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1H_z_p_bz_d_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0xc4806000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SH_z_p_bz_d_x32_scaled { xs, Zm, Pg, Rn, Zt, } => 0xc4a00000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SH_z_p_bz_d_x32_scaled { xs, Zm, Pg, Rn, Zt, } => 0xc4a02000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1H_z_p_bz_d_x32_scaled { xs, Zm, Pg, Rn, Zt, } => 0xc4a04000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1H_z_p_bz_d_x32_scaled { xs, Zm, Pg, Rn, Zt, } => 0xc4a06000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SW_z_p_bz_d_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0xc5000000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SW_z_p_bz_d_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0xc5002000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1W_z_p_bz_d_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0xc5004000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1W_z_p_bz_d_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0xc5006000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1SW_z_p_bz_d_x32_scaled { xs, Zm, Pg, Rn, Zt, } => 0xc5200000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1SW_z_p_bz_d_x32_scaled { xs, Zm, Pg, Rn, Zt, } => 0xc5202000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1W_z_p_bz_d_x32_scaled { xs, Zm, Pg, Rn, Zt, } => 0xc5204000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1W_z_p_bz_d_x32_scaled { xs, Zm, Pg, Rn, Zt, } => 0xc5206000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1D_z_p_bz_d_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0xc5804000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1D_z_p_bz_d_x32_unscaled { xs, Zm, Pg, Rn, Zt, } => 0xc5806000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LD1D_z_p_bz_d_x32_scaled { xs, Zm, Pg, Rn, Zt, } => 0xc5a04000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDFF1D_z_p_bz_d_x32_scaled { xs, Zm, Pg, Rn, Zt, } => 0xc5a06000
                | ((*xs as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::SYS_CR_systeminstrs { op1, CRn, CRm, op2, Rt, } => 0xd5080000
                | ((*op1 as u32) << 16)
                | ((*CRn as u32) << 12)
                | ((*CRm as u32) << 8)
                | ((*op2 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SYSL_RC_systeminstrs { op1, CRn, CRm, op2, Rt, } => 0xd5280000
                | ((*op1 as u32) << 16)
                | ((*CRn as u32) << 12)
                | ((*CRm as u32) << 8)
                | ((*op2 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STLUR_64_ldapstl_unscaled { imm9, Rn, Rt, } => 0xd9000000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STG_64Spost_ldsttags { imm9, Xn, Xt, } => 0xd9200400
                | ((*imm9 as u32) << 12)
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::STG_64Soffset_ldsttags { imm9, Xn, Xt, } => 0xd9200800
                | ((*imm9 as u32) << 12)
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::STG_64Spre_ldsttags { imm9, Xn, Xt, } => 0xd9200c00
                | ((*imm9 as u32) << 12)
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::LDAPUR_64_ldapstl_unscaled { imm9, Rn, Rt, } => 0xd9400000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDG_64Loffset_ldsttags { imm9, Xn, Xt, } => 0xd9600000
                | ((*imm9 as u32) << 12)
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::STZG_64Spost_ldsttags { imm9, Xn, Xt, } => 0xd9600400
                | ((*imm9 as u32) << 12)
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::STZG_64Soffset_ldsttags { imm9, Xn, Xt, } => 0xd9600800
                | ((*imm9 as u32) << 12)
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::STZG_64Spre_ldsttags { imm9, Xn, Xt, } => 0xd9600c00
                | ((*imm9 as u32) << 12)
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::ST2G_64Spost_ldsttags { imm9, Xn, Xt, } => 0xd9a00400
                | ((*imm9 as u32) << 12)
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::ST2G_64Soffset_ldsttags { imm9, Xn, Xt, } => 0xd9a00800
                | ((*imm9 as u32) << 12)
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::ST2G_64Spre_ldsttags { imm9, Xn, Xt, } => 0xd9a00c00
                | ((*imm9 as u32) << 12)
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::STZ2G_64Spost_ldsttags { imm9, Xn, Xt, } => 0xd9e00400
                | ((*imm9 as u32) << 12)
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::STZ2G_64Soffset_ldsttags { imm9, Xn, Xt, } => 0xd9e00800
                | ((*imm9 as u32) << 12)
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::STZ2G_64Spre_ldsttags { imm9, Xn, Xt, } => 0xd9e00c00
                | ((*imm9 as u32) << 12)
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::CSINV_64_condsel { Rm, cond, Rn, Rd, } => 0xda800000
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CSNEG_64_condsel { Rm, cond, Rn, Rd, } => 0xda800400
                | ((*Rm as u32) << 16)
                | ((*cond as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ST1B_z_p_bz_d_x32_unscaled { Zm, xs, Pg, Rn, Zt, } => 0xe4008000
                | ((*Zm as u32) << 16)
                | ((*xs as u32) << 14)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1B_z_p_bi { size, imm4, Pg, Rn, Zt, } => 0xe400e000
                | ((*size as u32) << 21)
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1B_z_p_bz_s_x32_unscaled { Zm, xs, Pg, Rn, Zt, } => 0xe4408000
                | ((*Zm as u32) << 16)
                | ((*xs as u32) << 14)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1H_z_p_bz_d_x32_unscaled { Zm, xs, Pg, Rn, Zt, } => 0xe4808000
                | ((*Zm as u32) << 16)
                | ((*xs as u32) << 14)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1H_z_p_bi { size, imm4, Pg, Rn, Zt, } => 0xe480e000
                | ((*size as u32) << 21)
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1H_z_p_bz_d_x32_scaled { Zm, xs, Pg, Rn, Zt, } => 0xe4a08000
                | ((*Zm as u32) << 16)
                | ((*xs as u32) << 14)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1H_z_p_bz_s_x32_unscaled { Zm, xs, Pg, Rn, Zt, } => 0xe4c08000
                | ((*Zm as u32) << 16)
                | ((*xs as u32) << 14)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1H_z_p_bz_s_x32_scaled { Zm, xs, Pg, Rn, Zt, } => 0xe4e08000
                | ((*Zm as u32) << 16)
                | ((*xs as u32) << 14)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1W_z_p_bz_d_x32_unscaled { Zm, xs, Pg, Rn, Zt, } => 0xe5008000
                | ((*Zm as u32) << 16)
                | ((*xs as u32) << 14)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1W_z_p_bi { size, imm4, Pg, Rn, Zt, } => 0xe500e000
                | ((*size as u32) << 21)
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1W_z_p_bz_d_x32_scaled { Zm, xs, Pg, Rn, Zt, } => 0xe5208000
                | ((*Zm as u32) << 16)
                | ((*xs as u32) << 14)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1W_z_p_bz_s_x32_unscaled { Zm, xs, Pg, Rn, Zt, } => 0xe5408000
                | ((*Zm as u32) << 16)
                | ((*xs as u32) << 14)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1W_z_p_bz_s_x32_scaled { Zm, xs, Pg, Rn, Zt, } => 0xe5608000
                | ((*Zm as u32) << 16)
                | ((*xs as u32) << 14)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::STR_z_bi { imm9h, imm9l, Rn, Zt, } => 0xe5804000
                | ((*imm9h as u32) << 16)
                | ((*imm9l as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1D_z_p_bz_d_x32_unscaled { Zm, xs, Pg, Rn, Zt, } => 0xe5808000
                | ((*Zm as u32) << 16)
                | ((*xs as u32) << 14)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1D_z_p_bi { size, imm4, Pg, Rn, Zt, } => 0xe580e000
                | ((*size as u32) << 21)
                | ((*imm4 as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1D_z_p_bz_d_x32_scaled { Zm, xs, Pg, Rn, Zt, } => 0xe5a08000
                | ((*Zm as u32) << 16)
                | ((*xs as u32) << 14)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::STUR_64_ldst_unscaled { imm9, Rn, Rt, } => 0xf8000000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_64_ldst_immpost { imm9, Rn, Rt, } => 0xf8000400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STTR_64_ldst_unpriv { imm9, Rn, Rt, } => 0xf8000800
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_64_ldst_immpre { imm9, Rn, Rt, } => 0xf8000c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_64_ldst_regoff { Rm, option, S, Rn, Rt, } => 0xf8200800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUR_64_ldst_unscaled { imm9, Rn, Rt, } => 0xf8400000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_64_ldst_immpost { imm9, Rn, Rt, } => 0xf8400400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDTR_64_ldst_unpriv { imm9, Rn, Rt, } => 0xf8400800
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_64_ldst_immpre { imm9, Rn, Rt, } => 0xf8400c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_64_ldst_regoff { Rm, option, S, Rn, Rt, } => 0xf8600800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::PRFUM_P_ldst_unscaled { imm9, Rn, Rt, } => 0xf8800000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::PRFM_P_ldst_regoff { Rm, option, S, Rn, Rt, } => 0xf8a00800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STUR_D_ldst_unscaled { imm9, Rn, Rt, } => 0xfc000000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_D_ldst_immpost { imm9, Rn, Rt, } => 0xfc000400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_D_ldst_immpre { imm9, Rn, Rt, } => 0xfc000c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_D_ldst_regoff { Rm, option, S, Rn, Rt, } => 0xfc200800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDUR_D_ldst_unscaled { imm9, Rn, Rt, } => 0xfc400000
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_D_ldst_immpost { imm9, Rn, Rt, } => 0xfc400400
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_D_ldst_immpre { imm9, Rn, Rt, } => 0xfc400c00
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_D_ldst_regoff { Rm, option, S, Rn, Rt, } => 0xfc600800
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*S as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::MLA_z_p_zzz { size, Zm, Pg, Zn, Zda, } => 0x04004000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::MLS_z_p_zzz { size, Zm, Pg, Zn, Zda, } => 0x04006000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::MAD_z_p_zzz { size, Zm, Pg, Za, Zdn, } => 0x0400c000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Za as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::MSB_z_p_zzz { size, Zm, Pg, Za, Zdn, } => 0x0400e000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Za as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::CPY_z_o_i { size, Pg, sh, imm8, Zd, } => 0x05100000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 16)
                | ((*sh as u32) << 13)
                | ((*imm8 as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::MOV_cpy_z_o_i { size, Pg, sh, imm8, Zd, } => 0x05100000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 16)
                | ((*sh as u32) << 13)
                | ((*imm8 as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::CPY_z_p_i { size, Pg, sh, imm8, Zd, } => 0x05104000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 16)
                | ((*sh as u32) << 13)
                | ((*imm8 as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::MOV_cpy_z_p_i { size, Pg, sh, imm8, Zd, } => 0x05104000
                | ((*size as u32) << 22)
                | ((*Pg as u32) << 16)
                | ((*sh as u32) << 13)
                | ((*imm8 as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::STXRB_SR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x08000000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STLXRB_SR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x08008000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDXRB_LR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x08400000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAXRB_LR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x08408000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STLLRB_SL32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x08800000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STLRB_SL32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x08808000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDLARB_LR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x08c00000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDARB_LR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x08c08000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SMLAL_asimdelem_L { Q, size, L, M, Rm, H, Rn, Rd, } => 0x0f002000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQDMLAL_asimdelem_L { Q, size, L, M, Rm, H, Rn, Rd, } => 0x0f003000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMLSL_asimdelem_L { Q, size, L, M, Rm, H, Rn, Rd, } => 0x0f006000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQDMLSL_asimdelem_L { Q, size, L, M, Rm, H, Rn, Rd, } => 0x0f007000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MUL_asimdelem_R { Q, size, L, M, Rm, H, Rn, Rd, } => 0x0f008000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMULL_asimdelem_L { Q, size, L, M, Rm, H, Rn, Rd, } => 0x0f00a000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQDMULL_asimdelem_L { Q, size, L, M, Rm, H, Rn, Rd, } => 0x0f00b000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQDMULH_asimdelem_R { Q, size, L, M, Rm, H, Rn, Rd, } => 0x0f00c000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQRDMULH_asimdelem_R { Q, size, L, M, Rm, H, Rn, Rd, } => 0x0f00d000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SDOT_asimdelem_D { Q, size, L, M, Rm, H, Rn, Rd, } => 0x0f00e000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::EXTR_32_extract { Rm, imms, Rn, Rd, } => 0x13800000
                | ((*Rm as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ROR_EXTR_32_extract { Rm, imms, Rn, Rd, } => 0x13800000
                | ((*Rm as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MADD_32A_dp_3src { Rm, Ra, Rn, Rd, } => 0x1b000000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MSUB_32A_dp_3src { Rm, Ra, Rn, Rd, } => 0x1b008000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMADD_S_floatdp3 { Rm, Ra, Rn, Rd, } => 0x1f000000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMSUB_S_floatdp3 { Rm, Ra, Rn, Rd, } => 0x1f008000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FNMADD_S_floatdp3 { Rm, Ra, Rn, Rd, } => 0x1f200000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FNMSUB_S_floatdp3 { Rm, Ra, Rn, Rd, } => 0x1f208000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMADD_D_floatdp3 { Rm, Ra, Rn, Rd, } => 0x1f400000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMSUB_D_floatdp3 { Rm, Ra, Rn, Rd, } => 0x1f408000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FNMADD_D_floatdp3 { Rm, Ra, Rn, Rd, } => 0x1f600000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FNMSUB_D_floatdp3 { Rm, Ra, Rn, Rd, } => 0x1f608000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMADD_H_floatdp3 { Rm, Ra, Rn, Rd, } => 0x1fc00000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FMSUB_H_floatdp3 { Rm, Ra, Rn, Rd, } => 0x1fc08000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FNMADD_H_floatdp3 { Rm, Ra, Rn, Rd, } => 0x1fe00000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FNMSUB_H_floatdp3 { Rm, Ra, Rn, Rd, } => 0x1fe08000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::EXT_asimdext_only { Q, Rm, imm4, Rn, Rd, } => 0x2e000000
                | ((*Q as u32) << 30)
                | ((*Rm as u32) << 16)
                | ((*imm4 as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMLA_asimdsame2_C { Q, size, Rm, rot, Rn, Rd, } => 0x2e00c400
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*rot as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MLA_asimdelem_R { Q, size, L, M, Rm, H, Rn, Rd, } => 0x2f000000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMLAL_asimdelem_L { Q, size, L, M, Rm, H, Rn, Rd, } => 0x2f002000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MLS_asimdelem_R { Q, size, L, M, Rm, H, Rn, Rd, } => 0x2f004000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMLSL_asimdelem_L { Q, size, L, M, Rm, H, Rn, Rd, } => 0x2f006000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMULL_asimdelem_L { Q, size, L, M, Rm, H, Rn, Rd, } => 0x2f00a000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQRDMLAH_asimdelem_R { Q, size, L, M, Rm, H, Rn, Rd, } => 0x2f00d000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UDOT_asimdelem_D { Q, size, L, M, Rm, H, Rn, Rd, } => 0x2f00e000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SQRDMLSH_asimdelem_R { Q, size, L, M, Rm, H, Rn, Rd, } => 0x2f00f000
                | ((*Q as u32) << 30)
                | ((*size as u32) << 22)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMLA_asimdelem_C_H { Q, L, M, Rm, rot, H, Rn, Rd, } => 0x2f401000
                | ((*Q as u32) << 30)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*rot as u32) << 13)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMLA_asimdelem_C_S { Q, L, M, Rm, rot, H, Rn, Rd, } => 0x2f801000
                | ((*Q as u32) << 30)
                | ((*L as u32) << 21)
                | ((*M as u32) << 20)
                | ((*Rm as u32) << 16)
                | ((*rot as u32) << 13)
                | ((*H as u32) << 11)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::STXRH_SR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x48000000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STLXRH_SR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x48008000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDXRH_LR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x48400000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAXRH_LR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x48408000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STLLRH_SL32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x48800000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STLRH_SL32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x48808000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDLARH_LR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x48c00000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDARH_LR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x48c08000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::FMLA_z_p_zzz { size, Zm, Pg, Zn, Zda, } => 0x65200000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::FMLS_z_p_zzz { size, Zm, Pg, Zn, Zda, } => 0x65202000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::FNMLA_z_p_zzz { size, Zm, Pg, Zn, Zda, } => 0x65204000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::FNMLS_z_p_zzz { size, Zm, Pg, Zn, Zda, } => 0x65206000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::FMAD_z_p_zzz { size, Za, Pg, Zm, Zdn, } => 0x65208000
                | ((*size as u32) << 22)
                | ((*Za as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FMSB_z_p_zzz { size, Za, Pg, Zm, Zdn, } => 0x6520a000
                | ((*size as u32) << 22)
                | ((*Za as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FNMAD_z_p_zzz { size, Za, Pg, Zm, Zdn, } => 0x6520c000
                | ((*size as u32) << 22)
                | ((*Za as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::FNMSB_z_p_zzz { size, Za, Pg, Zm, Zdn, } => 0x6520e000
                | ((*size as u32) << 22)
                | ((*Za as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zm as u32) << 5)
                | ((*Zdn as u32) << 0),
            Self::STXR_SR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x88000000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STLXR_SR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x88008000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STXP_SP32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x88200000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STLXP_SP32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x88208000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDXR_LR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x88400000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAXR_LR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x88408000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDXP_LP32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x88600000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAXP_LP32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x88608000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STLLR_SL32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x88800000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STLR_SL32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x88808000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDLAR_LR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x88c00000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAR_LR32_ldstexcl { Rs, Rt2, Rn, Rt, } => 0x88c08000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::MADD_64A_dp_3src { Rm, Ra, Rn, Rd, } => 0x9b000000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MSUB_64A_dp_3src { Rm, Ra, Rn, Rd, } => 0x9b008000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMADDL_64WA_dp_3src { Rm, Ra, Rn, Rd, } => 0x9b200000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMSUBL_64WA_dp_3src { Rm, Ra, Rn, Rd, } => 0x9b208000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SMULH_64_dp_3src { Rm, Ra, Rn, Rd, } => 0x9b400000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMADDL_64WA_dp_3src { Rm, Ra, Rn, Rd, } => 0x9ba00000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMSUBL_64WA_dp_3src { Rm, Ra, Rn, Rd, } => 0x9ba08000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UMULH_64_dp_3src { Rm, Ra, Rn, Rd, } => 0x9bc00000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::STXR_SR64_ldstexcl { Rs, Rt2, Rn, Rt, } => 0xc8000000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STLXR_SR64_ldstexcl { Rs, Rt2, Rn, Rt, } => 0xc8008000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STXP_SP64_ldstexcl { Rs, Rt2, Rn, Rt, } => 0xc8200000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STLXP_SP64_ldstexcl { Rs, Rt2, Rn, Rt, } => 0xc8208000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDXR_LR64_ldstexcl { Rs, Rt2, Rn, Rt, } => 0xc8400000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAXR_LR64_ldstexcl { Rs, Rt2, Rn, Rt, } => 0xc8408000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDXP_LP64_ldstexcl { Rs, Rt2, Rn, Rt, } => 0xc8600000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAXP_LP64_ldstexcl { Rs, Rt2, Rn, Rt, } => 0xc8608000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STLLR_SL64_ldstexcl { Rs, Rt2, Rn, Rt, } => 0xc8800000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STLR_SL64_ldstexcl { Rs, Rt2, Rn, Rt, } => 0xc8808000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDLAR_LR64_ldstexcl { Rs, Rt2, Rn, Rt, } => 0xc8c00000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDAR_LR64_ldstexcl { Rs, Rt2, Rn, Rt, } => 0xc8c08000
                | ((*Rs as u32) << 16)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::EOR3_VVV16_crypto4 { Rm, Ra, Rn, Rd, } => 0xce000000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BCAX_VVV16_crypto4 { Rm, Ra, Rn, Rd, } => 0xce200000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SM3SS1_VVV4_crypto4 { Rm, Ra, Rn, Rd, } => 0xce400000
                | ((*Rm as u32) << 16)
                | ((*Ra as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MSR_SR_systemmove { o0, op1, CRn, CRm, op2, Rt, } => 0xd5100000
                | ((*o0 as u32) << 19)
                | ((*op1 as u32) << 16)
                | ((*CRn as u32) << 12)
                | ((*CRm as u32) << 8)
                | ((*op2 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::MRS_RS_systemmove { o0, op1, CRn, CRm, op2, Rt, } => 0xd5300000
                | ((*o0 as u32) << 19)
                | ((*op1 as u32) << 16)
                | ((*CRn as u32) << 12)
                | ((*CRm as u32) << 8)
                | ((*op2 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ST1B_z_p_br { size, Rm, Pg, Rn, Zt, } => 0xe4004000
                | ((*size as u32) << 21)
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1H_z_p_br { size, Rm, Pg, Rn, Zt, } => 0xe4804000
                | ((*size as u32) << 21)
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::ST1W_z_p_br { size, Rm, Pg, Rn, Zt, } => 0xe5004000
                | ((*size as u32) << 21)
                | ((*Rm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Zt as u32) << 0),
            Self::LDRAA_64_ldst_pac { S, imm9, Rn, Rt, } => 0xf8200400
                | ((*S as u32) << 22)
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRAA_64W_ldst_pac { S, imm9, Rn, Rt, } => 0xf8200c00
                | ((*S as u32) << 22)
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRAB_64_ldst_pac { S, imm9, Rn, Rt, } => 0xf8a00400
                | ((*S as u32) << 22)
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRAB_64W_ldst_pac { S, imm9, Rn, Rt, } => 0xf8a00c00
                | ((*S as u32) << 22)
                | ((*imm9 as u32) << 12)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::MOV_sel_z_p_zz { size, Zm, Pg, Zn, Zd, } => 0x0520c000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::SEL_z_p_zz { size, Zm, Pg, Zn, Zd, } => 0x0520c000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zd as u32) << 0),
            Self::ADD_32_addsub_ext { Rm, option, imm3, Rn, Rd, } => 0x0b200000
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*imm3 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::CMPHS_p_p_zi { size, imm7, Pg, Zn, Pd, } => 0x24200000
                | ((*size as u32) << 22)
                | ((*imm7 as u32) << 14)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPHI_p_p_zi { size, imm7, Pg, Zn, Pd, } => 0x24200010
                | ((*size as u32) << 22)
                | ((*imm7 as u32) << 14)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPLO_p_p_zi { size, imm7, Pg, Zn, Pd, } => 0x24202000
                | ((*size as u32) << 22)
                | ((*imm7 as u32) << 14)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::CMPLS_p_p_zi { size, imm7, Pg, Zn, Pd, } => 0x24202010
                | ((*size as u32) << 22)
                | ((*imm7 as u32) << 14)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Pd as u32) << 0),
            Self::ADDS_32S_addsub_ext { Rm, option, imm3, Rn, Rd, } => 0x2b200000
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*imm3 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUB_32_addsub_ext { Rm, option, imm3, Rn, Rd, } => 0x4b200000
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*imm3 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUBS_32S_addsub_ext { Rm, option, imm3, Rn, Rd, } => 0x6b200000
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*imm3 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADD_64_addsub_ext { Rm, option, imm3, Rn, Rd, } => 0x8b200000
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*imm3 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::EXTR_64_extract { Rm, imms, Rn, Rd, } => 0x93c00000
                | ((*Rm as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ROR_EXTR_64_extract { Rm, imms, Rn, Rd, } => 0x93c00000
                | ((*Rm as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADDS_64S_addsub_ext { Rm, option, imm3, Rn, Rd, } => 0xab200000
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*imm3 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUB_64_addsub_ext { Rm, option, imm3, Rn, Rd, } => 0xcb200000
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*imm3 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::XAR_VVV2_crypto3_imm6 { Rm, imm6, Rn, Rd, } => 0xce800000
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUBS_64S_addsub_ext { Rm, option, imm3, Rn, Rd, } => 0xeb200000
                | ((*Rm as u32) << 16)
                | ((*option as u32) << 13)
                | ((*imm3 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BFI_BFM_32M_bitfield { immr, imms, Rn, Rd, } => 0x33000000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::LSL_UBFM_32M_bitfield { immr, imms, Rn, Rd, } => 0x53000000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BFI_BFM_64M_bitfield { immr, imms, Rn, Rd, } => 0xb3400000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::LSL_UBFM_64M_bitfield { immr, imms, Rn, Rd, } => 0xd3400000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::AND_32_log_imm { immr, imms, Rn, Rd, } => 0x12000000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOV_MOVN_32_movewide { hw, imm16, Rd, } => 0x12800000
                | ((*hw as u32) << 21)
                | ((*imm16 as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOVN_32_movewide { hw, imm16, Rd, } => 0x12800000
                | ((*hw as u32) << 21)
                | ((*imm16 as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SBFIZ_SBFM_32M_bitfield { immr, imms, Rn, Rd, } => 0x13000000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SBFM_32M_bitfield { immr, imms, Rn, Rd, } => 0x13000000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SBFX_SBFM_32M_bitfield { immr, imms, Rn, Rd, } => 0x13000000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::STNP_32_ldstnapair_offs { imm7, Rt2, Rn, Rt, } => 0x28000000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDNP_32_ldstnapair_offs { imm7, Rt2, Rn, Rt, } => 0x28400000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STP_32_ldstpair_post { imm7, Rt2, Rn, Rt, } => 0x28800000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDP_32_ldstpair_post { imm7, Rt2, Rn, Rt, } => 0x28c00000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STP_32_ldstpair_off { imm7, Rt2, Rn, Rt, } => 0x29000000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDP_32_ldstpair_off { imm7, Rt2, Rn, Rt, } => 0x29400000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STP_32_ldstpair_pre { imm7, Rt2, Rn, Rt, } => 0x29800000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDP_32_ldstpair_pre { imm7, Rt2, Rn, Rt, } => 0x29c00000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STNP_S_ldstnapair_offs { imm7, Rt2, Rn, Rt, } => 0x2c000000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDNP_S_ldstnapair_offs { imm7, Rt2, Rn, Rt, } => 0x2c400000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STP_S_ldstpair_post { imm7, Rt2, Rn, Rt, } => 0x2c800000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDP_S_ldstpair_post { imm7, Rt2, Rn, Rt, } => 0x2cc00000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STP_S_ldstpair_off { imm7, Rt2, Rn, Rt, } => 0x2d000000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDP_S_ldstpair_off { imm7, Rt2, Rn, Rt, } => 0x2d400000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STP_S_ldstpair_pre { imm7, Rt2, Rn, Rt, } => 0x2d800000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDP_S_ldstpair_pre { imm7, Rt2, Rn, Rt, } => 0x2dc00000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ORR_32_log_imm { immr, imms, Rn, Rd, } => 0x32000000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BFM_32M_bitfield { immr, imms, Rn, Rd, } => 0x33000000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BFXIL_BFM_32M_bitfield { immr, imms, Rn, Rd, } => 0x33000000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::STRB_32_ldst_pos { imm12, Rn, Rt, } => 0x39000000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRB_32_ldst_pos { imm12, Rn, Rt, } => 0x39400000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSB_64_ldst_pos { imm12, Rn, Rt, } => 0x39800000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSB_32_ldst_pos { imm12, Rn, Rt, } => 0x39c00000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_B_ldst_pos { imm12, Rn, Rt, } => 0x3d000000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_B_ldst_pos { imm12, Rn, Rt, } => 0x3d400000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_Q_ldst_pos { imm12, Rn, Rt, } => 0x3d800000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_Q_ldst_pos { imm12, Rn, Rt, } => 0x3dc00000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::EOR_32_log_imm { immr, imms, Rn, Rd, } => 0x52000000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOV_MOVZ_32_movewide { hw, imm16, Rd, } => 0x52800000
                | ((*hw as u32) << 21)
                | ((*imm16 as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOVZ_32_movewide { hw, imm16, Rd, } => 0x52800000
                | ((*hw as u32) << 21)
                | ((*imm16 as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UBFIZ_UBFM_32M_bitfield { immr, imms, Rn, Rd, } => 0x53000000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UBFM_32M_bitfield { immr, imms, Rn, Rd, } => 0x53000000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UBFX_UBFM_32M_bitfield { immr, imms, Rn, Rd, } => 0x53000000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::FCMLA_z_p_zzz { size, Zm, rot, Pg, Zn, Zda, } => 0x64000000
                | ((*size as u32) << 22)
                | ((*Zm as u32) << 16)
                | ((*rot as u32) << 13)
                | ((*Pg as u32) << 10)
                | ((*Zn as u32) << 5)
                | ((*Zda as u32) << 0),
            Self::STGP_64_ldstpair_post { simm7, Xt2, Xn, Xt, } => 0x68800000
                | ((*simm7 as u32) << 15)
                | ((*Xt2 as u32) << 10)
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::LDPSW_64_ldstpair_post { imm7, Rt2, Rn, Rt, } => 0x68c00000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STGP_64_ldstpair_off { simm7, Xt2, Xn, Xt, } => 0x69000000
                | ((*simm7 as u32) << 15)
                | ((*Xt2 as u32) << 10)
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::LDPSW_64_ldstpair_off { imm7, Rt2, Rn, Rt, } => 0x69400000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STGP_64_ldstpair_pre { simm7, Xt2, Xn, Xt, } => 0x69800000
                | ((*simm7 as u32) << 15)
                | ((*Xt2 as u32) << 10)
                | ((*Xn as u32) << 5)
                | ((*Xt as u32) << 0),
            Self::LDPSW_64_ldstpair_pre { imm7, Rt2, Rn, Rt, } => 0x69c00000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STNP_D_ldstnapair_offs { imm7, Rt2, Rn, Rt, } => 0x6c000000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDNP_D_ldstnapair_offs { imm7, Rt2, Rn, Rt, } => 0x6c400000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STP_D_ldstpair_post { imm7, Rt2, Rn, Rt, } => 0x6c800000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDP_D_ldstpair_post { imm7, Rt2, Rn, Rt, } => 0x6cc00000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STP_D_ldstpair_off { imm7, Rt2, Rn, Rt, } => 0x6d000000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDP_D_ldstpair_off { imm7, Rt2, Rn, Rt, } => 0x6d400000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STP_D_ldstpair_pre { imm7, Rt2, Rn, Rt, } => 0x6d800000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDP_D_ldstpair_pre { imm7, Rt2, Rn, Rt, } => 0x6dc00000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ANDS_32S_log_imm { immr, imms, Rn, Rd, } => 0x72000000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOVK_32_movewide { hw, imm16, Rd, } => 0x72800000
                | ((*hw as u32) << 21)
                | ((*imm16 as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::STRH_32_ldst_pos { imm12, Rn, Rt, } => 0x79000000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRH_32_ldst_pos { imm12, Rn, Rt, } => 0x79400000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSH_64_ldst_pos { imm12, Rn, Rt, } => 0x79800000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSH_32_ldst_pos { imm12, Rn, Rt, } => 0x79c00000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_H_ldst_pos { imm12, Rn, Rt, } => 0x7d000000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_H_ldst_pos { imm12, Rn, Rt, } => 0x7d400000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ADDG_64_addsub_immtags { uimm6, op3, uimm4, Xn, Xd, } => 0x91800000
                | ((*uimm6 as u32) << 16)
                | ((*op3 as u32) << 14)
                | ((*uimm4 as u32) << 10)
                | ((*Xn as u32) << 5)
                | ((*Xd as u32) << 0),
            Self::SBFIZ_SBFM_64M_bitfield { immr, imms, Rn, Rd, } => 0x93400000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SBFM_64M_bitfield { immr, imms, Rn, Rd, } => 0x93400000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SBFX_SBFM_64M_bitfield { immr, imms, Rn, Rd, } => 0x93400000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::STNP_64_ldstnapair_offs { imm7, Rt2, Rn, Rt, } => 0xa8000000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDNP_64_ldstnapair_offs { imm7, Rt2, Rn, Rt, } => 0xa8400000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STP_64_ldstpair_post { imm7, Rt2, Rn, Rt, } => 0xa8800000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDP_64_ldstpair_post { imm7, Rt2, Rn, Rt, } => 0xa8c00000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STP_64_ldstpair_off { imm7, Rt2, Rn, Rt, } => 0xa9000000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDP_64_ldstpair_off { imm7, Rt2, Rn, Rt, } => 0xa9400000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STP_64_ldstpair_pre { imm7, Rt2, Rn, Rt, } => 0xa9800000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDP_64_ldstpair_pre { imm7, Rt2, Rn, Rt, } => 0xa9c00000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STNP_Q_ldstnapair_offs { imm7, Rt2, Rn, Rt, } => 0xac000000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDNP_Q_ldstnapair_offs { imm7, Rt2, Rn, Rt, } => 0xac400000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STP_Q_ldstpair_post { imm7, Rt2, Rn, Rt, } => 0xac800000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDP_Q_ldstpair_post { imm7, Rt2, Rn, Rt, } => 0xacc00000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STP_Q_ldstpair_off { imm7, Rt2, Rn, Rt, } => 0xad000000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDP_Q_ldstpair_off { imm7, Rt2, Rn, Rt, } => 0xad400000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STP_Q_ldstpair_pre { imm7, Rt2, Rn, Rt, } => 0xad800000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDP_Q_ldstpair_pre { imm7, Rt2, Rn, Rt, } => 0xadc00000
                | ((*imm7 as u32) << 15)
                | ((*Rt2 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::BFM_64M_bitfield { immr, imms, Rn, Rd, } => 0xb3400000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BFXIL_BFM_64M_bitfield { immr, imms, Rn, Rd, } => 0xb3400000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::STR_32_ldst_pos { imm12, Rn, Rt, } => 0xb9000000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_32_ldst_pos { imm12, Rn, Rt, } => 0xb9400000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSW_64_ldst_pos { imm12, Rn, Rt, } => 0xb9800000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_S_ldst_pos { imm12, Rn, Rt, } => 0xbd000000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_S_ldst_pos { imm12, Rn, Rt, } => 0xbd400000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::SUBG_64_addsub_immtags { uimm6, op3, uimm4, Xn, Xd, } => 0xd1800000
                | ((*uimm6 as u32) << 16)
                | ((*op3 as u32) << 14)
                | ((*uimm4 as u32) << 10)
                | ((*Xn as u32) << 5)
                | ((*Xd as u32) << 0),
            Self::UBFIZ_UBFM_64M_bitfield { immr, imms, Rn, Rd, } => 0xd3400000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UBFM_64M_bitfield { immr, imms, Rn, Rd, } => 0xd3400000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::UBFX_UBFM_64M_bitfield { immr, imms, Rn, Rd, } => 0xd3400000
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::STR_64_ldst_pos { imm12, Rn, Rt, } => 0xf9000000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_64_ldst_pos { imm12, Rn, Rt, } => 0xf9400000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::PRFM_P_ldst_pos { imm12, Rn, Rt, } => 0xf9800000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::STR_D_ldst_pos { imm12, Rn, Rt, } => 0xfd000000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_D_ldst_pos { imm12, Rn, Rt, } => 0xfd400000
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::AND_32_log_shift { shift, Rm, imm6, Rn, Rd, } => 0x0a000000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BIC_32_log_shift { shift, Rm, imm6, Rn, Rd, } => 0x0a200000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADD_32_addsub_shift { shift, Rm, imm6, Rn, Rd, } => 0x0b000000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADD_32_addsub_imm { sh, imm12, Rn, Rd, } => 0x11000000
                | ((*sh as u32) << 22)
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ORR_32_log_shift { shift, Rm, imm6, Rn, Rd, } => 0x2a000000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ORN_32_log_shift { shift, Rm, imm6, Rn, Rd, } => 0x2a200000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADDS_32_addsub_shift { shift, Rm, imm6, Rn, Rd, } => 0x2b000000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADDS_32S_addsub_imm { sh, imm12, Rn, Rd, } => 0x31000000
                | ((*sh as u32) << 22)
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::EOR_32_log_shift { shift, Rm, imm6, Rn, Rd, } => 0x4a000000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::EON_32_log_shift { shift, Rm, imm6, Rn, Rd, } => 0x4a200000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUB_32_addsub_shift { shift, Rm, imm6, Rn, Rd, } => 0x4b000000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUB_32_addsub_imm { sh, imm12, Rn, Rd, } => 0x51000000
                | ((*sh as u32) << 22)
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::B_only_condbranch { imm19, cond, } => 0x54000000
                | ((*imm19 as u32) << 5)
                | ((*cond as u32) << 0),
            Self::ANDS_32_log_shift { shift, Rm, imm6, Rn, Rd, } => 0x6a000000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BICS_32_log_shift { shift, Rm, imm6, Rn, Rd, } => 0x6a200000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUBS_32_addsub_shift { shift, Rm, imm6, Rn, Rd, } => 0x6b000000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUBS_32S_addsub_imm { sh, imm12, Rn, Rd, } => 0x71000000
                | ((*sh as u32) << 22)
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::AND_64_log_shift { shift, Rm, imm6, Rn, Rd, } => 0x8a000000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BIC_64_log_shift { shift, Rm, imm6, Rn, Rd, } => 0x8a200000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADD_64_addsub_shift { shift, Rm, imm6, Rn, Rd, } => 0x8b000000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADD_64_addsub_imm { sh, imm12, Rn, Rd, } => 0x91000000
                | ((*sh as u32) << 22)
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::AND_64_log_imm { N, immr, imms, Rn, Rd, } => 0x92000000
                | ((*N as u32) << 22)
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOV_MOVN_64_movewide { hw, imm16, Rd, } => 0x92800000
                | ((*hw as u32) << 21)
                | ((*imm16 as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOVN_64_movewide { hw, imm16, Rd, } => 0x92800000
                | ((*hw as u32) << 21)
                | ((*imm16 as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ORR_64_log_shift { shift, Rm, imm6, Rn, Rd, } => 0xaa000000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ORN_64_log_shift { shift, Rm, imm6, Rn, Rd, } => 0xaa200000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADDS_64_addsub_shift { shift, Rm, imm6, Rn, Rd, } => 0xab000000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ADDS_64S_addsub_imm { sh, imm12, Rn, Rd, } => 0xb1000000
                | ((*sh as u32) << 22)
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ORR_64_log_imm { N, immr, imms, Rn, Rd, } => 0xb2000000
                | ((*N as u32) << 22)
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::EOR_64_log_shift { shift, Rm, imm6, Rn, Rd, } => 0xca000000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::EON_64_log_shift { shift, Rm, imm6, Rn, Rd, } => 0xca200000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUB_64_addsub_shift { shift, Rm, imm6, Rn, Rd, } => 0xcb000000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUB_64_addsub_imm { sh, imm12, Rn, Rd, } => 0xd1000000
                | ((*sh as u32) << 22)
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::EOR_64_log_imm { N, immr, imms, Rn, Rd, } => 0xd2000000
                | ((*N as u32) << 22)
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOV_MOVZ_64_movewide { hw, imm16, Rd, } => 0xd2800000
                | ((*hw as u32) << 21)
                | ((*imm16 as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOVZ_64_movewide { hw, imm16, Rd, } => 0xd2800000
                | ((*hw as u32) << 21)
                | ((*imm16 as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ANDS_64_log_shift { shift, Rm, imm6, Rn, Rd, } => 0xea000000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BICS_64_log_shift { shift, Rm, imm6, Rn, Rd, } => 0xea200000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUBS_64_addsub_shift { shift, Rm, imm6, Rn, Rd, } => 0xeb000000
                | ((*shift as u32) << 22)
                | ((*Rm as u32) << 16)
                | ((*imm6 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::SUBS_64S_addsub_imm { sh, imm12, Rn, Rd, } => 0xf1000000
                | ((*sh as u32) << 22)
                | ((*imm12 as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::ANDS_64S_log_imm { N, immr, imms, Rn, Rd, } => 0xf2000000
                | ((*N as u32) << 22)
                | ((*immr as u32) << 16)
                | ((*imms as u32) << 10)
                | ((*Rn as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::MOVK_64_movewide { hw, imm16, Rd, } => 0xf2800000
                | ((*hw as u32) << 21)
                | ((*imm16 as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::LDR_32_loadlit { imm19, Rt, } => 0x18000000
                | ((*imm19 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_S_loadlit { imm19, Rt, } => 0x1c000000
                | ((*imm19 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CBZ_32_compbranch { imm19, Rt, } => 0x34000000
                | ((*imm19 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CBNZ_32_compbranch { imm19, Rt, } => 0x35000000
                | ((*imm19 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_64_loadlit { imm19, Rt, } => 0x58000000
                | ((*imm19 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_D_loadlit { imm19, Rt, } => 0x5c000000
                | ((*imm19 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDRSW_64_loadlit { imm19, Rt, } => 0x98000000
                | ((*imm19 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::LDR_Q_loadlit { imm19, Rt, } => 0x9c000000
                | ((*imm19 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CBZ_64_compbranch { imm19, Rt, } => 0xb4000000
                | ((*imm19 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::CBNZ_64_compbranch { imm19, Rt, } => 0xb5000000
                | ((*imm19 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::PRFM_P_loadlit { imm19, Rt, } => 0xd8000000
                | ((*imm19 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::TBZ_only_testbranch { b5, b40, imm14, Rt, } => 0x36000000
                | ((*b5 as u32) << 31)
                | ((*b40 as u32) << 19)
                | ((*imm14 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::TBNZ_only_testbranch { b5, b40, imm14, Rt, } => 0x37000000
                | ((*b5 as u32) << 31)
                | ((*b40 as u32) << 19)
                | ((*imm14 as u32) << 5)
                | ((*Rt as u32) << 0),
            Self::ADR_only_pcreladdr { immlo, immhi, Rd, } => 0x10000000
                | ((*immlo as u32) << 29)
                | ((*immhi as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::B_only_branch_imm { imm26, } => 0x14000000
                | ((*imm26 as u32) << 0),
            Self::ADRP_only_pcreladdr { immlo, immhi, Rd, } => 0x90000000
                | ((*immlo as u32) << 29)
                | ((*immhi as u32) << 5)
                | ((*Rd as u32) << 0),
            Self::BL_only_branch_imm { imm26, } => 0x94000000
                | ((*imm26 as u32) << 0),
            
            Self::UNKNOWN(opcode) => *opcode,
        }
    }
}

pub trait Decode {
    fn decode(&self) -> Instruction;
}

impl Decode for u32 {
    fn decode(&self) -> Instruction {
        Instruction::decode(*self)
    }
}    

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn roundtrip_SETFFR_f() {
        assert_eq!(Instruction::SETFFR_f.encode().decode(), 
                   Instruction::SETFFR_f)
    }
    #[test]
    fn roundtrip_NOP_HI_hints() {
        assert_eq!(Instruction::NOP_HI_hints.encode().decode(), 
                   Instruction::NOP_HI_hints)
    }
    #[test]
    fn roundtrip_YIELD_HI_hints() {
        assert_eq!(Instruction::YIELD_HI_hints.encode().decode(), 
                   Instruction::YIELD_HI_hints)
    }
    #[test]
    fn roundtrip_WFE_HI_hints() {
        assert_eq!(Instruction::WFE_HI_hints.encode().decode(), 
                   Instruction::WFE_HI_hints)
    }
    #[test]
    fn roundtrip_WFI_HI_hints() {
        assert_eq!(Instruction::WFI_HI_hints.encode().decode(), 
                   Instruction::WFI_HI_hints)
    }
    #[test]
    fn roundtrip_SEV_HI_hints() {
        assert_eq!(Instruction::SEV_HI_hints.encode().decode(), 
                   Instruction::SEV_HI_hints)
    }
    #[test]
    fn roundtrip_SEVL_HI_hints() {
        assert_eq!(Instruction::SEVL_HI_hints.encode().decode(), 
                   Instruction::SEVL_HI_hints)
    }
    #[test]
    fn roundtrip_DGH_HI_hints() {
        assert_eq!(Instruction::DGH_HI_hints.encode().decode(), 
                   Instruction::DGH_HI_hints)
    }
    #[test]
    fn roundtrip_XPACLRI_HI_hints() {
        assert_eq!(Instruction::XPACLRI_HI_hints.encode().decode(), 
                   Instruction::XPACLRI_HI_hints)
    }
    #[test]
    fn roundtrip_PACIA1716_HI_hints() {
        assert_eq!(Instruction::PACIA1716_HI_hints.encode().decode(), 
                   Instruction::PACIA1716_HI_hints)
    }
    #[test]
    fn roundtrip_PACIB1716_HI_hints() {
        assert_eq!(Instruction::PACIB1716_HI_hints.encode().decode(), 
                   Instruction::PACIB1716_HI_hints)
    }
    #[test]
    fn roundtrip_AUTIA1716_HI_hints() {
        assert_eq!(Instruction::AUTIA1716_HI_hints.encode().decode(), 
                   Instruction::AUTIA1716_HI_hints)
    }
    #[test]
    fn roundtrip_AUTIB1716_HI_hints() {
        assert_eq!(Instruction::AUTIB1716_HI_hints.encode().decode(), 
                   Instruction::AUTIB1716_HI_hints)
    }
    #[test]
    fn roundtrip_ESB_HI_hints() {
        assert_eq!(Instruction::ESB_HI_hints.encode().decode(), 
                   Instruction::ESB_HI_hints)
    }
    #[test]
    fn roundtrip_PSB_HC_hints() {
        assert_eq!(Instruction::PSB_HC_hints.encode().decode(), 
                   Instruction::PSB_HC_hints)
    }
    #[test]
    fn roundtrip_TSB_HC_hints() {
        assert_eq!(Instruction::TSB_HC_hints.encode().decode(), 
                   Instruction::TSB_HC_hints)
    }
    #[test]
    fn roundtrip_CSDB_HI_hints() {
        assert_eq!(Instruction::CSDB_HI_hints.encode().decode(), 
                   Instruction::CSDB_HI_hints)
    }
    #[test]
    fn roundtrip_PACIAZ_HI_hints() {
        assert_eq!(Instruction::PACIAZ_HI_hints.encode().decode(), 
                   Instruction::PACIAZ_HI_hints)
    }
    #[test]
    fn roundtrip_PACIASP_HI_hints() {
        assert_eq!(Instruction::PACIASP_HI_hints.encode().decode(), 
                   Instruction::PACIASP_HI_hints)
    }
    #[test]
    fn roundtrip_PACIBZ_HI_hints() {
        assert_eq!(Instruction::PACIBZ_HI_hints.encode().decode(), 
                   Instruction::PACIBZ_HI_hints)
    }
    #[test]
    fn roundtrip_PACIBSP_HI_hints() {
        assert_eq!(Instruction::PACIBSP_HI_hints.encode().decode(), 
                   Instruction::PACIBSP_HI_hints)
    }
    #[test]
    fn roundtrip_AUTIAZ_HI_hints() {
        assert_eq!(Instruction::AUTIAZ_HI_hints.encode().decode(), 
                   Instruction::AUTIAZ_HI_hints)
    }
    #[test]
    fn roundtrip_AUTIASP_HI_hints() {
        assert_eq!(Instruction::AUTIASP_HI_hints.encode().decode(), 
                   Instruction::AUTIASP_HI_hints)
    }
    #[test]
    fn roundtrip_AUTIBZ_HI_hints() {
        assert_eq!(Instruction::AUTIBZ_HI_hints.encode().decode(), 
                   Instruction::AUTIBZ_HI_hints)
    }
    #[test]
    fn roundtrip_AUTIBSP_HI_hints() {
        assert_eq!(Instruction::AUTIBSP_HI_hints.encode().decode(), 
                   Instruction::AUTIBSP_HI_hints)
    }
    #[test]
    fn roundtrip_SSBB_only_barriers() {
        assert_eq!(Instruction::SSBB_only_barriers.encode().decode(), 
                   Instruction::SSBB_only_barriers)
    }
    #[test]
    fn roundtrip_PSSBB_only_barriers() {
        assert_eq!(Instruction::PSSBB_only_barriers.encode().decode(), 
                   Instruction::PSSBB_only_barriers)
    }
    #[test]
    fn roundtrip_RETAA_64E_branch_reg() {
        assert_eq!(Instruction::RETAA_64E_branch_reg.encode().decode(), 
                   Instruction::RETAA_64E_branch_reg)
    }
    #[test]
    fn roundtrip_RETAB_64E_branch_reg() {
        assert_eq!(Instruction::RETAB_64E_branch_reg.encode().decode(), 
                   Instruction::RETAB_64E_branch_reg)
    }
    #[test]
    fn roundtrip_ERET_64E_branch_reg() {
        assert_eq!(Instruction::ERET_64E_branch_reg.encode().decode(), 
                   Instruction::ERET_64E_branch_reg)
    }
    #[test]
    fn roundtrip_ERETAA_64E_branch_reg() {
        assert_eq!(Instruction::ERETAA_64E_branch_reg.encode().decode(), 
                   Instruction::ERETAA_64E_branch_reg)
    }
    #[test]
    fn roundtrip_ERETAB_64E_branch_reg() {
        assert_eq!(Instruction::ERETAB_64E_branch_reg.encode().decode(), 
                   Instruction::ERETAB_64E_branch_reg)
    }
    #[test]
    fn roundtrip_DRPS_64E_branch_reg() {
        assert_eq!(Instruction::DRPS_64E_branch_reg.encode().decode(), 
                   Instruction::DRPS_64E_branch_reg)
    }
    #[test]
    fn roundtrip_BTI_HB_hints() {
        assert_eq!(Instruction::BTI_HB_hints { op2: 0, }.encode().decode(), 
                   Instruction::BTI_HB_hints { op2: 0, })
    }
    #[test]
    fn roundtrip_DSB_BOn_barriers() {
        assert_eq!(Instruction::DSB_BOn_barriers { imm2: 0, }.encode().decode(), 
                   Instruction::DSB_BOn_barriers { imm2: 0, })
    }
    #[test]
    fn roundtrip_DSB_BO_barriers() {
        assert_eq!(Instruction::DSB_BO_barriers { CRm: 0, }.encode().decode(), 
                   Instruction::DSB_BO_barriers { CRm: 0, })
    }
    #[test]
    fn roundtrip_PFALSE_p() {
        assert_eq!(Instruction::PFALSE_p { Pd: 0, }.encode().decode(), 
                   Instruction::PFALSE_p { Pd: 0, })
    }
    #[test]
    fn roundtrip_RDFFR_p_f() {
        assert_eq!(Instruction::RDFFR_p_f { Pd: 0, }.encode().decode(), 
                   Instruction::RDFFR_p_f { Pd: 0, })
    }
    #[test]
    fn roundtrip_WRFFR_f_p() {
        assert_eq!(Instruction::WRFFR_f_p { Pn: 0, }.encode().decode(), 
                   Instruction::WRFFR_f_p { Pn: 0, })
    }
    #[test]
    fn roundtrip_CFINV_M_pstate() {
        assert_eq!(Instruction::CFINV_M_pstate { CRm: 0, }.encode().decode(), 
                   Instruction::CFINV_M_pstate { CRm: 0, })
    }
    #[test]
    fn roundtrip_XAFLAG_M_pstate() {
        assert_eq!(Instruction::XAFLAG_M_pstate { CRm: 0, }.encode().decode(), 
                   Instruction::XAFLAG_M_pstate { CRm: 0, })
    }
    #[test]
    fn roundtrip_AXFLAG_M_pstate() {
        assert_eq!(Instruction::AXFLAG_M_pstate { CRm: 0, }.encode().decode(), 
                   Instruction::AXFLAG_M_pstate { CRm: 0, })
    }
    #[test]
    fn roundtrip_CLREX_BN_barriers() {
        assert_eq!(Instruction::CLREX_BN_barriers { CRm: 0, }.encode().decode(), 
                   Instruction::CLREX_BN_barriers { CRm: 0, })
    }
    #[test]
    fn roundtrip_DMB_BO_barriers() {
        assert_eq!(Instruction::DMB_BO_barriers { CRm: 0, }.encode().decode(), 
                   Instruction::DMB_BO_barriers { CRm: 0, })
    }
    #[test]
    fn roundtrip_ISB_BI_barriers() {
        assert_eq!(Instruction::ISB_BI_barriers { CRm: 0, }.encode().decode(), 
                   Instruction::ISB_BI_barriers { CRm: 0, })
    }
    #[test]
    fn roundtrip_SB_only_barriers() {
        assert_eq!(Instruction::SB_only_barriers { CRm: 0, }.encode().decode(), 
                   Instruction::SB_only_barriers { CRm: 0, })
    }
    #[test]
    fn roundtrip_SETF8_only_setf() {
        assert_eq!(Instruction::SETF8_only_setf { Rn: 0, }.encode().decode(), 
                   Instruction::SETF8_only_setf { Rn: 0, })
    }
    #[test]
    fn roundtrip_SETF16_only_setf() {
        assert_eq!(Instruction::SETF16_only_setf { Rn: 0, }.encode().decode(), 
                   Instruction::SETF16_only_setf { Rn: 0, })
    }
    #[test]
    fn roundtrip_WFET_only_systeminstrswithreg() {
        assert_eq!(Instruction::WFET_only_systeminstrswithreg { Rd: 0, }.encode().decode(), 
                   Instruction::WFET_only_systeminstrswithreg { Rd: 0, })
    }
    #[test]
    fn roundtrip_WFIT_only_systeminstrswithreg() {
        assert_eq!(Instruction::WFIT_only_systeminstrswithreg { Rd: 0, }.encode().decode(), 
                   Instruction::WFIT_only_systeminstrswithreg { Rd: 0, })
    }
    #[test]
    fn roundtrip_CFP_SYS_CR_systeminstrs() {
        assert_eq!(Instruction::CFP_SYS_CR_systeminstrs { Rt: 0, }.encode().decode(), 
                   Instruction::CFP_SYS_CR_systeminstrs { Rt: 0, })
    }
    #[test]
    fn roundtrip_DVP_SYS_CR_systeminstrs() {
        assert_eq!(Instruction::DVP_SYS_CR_systeminstrs { Rt: 0, }.encode().decode(), 
                   Instruction::DVP_SYS_CR_systeminstrs { Rt: 0, })
    }
    #[test]
    fn roundtrip_CPP_SYS_CR_systeminstrs() {
        assert_eq!(Instruction::CPP_SYS_CR_systeminstrs { Rt: 0, }.encode().decode(), 
                   Instruction::CPP_SYS_CR_systeminstrs { Rt: 0, })
    }
    #[test]
    fn roundtrip_BR_64_branch_reg() {
        assert_eq!(Instruction::BR_64_branch_reg { Rn: 0, }.encode().decode(), 
                   Instruction::BR_64_branch_reg { Rn: 0, })
    }
    #[test]
    fn roundtrip_BRAAZ_64_branch_reg() {
        assert_eq!(Instruction::BRAAZ_64_branch_reg { Rn: 0, }.encode().decode(), 
                   Instruction::BRAAZ_64_branch_reg { Rn: 0, })
    }
    #[test]
    fn roundtrip_BRABZ_64_branch_reg() {
        assert_eq!(Instruction::BRABZ_64_branch_reg { Rn: 0, }.encode().decode(), 
                   Instruction::BRABZ_64_branch_reg { Rn: 0, })
    }
    #[test]
    fn roundtrip_BLR_64_branch_reg() {
        assert_eq!(Instruction::BLR_64_branch_reg { Rn: 0, }.encode().decode(), 
                   Instruction::BLR_64_branch_reg { Rn: 0, })
    }
    #[test]
    fn roundtrip_BLRAAZ_64_branch_reg() {
        assert_eq!(Instruction::BLRAAZ_64_branch_reg { Rn: 0, }.encode().decode(), 
                   Instruction::BLRAAZ_64_branch_reg { Rn: 0, })
    }
    #[test]
    fn roundtrip_BLRABZ_64_branch_reg() {
        assert_eq!(Instruction::BLRABZ_64_branch_reg { Rn: 0, }.encode().decode(), 
                   Instruction::BLRABZ_64_branch_reg { Rn: 0, })
    }
    #[test]
    fn roundtrip_RET_64R_branch_reg() {
        assert_eq!(Instruction::RET_64R_branch_reg { Rn: 0, }.encode().decode(), 
                   Instruction::RET_64R_branch_reg { Rn: 0, })
    }
    #[test]
    fn roundtrip_PACIZA_64Z_dp_1src() {
        assert_eq!(Instruction::PACIZA_64Z_dp_1src { Rd: 0, }.encode().decode(), 
                   Instruction::PACIZA_64Z_dp_1src { Rd: 0, })
    }
    #[test]
    fn roundtrip_PACIZB_64Z_dp_1src() {
        assert_eq!(Instruction::PACIZB_64Z_dp_1src { Rd: 0, }.encode().decode(), 
                   Instruction::PACIZB_64Z_dp_1src { Rd: 0, })
    }
    #[test]
    fn roundtrip_PACDZA_64Z_dp_1src() {
        assert_eq!(Instruction::PACDZA_64Z_dp_1src { Rd: 0, }.encode().decode(), 
                   Instruction::PACDZA_64Z_dp_1src { Rd: 0, })
    }
    #[test]
    fn roundtrip_PACDZB_64Z_dp_1src() {
        assert_eq!(Instruction::PACDZB_64Z_dp_1src { Rd: 0, }.encode().decode(), 
                   Instruction::PACDZB_64Z_dp_1src { Rd: 0, })
    }
    #[test]
    fn roundtrip_AUTIZA_64Z_dp_1src() {
        assert_eq!(Instruction::AUTIZA_64Z_dp_1src { Rd: 0, }.encode().decode(), 
                   Instruction::AUTIZA_64Z_dp_1src { Rd: 0, })
    }
    #[test]
    fn roundtrip_AUTIZB_64Z_dp_1src() {
        assert_eq!(Instruction::AUTIZB_64Z_dp_1src { Rd: 0, }.encode().decode(), 
                   Instruction::AUTIZB_64Z_dp_1src { Rd: 0, })
    }
    #[test]
    fn roundtrip_AUTDZA_64Z_dp_1src() {
        assert_eq!(Instruction::AUTDZA_64Z_dp_1src { Rd: 0, }.encode().decode(), 
                   Instruction::AUTDZA_64Z_dp_1src { Rd: 0, })
    }
    #[test]
    fn roundtrip_AUTDZB_64Z_dp_1src() {
        assert_eq!(Instruction::AUTDZB_64Z_dp_1src { Rd: 0, }.encode().decode(), 
                   Instruction::AUTDZB_64Z_dp_1src { Rd: 0, })
    }
    #[test]
    fn roundtrip_XPACI_64Z_dp_1src() {
        assert_eq!(Instruction::XPACI_64Z_dp_1src { Rd: 0, }.encode().decode(), 
                   Instruction::XPACI_64Z_dp_1src { Rd: 0, })
    }
    #[test]
    fn roundtrip_XPACD_64Z_dp_1src() {
        assert_eq!(Instruction::XPACD_64Z_dp_1src { Rd: 0, }.encode().decode(), 
                   Instruction::XPACD_64Z_dp_1src { Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_dup_z_i() {
        assert_eq!(Instruction::FMOV_dup_z_i { size: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FMOV_dup_z_i { size: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_HINT_HM_hints() {
        assert_eq!(Instruction::HINT_HM_hints { CRm: 0, op2: 0, }.encode().decode(), 
                   Instruction::HINT_HM_hints { CRm: 0, op2: 0, })
    }
    #[test]
    fn roundtrip_PUNPKLO_p_p() {
        assert_eq!(Instruction::PUNPKLO_p_p { Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::PUNPKLO_p_p { Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_PUNPKHI_p_p() {
        assert_eq!(Instruction::PUNPKHI_p_p { Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::PUNPKHI_p_p { Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_RDFFR_p_p_f() {
        assert_eq!(Instruction::RDFFR_p_p_f { Pg: 0, Pd: 0, }.encode().decode(), 
                   Instruction::RDFFR_p_p_f { Pg: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_PTEST_p_p() {
        assert_eq!(Instruction::PTEST_p_p { Pg: 0, Pn: 0, }.encode().decode(), 
                   Instruction::PTEST_p_p { Pg: 0, Pn: 0, })
    }
    #[test]
    fn roundtrip_PFIRST_p_p_p() {
        assert_eq!(Instruction::PFIRST_p_p_p { Pg: 0, Pdn: 0, }.encode().decode(), 
                   Instruction::PFIRST_p_p_p { Pg: 0, Pdn: 0, })
    }
    #[test]
    fn roundtrip_RDFFRS_p_p_f() {
        assert_eq!(Instruction::RDFFRS_p_p_f { Pg: 0, Pd: 0, }.encode().decode(), 
                   Instruction::RDFFRS_p_p_f { Pg: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CSET_CSINC_32_condsel() {
        assert_eq!(Instruction::CSET_CSINC_32_condsel { cond: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CSET_CSINC_32_condsel { cond: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CSETM_CSINV_32_condsel() {
        assert_eq!(Instruction::CSETM_CSINV_32_condsel { cond: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CSETM_CSINV_32_condsel { cond: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CSET_CSINC_64_condsel() {
        assert_eq!(Instruction::CSET_CSINC_64_condsel { cond: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CSET_CSINC_64_condsel { cond: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CSETM_CSINV_64_condsel() {
        assert_eq!(Instruction::CSETM_CSINV_64_condsel { cond: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CSETM_CSINV_64_condsel { cond: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOVPRFX_z_z() {
        assert_eq!(Instruction::MOVPRFX_z_z { Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::MOVPRFX_z_z { Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_REV_p_p() {
        assert_eq!(Instruction::REV_p_p { size: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::REV_p_p { size: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_MOV_ADD_32_addsub_imm() {
        assert_eq!(Instruction::MOV_ADD_32_addsub_imm { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOV_ADD_32_addsub_imm { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SXTB_SBFM_32M_bitfield() {
        assert_eq!(Instruction::SXTB_SBFM_32M_bitfield { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SXTB_SBFM_32M_bitfield { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SXTH_SBFM_32M_bitfield() {
        assert_eq!(Instruction::SXTH_SBFM_32M_bitfield { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SXTH_SBFM_32M_bitfield { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNS_32S_float2int() {
        assert_eq!(Instruction::FCVTNS_32S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNS_32S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMP_S_floatcmp() {
        assert_eq!(Instruction::FCMP_S_floatcmp { Rm: 0, Rn: 0, }.encode().decode(), 
                   Instruction::FCMP_S_floatcmp { Rm: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_FCMP_SZ_floatcmp() {
        assert_eq!(Instruction::FCMP_SZ_floatcmp { Rm: 0, Rn: 0, }.encode().decode(), 
                   Instruction::FCMP_SZ_floatcmp { Rm: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_FCMPE_S_floatcmp() {
        assert_eq!(Instruction::FCMPE_S_floatcmp { Rm: 0, Rn: 0, }.encode().decode(), 
                   Instruction::FCMPE_S_floatcmp { Rm: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_FCMPE_SZ_floatcmp() {
        assert_eq!(Instruction::FCMPE_SZ_floatcmp { Rm: 0, Rn: 0, }.encode().decode(), 
                   Instruction::FCMPE_SZ_floatcmp { Rm: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_FMOV_S_floatdp1() {
        assert_eq!(Instruction::FMOV_S_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_S_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FABS_S_floatdp1() {
        assert_eq!(Instruction::FABS_S_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FABS_S_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNU_32S_float2int() {
        assert_eq!(Instruction::FCVTNU_32S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNU_32S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FNEG_S_floatdp1() {
        assert_eq!(Instruction::FNEG_S_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FNEG_S_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FSQRT_S_floatdp1() {
        assert_eq!(Instruction::FSQRT_S_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FSQRT_S_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_S32_float2int() {
        assert_eq!(Instruction::SCVTF_S32_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_S32_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVT_DS_floatdp1() {
        assert_eq!(Instruction::FCVT_DS_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVT_DS_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_S32_float2int() {
        assert_eq!(Instruction::UCVTF_S32_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_S32_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVT_HS_floatdp1() {
        assert_eq!(Instruction::FCVT_HS_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVT_HS_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAS_32S_float2int() {
        assert_eq!(Instruction::FCVTAS_32S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAS_32S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTN_S_floatdp1() {
        assert_eq!(Instruction::FRINTN_S_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTN_S_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTP_S_floatdp1() {
        assert_eq!(Instruction::FRINTP_S_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTP_S_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAU_32S_float2int() {
        assert_eq!(Instruction::FCVTAU_32S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAU_32S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTM_S_floatdp1() {
        assert_eq!(Instruction::FRINTM_S_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTM_S_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTZ_S_floatdp1() {
        assert_eq!(Instruction::FRINTZ_S_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTZ_S_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_32S_float2int() {
        assert_eq!(Instruction::FMOV_32S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_32S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTA_S_floatdp1() {
        assert_eq!(Instruction::FRINTA_S_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTA_S_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_S32_float2int() {
        assert_eq!(Instruction::FMOV_S32_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_S32_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTX_S_floatdp1() {
        assert_eq!(Instruction::FRINTX_S_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTX_S_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTI_S_floatdp1() {
        assert_eq!(Instruction::FRINTI_S_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTI_S_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPS_32S_float2int() {
        assert_eq!(Instruction::FCVTPS_32S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPS_32S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINT32Z_S_floatdp1() {
        assert_eq!(Instruction::FRINT32Z_S_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINT32Z_S_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINT32X_S_floatdp1() {
        assert_eq!(Instruction::FRINT32X_S_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINT32X_S_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPU_32S_float2int() {
        assert_eq!(Instruction::FCVTPU_32S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPU_32S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINT64Z_S_floatdp1() {
        assert_eq!(Instruction::FRINT64Z_S_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINT64Z_S_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINT64X_S_floatdp1() {
        assert_eq!(Instruction::FRINT64X_S_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINT64X_S_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMS_32S_float2int() {
        assert_eq!(Instruction::FCVTMS_32S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMS_32S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMU_32S_float2int() {
        assert_eq!(Instruction::FCVTMU_32S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMU_32S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_32S_float2int() {
        assert_eq!(Instruction::FCVTZS_32S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_32S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_32S_float2int() {
        assert_eq!(Instruction::FCVTZU_32S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_32S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNS_32D_float2int() {
        assert_eq!(Instruction::FCVTNS_32D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNS_32D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMP_D_floatcmp() {
        assert_eq!(Instruction::FCMP_D_floatcmp { Rm: 0, Rn: 0, }.encode().decode(), 
                   Instruction::FCMP_D_floatcmp { Rm: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_FCMP_DZ_floatcmp() {
        assert_eq!(Instruction::FCMP_DZ_floatcmp { Rm: 0, Rn: 0, }.encode().decode(), 
                   Instruction::FCMP_DZ_floatcmp { Rm: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_FCMPE_D_floatcmp() {
        assert_eq!(Instruction::FCMPE_D_floatcmp { Rm: 0, Rn: 0, }.encode().decode(), 
                   Instruction::FCMPE_D_floatcmp { Rm: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_FCMPE_DZ_floatcmp() {
        assert_eq!(Instruction::FCMPE_DZ_floatcmp { Rm: 0, Rn: 0, }.encode().decode(), 
                   Instruction::FCMPE_DZ_floatcmp { Rm: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_FMOV_D_floatdp1() {
        assert_eq!(Instruction::FMOV_D_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_D_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FABS_D_floatdp1() {
        assert_eq!(Instruction::FABS_D_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FABS_D_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNU_32D_float2int() {
        assert_eq!(Instruction::FCVTNU_32D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNU_32D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FNEG_D_floatdp1() {
        assert_eq!(Instruction::FNEG_D_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FNEG_D_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FSQRT_D_floatdp1() {
        assert_eq!(Instruction::FSQRT_D_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FSQRT_D_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_D32_float2int() {
        assert_eq!(Instruction::SCVTF_D32_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_D32_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVT_SD_floatdp1() {
        assert_eq!(Instruction::FCVT_SD_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVT_SD_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_D32_float2int() {
        assert_eq!(Instruction::UCVTF_D32_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_D32_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BFCVT_BS_floatdp1() {
        assert_eq!(Instruction::BFCVT_BS_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BFCVT_BS_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVT_HD_floatdp1() {
        assert_eq!(Instruction::FCVT_HD_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVT_HD_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAS_32D_float2int() {
        assert_eq!(Instruction::FCVTAS_32D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAS_32D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTN_D_floatdp1() {
        assert_eq!(Instruction::FRINTN_D_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTN_D_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTP_D_floatdp1() {
        assert_eq!(Instruction::FRINTP_D_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTP_D_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAU_32D_float2int() {
        assert_eq!(Instruction::FCVTAU_32D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAU_32D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTM_D_floatdp1() {
        assert_eq!(Instruction::FRINTM_D_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTM_D_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTZ_D_floatdp1() {
        assert_eq!(Instruction::FRINTZ_D_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTZ_D_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTA_D_floatdp1() {
        assert_eq!(Instruction::FRINTA_D_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTA_D_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTX_D_floatdp1() {
        assert_eq!(Instruction::FRINTX_D_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTX_D_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTI_D_floatdp1() {
        assert_eq!(Instruction::FRINTI_D_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTI_D_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPS_32D_float2int() {
        assert_eq!(Instruction::FCVTPS_32D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPS_32D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINT32Z_D_floatdp1() {
        assert_eq!(Instruction::FRINT32Z_D_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINT32Z_D_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINT32X_D_floatdp1() {
        assert_eq!(Instruction::FRINT32X_D_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINT32X_D_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPU_32D_float2int() {
        assert_eq!(Instruction::FCVTPU_32D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPU_32D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINT64Z_D_floatdp1() {
        assert_eq!(Instruction::FRINT64Z_D_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINT64Z_D_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINT64X_D_floatdp1() {
        assert_eq!(Instruction::FRINT64X_D_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINT64X_D_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMS_32D_float2int() {
        assert_eq!(Instruction::FCVTMS_32D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMS_32D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMU_32D_float2int() {
        assert_eq!(Instruction::FCVTMU_32D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMU_32D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_32D_float2int() {
        assert_eq!(Instruction::FCVTZS_32D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_32D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_32D_float2int() {
        assert_eq!(Instruction::FCVTZU_32D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_32D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FJCVTZS_32D_float2int() {
        assert_eq!(Instruction::FJCVTZS_32D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FJCVTZS_32D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNS_32H_float2int() {
        assert_eq!(Instruction::FCVTNS_32H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNS_32H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMP_H_floatcmp() {
        assert_eq!(Instruction::FCMP_H_floatcmp { Rm: 0, Rn: 0, }.encode().decode(), 
                   Instruction::FCMP_H_floatcmp { Rm: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_FCMP_HZ_floatcmp() {
        assert_eq!(Instruction::FCMP_HZ_floatcmp { Rm: 0, Rn: 0, }.encode().decode(), 
                   Instruction::FCMP_HZ_floatcmp { Rm: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_FCMPE_H_floatcmp() {
        assert_eq!(Instruction::FCMPE_H_floatcmp { Rm: 0, Rn: 0, }.encode().decode(), 
                   Instruction::FCMPE_H_floatcmp { Rm: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_FCMPE_HZ_floatcmp() {
        assert_eq!(Instruction::FCMPE_HZ_floatcmp { Rm: 0, Rn: 0, }.encode().decode(), 
                   Instruction::FCMPE_HZ_floatcmp { Rm: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_FMOV_H_floatdp1() {
        assert_eq!(Instruction::FMOV_H_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_H_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FABS_H_floatdp1() {
        assert_eq!(Instruction::FABS_H_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FABS_H_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNU_32H_float2int() {
        assert_eq!(Instruction::FCVTNU_32H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNU_32H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FNEG_H_floatdp1() {
        assert_eq!(Instruction::FNEG_H_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FNEG_H_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FSQRT_H_floatdp1() {
        assert_eq!(Instruction::FSQRT_H_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FSQRT_H_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_H32_float2int() {
        assert_eq!(Instruction::SCVTF_H32_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_H32_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVT_SH_floatdp1() {
        assert_eq!(Instruction::FCVT_SH_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVT_SH_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVT_DH_floatdp1() {
        assert_eq!(Instruction::FCVT_DH_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVT_DH_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_H32_float2int() {
        assert_eq!(Instruction::UCVTF_H32_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_H32_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAS_32H_float2int() {
        assert_eq!(Instruction::FCVTAS_32H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAS_32H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTN_H_floatdp1() {
        assert_eq!(Instruction::FRINTN_H_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTN_H_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTP_H_floatdp1() {
        assert_eq!(Instruction::FRINTP_H_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTP_H_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAU_32H_float2int() {
        assert_eq!(Instruction::FCVTAU_32H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAU_32H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTM_H_floatdp1() {
        assert_eq!(Instruction::FRINTM_H_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTM_H_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTZ_H_floatdp1() {
        assert_eq!(Instruction::FRINTZ_H_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTZ_H_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_32H_float2int() {
        assert_eq!(Instruction::FMOV_32H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_32H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTA_H_floatdp1() {
        assert_eq!(Instruction::FRINTA_H_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTA_H_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_H32_float2int() {
        assert_eq!(Instruction::FMOV_H32_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_H32_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTX_H_floatdp1() {
        assert_eq!(Instruction::FRINTX_H_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTX_H_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTI_H_floatdp1() {
        assert_eq!(Instruction::FRINTI_H_floatdp1 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTI_H_floatdp1 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPS_32H_float2int() {
        assert_eq!(Instruction::FCVTPS_32H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPS_32H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPU_32H_float2int() {
        assert_eq!(Instruction::FCVTPU_32H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPU_32H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMS_32H_float2int() {
        assert_eq!(Instruction::FCVTMS_32H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMS_32H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMU_32H_float2int() {
        assert_eq!(Instruction::FCVTMU_32H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMU_32H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_32H_float2int() {
        assert_eq!(Instruction::FCVTZS_32H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_32H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_32H_float2int() {
        assert_eq!(Instruction::FCVTZU_32H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_32H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_PNEXT_p_p_p() {
        assert_eq!(Instruction::PNEXT_p_p_p { size: 0, Pg: 0, Pdn: 0, }.encode().decode(), 
                   Instruction::PNEXT_p_p_p { size: 0, Pg: 0, Pdn: 0, })
    }
    #[test]
    fn roundtrip_MOV_ORR_32_log_shift() {
        assert_eq!(Instruction::MOV_ORR_32_log_shift { Rm: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOV_ORR_32_log_shift { Rm: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STADDB_LDADDB_32_memop() {
        assert_eq!(Instruction::STADDB_LDADDB_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STADDB_LDADDB_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STCLRB_LDCLRB_32_memop() {
        assert_eq!(Instruction::STCLRB_LDCLRB_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STCLRB_LDCLRB_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STEORB_LDEORB_32_memop() {
        assert_eq!(Instruction::STEORB_LDEORB_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STEORB_LDEORB_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSETB_LDSETB_32_memop() {
        assert_eq!(Instruction::STSETB_LDSETB_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSETB_LDSETB_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSMAXB_LDSMAXB_32_memop() {
        assert_eq!(Instruction::STSMAXB_LDSMAXB_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSMAXB_LDSMAXB_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSMINB_LDSMINB_32_memop() {
        assert_eq!(Instruction::STSMINB_LDSMINB_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSMINB_LDSMINB_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STUMAXB_LDUMAXB_32_memop() {
        assert_eq!(Instruction::STUMAXB_LDUMAXB_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STUMAXB_LDUMAXB_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STUMINB_LDUMINB_32_memop() {
        assert_eq!(Instruction::STUMINB_LDUMINB_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STUMINB_LDUMINB_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STADDLB_LDADDLB_32_memop() {
        assert_eq!(Instruction::STADDLB_LDADDLB_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STADDLB_LDADDLB_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STCLRLB_LDCLRLB_32_memop() {
        assert_eq!(Instruction::STCLRLB_LDCLRLB_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STCLRLB_LDCLRLB_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STEORLB_LDEORLB_32_memop() {
        assert_eq!(Instruction::STEORLB_LDEORLB_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STEORLB_LDEORLB_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSETLB_LDSETLB_32_memop() {
        assert_eq!(Instruction::STSETLB_LDSETLB_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSETLB_LDSETLB_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSMAXLB_LDSMAXLB_32_memop() {
        assert_eq!(Instruction::STSMAXLB_LDSMAXLB_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSMAXLB_LDSMAXLB_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSMINLB_LDSMINLB_32_memop() {
        assert_eq!(Instruction::STSMINLB_LDSMINLB_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSMINLB_LDSMINLB_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STUMAXLB_LDUMAXLB_32_memop() {
        assert_eq!(Instruction::STUMAXLB_LDUMAXLB_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STUMAXLB_LDUMAXLB_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STUMINLB_LDUMINLB_32_memop() {
        assert_eq!(Instruction::STUMINLB_LDUMINLB_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STUMINLB_LDUMINLB_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_AESE_B_cryptoaes() {
        assert_eq!(Instruction::AESE_B_cryptoaes { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::AESE_B_cryptoaes { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_AESD_B_cryptoaes() {
        assert_eq!(Instruction::AESD_B_cryptoaes { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::AESD_B_cryptoaes { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_AESMC_B_cryptoaes() {
        assert_eq!(Instruction::AESMC_B_cryptoaes { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::AESMC_B_cryptoaes { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_AESIMC_B_cryptoaes() {
        assert_eq!(Instruction::AESIMC_B_cryptoaes { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::AESIMC_B_cryptoaes { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UXTB_UBFM_32M_bitfield() {
        assert_eq!(Instruction::UXTB_UBFM_32M_bitfield { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UXTB_UBFM_32M_bitfield { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UXTH_UBFM_32M_bitfield() {
        assert_eq!(Instruction::UXTH_UBFM_32M_bitfield { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UXTH_UBFM_32M_bitfield { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_NGC_SBC_32_addsub_carry() {
        assert_eq!(Instruction::NGC_SBC_32_addsub_carry { Rm: 0, Rd: 0, }.encode().decode(), 
                   Instruction::NGC_SBC_32_addsub_carry { Rm: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_RBIT_32_dp_1src() {
        assert_eq!(Instruction::RBIT_32_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::RBIT_32_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_REV16_32_dp_1src() {
        assert_eq!(Instruction::REV16_32_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::REV16_32_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_REV_32_dp_1src() {
        assert_eq!(Instruction::REV_32_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::REV_32_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CLZ_32_dp_1src() {
        assert_eq!(Instruction::CLZ_32_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CLZ_32_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CLS_32_dp_1src() {
        assert_eq!(Instruction::CLS_32_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CLS_32_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHA1H_SS_cryptosha2() {
        assert_eq!(Instruction::SHA1H_SS_cryptosha2 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHA1H_SS_cryptosha2 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHA1SU1_VV_cryptosha2() {
        assert_eq!(Instruction::SHA1SU1_VV_cryptosha2 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHA1SU1_VV_cryptosha2 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHA256SU0_VV_cryptosha2() {
        assert_eq!(Instruction::SHA256SU0_VV_cryptosha2 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHA256SU0_VV_cryptosha2 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNS_asisdmiscfp16_R() {
        assert_eq!(Instruction::FCVTNS_asisdmiscfp16_R { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNS_asisdmiscfp16_R { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMS_asisdmiscfp16_R() {
        assert_eq!(Instruction::FCVTMS_asisdmiscfp16_R { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMS_asisdmiscfp16_R { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAS_asisdmiscfp16_R() {
        assert_eq!(Instruction::FCVTAS_asisdmiscfp16_R { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAS_asisdmiscfp16_R { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_asisdmiscfp16_R() {
        assert_eq!(Instruction::SCVTF_asisdmiscfp16_R { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_asisdmiscfp16_R { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGT_asisdmiscfp16_FZ() {
        assert_eq!(Instruction::FCMGT_asisdmiscfp16_FZ { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMGT_asisdmiscfp16_FZ { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMEQ_asisdmiscfp16_FZ() {
        assert_eq!(Instruction::FCMEQ_asisdmiscfp16_FZ { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMEQ_asisdmiscfp16_FZ { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMLT_asisdmiscfp16_FZ() {
        assert_eq!(Instruction::FCMLT_asisdmiscfp16_FZ { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMLT_asisdmiscfp16_FZ { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPS_asisdmiscfp16_R() {
        assert_eq!(Instruction::FCVTPS_asisdmiscfp16_R { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPS_asisdmiscfp16_R { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_asisdmiscfp16_R() {
        assert_eq!(Instruction::FCVTZS_asisdmiscfp16_R { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_asisdmiscfp16_R { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRECPE_asisdmiscfp16_R() {
        assert_eq!(Instruction::FRECPE_asisdmiscfp16_R { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRECPE_asisdmiscfp16_R { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRECPX_asisdmiscfp16_R() {
        assert_eq!(Instruction::FRECPX_asisdmiscfp16_R { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRECPX_asisdmiscfp16_R { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STADDH_LDADDH_32_memop() {
        assert_eq!(Instruction::STADDH_LDADDH_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STADDH_LDADDH_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STCLRH_LDCLRH_32_memop() {
        assert_eq!(Instruction::STCLRH_LDCLRH_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STCLRH_LDCLRH_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STEORH_LDEORH_32_memop() {
        assert_eq!(Instruction::STEORH_LDEORH_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STEORH_LDEORH_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSETH_LDSETH_32_memop() {
        assert_eq!(Instruction::STSETH_LDSETH_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSETH_LDSETH_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSMAXH_LDSMAXH_32_memop() {
        assert_eq!(Instruction::STSMAXH_LDSMAXH_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSMAXH_LDSMAXH_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSMINH_LDSMINH_32_memop() {
        assert_eq!(Instruction::STSMINH_LDSMINH_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSMINH_LDSMINH_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STUMAXH_LDUMAXH_32_memop() {
        assert_eq!(Instruction::STUMAXH_LDUMAXH_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STUMAXH_LDUMAXH_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STUMINH_LDUMINH_32_memop() {
        assert_eq!(Instruction::STUMINH_LDUMINH_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STUMINH_LDUMINH_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STADDLH_LDADDLH_32_memop() {
        assert_eq!(Instruction::STADDLH_LDADDLH_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STADDLH_LDADDLH_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STCLRLH_LDCLRLH_32_memop() {
        assert_eq!(Instruction::STCLRLH_LDCLRLH_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STCLRLH_LDCLRLH_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STEORLH_LDEORLH_32_memop() {
        assert_eq!(Instruction::STEORLH_LDEORLH_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STEORLH_LDEORLH_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSETLH_LDSETLH_32_memop() {
        assert_eq!(Instruction::STSETLH_LDSETLH_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSETLH_LDSETLH_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSMAXLH_LDSMAXLH_32_memop() {
        assert_eq!(Instruction::STSMAXLH_LDSMAXLH_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSMAXLH_LDSMAXLH_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSMINLH_LDSMINLH_32_memop() {
        assert_eq!(Instruction::STSMINLH_LDSMINLH_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSMINLH_LDSMINLH_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STUMAXLH_LDUMAXLH_32_memop() {
        assert_eq!(Instruction::STUMAXLH_LDUMAXLH_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STUMAXLH_LDUMAXLH_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STUMINLH_LDUMINLH_32_memop() {
        assert_eq!(Instruction::STUMINLH_LDUMINLH_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STUMINLH_LDUMINLH_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_NGCS_SBCS_32_addsub_carry() {
        assert_eq!(Instruction::NGCS_SBCS_32_addsub_carry { Rm: 0, Rd: 0, }.encode().decode(), 
                   Instruction::NGCS_SBCS_32_addsub_carry { Rm: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNU_asisdmiscfp16_R() {
        assert_eq!(Instruction::FCVTNU_asisdmiscfp16_R { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNU_asisdmiscfp16_R { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMU_asisdmiscfp16_R() {
        assert_eq!(Instruction::FCVTMU_asisdmiscfp16_R { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMU_asisdmiscfp16_R { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAU_asisdmiscfp16_R() {
        assert_eq!(Instruction::FCVTAU_asisdmiscfp16_R { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAU_asisdmiscfp16_R { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_asisdmiscfp16_R() {
        assert_eq!(Instruction::UCVTF_asisdmiscfp16_R { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_asisdmiscfp16_R { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGE_asisdmiscfp16_FZ() {
        assert_eq!(Instruction::FCMGE_asisdmiscfp16_FZ { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMGE_asisdmiscfp16_FZ { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMLE_asisdmiscfp16_FZ() {
        assert_eq!(Instruction::FCMLE_asisdmiscfp16_FZ { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMLE_asisdmiscfp16_FZ { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPU_asisdmiscfp16_R() {
        assert_eq!(Instruction::FCVTPU_asisdmiscfp16_R { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPU_asisdmiscfp16_R { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_asisdmiscfp16_R() {
        assert_eq!(Instruction::FCVTZU_asisdmiscfp16_R { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_asisdmiscfp16_R { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRSQRTE_asisdmiscfp16_R() {
        assert_eq!(Instruction::FRSQRTE_asisdmiscfp16_R { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRSQRTE_asisdmiscfp16_R { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOV_ADD_64_addsub_imm() {
        assert_eq!(Instruction::MOV_ADD_64_addsub_imm { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOV_ADD_64_addsub_imm { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SXTB_SBFM_64M_bitfield() {
        assert_eq!(Instruction::SXTB_SBFM_64M_bitfield { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SXTB_SBFM_64M_bitfield { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SXTH_SBFM_64M_bitfield() {
        assert_eq!(Instruction::SXTH_SBFM_64M_bitfield { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SXTH_SBFM_64M_bitfield { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SXTW_SBFM_64M_bitfield() {
        assert_eq!(Instruction::SXTW_SBFM_64M_bitfield { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SXTW_SBFM_64M_bitfield { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNS_64S_float2int() {
        assert_eq!(Instruction::FCVTNS_64S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNS_64S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNU_64S_float2int() {
        assert_eq!(Instruction::FCVTNU_64S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNU_64S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_S64_float2int() {
        assert_eq!(Instruction::SCVTF_S64_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_S64_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_S64_float2int() {
        assert_eq!(Instruction::UCVTF_S64_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_S64_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAS_64S_float2int() {
        assert_eq!(Instruction::FCVTAS_64S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAS_64S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAU_64S_float2int() {
        assert_eq!(Instruction::FCVTAU_64S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAU_64S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPS_64S_float2int() {
        assert_eq!(Instruction::FCVTPS_64S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPS_64S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPU_64S_float2int() {
        assert_eq!(Instruction::FCVTPU_64S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPU_64S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMS_64S_float2int() {
        assert_eq!(Instruction::FCVTMS_64S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMS_64S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMU_64S_float2int() {
        assert_eq!(Instruction::FCVTMU_64S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMU_64S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_64S_float2int() {
        assert_eq!(Instruction::FCVTZS_64S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_64S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_64S_float2int() {
        assert_eq!(Instruction::FCVTZU_64S_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_64S_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNS_64D_float2int() {
        assert_eq!(Instruction::FCVTNS_64D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNS_64D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNU_64D_float2int() {
        assert_eq!(Instruction::FCVTNU_64D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNU_64D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_D64_float2int() {
        assert_eq!(Instruction::SCVTF_D64_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_D64_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_D64_float2int() {
        assert_eq!(Instruction::UCVTF_D64_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_D64_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAS_64D_float2int() {
        assert_eq!(Instruction::FCVTAS_64D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAS_64D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAU_64D_float2int() {
        assert_eq!(Instruction::FCVTAU_64D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAU_64D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_64D_float2int() {
        assert_eq!(Instruction::FMOV_64D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_64D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_D64_float2int() {
        assert_eq!(Instruction::FMOV_D64_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_D64_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPS_64D_float2int() {
        assert_eq!(Instruction::FCVTPS_64D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPS_64D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPU_64D_float2int() {
        assert_eq!(Instruction::FCVTPU_64D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPU_64D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMS_64D_float2int() {
        assert_eq!(Instruction::FCVTMS_64D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMS_64D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMU_64D_float2int() {
        assert_eq!(Instruction::FCVTMU_64D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMU_64D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_64D_float2int() {
        assert_eq!(Instruction::FCVTZS_64D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_64D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_64D_float2int() {
        assert_eq!(Instruction::FCVTZU_64D_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_64D_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_64VX_float2int() {
        assert_eq!(Instruction::FMOV_64VX_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_64VX_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_V64I_float2int() {
        assert_eq!(Instruction::FMOV_V64I_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_V64I_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNS_64H_float2int() {
        assert_eq!(Instruction::FCVTNS_64H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNS_64H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNU_64H_float2int() {
        assert_eq!(Instruction::FCVTNU_64H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNU_64H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_H64_float2int() {
        assert_eq!(Instruction::SCVTF_H64_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_H64_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_H64_float2int() {
        assert_eq!(Instruction::UCVTF_H64_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_H64_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAS_64H_float2int() {
        assert_eq!(Instruction::FCVTAS_64H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAS_64H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAU_64H_float2int() {
        assert_eq!(Instruction::FCVTAU_64H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAU_64H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_64H_float2int() {
        assert_eq!(Instruction::FMOV_64H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_64H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_H64_float2int() {
        assert_eq!(Instruction::FMOV_H64_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_H64_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPS_64H_float2int() {
        assert_eq!(Instruction::FCVTPS_64H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPS_64H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPU_64H_float2int() {
        assert_eq!(Instruction::FCVTPU_64H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPU_64H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMS_64H_float2int() {
        assert_eq!(Instruction::FCVTMS_64H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMS_64H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMU_64H_float2int() {
        assert_eq!(Instruction::FCVTMU_64H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMU_64H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_64H_float2int() {
        assert_eq!(Instruction::FCVTZS_64H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_64H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_64H_float2int() {
        assert_eq!(Instruction::FCVTZU_64H_float2int { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_64H_float2int { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOV_ORR_64_log_shift() {
        assert_eq!(Instruction::MOV_ORR_64_log_shift { Rm: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOV_ORR_64_log_shift { Rm: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STADD_LDADD_32_memop() {
        assert_eq!(Instruction::STADD_LDADD_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STADD_LDADD_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STCLR_LDCLR_32_memop() {
        assert_eq!(Instruction::STCLR_LDCLR_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STCLR_LDCLR_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STEOR_LDEOR_32_memop() {
        assert_eq!(Instruction::STEOR_LDEOR_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STEOR_LDEOR_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSET_LDSET_32_memop() {
        assert_eq!(Instruction::STSET_LDSET_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSET_LDSET_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSMAX_LDSMAX_32_memop() {
        assert_eq!(Instruction::STSMAX_LDSMAX_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSMAX_LDSMAX_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSMIN_LDSMIN_32_memop() {
        assert_eq!(Instruction::STSMIN_LDSMIN_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSMIN_LDSMIN_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STUMAX_LDUMAX_32_memop() {
        assert_eq!(Instruction::STUMAX_LDUMAX_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STUMAX_LDUMAX_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STUMIN_LDUMIN_32_memop() {
        assert_eq!(Instruction::STUMIN_LDUMIN_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STUMIN_LDUMIN_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STADDL_LDADDL_32_memop() {
        assert_eq!(Instruction::STADDL_LDADDL_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STADDL_LDADDL_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STCLRL_LDCLRL_32_memop() {
        assert_eq!(Instruction::STCLRL_LDCLRL_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STCLRL_LDCLRL_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STEORL_LDEORL_32_memop() {
        assert_eq!(Instruction::STEORL_LDEORL_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STEORL_LDEORL_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSETL_LDSETL_32_memop() {
        assert_eq!(Instruction::STSETL_LDSETL_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSETL_LDSETL_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSMAXL_LDSMAXL_32_memop() {
        assert_eq!(Instruction::STSMAXL_LDSMAXL_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSMAXL_LDSMAXL_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSMINL_LDSMINL_32_memop() {
        assert_eq!(Instruction::STSMINL_LDSMINL_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSMINL_LDSMINL_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STUMAXL_LDUMAXL_32_memop() {
        assert_eq!(Instruction::STUMAXL_LDUMAXL_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STUMAXL_LDUMAXL_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STUMINL_LDUMINL_32_memop() {
        assert_eq!(Instruction::STUMINL_LDUMINL_32_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STUMINL_LDUMINL_32_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_CMPP_SUBPS_64S_dp_2src() {
        assert_eq!(Instruction::CMPP_SUBPS_64S_dp_2src { Xm: 0, Xn: 0, }.encode().decode(), 
                   Instruction::CMPP_SUBPS_64S_dp_2src { Xm: 0, Xn: 0, })
    }
    #[test]
    fn roundtrip_SHA512SU0_VV2_cryptosha512_2() {
        assert_eq!(Instruction::SHA512SU0_VV2_cryptosha512_2 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHA512SU0_VV2_cryptosha512_2 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SM4E_VV4_cryptosha512_2() {
        assert_eq!(Instruction::SM4E_VV4_cryptosha512_2 { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SM4E_VV4_cryptosha512_2 { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MSR_SI_pstate() {
        assert_eq!(Instruction::MSR_SI_pstate { op1: 0, CRm: 0, op2: 0, }.encode().decode(), 
                   Instruction::MSR_SI_pstate { op1: 0, CRm: 0, op2: 0, })
    }
    #[test]
    fn roundtrip_BRAA_64P_branch_reg() {
        assert_eq!(Instruction::BRAA_64P_branch_reg { Rn: 0, Rm: 0, }.encode().decode(), 
                   Instruction::BRAA_64P_branch_reg { Rn: 0, Rm: 0, })
    }
    #[test]
    fn roundtrip_BRAB_64P_branch_reg() {
        assert_eq!(Instruction::BRAB_64P_branch_reg { Rn: 0, Rm: 0, }.encode().decode(), 
                   Instruction::BRAB_64P_branch_reg { Rn: 0, Rm: 0, })
    }
    #[test]
    fn roundtrip_BLRAA_64P_branch_reg() {
        assert_eq!(Instruction::BLRAA_64P_branch_reg { Rn: 0, Rm: 0, }.encode().decode(), 
                   Instruction::BLRAA_64P_branch_reg { Rn: 0, Rm: 0, })
    }
    #[test]
    fn roundtrip_BLRAB_64P_branch_reg() {
        assert_eq!(Instruction::BLRAB_64P_branch_reg { Rn: 0, Rm: 0, }.encode().decode(), 
                   Instruction::BLRAB_64P_branch_reg { Rn: 0, Rm: 0, })
    }
    #[test]
    fn roundtrip_STZGM_64bulk_ldsttags() {
        assert_eq!(Instruction::STZGM_64bulk_ldsttags { Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::STZGM_64bulk_ldsttags { Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_STGM_64bulk_ldsttags() {
        assert_eq!(Instruction::STGM_64bulk_ldsttags { Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::STGM_64bulk_ldsttags { Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_LDGM_64bulk_ldsttags() {
        assert_eq!(Instruction::LDGM_64bulk_ldsttags { Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::LDGM_64bulk_ldsttags { Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_NGC_SBC_64_addsub_carry() {
        assert_eq!(Instruction::NGC_SBC_64_addsub_carry { Rm: 0, Rd: 0, }.encode().decode(), 
                   Instruction::NGC_SBC_64_addsub_carry { Rm: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_RBIT_64_dp_1src() {
        assert_eq!(Instruction::RBIT_64_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::RBIT_64_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_REV16_64_dp_1src() {
        assert_eq!(Instruction::REV16_64_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::REV16_64_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_REV32_64_dp_1src() {
        assert_eq!(Instruction::REV32_64_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::REV32_64_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_REV_64_dp_1src() {
        assert_eq!(Instruction::REV_64_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::REV_64_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_REV64_REV_64_dp_1src() {
        assert_eq!(Instruction::REV64_REV_64_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::REV64_REV_64_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CLZ_64_dp_1src() {
        assert_eq!(Instruction::CLZ_64_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CLZ_64_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CLS_64_dp_1src() {
        assert_eq!(Instruction::CLS_64_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CLS_64_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_PACIA_64P_dp_1src() {
        assert_eq!(Instruction::PACIA_64P_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::PACIA_64P_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_PACIB_64P_dp_1src() {
        assert_eq!(Instruction::PACIB_64P_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::PACIB_64P_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_PACDA_64P_dp_1src() {
        assert_eq!(Instruction::PACDA_64P_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::PACDA_64P_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_PACDB_64P_dp_1src() {
        assert_eq!(Instruction::PACDB_64P_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::PACDB_64P_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_AUTIA_64P_dp_1src() {
        assert_eq!(Instruction::AUTIA_64P_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::AUTIA_64P_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_AUTIB_64P_dp_1src() {
        assert_eq!(Instruction::AUTIB_64P_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::AUTIB_64P_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_AUTDA_64P_dp_1src() {
        assert_eq!(Instruction::AUTDA_64P_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::AUTDA_64P_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_AUTDB_64P_dp_1src() {
        assert_eq!(Instruction::AUTDB_64P_dp_1src { Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::AUTDB_64P_dp_1src { Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STADD_LDADD_64_memop() {
        assert_eq!(Instruction::STADD_LDADD_64_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STADD_LDADD_64_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STCLR_LDCLR_64_memop() {
        assert_eq!(Instruction::STCLR_LDCLR_64_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STCLR_LDCLR_64_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STEOR_LDEOR_64_memop() {
        assert_eq!(Instruction::STEOR_LDEOR_64_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STEOR_LDEOR_64_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSET_LDSET_64_memop() {
        assert_eq!(Instruction::STSET_LDSET_64_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSET_LDSET_64_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSMAX_LDSMAX_64_memop() {
        assert_eq!(Instruction::STSMAX_LDSMAX_64_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSMAX_LDSMAX_64_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSMIN_LDSMIN_64_memop() {
        assert_eq!(Instruction::STSMIN_LDSMIN_64_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSMIN_LDSMIN_64_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STUMAX_LDUMAX_64_memop() {
        assert_eq!(Instruction::STUMAX_LDUMAX_64_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STUMAX_LDUMAX_64_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STUMIN_LDUMIN_64_memop() {
        assert_eq!(Instruction::STUMIN_LDUMIN_64_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STUMIN_LDUMIN_64_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_ST64B_64L_memop() {
        assert_eq!(Instruction::ST64B_64L_memop { Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST64B_64L_memop { Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD64B_64L_memop() {
        assert_eq!(Instruction::LD64B_64L_memop { Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD64B_64L_memop { Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STADDL_LDADDL_64_memop() {
        assert_eq!(Instruction::STADDL_LDADDL_64_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STADDL_LDADDL_64_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STCLRL_LDCLRL_64_memop() {
        assert_eq!(Instruction::STCLRL_LDCLRL_64_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STCLRL_LDCLRL_64_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STEORL_LDEORL_64_memop() {
        assert_eq!(Instruction::STEORL_LDEORL_64_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STEORL_LDEORL_64_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSETL_LDSETL_64_memop() {
        assert_eq!(Instruction::STSETL_LDSETL_64_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSETL_LDSETL_64_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSMAXL_LDSMAXL_64_memop() {
        assert_eq!(Instruction::STSMAXL_LDSMAXL_64_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSMAXL_LDSMAXL_64_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STSMINL_LDSMINL_64_memop() {
        assert_eq!(Instruction::STSMINL_LDSMINL_64_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STSMINL_LDSMINL_64_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STUMAXL_LDUMAXL_64_memop() {
        assert_eq!(Instruction::STUMAXL_LDUMAXL_64_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STUMAXL_LDUMAXL_64_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_STUMINL_LDUMINL_64_memop() {
        assert_eq!(Instruction::STUMINL_LDUMINL_64_memop { Rs: 0, Rn: 0, }.encode().decode(), 
                   Instruction::STUMINL_LDUMINL_64_memop { Rs: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_NGCS_SBCS_64_addsub_carry() {
        assert_eq!(Instruction::NGCS_SBCS_64_addsub_carry { Rm: 0, Rd: 0, }.encode().decode(), 
                   Instruction::NGCS_SBCS_64_addsub_carry { Rm: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_RDVL_r_i() {
        assert_eq!(Instruction::RDVL_r_i { imm6: 0, Rd: 0, }.encode().decode(), 
                   Instruction::RDVL_r_i { imm6: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_cpy_z_p_i() {
        assert_eq!(Instruction::FMOV_cpy_z_p_i { size: 0, Pg: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FMOV_cpy_z_p_i { size: 0, Pg: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlso_D1_1d() {
        assert_eq!(Instruction::ST1_asisdlso_D1_1d { Q: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlso_D1_1d { Q: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST3_asisdlso_D3_3d() {
        assert_eq!(Instruction::ST3_asisdlso_D3_3d { Q: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST3_asisdlso_D3_3d { Q: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST2_asisdlso_D2_2d() {
        assert_eq!(Instruction::ST2_asisdlso_D2_2d { Q: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST2_asisdlso_D2_2d { Q: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST4_asisdlso_D4_4d() {
        assert_eq!(Instruction::ST4_asisdlso_D4_4d { Q: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST4_asisdlso_D4_4d { Q: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlso_D1_1d() {
        assert_eq!(Instruction::LD1_asisdlso_D1_1d { Q: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlso_D1_1d { Q: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3_asisdlso_D3_3d() {
        assert_eq!(Instruction::LD3_asisdlso_D3_3d { Q: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3_asisdlso_D3_3d { Q: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2_asisdlso_D2_2d() {
        assert_eq!(Instruction::LD2_asisdlso_D2_2d { Q: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2_asisdlso_D2_2d { Q: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4_asisdlso_D4_4d() {
        assert_eq!(Instruction::LD4_asisdlso_D4_4d { Q: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4_asisdlso_D4_4d { Q: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlsop_D1_i1d() {
        assert_eq!(Instruction::ST1_asisdlsop_D1_i1d { Q: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlsop_D1_i1d { Q: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST3_asisdlsop_D3_i3d() {
        assert_eq!(Instruction::ST3_asisdlsop_D3_i3d { Q: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST3_asisdlsop_D3_i3d { Q: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST2_asisdlsop_D2_i2d() {
        assert_eq!(Instruction::ST2_asisdlsop_D2_i2d { Q: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST2_asisdlsop_D2_i2d { Q: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST4_asisdlsop_D4_i4d() {
        assert_eq!(Instruction::ST4_asisdlsop_D4_i4d { Q: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST4_asisdlsop_D4_i4d { Q: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlsop_D1_i1d() {
        assert_eq!(Instruction::LD1_asisdlsop_D1_i1d { Q: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlsop_D1_i1d { Q: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3_asisdlsop_D3_i3d() {
        assert_eq!(Instruction::LD3_asisdlsop_D3_i3d { Q: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3_asisdlsop_D3_i3d { Q: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2_asisdlsop_D2_i2d() {
        assert_eq!(Instruction::LD2_asisdlsop_D2_i2d { Q: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2_asisdlsop_D2_i2d { Q: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4_asisdlsop_D4_i4d() {
        assert_eq!(Instruction::LD4_asisdlsop_D4_i4d { Q: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4_asisdlsop_D4_i4d { Q: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_FMAXNMV_asimdall_only_H() {
        assert_eq!(Instruction::FMAXNMV_asimdall_only_H { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXNMV_asimdall_only_H { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAXV_asimdall_only_H() {
        assert_eq!(Instruction::FMAXV_asimdall_only_H { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXV_asimdall_only_H { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTN_asimdmiscfp16_R() {
        assert_eq!(Instruction::FRINTN_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTN_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTM_asimdmiscfp16_R() {
        assert_eq!(Instruction::FRINTM_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTM_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNS_asimdmiscfp16_R() {
        assert_eq!(Instruction::FCVTNS_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNS_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMS_asimdmiscfp16_R() {
        assert_eq!(Instruction::FCVTMS_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMS_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAS_asimdmiscfp16_R() {
        assert_eq!(Instruction::FCVTAS_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAS_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_asimdmiscfp16_R() {
        assert_eq!(Instruction::SCVTF_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BFCVTN_asimdmisc_4S() {
        assert_eq!(Instruction::BFCVTN_asimdmisc_4S { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BFCVTN_asimdmisc_4S { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINNMV_asimdall_only_H() {
        assert_eq!(Instruction::FMINNMV_asimdall_only_H { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINNMV_asimdall_only_H { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINV_asimdall_only_H() {
        assert_eq!(Instruction::FMINV_asimdall_only_H { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINV_asimdall_only_H { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGT_asimdmiscfp16_FZ() {
        assert_eq!(Instruction::FCMGT_asimdmiscfp16_FZ { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMGT_asimdmiscfp16_FZ { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMEQ_asimdmiscfp16_FZ() {
        assert_eq!(Instruction::FCMEQ_asimdmiscfp16_FZ { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMEQ_asimdmiscfp16_FZ { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMLT_asimdmiscfp16_FZ() {
        assert_eq!(Instruction::FCMLT_asimdmiscfp16_FZ { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMLT_asimdmiscfp16_FZ { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FABS_asimdmiscfp16_R() {
        assert_eq!(Instruction::FABS_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FABS_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTP_asimdmiscfp16_R() {
        assert_eq!(Instruction::FRINTP_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTP_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTZ_asimdmiscfp16_R() {
        assert_eq!(Instruction::FRINTZ_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTZ_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPS_asimdmiscfp16_R() {
        assert_eq!(Instruction::FCVTPS_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPS_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_asimdmiscfp16_R() {
        assert_eq!(Instruction::FCVTZS_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRECPE_asimdmiscfp16_R() {
        assert_eq!(Instruction::FRECPE_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRECPE_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_PTRUE_p_s() {
        assert_eq!(Instruction::PTRUE_p_s { size: 0, pattern: 0, Pd: 0, }.encode().decode(), 
                   Instruction::PTRUE_p_s { size: 0, pattern: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_PTRUES_p_s() {
        assert_eq!(Instruction::PTRUES_p_s { size: 0, pattern: 0, Pd: 0, }.encode().decode(), 
                   Instruction::PTRUES_p_s { size: 0, pattern: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_SQINCP_z_p_z() {
        assert_eq!(Instruction::SQINCP_z_p_z { size: 0, Pm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SQINCP_z_p_z { size: 0, Pm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SQINCP_r_p_r_sx() {
        assert_eq!(Instruction::SQINCP_r_p_r_sx { size: 0, Pm: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQINCP_r_p_r_sx { size: 0, Pm: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQINCP_r_p_r_x() {
        assert_eq!(Instruction::SQINCP_r_p_r_x { size: 0, Pm: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQINCP_r_p_r_x { size: 0, Pm: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQINCP_z_p_z() {
        assert_eq!(Instruction::UQINCP_z_p_z { size: 0, Pm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UQINCP_z_p_z { size: 0, Pm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UQINCP_r_p_r_uw() {
        assert_eq!(Instruction::UQINCP_r_p_r_uw { size: 0, Pm: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQINCP_r_p_r_uw { size: 0, Pm: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQINCP_r_p_r_x() {
        assert_eq!(Instruction::UQINCP_r_p_r_x { size: 0, Pm: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQINCP_r_p_r_x { size: 0, Pm: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQDECP_z_p_z() {
        assert_eq!(Instruction::SQDECP_z_p_z { size: 0, Pm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SQDECP_z_p_z { size: 0, Pm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SQDECP_r_p_r_sx() {
        assert_eq!(Instruction::SQDECP_r_p_r_sx { size: 0, Pm: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQDECP_r_p_r_sx { size: 0, Pm: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQDECP_r_p_r_x() {
        assert_eq!(Instruction::SQDECP_r_p_r_x { size: 0, Pm: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQDECP_r_p_r_x { size: 0, Pm: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQDECP_z_p_z() {
        assert_eq!(Instruction::UQDECP_z_p_z { size: 0, Pm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UQDECP_z_p_z { size: 0, Pm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UQDECP_r_p_r_uw() {
        assert_eq!(Instruction::UQDECP_r_p_r_uw { size: 0, Pm: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQDECP_r_p_r_uw { size: 0, Pm: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQDECP_r_p_r_x() {
        assert_eq!(Instruction::UQDECP_r_p_r_x { size: 0, Pm: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQDECP_r_p_r_x { size: 0, Pm: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_INCP_z_p_z() {
        assert_eq!(Instruction::INCP_z_p_z { size: 0, Pm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::INCP_z_p_z { size: 0, Pm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_INCP_r_p_r() {
        assert_eq!(Instruction::INCP_r_p_r { size: 0, Pm: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::INCP_r_p_r { size: 0, Pm: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_DECP_z_p_z() {
        assert_eq!(Instruction::DECP_z_p_z { size: 0, Pm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::DECP_z_p_z { size: 0, Pm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_DECP_r_p_r() {
        assert_eq!(Instruction::DECP_r_p_r { size: 0, Pm: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::DECP_r_p_r { size: 0, Pm: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_CTERMEQ_rr() {
        assert_eq!(Instruction::CTERMEQ_rr { sz: 0, Rm: 0, Rn: 0, }.encode().decode(), 
                   Instruction::CTERMEQ_rr { sz: 0, Rm: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_CTERMNE_rr() {
        assert_eq!(Instruction::CTERMNE_rr { sz: 0, Rm: 0, Rn: 0, }.encode().decode(), 
                   Instruction::CTERMNE_rr { sz: 0, Rm: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_MVN_NOT_asimdmisc_R() {
        assert_eq!(Instruction::MVN_NOT_asimdmisc_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MVN_NOT_asimdmisc_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_NOT_asimdmisc_R() {
        assert_eq!(Instruction::NOT_asimdmisc_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::NOT_asimdmisc_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_RBIT_asimdmisc_R() {
        assert_eq!(Instruction::RBIT_asimdmisc_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::RBIT_asimdmisc_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTA_asimdmiscfp16_R() {
        assert_eq!(Instruction::FRINTA_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTA_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTX_asimdmiscfp16_R() {
        assert_eq!(Instruction::FRINTX_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTX_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNU_asimdmiscfp16_R() {
        assert_eq!(Instruction::FCVTNU_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNU_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMU_asimdmiscfp16_R() {
        assert_eq!(Instruction::FCVTMU_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMU_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAU_asimdmiscfp16_R() {
        assert_eq!(Instruction::FCVTAU_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAU_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_asimdmiscfp16_R() {
        assert_eq!(Instruction::UCVTF_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGE_asimdmiscfp16_FZ() {
        assert_eq!(Instruction::FCMGE_asimdmiscfp16_FZ { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMGE_asimdmiscfp16_FZ { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMLE_asimdmiscfp16_FZ() {
        assert_eq!(Instruction::FCMLE_asimdmiscfp16_FZ { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMLE_asimdmiscfp16_FZ { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FNEG_asimdmiscfp16_R() {
        assert_eq!(Instruction::FNEG_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FNEG_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTI_asimdmiscfp16_R() {
        assert_eq!(Instruction::FRINTI_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTI_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPU_asimdmiscfp16_R() {
        assert_eq!(Instruction::FCVTPU_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPU_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_asimdmiscfp16_R() {
        assert_eq!(Instruction::FCVTZU_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRSQRTE_asimdmiscfp16_R() {
        assert_eq!(Instruction::FRSQRTE_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRSQRTE_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FSQRT_asimdmiscfp16_R() {
        assert_eq!(Instruction::FSQRT_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FSQRT_asimdmiscfp16_R { Q: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOV_UMOV_asimdins_X_x() {
        assert_eq!(Instruction::MOV_UMOV_asimdins_X_x { imm5: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOV_UMOV_asimdins_X_x { imm5: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMOV_asimdins_X_x() {
        assert_eq!(Instruction::UMOV_asimdins_X_x { imm5: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMOV_asimdins_X_x { imm5: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNS_asisdmisc_R() {
        assert_eq!(Instruction::FCVTNS_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNS_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMS_asisdmisc_R() {
        assert_eq!(Instruction::FCVTMS_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMS_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAS_asisdmisc_R() {
        assert_eq!(Instruction::FCVTAS_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAS_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_asisdmisc_R() {
        assert_eq!(Instruction::SCVTF_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAXNMP_asisdpair_only_H() {
        assert_eq!(Instruction::FMAXNMP_asisdpair_only_H { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXNMP_asisdpair_only_H { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FADDP_asisdpair_only_H() {
        assert_eq!(Instruction::FADDP_asisdpair_only_H { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FADDP_asisdpair_only_H { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAXP_asisdpair_only_H() {
        assert_eq!(Instruction::FMAXP_asisdpair_only_H { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXP_asisdpair_only_H { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGT_asisdmisc_FZ() {
        assert_eq!(Instruction::FCMGT_asisdmisc_FZ { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMGT_asisdmisc_FZ { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMEQ_asisdmisc_FZ() {
        assert_eq!(Instruction::FCMEQ_asisdmisc_FZ { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMEQ_asisdmisc_FZ { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMLT_asisdmisc_FZ() {
        assert_eq!(Instruction::FCMLT_asisdmisc_FZ { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMLT_asisdmisc_FZ { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPS_asisdmisc_R() {
        assert_eq!(Instruction::FCVTPS_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPS_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_asisdmisc_R() {
        assert_eq!(Instruction::FCVTZS_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRECPE_asisdmisc_R() {
        assert_eq!(Instruction::FRECPE_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRECPE_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRECPX_asisdmisc_R() {
        assert_eq!(Instruction::FRECPX_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRECPX_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINNMP_asisdpair_only_H() {
        assert_eq!(Instruction::FMINNMP_asisdpair_only_H { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINNMP_asisdpair_only_H { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINP_asisdpair_only_H() {
        assert_eq!(Instruction::FMINP_asisdpair_only_H { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINP_asisdpair_only_H { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FADD_z_p_zs() {
        assert_eq!(Instruction::FADD_z_p_zs { size: 0, Pg: 0, i1: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FADD_z_p_zs { size: 0, Pg: 0, i1: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FSUB_z_p_zs() {
        assert_eq!(Instruction::FSUB_z_p_zs { size: 0, Pg: 0, i1: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FSUB_z_p_zs { size: 0, Pg: 0, i1: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FMUL_z_p_zs() {
        assert_eq!(Instruction::FMUL_z_p_zs { size: 0, Pg: 0, i1: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FMUL_z_p_zs { size: 0, Pg: 0, i1: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FSUBR_z_p_zs() {
        assert_eq!(Instruction::FSUBR_z_p_zs { size: 0, Pg: 0, i1: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FSUBR_z_p_zs { size: 0, Pg: 0, i1: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FMAXNM_z_p_zs() {
        assert_eq!(Instruction::FMAXNM_z_p_zs { size: 0, Pg: 0, i1: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FMAXNM_z_p_zs { size: 0, Pg: 0, i1: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FMINNM_z_p_zs() {
        assert_eq!(Instruction::FMINNM_z_p_zs { size: 0, Pg: 0, i1: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FMINNM_z_p_zs { size: 0, Pg: 0, i1: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FMAX_z_p_zs() {
        assert_eq!(Instruction::FMAX_z_p_zs { size: 0, Pg: 0, i1: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FMAX_z_p_zs { size: 0, Pg: 0, i1: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FMIN_z_p_zs() {
        assert_eq!(Instruction::FMIN_z_p_zs { size: 0, Pg: 0, i1: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FMIN_z_p_zs { size: 0, Pg: 0, i1: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FCVTXN_asisdmisc_N() {
        assert_eq!(Instruction::FCVTXN_asisdmisc_N { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTXN_asisdmisc_N { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNU_asisdmisc_R() {
        assert_eq!(Instruction::FCVTNU_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNU_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMU_asisdmisc_R() {
        assert_eq!(Instruction::FCVTMU_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMU_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAU_asisdmisc_R() {
        assert_eq!(Instruction::FCVTAU_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAU_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_asisdmisc_R() {
        assert_eq!(Instruction::UCVTF_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAXNMP_asisdpair_only_SD() {
        assert_eq!(Instruction::FMAXNMP_asisdpair_only_SD { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXNMP_asisdpair_only_SD { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FADDP_asisdpair_only_SD() {
        assert_eq!(Instruction::FADDP_asisdpair_only_SD { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FADDP_asisdpair_only_SD { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAXP_asisdpair_only_SD() {
        assert_eq!(Instruction::FMAXP_asisdpair_only_SD { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXP_asisdpair_only_SD { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGE_asisdmisc_FZ() {
        assert_eq!(Instruction::FCMGE_asisdmisc_FZ { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMGE_asisdmisc_FZ { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMLE_asisdmisc_FZ() {
        assert_eq!(Instruction::FCMLE_asisdmisc_FZ { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMLE_asisdmisc_FZ { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPU_asisdmisc_R() {
        assert_eq!(Instruction::FCVTPU_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPU_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_asisdmisc_R() {
        assert_eq!(Instruction::FCVTZU_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRSQRTE_asisdmisc_R() {
        assert_eq!(Instruction::FRSQRTE_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRSQRTE_asisdmisc_R { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINNMP_asisdpair_only_SD() {
        assert_eq!(Instruction::FMINNMP_asisdpair_only_SD { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINNMP_asisdpair_only_SD { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINP_asisdpair_only_SD() {
        assert_eq!(Instruction::FMINP_asisdpair_only_SD { sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINP_asisdpair_only_SD { sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FEXPA_z_z() {
        assert_eq!(Instruction::FEXPA_z_z { size: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FEXPA_z_z { size: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_DUP_z_r() {
        assert_eq!(Instruction::DUP_z_r { size: 0, Rn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::DUP_z_r { size: 0, Rn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_MOV_dup_z_r() {
        assert_eq!(Instruction::MOV_dup_z_r { size: 0, Rn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::MOV_dup_z_r { size: 0, Rn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_INSR_z_r() {
        assert_eq!(Instruction::INSR_z_r { size: 0, Rm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::INSR_z_r { size: 0, Rm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SUNPKLO_z_z() {
        assert_eq!(Instruction::SUNPKLO_z_z { size: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::SUNPKLO_z_z { size: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_SUNPKHI_z_z() {
        assert_eq!(Instruction::SUNPKHI_z_z { size: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::SUNPKHI_z_z { size: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UUNPKLO_z_z() {
        assert_eq!(Instruction::UUNPKLO_z_z { size: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UUNPKLO_z_z { size: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UUNPKHI_z_z() {
        assert_eq!(Instruction::UUNPKHI_z_z { size: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UUNPKHI_z_z { size: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_INSR_z_v() {
        assert_eq!(Instruction::INSR_z_v { size: 0, Vm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::INSR_z_v { size: 0, Vm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_REV_z_z() {
        assert_eq!(Instruction::REV_z_z { size: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::REV_z_z { size: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlso_S1_1s() {
        assert_eq!(Instruction::ST1_asisdlso_S1_1s { Q: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlso_S1_1s { Q: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST3_asisdlso_S3_3s() {
        assert_eq!(Instruction::ST3_asisdlso_S3_3s { Q: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST3_asisdlso_S3_3s { Q: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST2_asisdlso_S2_2s() {
        assert_eq!(Instruction::ST2_asisdlso_S2_2s { Q: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST2_asisdlso_S2_2s { Q: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST4_asisdlso_S4_4s() {
        assert_eq!(Instruction::ST4_asisdlso_S4_4s { Q: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST4_asisdlso_S4_4s { Q: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlso_S1_1s() {
        assert_eq!(Instruction::LD1_asisdlso_S1_1s { Q: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlso_S1_1s { Q: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3_asisdlso_S3_3s() {
        assert_eq!(Instruction::LD3_asisdlso_S3_3s { Q: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3_asisdlso_S3_3s { Q: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2_asisdlso_S2_2s() {
        assert_eq!(Instruction::LD2_asisdlso_S2_2s { Q: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2_asisdlso_S2_2s { Q: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4_asisdlso_S4_4s() {
        assert_eq!(Instruction::LD4_asisdlso_S4_4s { Q: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4_asisdlso_S4_4s { Q: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlsop_S1_i1s() {
        assert_eq!(Instruction::ST1_asisdlsop_S1_i1s { Q: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlsop_S1_i1s { Q: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST3_asisdlsop_S3_i3s() {
        assert_eq!(Instruction::ST3_asisdlsop_S3_i3s { Q: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST3_asisdlsop_S3_i3s { Q: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST2_asisdlsop_S2_i2s() {
        assert_eq!(Instruction::ST2_asisdlsop_S2_i2s { Q: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST2_asisdlsop_S2_i2s { Q: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST4_asisdlsop_S4_i4s() {
        assert_eq!(Instruction::ST4_asisdlsop_S4_i4s { Q: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST4_asisdlsop_S4_i4s { Q: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlsop_S1_i1s() {
        assert_eq!(Instruction::LD1_asisdlsop_S1_i1s { Q: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlsop_S1_i1s { Q: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3_asisdlsop_S3_i3s() {
        assert_eq!(Instruction::LD3_asisdlsop_S3_i3s { Q: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3_asisdlsop_S3_i3s { Q: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2_asisdlsop_S2_i2s() {
        assert_eq!(Instruction::LD2_asisdlsop_S2_i2s { Q: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2_asisdlsop_S2_i2s { Q: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4_asisdlsop_S4_i4s() {
        assert_eq!(Instruction::LD4_asisdlsop_S4_i4s { Q: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4_asisdlsop_S4_i4s { Q: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_MOV_UMOV_asimdins_W_w() {
        assert_eq!(Instruction::MOV_UMOV_asimdins_W_w { imm5: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOV_UMOV_asimdins_W_w { imm5: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTN_asimdmisc_N() {
        assert_eq!(Instruction::FCVTN_asimdmisc_N { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTN_asimdmisc_N { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTL_asimdmisc_L() {
        assert_eq!(Instruction::FCVTL_asimdmisc_L { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTL_asimdmisc_L { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTN_asimdmisc_R() {
        assert_eq!(Instruction::FRINTN_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTN_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTM_asimdmisc_R() {
        assert_eq!(Instruction::FRINTM_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTM_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNS_asimdmisc_R() {
        assert_eq!(Instruction::FCVTNS_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNS_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMS_asimdmisc_R() {
        assert_eq!(Instruction::FCVTMS_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMS_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAS_asimdmisc_R() {
        assert_eq!(Instruction::FCVTAS_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAS_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_asimdmisc_R() {
        assert_eq!(Instruction::SCVTF_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINT32Z_asimdmisc_R() {
        assert_eq!(Instruction::FRINT32Z_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINT32Z_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINT64Z_asimdmisc_R() {
        assert_eq!(Instruction::FRINT64Z_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINT64Z_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGT_asimdmisc_FZ() {
        assert_eq!(Instruction::FCMGT_asimdmisc_FZ { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMGT_asimdmisc_FZ { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMEQ_asimdmisc_FZ() {
        assert_eq!(Instruction::FCMEQ_asimdmisc_FZ { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMEQ_asimdmisc_FZ { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMLT_asimdmisc_FZ() {
        assert_eq!(Instruction::FCMLT_asimdmisc_FZ { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMLT_asimdmisc_FZ { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FABS_asimdmisc_R() {
        assert_eq!(Instruction::FABS_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FABS_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTP_asimdmisc_R() {
        assert_eq!(Instruction::FRINTP_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTP_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTZ_asimdmisc_R() {
        assert_eq!(Instruction::FRINTZ_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTZ_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPS_asimdmisc_R() {
        assert_eq!(Instruction::FCVTPS_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPS_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_asimdmisc_R() {
        assert_eq!(Instruction::FCVTZS_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_URECPE_asimdmisc_R() {
        assert_eq!(Instruction::URECPE_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::URECPE_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRECPE_asimdmisc_R() {
        assert_eq!(Instruction::FRECPE_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRECPE_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BRKN_p_p_pp() {
        assert_eq!(Instruction::BRKN_p_p_pp { Pg: 0, Pn: 0, Pdm: 0, }.encode().decode(), 
                   Instruction::BRKN_p_p_pp { Pg: 0, Pn: 0, Pdm: 0, })
    }
    #[test]
    fn roundtrip_BRKAS_p_p_p_z() {
        assert_eq!(Instruction::BRKAS_p_p_p_z { Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::BRKAS_p_p_p_z { Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_BRKNS_p_p_pp() {
        assert_eq!(Instruction::BRKNS_p_p_pp { Pg: 0, Pn: 0, Pdm: 0, }.encode().decode(), 
                   Instruction::BRKNS_p_p_pp { Pg: 0, Pn: 0, Pdm: 0, })
    }
    #[test]
    fn roundtrip_BRKBS_p_p_p_z() {
        assert_eq!(Instruction::BRKBS_p_p_p_z { Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::BRKBS_p_p_p_z { Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FCVTXN_asimdmisc_N() {
        assert_eq!(Instruction::FCVTXN_asimdmisc_N { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTXN_asimdmisc_N { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTA_asimdmisc_R() {
        assert_eq!(Instruction::FRINTA_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTA_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTX_asimdmisc_R() {
        assert_eq!(Instruction::FRINTX_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTX_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTNU_asimdmisc_R() {
        assert_eq!(Instruction::FCVTNU_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTNU_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTMU_asimdmisc_R() {
        assert_eq!(Instruction::FCVTMU_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTMU_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTAU_asimdmisc_R() {
        assert_eq!(Instruction::FCVTAU_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTAU_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_asimdmisc_R() {
        assert_eq!(Instruction::UCVTF_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINT32X_asimdmisc_R() {
        assert_eq!(Instruction::FRINT32X_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINT32X_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINT64X_asimdmisc_R() {
        assert_eq!(Instruction::FRINT64X_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINT64X_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAXNMV_asimdall_only_SD() {
        assert_eq!(Instruction::FMAXNMV_asimdall_only_SD { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXNMV_asimdall_only_SD { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAXV_asimdall_only_SD() {
        assert_eq!(Instruction::FMAXV_asimdall_only_SD { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXV_asimdall_only_SD { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGE_asimdmisc_FZ() {
        assert_eq!(Instruction::FCMGE_asimdmisc_FZ { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMGE_asimdmisc_FZ { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMLE_asimdmisc_FZ() {
        assert_eq!(Instruction::FCMLE_asimdmisc_FZ { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMLE_asimdmisc_FZ { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FNEG_asimdmisc_R() {
        assert_eq!(Instruction::FNEG_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FNEG_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRINTI_asimdmisc_R() {
        assert_eq!(Instruction::FRINTI_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRINTI_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTPU_asimdmisc_R() {
        assert_eq!(Instruction::FCVTPU_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTPU_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_asimdmisc_R() {
        assert_eq!(Instruction::FCVTZU_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_URSQRTE_asimdmisc_R() {
        assert_eq!(Instruction::URSQRTE_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::URSQRTE_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRSQRTE_asimdmisc_R() {
        assert_eq!(Instruction::FRSQRTE_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRSQRTE_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FSQRT_asimdmisc_R() {
        assert_eq!(Instruction::FSQRT_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FSQRT_asimdmisc_R { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINNMV_asimdall_only_SD() {
        assert_eq!(Instruction::FMINNMV_asimdall_only_SD { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINNMV_asimdall_only_SD { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINV_asimdall_only_SD() {
        assert_eq!(Instruction::FMINV_asimdall_only_SD { Q: 0, sz: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINV_asimdall_only_SD { Q: 0, sz: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUQADD_asisdmisc_R() {
        assert_eq!(Instruction::SUQADD_asisdmisc_R { size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUQADD_asisdmisc_R { size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQABS_asisdmisc_R() {
        assert_eq!(Instruction::SQABS_asisdmisc_R { size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQABS_asisdmisc_R { size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMGT_asisdmisc_Z() {
        assert_eq!(Instruction::CMGT_asisdmisc_Z { size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMGT_asisdmisc_Z { size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMEQ_asisdmisc_Z() {
        assert_eq!(Instruction::CMEQ_asisdmisc_Z { size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMEQ_asisdmisc_Z { size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMLT_asisdmisc_Z() {
        assert_eq!(Instruction::CMLT_asisdmisc_Z { size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMLT_asisdmisc_Z { size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ABS_asisdmisc_R() {
        assert_eq!(Instruction::ABS_asisdmisc_R { size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ABS_asisdmisc_R { size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQXTN_asisdmisc_N() {
        assert_eq!(Instruction::SQXTN_asisdmisc_N { size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQXTN_asisdmisc_N { size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADDP_asisdpair_only() {
        assert_eq!(Instruction::ADDP_asisdpair_only { size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADDP_asisdpair_only { size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRECPE_z_z() {
        assert_eq!(Instruction::FRECPE_z_z { size: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FRECPE_z_z { size: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FRSQRTE_z_z() {
        assert_eq!(Instruction::FRSQRTE_z_z { size: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FRSQRTE_z_z { size: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_USQADD_asisdmisc_R() {
        assert_eq!(Instruction::USQADD_asisdmisc_R { size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::USQADD_asisdmisc_R { size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQNEG_asisdmisc_R() {
        assert_eq!(Instruction::SQNEG_asisdmisc_R { size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQNEG_asisdmisc_R { size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMGE_asisdmisc_Z() {
        assert_eq!(Instruction::CMGE_asisdmisc_Z { size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMGE_asisdmisc_Z { size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMLE_asisdmisc_Z() {
        assert_eq!(Instruction::CMLE_asisdmisc_Z { size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMLE_asisdmisc_Z { size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_NEG_asisdmisc_R() {
        assert_eq!(Instruction::NEG_asisdmisc_R { size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::NEG_asisdmisc_R { size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQXTUN_asisdmisc_N() {
        assert_eq!(Instruction::SQXTUN_asisdmisc_N { size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQXTUN_asisdmisc_N { size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UQXTN_asisdmisc_N() {
        assert_eq!(Instruction::UQXTN_asisdmisc_N { size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UQXTN_asisdmisc_N { size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_AT_SYS_CR_systeminstrs() {
        assert_eq!(Instruction::AT_SYS_CR_systeminstrs { op1: 0, CRm: 0, op2: 0, Rt: 0, }.encode().decode(), 
                   Instruction::AT_SYS_CR_systeminstrs { op1: 0, CRm: 0, op2: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST4_asisdlse_R4() {
        assert_eq!(Instruction::ST4_asisdlse_R4 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST4_asisdlse_R4 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlse_R4_4v() {
        assert_eq!(Instruction::ST1_asisdlse_R4_4v { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlse_R4_4v { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST3_asisdlse_R3() {
        assert_eq!(Instruction::ST3_asisdlse_R3 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST3_asisdlse_R3 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlse_R3_3v() {
        assert_eq!(Instruction::ST1_asisdlse_R3_3v { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlse_R3_3v { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlse_R1_1v() {
        assert_eq!(Instruction::ST1_asisdlse_R1_1v { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlse_R1_1v { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST2_asisdlse_R2() {
        assert_eq!(Instruction::ST2_asisdlse_R2 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST2_asisdlse_R2 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlse_R2_2v() {
        assert_eq!(Instruction::ST1_asisdlse_R2_2v { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlse_R2_2v { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4_asisdlse_R4() {
        assert_eq!(Instruction::LD4_asisdlse_R4 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4_asisdlse_R4 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlse_R4_4v() {
        assert_eq!(Instruction::LD1_asisdlse_R4_4v { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlse_R4_4v { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3_asisdlse_R3() {
        assert_eq!(Instruction::LD3_asisdlse_R3 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3_asisdlse_R3 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlse_R3_3v() {
        assert_eq!(Instruction::LD1_asisdlse_R3_3v { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlse_R3_3v { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlse_R1_1v() {
        assert_eq!(Instruction::LD1_asisdlse_R1_1v { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlse_R1_1v { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2_asisdlse_R2() {
        assert_eq!(Instruction::LD2_asisdlse_R2 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2_asisdlse_R2 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlse_R2_2v() {
        assert_eq!(Instruction::LD1_asisdlse_R2_2v { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlse_R2_2v { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST4_asisdlsep_I4_i() {
        assert_eq!(Instruction::ST4_asisdlsep_I4_i { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST4_asisdlsep_I4_i { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlsep_I4_i4() {
        assert_eq!(Instruction::ST1_asisdlsep_I4_i4 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlsep_I4_i4 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST3_asisdlsep_I3_i() {
        assert_eq!(Instruction::ST3_asisdlsep_I3_i { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST3_asisdlsep_I3_i { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlsep_I3_i3() {
        assert_eq!(Instruction::ST1_asisdlsep_I3_i3 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlsep_I3_i3 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlsep_I1_i1() {
        assert_eq!(Instruction::ST1_asisdlsep_I1_i1 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlsep_I1_i1 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST2_asisdlsep_I2_i() {
        assert_eq!(Instruction::ST2_asisdlsep_I2_i { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST2_asisdlsep_I2_i { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlsep_I2_i2() {
        assert_eq!(Instruction::ST1_asisdlsep_I2_i2 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlsep_I2_i2 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4_asisdlsep_I4_i() {
        assert_eq!(Instruction::LD4_asisdlsep_I4_i { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4_asisdlsep_I4_i { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlsep_I4_i4() {
        assert_eq!(Instruction::LD1_asisdlsep_I4_i4 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlsep_I4_i4 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3_asisdlsep_I3_i() {
        assert_eq!(Instruction::LD3_asisdlsep_I3_i { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3_asisdlsep_I3_i { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlsep_I3_i3() {
        assert_eq!(Instruction::LD1_asisdlsep_I3_i3 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlsep_I3_i3 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlsep_I1_i1() {
        assert_eq!(Instruction::LD1_asisdlsep_I1_i1 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlsep_I1_i1 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2_asisdlsep_I2_i() {
        assert_eq!(Instruction::LD2_asisdlsep_I2_i { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2_asisdlsep_I2_i { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlsep_I2_i2() {
        assert_eq!(Instruction::LD1_asisdlsep_I2_i2 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlsep_I2_i2 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlso_H1_1h() {
        assert_eq!(Instruction::ST1_asisdlso_H1_1h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlso_H1_1h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST3_asisdlso_H3_3h() {
        assert_eq!(Instruction::ST3_asisdlso_H3_3h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST3_asisdlso_H3_3h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST2_asisdlso_H2_2h() {
        assert_eq!(Instruction::ST2_asisdlso_H2_2h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST2_asisdlso_H2_2h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST4_asisdlso_H4_4h() {
        assert_eq!(Instruction::ST4_asisdlso_H4_4h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST4_asisdlso_H4_4h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlso_H1_1h() {
        assert_eq!(Instruction::LD1_asisdlso_H1_1h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlso_H1_1h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3_asisdlso_H3_3h() {
        assert_eq!(Instruction::LD3_asisdlso_H3_3h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3_asisdlso_H3_3h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1R_asisdlso_R1() {
        assert_eq!(Instruction::LD1R_asisdlso_R1 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1R_asisdlso_R1 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3R_asisdlso_R3() {
        assert_eq!(Instruction::LD3R_asisdlso_R3 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3R_asisdlso_R3 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2_asisdlso_H2_2h() {
        assert_eq!(Instruction::LD2_asisdlso_H2_2h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2_asisdlso_H2_2h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4_asisdlso_H4_4h() {
        assert_eq!(Instruction::LD4_asisdlso_H4_4h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4_asisdlso_H4_4h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2R_asisdlso_R2() {
        assert_eq!(Instruction::LD2R_asisdlso_R2 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2R_asisdlso_R2 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4R_asisdlso_R4() {
        assert_eq!(Instruction::LD4R_asisdlso_R4 { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4R_asisdlso_R4 { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlsop_H1_i1h() {
        assert_eq!(Instruction::ST1_asisdlsop_H1_i1h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlsop_H1_i1h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST3_asisdlsop_H3_i3h() {
        assert_eq!(Instruction::ST3_asisdlsop_H3_i3h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST3_asisdlsop_H3_i3h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST2_asisdlsop_H2_i2h() {
        assert_eq!(Instruction::ST2_asisdlsop_H2_i2h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST2_asisdlsop_H2_i2h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST4_asisdlsop_H4_i4h() {
        assert_eq!(Instruction::ST4_asisdlsop_H4_i4h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST4_asisdlsop_H4_i4h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlsop_H1_i1h() {
        assert_eq!(Instruction::LD1_asisdlsop_H1_i1h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlsop_H1_i1h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3_asisdlsop_H3_i3h() {
        assert_eq!(Instruction::LD3_asisdlsop_H3_i3h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3_asisdlsop_H3_i3h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1R_asisdlsop_R1_i() {
        assert_eq!(Instruction::LD1R_asisdlsop_R1_i { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1R_asisdlsop_R1_i { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3R_asisdlsop_R3_i() {
        assert_eq!(Instruction::LD3R_asisdlsop_R3_i { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3R_asisdlsop_R3_i { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2_asisdlsop_H2_i2h() {
        assert_eq!(Instruction::LD2_asisdlsop_H2_i2h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2_asisdlsop_H2_i2h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4_asisdlsop_H4_i4h() {
        assert_eq!(Instruction::LD4_asisdlsop_H4_i4h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4_asisdlsop_H4_i4h { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2R_asisdlsop_R2_i() {
        assert_eq!(Instruction::LD2R_asisdlsop_R2_i { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2R_asisdlsop_R2_i { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4R_asisdlsop_R4_i() {
        assert_eq!(Instruction::LD4R_asisdlsop_R4_i { Q: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4R_asisdlsop_R4_i { Q: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_REV64_asimdmisc_R() {
        assert_eq!(Instruction::REV64_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::REV64_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_REV16_asimdmisc_R() {
        assert_eq!(Instruction::REV16_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::REV16_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SADDLP_asimdmisc_P() {
        assert_eq!(Instruction::SADDLP_asimdmisc_P { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SADDLP_asimdmisc_P { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUQADD_asimdmisc_R() {
        assert_eq!(Instruction::SUQADD_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUQADD_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CLS_asimdmisc_R() {
        assert_eq!(Instruction::CLS_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CLS_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CNT_asimdmisc_R() {
        assert_eq!(Instruction::CNT_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CNT_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SADALP_asimdmisc_P() {
        assert_eq!(Instruction::SADALP_asimdmisc_P { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SADALP_asimdmisc_P { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQABS_asimdmisc_R() {
        assert_eq!(Instruction::SQABS_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQABS_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMGT_asimdmisc_Z() {
        assert_eq!(Instruction::CMGT_asimdmisc_Z { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMGT_asimdmisc_Z { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMEQ_asimdmisc_Z() {
        assert_eq!(Instruction::CMEQ_asimdmisc_Z { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMEQ_asimdmisc_Z { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMLT_asimdmisc_Z() {
        assert_eq!(Instruction::CMLT_asimdmisc_Z { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMLT_asimdmisc_Z { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ABS_asimdmisc_R() {
        assert_eq!(Instruction::ABS_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ABS_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_XTN_asimdmisc_N() {
        assert_eq!(Instruction::XTN_asimdmisc_N { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::XTN_asimdmisc_N { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQXTN_asimdmisc_N() {
        assert_eq!(Instruction::SQXTN_asimdmisc_N { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQXTN_asimdmisc_N { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SADDLV_asimdall_only() {
        assert_eq!(Instruction::SADDLV_asimdall_only { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SADDLV_asimdall_only { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMAXV_asimdall_only() {
        assert_eq!(Instruction::SMAXV_asimdall_only { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMAXV_asimdall_only { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMINV_asimdall_only() {
        assert_eq!(Instruction::SMINV_asimdall_only { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMINV_asimdall_only { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADDV_asimdall_only() {
        assert_eq!(Instruction::ADDV_asimdall_only { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADDV_asimdall_only { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_S_floatimm() {
        assert_eq!(Instruction::FMOV_S_floatimm { imm8: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_S_floatimm { imm8: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_D_floatimm() {
        assert_eq!(Instruction::FMOV_D_floatimm { imm8: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_D_floatimm { imm8: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_H_floatimm() {
        assert_eq!(Instruction::FMOV_H_floatimm { imm8: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_H_floatimm { imm8: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BRKA_p_p_p() {
        assert_eq!(Instruction::BRKA_p_p_p { Pg: 0, Pn: 0, M: 0, Pd: 0, }.encode().decode(), 
                   Instruction::BRKA_p_p_p { Pg: 0, Pn: 0, M: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_BRKB_p_p_p() {
        assert_eq!(Instruction::BRKB_p_p_p { Pg: 0, Pn: 0, M: 0, Pd: 0, }.encode().decode(), 
                   Instruction::BRKB_p_p_p { Pg: 0, Pn: 0, M: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_REV32_asimdmisc_R() {
        assert_eq!(Instruction::REV32_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::REV32_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UADDLP_asimdmisc_P() {
        assert_eq!(Instruction::UADDLP_asimdmisc_P { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UADDLP_asimdmisc_P { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_USQADD_asimdmisc_R() {
        assert_eq!(Instruction::USQADD_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::USQADD_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CLZ_asimdmisc_R() {
        assert_eq!(Instruction::CLZ_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CLZ_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UADALP_asimdmisc_P() {
        assert_eq!(Instruction::UADALP_asimdmisc_P { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UADALP_asimdmisc_P { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQNEG_asimdmisc_R() {
        assert_eq!(Instruction::SQNEG_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQNEG_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMGE_asimdmisc_Z() {
        assert_eq!(Instruction::CMGE_asimdmisc_Z { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMGE_asimdmisc_Z { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMLE_asimdmisc_Z() {
        assert_eq!(Instruction::CMLE_asimdmisc_Z { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMLE_asimdmisc_Z { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_NEG_asimdmisc_R() {
        assert_eq!(Instruction::NEG_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::NEG_asimdmisc_R { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQXTUN_asimdmisc_N() {
        assert_eq!(Instruction::SQXTUN_asimdmisc_N { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQXTUN_asimdmisc_N { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHLL_asimdmisc_S() {
        assert_eq!(Instruction::SHLL_asimdmisc_S { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHLL_asimdmisc_S { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UQXTN_asimdmisc_N() {
        assert_eq!(Instruction::UQXTN_asimdmisc_N { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UQXTN_asimdmisc_N { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UADDLV_asimdall_only() {
        assert_eq!(Instruction::UADDLV_asimdall_only { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UADDLV_asimdall_only { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMAXV_asimdall_only() {
        assert_eq!(Instruction::UMAXV_asimdall_only { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMAXV_asimdall_only { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMINV_asimdall_only() {
        assert_eq!(Instruction::UMINV_asimdall_only { Q: 0, size: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMINV_asimdall_only { Q: 0, size: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOVI_asimdimm_D_ds() {
        assert_eq!(Instruction::MOVI_asimdimm_D_ds { a: 0, b: 0, c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOVI_asimdimm_D_ds { a: 0, b: 0, c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BFCVTNT_z_p_z_s2bf() {
        assert_eq!(Instruction::BFCVTNT_z_p_z_s2bf { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::BFCVTNT_z_p_z_s2bf { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_z_p_z_h2fp16() {
        assert_eq!(Instruction::SCVTF_z_p_z_h2fp16 { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::SCVTF_z_p_z_h2fp16 { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_z_p_z_h2fp16() {
        assert_eq!(Instruction::UCVTF_z_p_z_h2fp16 { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UCVTF_z_p_z_h2fp16 { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_z_p_z_w2fp16() {
        assert_eq!(Instruction::SCVTF_z_p_z_w2fp16 { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::SCVTF_z_p_z_w2fp16 { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_z_p_z_w2fp16() {
        assert_eq!(Instruction::UCVTF_z_p_z_w2fp16 { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UCVTF_z_p_z_w2fp16 { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_z_p_z_x2fp16() {
        assert_eq!(Instruction::SCVTF_z_p_z_x2fp16 { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::SCVTF_z_p_z_x2fp16 { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_z_p_z_x2fp16() {
        assert_eq!(Instruction::UCVTF_z_p_z_x2fp16 { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UCVTF_z_p_z_x2fp16 { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_z_p_z_fp162h() {
        assert_eq!(Instruction::FCVTZS_z_p_z_fp162h { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_z_p_z_fp162h { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_z_p_z_fp162h() {
        assert_eq!(Instruction::FCVTZU_z_p_z_fp162h { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_z_p_z_fp162h { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_z_p_z_fp162w() {
        assert_eq!(Instruction::FCVTZS_z_p_z_fp162w { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_z_p_z_fp162w { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_z_p_z_fp162w() {
        assert_eq!(Instruction::FCVTZU_z_p_z_fp162w { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_z_p_z_fp162w { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_z_p_z_fp162x() {
        assert_eq!(Instruction::FCVTZS_z_p_z_fp162x { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_z_p_z_fp162x { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_z_p_z_fp162x() {
        assert_eq!(Instruction::FCVTZU_z_p_z_fp162x { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_z_p_z_fp162x { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVT_z_p_z_s2h() {
        assert_eq!(Instruction::FCVT_z_p_z_s2h { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVT_z_p_z_s2h { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVT_z_p_z_h2s() {
        assert_eq!(Instruction::FCVT_z_p_z_h2s { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVT_z_p_z_h2s { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_BFCVT_z_p_z_s2bf() {
        assert_eq!(Instruction::BFCVT_z_p_z_s2bf { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::BFCVT_z_p_z_s2bf { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_z_p_z_w2s() {
        assert_eq!(Instruction::SCVTF_z_p_z_w2s { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::SCVTF_z_p_z_w2s { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_z_p_z_w2s() {
        assert_eq!(Instruction::UCVTF_z_p_z_w2s { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UCVTF_z_p_z_w2s { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_z_p_z_s2w() {
        assert_eq!(Instruction::FCVTZS_z_p_z_s2w { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_z_p_z_s2w { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_z_p_z_s2w() {
        assert_eq!(Instruction::FCVTZU_z_p_z_s2w { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_z_p_z_s2w { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVT_z_p_z_d2h() {
        assert_eq!(Instruction::FCVT_z_p_z_d2h { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVT_z_p_z_d2h { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVT_z_p_z_h2d() {
        assert_eq!(Instruction::FCVT_z_p_z_h2d { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVT_z_p_z_h2d { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVT_z_p_z_d2s() {
        assert_eq!(Instruction::FCVT_z_p_z_d2s { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVT_z_p_z_d2s { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVT_z_p_z_s2d() {
        assert_eq!(Instruction::FCVT_z_p_z_s2d { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVT_z_p_z_s2d { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_z_p_z_w2d() {
        assert_eq!(Instruction::SCVTF_z_p_z_w2d { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::SCVTF_z_p_z_w2d { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_z_p_z_w2d() {
        assert_eq!(Instruction::UCVTF_z_p_z_w2d { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UCVTF_z_p_z_w2d { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_z_p_z_x2s() {
        assert_eq!(Instruction::SCVTF_z_p_z_x2s { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::SCVTF_z_p_z_x2s { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_z_p_z_x2s() {
        assert_eq!(Instruction::UCVTF_z_p_z_x2s { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UCVTF_z_p_z_x2s { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_z_p_z_x2d() {
        assert_eq!(Instruction::SCVTF_z_p_z_x2d { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::SCVTF_z_p_z_x2d { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_z_p_z_x2d() {
        assert_eq!(Instruction::UCVTF_z_p_z_x2d { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UCVTF_z_p_z_x2d { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_z_p_z_d2w() {
        assert_eq!(Instruction::FCVTZS_z_p_z_d2w { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_z_p_z_d2w { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_z_p_z_d2w() {
        assert_eq!(Instruction::FCVTZU_z_p_z_d2w { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_z_p_z_d2w { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_z_p_z_s2x() {
        assert_eq!(Instruction::FCVTZS_z_p_z_s2x { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_z_p_z_s2x { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_z_p_z_s2x() {
        assert_eq!(Instruction::FCVTZU_z_p_z_s2x { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_z_p_z_s2x { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_z_p_z_d2x() {
        assert_eq!(Instruction::FCVTZS_z_p_z_d2x { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_z_p_z_d2x { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_z_p_z_d2x() {
        assert_eq!(Instruction::FCVTZU_z_p_z_d2x { Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_z_p_z_d2x { Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_MOVI_asimdimm_D2_d() {
        assert_eq!(Instruction::MOVI_asimdimm_D2_d { a: 0, b: 0, c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOVI_asimdimm_D2_d { a: 0, b: 0, c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_asimdimm_D2_d() {
        assert_eq!(Instruction::FMOV_asimdimm_D2_d { a: 0, b: 0, c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_asimdimm_D2_d { a: 0, b: 0, c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CNTB_r_s() {
        assert_eq!(Instruction::CNTB_r_s { imm4: 0, pattern: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CNTB_r_s { imm4: 0, pattern: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQINCB_r_rs_sx() {
        assert_eq!(Instruction::SQINCB_r_rs_sx { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQINCB_r_rs_sx { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQINCB_r_rs_uw() {
        assert_eq!(Instruction::UQINCB_r_rs_uw { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQINCB_r_rs_uw { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQDECB_r_rs_sx() {
        assert_eq!(Instruction::SQDECB_r_rs_sx { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQDECB_r_rs_sx { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQDECB_r_rs_uw() {
        assert_eq!(Instruction::UQDECB_r_rs_uw { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQDECB_r_rs_uw { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_INCB_r_rs() {
        assert_eq!(Instruction::INCB_r_rs { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::INCB_r_rs { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_DECB_r_rs() {
        assert_eq!(Instruction::DECB_r_rs { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::DECB_r_rs { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQINCB_r_rs_x() {
        assert_eq!(Instruction::SQINCB_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQINCB_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQINCB_r_rs_x() {
        assert_eq!(Instruction::UQINCB_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQINCB_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQDECB_r_rs_x() {
        assert_eq!(Instruction::SQDECB_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQDECB_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQDECB_r_rs_x() {
        assert_eq!(Instruction::UQDECB_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQDECB_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQINCH_z_zs() {
        assert_eq!(Instruction::SQINCH_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SQINCH_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UQINCH_z_zs() {
        assert_eq!(Instruction::UQINCH_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UQINCH_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SQDECH_z_zs() {
        assert_eq!(Instruction::SQDECH_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SQDECH_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UQDECH_z_zs() {
        assert_eq!(Instruction::UQDECH_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UQDECH_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_CNTH_r_s() {
        assert_eq!(Instruction::CNTH_r_s { imm4: 0, pattern: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CNTH_r_s { imm4: 0, pattern: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQINCH_r_rs_sx() {
        assert_eq!(Instruction::SQINCH_r_rs_sx { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQINCH_r_rs_sx { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQINCH_r_rs_uw() {
        assert_eq!(Instruction::UQINCH_r_rs_uw { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQINCH_r_rs_uw { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQDECH_r_rs_sx() {
        assert_eq!(Instruction::SQDECH_r_rs_sx { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQDECH_r_rs_sx { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQDECH_r_rs_uw() {
        assert_eq!(Instruction::UQDECH_r_rs_uw { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQDECH_r_rs_uw { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_INCH_z_zs() {
        assert_eq!(Instruction::INCH_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::INCH_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_DECH_z_zs() {
        assert_eq!(Instruction::DECH_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::DECH_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_INCH_r_rs() {
        assert_eq!(Instruction::INCH_r_rs { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::INCH_r_rs { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_DECH_r_rs() {
        assert_eq!(Instruction::DECH_r_rs { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::DECH_r_rs { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQINCH_r_rs_x() {
        assert_eq!(Instruction::SQINCH_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQINCH_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQINCH_r_rs_x() {
        assert_eq!(Instruction::UQINCH_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQINCH_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQDECH_r_rs_x() {
        assert_eq!(Instruction::SQDECH_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQDECH_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQDECH_r_rs_x() {
        assert_eq!(Instruction::UQDECH_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQDECH_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQINCW_z_zs() {
        assert_eq!(Instruction::SQINCW_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SQINCW_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UQINCW_z_zs() {
        assert_eq!(Instruction::UQINCW_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UQINCW_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SQDECW_z_zs() {
        assert_eq!(Instruction::SQDECW_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SQDECW_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UQDECW_z_zs() {
        assert_eq!(Instruction::UQDECW_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UQDECW_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_CNTW_r_s() {
        assert_eq!(Instruction::CNTW_r_s { imm4: 0, pattern: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CNTW_r_s { imm4: 0, pattern: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQINCW_r_rs_sx() {
        assert_eq!(Instruction::SQINCW_r_rs_sx { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQINCW_r_rs_sx { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQINCW_r_rs_uw() {
        assert_eq!(Instruction::UQINCW_r_rs_uw { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQINCW_r_rs_uw { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQDECW_r_rs_sx() {
        assert_eq!(Instruction::SQDECW_r_rs_sx { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQDECW_r_rs_sx { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQDECW_r_rs_uw() {
        assert_eq!(Instruction::UQDECW_r_rs_uw { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQDECW_r_rs_uw { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_INCW_z_zs() {
        assert_eq!(Instruction::INCW_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::INCW_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_DECW_z_zs() {
        assert_eq!(Instruction::DECW_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::DECW_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_INCW_r_rs() {
        assert_eq!(Instruction::INCW_r_rs { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::INCW_r_rs { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_DECW_r_rs() {
        assert_eq!(Instruction::DECW_r_rs { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::DECW_r_rs { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQINCW_r_rs_x() {
        assert_eq!(Instruction::SQINCW_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQINCW_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQINCW_r_rs_x() {
        assert_eq!(Instruction::UQINCW_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQINCW_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQDECW_r_rs_x() {
        assert_eq!(Instruction::SQDECW_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQDECW_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQDECW_r_rs_x() {
        assert_eq!(Instruction::UQDECW_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQDECW_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQINCD_z_zs() {
        assert_eq!(Instruction::SQINCD_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SQINCD_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UQINCD_z_zs() {
        assert_eq!(Instruction::UQINCD_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UQINCD_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SQDECD_z_zs() {
        assert_eq!(Instruction::SQDECD_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SQDECD_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UQDECD_z_zs() {
        assert_eq!(Instruction::UQDECD_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UQDECD_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_CNTD_r_s() {
        assert_eq!(Instruction::CNTD_r_s { imm4: 0, pattern: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CNTD_r_s { imm4: 0, pattern: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQINCD_r_rs_sx() {
        assert_eq!(Instruction::SQINCD_r_rs_sx { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQINCD_r_rs_sx { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQINCD_r_rs_uw() {
        assert_eq!(Instruction::UQINCD_r_rs_uw { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQINCD_r_rs_uw { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQDECD_r_rs_sx() {
        assert_eq!(Instruction::SQDECD_r_rs_sx { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQDECD_r_rs_sx { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQDECD_r_rs_uw() {
        assert_eq!(Instruction::UQDECD_r_rs_uw { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQDECD_r_rs_uw { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_INCD_z_zs() {
        assert_eq!(Instruction::INCD_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::INCD_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_DECD_z_zs() {
        assert_eq!(Instruction::DECD_z_zs { imm4: 0, pattern: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::DECD_z_zs { imm4: 0, pattern: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_INCD_r_rs() {
        assert_eq!(Instruction::INCD_r_rs { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::INCD_r_rs { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_DECD_r_rs() {
        assert_eq!(Instruction::DECD_r_rs { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::DECD_r_rs { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQINCD_r_rs_x() {
        assert_eq!(Instruction::SQINCD_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQINCD_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQINCD_r_rs_x() {
        assert_eq!(Instruction::UQINCD_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQINCD_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_SQDECD_r_rs_x() {
        assert_eq!(Instruction::SQDECD_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::SQDECD_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_UQDECD_r_rs_x() {
        assert_eq!(Instruction::UQDECD_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::UQDECD_r_rs_x { imm4: 0, pattern: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_ZIP1_p_pp() {
        assert_eq!(Instruction::ZIP1_p_pp { size: 0, Pm: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::ZIP1_p_pp { size: 0, Pm: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_ZIP2_p_pp() {
        assert_eq!(Instruction::ZIP2_p_pp { size: 0, Pm: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::ZIP2_p_pp { size: 0, Pm: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_UZP1_p_pp() {
        assert_eq!(Instruction::UZP1_p_pp { size: 0, Pm: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::UZP1_p_pp { size: 0, Pm: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_UZP2_p_pp() {
        assert_eq!(Instruction::UZP2_p_pp { size: 0, Pm: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::UZP2_p_pp { size: 0, Pm: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_TRN1_p_pp() {
        assert_eq!(Instruction::TRN1_p_pp { size: 0, Pm: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::TRN1_p_pp { size: 0, Pm: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_TRN2_p_pp() {
        assert_eq!(Instruction::TRN2_p_pp { size: 0, Pm: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::TRN2_p_pp { size: 0, Pm: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlso_B1_1b() {
        assert_eq!(Instruction::ST1_asisdlso_B1_1b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlso_B1_1b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST3_asisdlso_B3_3b() {
        assert_eq!(Instruction::ST3_asisdlso_B3_3b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST3_asisdlso_B3_3b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST2_asisdlso_B2_2b() {
        assert_eq!(Instruction::ST2_asisdlso_B2_2b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST2_asisdlso_B2_2b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST4_asisdlso_B4_4b() {
        assert_eq!(Instruction::ST4_asisdlso_B4_4b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST4_asisdlso_B4_4b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlso_B1_1b() {
        assert_eq!(Instruction::LD1_asisdlso_B1_1b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlso_B1_1b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3_asisdlso_B3_3b() {
        assert_eq!(Instruction::LD3_asisdlso_B3_3b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3_asisdlso_B3_3b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2_asisdlso_B2_2b() {
        assert_eq!(Instruction::LD2_asisdlso_B2_2b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2_asisdlso_B2_2b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4_asisdlso_B4_4b() {
        assert_eq!(Instruction::LD4_asisdlso_B4_4b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4_asisdlso_B4_4b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlsop_B1_i1b() {
        assert_eq!(Instruction::ST1_asisdlsop_B1_i1b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlsop_B1_i1b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST3_asisdlsop_B3_i3b() {
        assert_eq!(Instruction::ST3_asisdlsop_B3_i3b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST3_asisdlsop_B3_i3b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST2_asisdlsop_B2_i2b() {
        assert_eq!(Instruction::ST2_asisdlsop_B2_i2b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST2_asisdlsop_B2_i2b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST4_asisdlsop_B4_i4b() {
        assert_eq!(Instruction::ST4_asisdlsop_B4_i4b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST4_asisdlsop_B4_i4b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlsop_B1_i1b() {
        assert_eq!(Instruction::LD1_asisdlsop_B1_i1b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlsop_B1_i1b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3_asisdlsop_B3_i3b() {
        assert_eq!(Instruction::LD3_asisdlsop_B3_i3b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3_asisdlsop_B3_i3b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2_asisdlsop_B2_i2b() {
        assert_eq!(Instruction::LD2_asisdlsop_B2_i2b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2_asisdlsop_B2_i2b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4_asisdlsop_B4_i4b() {
        assert_eq!(Instruction::LD4_asisdlsop_B4_i4b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4_asisdlsop_B4_i4b { Q: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_MOVI_asimdimm_N_b() {
        assert_eq!(Instruction::MOVI_asimdimm_N_b { Q: 0, a: 0, b: 0, c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOVI_asimdimm_N_b { Q: 0, a: 0, b: 0, c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_asimdimm_S_s() {
        assert_eq!(Instruction::FMOV_asimdimm_S_s { Q: 0, a: 0, b: 0, c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_asimdimm_S_s { Q: 0, a: 0, b: 0, c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_asimdimm_H_h() {
        assert_eq!(Instruction::FMOV_asimdimm_H_h { Q: 0, a: 0, b: 0, c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMOV_asimdimm_H_h { Q: 0, a: 0, b: 0, c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGE_p_p_z0() {
        assert_eq!(Instruction::FCMGE_p_p_z0 { size: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FCMGE_p_p_z0 { size: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FCMGT_p_p_z0() {
        assert_eq!(Instruction::FCMGT_p_p_z0 { size: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FCMGT_p_p_z0 { size: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FCMLT_p_p_z0() {
        assert_eq!(Instruction::FCMLT_p_p_z0 { size: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FCMLT_p_p_z0 { size: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FCMLE_p_p_z0() {
        assert_eq!(Instruction::FCMLE_p_p_z0 { size: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FCMLE_p_p_z0 { size: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FCMEQ_p_p_z0() {
        assert_eq!(Instruction::FCMEQ_p_p_z0 { size: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FCMEQ_p_p_z0 { size: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FCMNE_p_p_z0() {
        assert_eq!(Instruction::FCMNE_p_p_z0 { size: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FCMNE_p_p_z0 { size: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_SXTL_SSHLL_asimdshf_L() {
        assert_eq!(Instruction::SXTL_SSHLL_asimdshf_L { Q: 0, immh: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SXTL_SSHLL_asimdshf_L { Q: 0, immh: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UXTL_USHLL_asimdshf_L() {
        assert_eq!(Instruction::UXTL_USHLL_asimdshf_L { Q: 0, immh: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UXTL_USHLL_asimdshf_L { Q: 0, immh: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADD_z_p_zz() {
        assert_eq!(Instruction::ADD_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::ADD_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SADDV_r_p_z() {
        assert_eq!(Instruction::SADDV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, }.encode().decode(), 
                   Instruction::SADDV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, })
    }
    #[test]
    fn roundtrip_ASR_z_p_zi() {
        assert_eq!(Instruction::ASR_z_p_zi { tszh: 0, Pg: 0, tszl: 0, imm3: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::ASR_z_p_zi { tszh: 0, Pg: 0, tszl: 0, imm3: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SUB_z_p_zz() {
        assert_eq!(Instruction::SUB_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SUB_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UADDV_r_p_z() {
        assert_eq!(Instruction::UADDV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, }.encode().decode(), 
                   Instruction::UADDV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, })
    }
    #[test]
    fn roundtrip_LSR_z_p_zi() {
        assert_eq!(Instruction::LSR_z_p_zi { tszh: 0, Pg: 0, tszl: 0, imm3: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::LSR_z_p_zi { tszh: 0, Pg: 0, tszl: 0, imm3: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SUBR_z_p_zz() {
        assert_eq!(Instruction::SUBR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SUBR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_LSL_z_p_zi() {
        assert_eq!(Instruction::LSL_z_p_zi { tszh: 0, Pg: 0, tszl: 0, imm3: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::LSL_z_p_zi { tszh: 0, Pg: 0, tszl: 0, imm3: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_ASRD_z_p_zi() {
        assert_eq!(Instruction::ASRD_z_p_zi { tszh: 0, Pg: 0, tszl: 0, imm3: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::ASRD_z_p_zi { tszh: 0, Pg: 0, tszl: 0, imm3: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SMAX_z_p_zz() {
        assert_eq!(Instruction::SMAX_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SMAX_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SMAXV_r_p_z() {
        assert_eq!(Instruction::SMAXV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, }.encode().decode(), 
                   Instruction::SMAXV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, })
    }
    #[test]
    fn roundtrip_UMAX_z_p_zz() {
        assert_eq!(Instruction::UMAX_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UMAX_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UMAXV_r_p_z() {
        assert_eq!(Instruction::UMAXV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, }.encode().decode(), 
                   Instruction::UMAXV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, })
    }
    #[test]
    fn roundtrip_SMIN_z_p_zz() {
        assert_eq!(Instruction::SMIN_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SMIN_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SMINV_r_p_z() {
        assert_eq!(Instruction::SMINV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, }.encode().decode(), 
                   Instruction::SMINV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, })
    }
    #[test]
    fn roundtrip_UMIN_z_p_zz() {
        assert_eq!(Instruction::UMIN_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UMIN_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UMINV_r_p_z() {
        assert_eq!(Instruction::UMINV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, }.encode().decode(), 
                   Instruction::UMINV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, })
    }
    #[test]
    fn roundtrip_SABD_z_p_zz() {
        assert_eq!(Instruction::SABD_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SABD_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UABD_z_p_zz() {
        assert_eq!(Instruction::UABD_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UABD_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_MUL_z_p_zz() {
        assert_eq!(Instruction::MUL_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::MUL_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_ASR_z_p_zz() {
        assert_eq!(Instruction::ASR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::ASR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SXTB_z_p_z() {
        assert_eq!(Instruction::SXTB_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::SXTB_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_LSR_z_p_zz() {
        assert_eq!(Instruction::LSR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::LSR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UXTB_z_p_z() {
        assert_eq!(Instruction::UXTB_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UXTB_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_SMULH_z_p_zz() {
        assert_eq!(Instruction::SMULH_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SMULH_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SXTH_z_p_z() {
        assert_eq!(Instruction::SXTH_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::SXTH_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UMULH_z_p_zz() {
        assert_eq!(Instruction::UMULH_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UMULH_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_LSL_z_p_zz() {
        assert_eq!(Instruction::LSL_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::LSL_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UXTH_z_p_z() {
        assert_eq!(Instruction::UXTH_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UXTH_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_SDIV_z_p_zz() {
        assert_eq!(Instruction::SDIV_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SDIV_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_ASRR_z_p_zz() {
        assert_eq!(Instruction::ASRR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::ASRR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SXTW_z_p_z() {
        assert_eq!(Instruction::SXTW_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::SXTW_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UDIV_z_p_zz() {
        assert_eq!(Instruction::UDIV_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UDIV_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_LSRR_z_p_zz() {
        assert_eq!(Instruction::LSRR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::LSRR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UXTW_z_p_z() {
        assert_eq!(Instruction::UXTW_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UXTW_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_SDIVR_z_p_zz() {
        assert_eq!(Instruction::SDIVR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SDIVR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_ABS_z_p_z() {
        assert_eq!(Instruction::ABS_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::ABS_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UDIVR_z_p_zz() {
        assert_eq!(Instruction::UDIVR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UDIVR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_LSLR_z_p_zz() {
        assert_eq!(Instruction::LSLR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::LSLR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_NEG_z_p_z() {
        assert_eq!(Instruction::NEG_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::NEG_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ORR_z_p_zz() {
        assert_eq!(Instruction::ORR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::ORR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_ORV_r_p_z() {
        assert_eq!(Instruction::ORV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, }.encode().decode(), 
                   Instruction::ORV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, })
    }
    #[test]
    fn roundtrip_ASR_z_p_zw() {
        assert_eq!(Instruction::ASR_z_p_zw { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::ASR_z_p_zw { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_CLS_z_p_z() {
        assert_eq!(Instruction::CLS_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::CLS_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_EOR_z_p_zz() {
        assert_eq!(Instruction::EOR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::EOR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_EORV_r_p_z() {
        assert_eq!(Instruction::EORV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, }.encode().decode(), 
                   Instruction::EORV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, })
    }
    #[test]
    fn roundtrip_LSR_z_p_zw() {
        assert_eq!(Instruction::LSR_z_p_zw { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::LSR_z_p_zw { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_CLZ_z_p_z() {
        assert_eq!(Instruction::CLZ_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::CLZ_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_AND_z_p_zz() {
        assert_eq!(Instruction::AND_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::AND_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_ANDV_r_p_z() {
        assert_eq!(Instruction::ANDV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, }.encode().decode(), 
                   Instruction::ANDV_r_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, })
    }
    #[test]
    fn roundtrip_CNT_z_p_z() {
        assert_eq!(Instruction::CNT_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::CNT_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_BIC_z_p_zz() {
        assert_eq!(Instruction::BIC_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::BIC_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_LSL_z_p_zw() {
        assert_eq!(Instruction::LSL_z_p_zw { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::LSL_z_p_zw { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_CNOT_z_p_z() {
        assert_eq!(Instruction::CNOT_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::CNOT_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FABS_z_p_z() {
        assert_eq!(Instruction::FABS_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FABS_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FNEG_z_p_z() {
        assert_eq!(Instruction::FNEG_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FNEG_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_NOT_z_p_z() {
        assert_eq!(Instruction::NOT_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::NOT_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_AND_z_zz() {
        assert_eq!(Instruction::AND_z_zz { Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::AND_z_zz { Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_MOV_orr_z_zz() {
        assert_eq!(Instruction::MOV_orr_z_zz { Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::MOV_orr_z_zz { Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ORR_z_zz() {
        assert_eq!(Instruction::ORR_z_zz { Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::ORR_z_zz { Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_EOR_z_zz() {
        assert_eq!(Instruction::EOR_z_zz { Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::EOR_z_zz { Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_BIC_z_zz() {
        assert_eq!(Instruction::BIC_z_zz { Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::BIC_z_zz { Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_CPY_z_p_v() {
        assert_eq!(Instruction::CPY_z_p_v { size: 0, Pg: 0, Vn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::CPY_z_p_v { size: 0, Pg: 0, Vn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_MOV_cpy_z_p_v() {
        assert_eq!(Instruction::MOV_cpy_z_p_v { size: 0, Pg: 0, Vn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::MOV_cpy_z_p_v { size: 0, Pg: 0, Vn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_LASTA_r_p_z() {
        assert_eq!(Instruction::LASTA_r_p_z { size: 0, Pg: 0, Zn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::LASTA_r_p_z { size: 0, Pg: 0, Zn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_COMPACT_z_p_z() {
        assert_eq!(Instruction::COMPACT_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::COMPACT_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_LASTB_r_p_z() {
        assert_eq!(Instruction::LASTB_r_p_z { size: 0, Pg: 0, Zn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::LASTB_r_p_z { size: 0, Pg: 0, Zn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_LASTA_v_p_z() {
        assert_eq!(Instruction::LASTA_v_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, }.encode().decode(), 
                   Instruction::LASTA_v_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, })
    }
    #[test]
    fn roundtrip_LASTB_v_p_z() {
        assert_eq!(Instruction::LASTB_v_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, }.encode().decode(), 
                   Instruction::LASTB_v_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, })
    }
    #[test]
    fn roundtrip_REVB_z_z() {
        assert_eq!(Instruction::REVB_z_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::REVB_z_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_REVH_z_z() {
        assert_eq!(Instruction::REVH_z_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::REVH_z_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_REVW_z_z() {
        assert_eq!(Instruction::REVW_z_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::REVW_z_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_RBIT_z_p_z() {
        assert_eq!(Instruction::RBIT_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::RBIT_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_CLASTA_z_p_zz() {
        assert_eq!(Instruction::CLASTA_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::CLASTA_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_CPY_z_p_r() {
        assert_eq!(Instruction::CPY_z_p_r { size: 0, Pg: 0, Rn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::CPY_z_p_r { size: 0, Pg: 0, Rn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_MOV_cpy_z_p_r() {
        assert_eq!(Instruction::MOV_cpy_z_p_r { size: 0, Pg: 0, Rn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::MOV_cpy_z_p_r { size: 0, Pg: 0, Rn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_CLASTB_z_p_zz() {
        assert_eq!(Instruction::CLASTB_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::CLASTB_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_CLASTA_v_p_z() {
        assert_eq!(Instruction::CLASTA_v_p_z { size: 0, Pg: 0, Zm: 0, Vdn: 0, }.encode().decode(), 
                   Instruction::CLASTA_v_p_z { size: 0, Pg: 0, Zm: 0, Vdn: 0, })
    }
    #[test]
    fn roundtrip_CLASTB_v_p_z() {
        assert_eq!(Instruction::CLASTB_v_p_z { size: 0, Pg: 0, Zm: 0, Vdn: 0, }.encode().decode(), 
                   Instruction::CLASTB_v_p_z { size: 0, Pg: 0, Zm: 0, Vdn: 0, })
    }
    #[test]
    fn roundtrip_SPLICE_z_p_zz_des() {
        assert_eq!(Instruction::SPLICE_z_p_zz_des { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SPLICE_z_p_zz_des { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_CLASTA_r_p_z() {
        assert_eq!(Instruction::CLASTA_r_p_z { size: 0, Pg: 0, Zm: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::CLASTA_r_p_z { size: 0, Pg: 0, Zm: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_CLASTB_r_p_z() {
        assert_eq!(Instruction::CLASTB_r_p_z { size: 0, Pg: 0, Zm: 0, Rdn: 0, }.encode().decode(), 
                   Instruction::CLASTB_r_p_z { size: 0, Pg: 0, Zm: 0, Rdn: 0, })
    }
    #[test]
    fn roundtrip_ZIP1_z_zz_q() {
        assert_eq!(Instruction::ZIP1_z_zz_q { Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::ZIP1_z_zz_q { Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ZIP2_z_zz_q() {
        assert_eq!(Instruction::ZIP2_z_zz_q { Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::ZIP2_z_zz_q { Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UZP1_z_zz_q() {
        assert_eq!(Instruction::UZP1_z_zz_q { Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UZP1_z_zz_q { Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UZP2_z_zz_q() {
        assert_eq!(Instruction::UZP2_z_zz_q { Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UZP2_z_zz_q { Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_TRN1_z_zz_q() {
        assert_eq!(Instruction::TRN1_z_zz_q { Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::TRN1_z_zz_q { Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_TRN2_z_zz_q() {
        assert_eq!(Instruction::TRN2_z_zz_q { Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::TRN2_z_zz_q { Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_CASP_CP32_ldstexcl() {
        assert_eq!(Instruction::CASP_CP32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASP_CP32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASPL_CP32_ldstexcl() {
        assert_eq!(Instruction::CASPL_CP32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASPL_CP32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASPA_CP32_ldstexcl() {
        assert_eq!(Instruction::CASPA_CP32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASPA_CP32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASPAL_CP32_ldstexcl() {
        assert_eq!(Instruction::CASPAL_CP32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASPAL_CP32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASB_C32_ldstexcl() {
        assert_eq!(Instruction::CASB_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASB_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASLB_C32_ldstexcl() {
        assert_eq!(Instruction::CASLB_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASLB_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASAB_C32_ldstexcl() {
        assert_eq!(Instruction::CASAB_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASAB_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASALB_C32_ldstexcl() {
        assert_eq!(Instruction::CASALB_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASALB_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SMOV_asimdins_W_w() {
        assert_eq!(Instruction::SMOV_asimdins_W_w { imm5: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMOV_asimdins_W_w { imm5: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMOV_asimdins_W_w() {
        assert_eq!(Instruction::UMOV_asimdins_W_w { imm5: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMOV_asimdins_W_w { imm5: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOVI_asimdimm_L_hl() {
        assert_eq!(Instruction::MOVI_asimdimm_L_hl { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOVI_asimdimm_L_hl { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ORR_asimdimm_L_hl() {
        assert_eq!(Instruction::ORR_asimdimm_L_hl { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ORR_asimdimm_L_hl { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOVI_asimdimm_M_sm() {
        assert_eq!(Instruction::MOVI_asimdimm_M_sm { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOVI_asimdimm_M_sm { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADC_32_addsub_carry() {
        assert_eq!(Instruction::ADC_32_addsub_carry { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADC_32_addsub_carry { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UDIV_32_dp_2src() {
        assert_eq!(Instruction::UDIV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UDIV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SDIV_32_dp_2src() {
        assert_eq!(Instruction::SDIV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SDIV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_LSL_LSLV_32_dp_2src() {
        assert_eq!(Instruction::LSL_LSLV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::LSL_LSLV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_LSLV_32_dp_2src() {
        assert_eq!(Instruction::LSLV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::LSLV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_LSR_LSRV_32_dp_2src() {
        assert_eq!(Instruction::LSR_LSRV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::LSR_LSRV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_LSRV_32_dp_2src() {
        assert_eq!(Instruction::LSRV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::LSRV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ASR_ASRV_32_dp_2src() {
        assert_eq!(Instruction::ASR_ASRV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ASR_ASRV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ASRV_32_dp_2src() {
        assert_eq!(Instruction::ASRV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ASRV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ROR_RORV_32_dp_2src() {
        assert_eq!(Instruction::ROR_RORV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ROR_RORV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_RORV_32_dp_2src() {
        assert_eq!(Instruction::RORV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::RORV_32_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CRC32B_32C_dp_2src() {
        assert_eq!(Instruction::CRC32B_32C_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CRC32B_32C_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CRC32H_32C_dp_2src() {
        assert_eq!(Instruction::CRC32H_32C_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CRC32H_32C_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CRC32W_32C_dp_2src() {
        assert_eq!(Instruction::CRC32W_32C_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CRC32W_32C_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CRC32CB_32C_dp_2src() {
        assert_eq!(Instruction::CRC32CB_32C_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CRC32CB_32C_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CRC32CH_32C_dp_2src() {
        assert_eq!(Instruction::CRC32CH_32C_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CRC32CH_32C_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CRC32CW_32C_dp_2src() {
        assert_eq!(Instruction::CRC32CW_32C_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CRC32CW_32C_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MUL_MADD_32A_dp_3src() {
        assert_eq!(Instruction::MUL_MADD_32A_dp_3src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MUL_MADD_32A_dp_3src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MNEG_MSUB_32A_dp_3src() {
        assert_eq!(Instruction::MNEG_MSUB_32A_dp_3src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MNEG_MSUB_32A_dp_3src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMUL_S_floatdp2() {
        assert_eq!(Instruction::FMUL_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMUL_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FDIV_S_floatdp2() {
        assert_eq!(Instruction::FDIV_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FDIV_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FADD_S_floatdp2() {
        assert_eq!(Instruction::FADD_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FADD_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FSUB_S_floatdp2() {
        assert_eq!(Instruction::FSUB_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FSUB_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAX_S_floatdp2() {
        assert_eq!(Instruction::FMAX_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAX_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMIN_S_floatdp2() {
        assert_eq!(Instruction::FMIN_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMIN_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAXNM_S_floatdp2() {
        assert_eq!(Instruction::FMAXNM_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXNM_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINNM_S_floatdp2() {
        assert_eq!(Instruction::FMINNM_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINNM_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FNMUL_S_floatdp2() {
        assert_eq!(Instruction::FNMUL_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FNMUL_S_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMUL_D_floatdp2() {
        assert_eq!(Instruction::FMUL_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMUL_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FDIV_D_floatdp2() {
        assert_eq!(Instruction::FDIV_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FDIV_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FADD_D_floatdp2() {
        assert_eq!(Instruction::FADD_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FADD_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FSUB_D_floatdp2() {
        assert_eq!(Instruction::FSUB_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FSUB_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAX_D_floatdp2() {
        assert_eq!(Instruction::FMAX_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAX_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMIN_D_floatdp2() {
        assert_eq!(Instruction::FMIN_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMIN_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAXNM_D_floatdp2() {
        assert_eq!(Instruction::FMAXNM_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXNM_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINNM_D_floatdp2() {
        assert_eq!(Instruction::FMINNM_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINNM_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FNMUL_D_floatdp2() {
        assert_eq!(Instruction::FNMUL_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FNMUL_D_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMUL_H_floatdp2() {
        assert_eq!(Instruction::FMUL_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMUL_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FDIV_H_floatdp2() {
        assert_eq!(Instruction::FDIV_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FDIV_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FADD_H_floatdp2() {
        assert_eq!(Instruction::FADD_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FADD_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FSUB_H_floatdp2() {
        assert_eq!(Instruction::FSUB_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FSUB_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAX_H_floatdp2() {
        assert_eq!(Instruction::FMAX_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAX_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMIN_H_floatdp2() {
        assert_eq!(Instruction::FMIN_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMIN_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAXNM_H_floatdp2() {
        assert_eq!(Instruction::FMAXNM_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXNM_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINNM_H_floatdp2() {
        assert_eq!(Instruction::FMINNM_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINNM_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FNMUL_H_floatdp2() {
        assert_eq!(Instruction::FNMUL_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FNMUL_H_floatdp2 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CNTP_r_p_p() {
        assert_eq!(Instruction::CNTP_r_p_p { size: 0, Pg: 0, Pn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CNTP_r_p_p { size: 0, Pg: 0, Pn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMAX_z_zi() {
        assert_eq!(Instruction::SMAX_z_zi { size: 0, imm8: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SMAX_z_zi { size: 0, imm8: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UMAX_z_zi() {
        assert_eq!(Instruction::UMAX_z_zi { size: 0, imm8: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UMAX_z_zi { size: 0, imm8: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SMIN_z_zi() {
        assert_eq!(Instruction::SMIN_z_zi { size: 0, imm8: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SMIN_z_zi { size: 0, imm8: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UMIN_z_zi() {
        assert_eq!(Instruction::UMIN_z_zi { size: 0, imm8: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UMIN_z_zi { size: 0, imm8: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_MUL_z_zi() {
        assert_eq!(Instruction::MUL_z_zi { size: 0, imm8: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::MUL_z_zi { size: 0, imm8: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FDUP_z_i() {
        assert_eq!(Instruction::FDUP_z_i { size: 0, imm8: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FDUP_z_i { size: 0, imm8: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_fdup_z_i() {
        assert_eq!(Instruction::FMOV_fdup_z_i { size: 0, imm8: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FMOV_fdup_z_i { size: 0, imm8: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_MVNI_asimdimm_L_hl() {
        assert_eq!(Instruction::MVNI_asimdimm_L_hl { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MVNI_asimdimm_L_hl { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BIC_asimdimm_L_hl() {
        assert_eq!(Instruction::BIC_asimdimm_L_hl { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BIC_asimdimm_L_hl { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MVNI_asimdimm_M_sm() {
        assert_eq!(Instruction::MVNI_asimdimm_M_sm { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MVNI_asimdimm_M_sm { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_LDADDB_32_memop() {
        assert_eq!(Instruction::LDADDB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDADDB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDCLRB_32_memop() {
        assert_eq!(Instruction::LDCLRB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDCLRB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDEORB_32_memop() {
        assert_eq!(Instruction::LDEORB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDEORB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSETB_32_memop() {
        assert_eq!(Instruction::LDSETB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSETB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMAXB_32_memop() {
        assert_eq!(Instruction::LDSMAXB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMAXB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMINB_32_memop() {
        assert_eq!(Instruction::LDSMINB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMINB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMAXB_32_memop() {
        assert_eq!(Instruction::LDUMAXB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMAXB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMINB_32_memop() {
        assert_eq!(Instruction::LDUMINB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMINB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SWPB_32_memop() {
        assert_eq!(Instruction::SWPB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SWPB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDADDLB_32_memop() {
        assert_eq!(Instruction::LDADDLB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDADDLB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDCLRLB_32_memop() {
        assert_eq!(Instruction::LDCLRLB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDCLRLB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDEORLB_32_memop() {
        assert_eq!(Instruction::LDEORLB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDEORLB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSETLB_32_memop() {
        assert_eq!(Instruction::LDSETLB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSETLB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMAXLB_32_memop() {
        assert_eq!(Instruction::LDSMAXLB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMAXLB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMINLB_32_memop() {
        assert_eq!(Instruction::LDSMINLB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMINLB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMAXLB_32_memop() {
        assert_eq!(Instruction::LDUMAXLB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMAXLB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMINLB_32_memop() {
        assert_eq!(Instruction::LDUMINLB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMINLB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SWPLB_32_memop() {
        assert_eq!(Instruction::SWPLB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SWPLB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDADDAB_32_memop() {
        assert_eq!(Instruction::LDADDAB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDADDAB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDCLRAB_32_memop() {
        assert_eq!(Instruction::LDCLRAB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDCLRAB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDEORAB_32_memop() {
        assert_eq!(Instruction::LDEORAB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDEORAB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSETAB_32_memop() {
        assert_eq!(Instruction::LDSETAB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSETAB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMAXAB_32_memop() {
        assert_eq!(Instruction::LDSMAXAB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMAXAB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMINAB_32_memop() {
        assert_eq!(Instruction::LDSMINAB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMINAB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMAXAB_32_memop() {
        assert_eq!(Instruction::LDUMAXAB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMAXAB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMINAB_32_memop() {
        assert_eq!(Instruction::LDUMINAB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMINAB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SWPAB_32_memop() {
        assert_eq!(Instruction::SWPAB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SWPAB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAPRB_32L_memop() {
        assert_eq!(Instruction::LDAPRB_32L_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAPRB_32L_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDADDALB_32_memop() {
        assert_eq!(Instruction::LDADDALB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDADDALB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDCLRALB_32_memop() {
        assert_eq!(Instruction::LDCLRALB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDCLRALB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDEORALB_32_memop() {
        assert_eq!(Instruction::LDEORALB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDEORALB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSETALB_32_memop() {
        assert_eq!(Instruction::LDSETALB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSETALB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMAXALB_32_memop() {
        assert_eq!(Instruction::LDSMAXALB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMAXALB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMINALB_32_memop() {
        assert_eq!(Instruction::LDSMINALB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMINALB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMAXALB_32_memop() {
        assert_eq!(Instruction::LDUMAXALB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMAXALB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMINALB_32_memop() {
        assert_eq!(Instruction::LDUMINALB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMINALB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SWPALB_32_memop() {
        assert_eq!(Instruction::SWPALB_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SWPALB_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ADCS_32_addsub_carry() {
        assert_eq!(Instruction::ADCS_32_addsub_carry { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADCS_32_addsub_carry { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_USDOT_z_zzz_s() {
        assert_eq!(Instruction::USDOT_z_zzz_s { Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::USDOT_z_zzz_s { Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_SDOT_z_zzzi_s() {
        assert_eq!(Instruction::SDOT_z_zzzi_s { i2: 0, Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::SDOT_z_zzzi_s { i2: 0, Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_UDOT_z_zzzi_s() {
        assert_eq!(Instruction::UDOT_z_zzzi_s { i2: 0, Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::UDOT_z_zzzi_s { i2: 0, Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_USDOT_z_zzzi_s() {
        assert_eq!(Instruction::USDOT_z_zzzi_s { i2: 0, Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::USDOT_z_zzzi_s { i2: 0, Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_SUDOT_z_zzzi_s() {
        assert_eq!(Instruction::SUDOT_z_zzzi_s { i2: 0, Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::SUDOT_z_zzzi_s { i2: 0, Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_SDOT_z_zzzi_d() {
        assert_eq!(Instruction::SDOT_z_zzzi_d { i1: 0, Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::SDOT_z_zzzi_d { i1: 0, Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_UDOT_z_zzzi_d() {
        assert_eq!(Instruction::UDOT_z_zzzi_d { i1: 0, Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::UDOT_z_zzzi_d { i1: 0, Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_SMMLA_z_zzz() {
        assert_eq!(Instruction::SMMLA_z_zzz { Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::SMMLA_z_zzz { Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_USMMLA_z_zzz() {
        assert_eq!(Instruction::USMMLA_z_zzz { Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::USMMLA_z_zzz { Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_UMMLA_z_zzz() {
        assert_eq!(Instruction::UMMLA_z_zzz { Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::UMMLA_z_zzz { Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_CASP_CP64_ldstexcl() {
        assert_eq!(Instruction::CASP_CP64_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASP_CP64_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASPL_CP64_ldstexcl() {
        assert_eq!(Instruction::CASPL_CP64_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASPL_CP64_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASPA_CP64_ldstexcl() {
        assert_eq!(Instruction::CASPA_CP64_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASPA_CP64_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASPAL_CP64_ldstexcl() {
        assert_eq!(Instruction::CASPAL_CP64_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASPAL_CP64_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASH_C32_ldstexcl() {
        assert_eq!(Instruction::CASH_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASH_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASLH_C32_ldstexcl() {
        assert_eq!(Instruction::CASLH_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASLH_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASAH_C32_ldstexcl() {
        assert_eq!(Instruction::CASAH_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASAH_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASALH_C32_ldstexcl() {
        assert_eq!(Instruction::CASALH_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASALH_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_INS_asimdins_IR_r() {
        assert_eq!(Instruction::INS_asimdins_IR_r { imm5: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::INS_asimdins_IR_r { imm5: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOV_INS_asimdins_IR_r() {
        assert_eq!(Instruction::MOV_INS_asimdins_IR_r { imm5: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOV_INS_asimdins_IR_r { imm5: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMOV_asimdins_X_x() {
        assert_eq!(Instruction::SMOV_asimdins_X_x { imm5: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMOV_asimdins_X_x { imm5: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMMLA_asimdsame2_G() {
        assert_eq!(Instruction::SMMLA_asimdsame2_G { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMMLA_asimdsame2_G { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_USMMLA_asimdsame2_G() {
        assert_eq!(Instruction::USMMLA_asimdsame2_G { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::USMMLA_asimdsame2_G { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SBC_32_addsub_carry() {
        assert_eq!(Instruction::SBC_32_addsub_carry { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SBC_32_addsub_carry { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHA1C_QSV_cryptosha3() {
        assert_eq!(Instruction::SHA1C_QSV_cryptosha3 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHA1C_QSV_cryptosha3 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_DUP_asisdone_only() {
        assert_eq!(Instruction::DUP_asisdone_only { imm5: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::DUP_asisdone_only { imm5: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOV_DUP_asisdone_only() {
        assert_eq!(Instruction::MOV_DUP_asisdone_only { imm5: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOV_DUP_asisdone_only { imm5: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHA1P_QSV_cryptosha3() {
        assert_eq!(Instruction::SHA1P_QSV_cryptosha3 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHA1P_QSV_cryptosha3 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHA1M_QSV_cryptosha3() {
        assert_eq!(Instruction::SHA1M_QSV_cryptosha3 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHA1M_QSV_cryptosha3 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHA1SU0_VVV_cryptosha3() {
        assert_eq!(Instruction::SHA1SU0_VVV_cryptosha3 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHA1SU0_VVV_cryptosha3 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHA256H_QQV_cryptosha3() {
        assert_eq!(Instruction::SHA256H_QQV_cryptosha3 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHA256H_QQV_cryptosha3 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHA256H2_QQV_cryptosha3() {
        assert_eq!(Instruction::SHA256H2_QQV_cryptosha3 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHA256H2_QQV_cryptosha3 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHA256SU1_VVV_cryptosha3() {
        assert_eq!(Instruction::SHA256SU1_VVV_cryptosha3 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHA256SU1_VVV_cryptosha3 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMULX_asisdsamefp16_only() {
        assert_eq!(Instruction::FMULX_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMULX_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMEQ_asisdsamefp16_only() {
        assert_eq!(Instruction::FCMEQ_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMEQ_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRECPS_asisdsamefp16_only() {
        assert_eq!(Instruction::FRECPS_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRECPS_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRSQRTS_asisdsamefp16_only() {
        assert_eq!(Instruction::FRSQRTS_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRSQRTS_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BFDOT_z_zzzi() {
        assert_eq!(Instruction::BFDOT_z_zzzi { i2: 0, Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::BFDOT_z_zzzi { i2: 0, Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_BFDOT_z_zzz() {
        assert_eq!(Instruction::BFDOT_z_zzz { Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::BFDOT_z_zzz { Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_BFMMLA_z_zzz() {
        assert_eq!(Instruction::BFMMLA_z_zzz { Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::BFMMLA_z_zzz { Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_FMLA_z_zzzi_s() {
        assert_eq!(Instruction::FMLA_z_zzzi_s { i2: 0, Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::FMLA_z_zzzi_s { i2: 0, Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_FMLS_z_zzzi_s() {
        assert_eq!(Instruction::FMLS_z_zzzi_s { i2: 0, Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::FMLS_z_zzzi_s { i2: 0, Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_FMUL_z_zzi_s() {
        assert_eq!(Instruction::FMUL_z_zzi_s { i2: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FMUL_z_zzi_s { i2: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FMMLA_z_zzz_s() {
        assert_eq!(Instruction::FMMLA_z_zzz_s { Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::FMMLA_z_zzz_s { Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_FMLA_z_zzzi_d() {
        assert_eq!(Instruction::FMLA_z_zzzi_d { i1: 0, Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::FMLA_z_zzzi_d { i1: 0, Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_FMLS_z_zzzi_d() {
        assert_eq!(Instruction::FMLS_z_zzzi_d { i1: 0, Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::FMLS_z_zzzi_d { i1: 0, Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_FMUL_z_zzi_d() {
        assert_eq!(Instruction::FMUL_z_zzi_d { i1: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FMUL_z_zzi_d { i1: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_BFMLALB_z_zzz() {
        assert_eq!(Instruction::BFMLALB_z_zzz { Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::BFMLALB_z_zzz { Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_BFMLALT_z_zzz() {
        assert_eq!(Instruction::BFMLALT_z_zzz { Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::BFMLALT_z_zzz { Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_FMMLA_z_zzz_d() {
        assert_eq!(Instruction::FMMLA_z_zzz_d { Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::FMMLA_z_zzz_d { Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_FADDV_v_p_z() {
        assert_eq!(Instruction::FADDV_v_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, }.encode().decode(), 
                   Instruction::FADDV_v_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, })
    }
    #[test]
    fn roundtrip_FADD_z_p_zz() {
        assert_eq!(Instruction::FADD_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FADD_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FRINTN_z_p_z() {
        assert_eq!(Instruction::FRINTN_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FRINTN_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FSUB_z_p_zz() {
        assert_eq!(Instruction::FSUB_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FSUB_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FRINTP_z_p_z() {
        assert_eq!(Instruction::FRINTP_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FRINTP_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FMUL_z_p_zz() {
        assert_eq!(Instruction::FMUL_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FMUL_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FRINTM_z_p_z() {
        assert_eq!(Instruction::FRINTM_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FRINTM_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FSUBR_z_p_zz() {
        assert_eq!(Instruction::FSUBR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FSUBR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FRINTZ_z_p_z() {
        assert_eq!(Instruction::FRINTZ_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FRINTZ_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FMAXNMV_v_p_z() {
        assert_eq!(Instruction::FMAXNMV_v_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, }.encode().decode(), 
                   Instruction::FMAXNMV_v_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, })
    }
    #[test]
    fn roundtrip_FMAXNM_z_p_zz() {
        assert_eq!(Instruction::FMAXNM_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FMAXNM_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FRINTA_z_p_z() {
        assert_eq!(Instruction::FRINTA_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FRINTA_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FMINNMV_v_p_z() {
        assert_eq!(Instruction::FMINNMV_v_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, }.encode().decode(), 
                   Instruction::FMINNMV_v_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, })
    }
    #[test]
    fn roundtrip_FMINNM_z_p_zz() {
        assert_eq!(Instruction::FMINNM_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FMINNM_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FMAXV_v_p_z() {
        assert_eq!(Instruction::FMAXV_v_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, }.encode().decode(), 
                   Instruction::FMAXV_v_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, })
    }
    #[test]
    fn roundtrip_FMAX_z_p_zz() {
        assert_eq!(Instruction::FMAX_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FMAX_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FRINTX_z_p_z() {
        assert_eq!(Instruction::FRINTX_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FRINTX_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FMINV_v_p_z() {
        assert_eq!(Instruction::FMINV_v_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, }.encode().decode(), 
                   Instruction::FMINV_v_p_z { size: 0, Pg: 0, Zn: 0, Vd: 0, })
    }
    #[test]
    fn roundtrip_FMIN_z_p_zz() {
        assert_eq!(Instruction::FMIN_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FMIN_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FRINTI_z_p_z() {
        assert_eq!(Instruction::FRINTI_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FRINTI_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FABD_z_p_zz() {
        assert_eq!(Instruction::FABD_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FABD_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FSCALE_z_p_zz() {
        assert_eq!(Instruction::FSCALE_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FSCALE_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FMULX_z_p_zz() {
        assert_eq!(Instruction::FMULX_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FMULX_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FDIVR_z_p_zz() {
        assert_eq!(Instruction::FDIVR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FDIVR_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FRECPX_z_p_z() {
        assert_eq!(Instruction::FRECPX_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FRECPX_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FDIV_z_p_zz() {
        assert_eq!(Instruction::FDIV_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FDIV_z_p_zz { size: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FSQRT_z_p_z() {
        assert_eq!(Instruction::FSQRT_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FSQRT_z_p_z { size: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FTMAD_z_zzi() {
        assert_eq!(Instruction::FTMAD_z_zzi { size: 0, imm3: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FTMAD_z_zzi { size: 0, imm3: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FADDA_v_p_z() {
        assert_eq!(Instruction::FADDA_v_p_z { size: 0, Pg: 0, Zm: 0, Vdn: 0, }.encode().decode(), 
                   Instruction::FADDA_v_p_z { size: 0, Pg: 0, Zm: 0, Vdn: 0, })
    }
    #[test]
    fn roundtrip_BFMMLA_asimdsame2_E() {
        assert_eq!(Instruction::BFMMLA_asimdsame2_E { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BFMMLA_asimdsame2_E { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMMLA_asimdsame2_G() {
        assert_eq!(Instruction::UMMLA_asimdsame2_G { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMMLA_asimdsame2_G { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_LDADDH_32_memop() {
        assert_eq!(Instruction::LDADDH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDADDH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDCLRH_32_memop() {
        assert_eq!(Instruction::LDCLRH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDCLRH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDEORH_32_memop() {
        assert_eq!(Instruction::LDEORH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDEORH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSETH_32_memop() {
        assert_eq!(Instruction::LDSETH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSETH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMAXH_32_memop() {
        assert_eq!(Instruction::LDSMAXH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMAXH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMINH_32_memop() {
        assert_eq!(Instruction::LDSMINH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMINH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMAXH_32_memop() {
        assert_eq!(Instruction::LDUMAXH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMAXH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMINH_32_memop() {
        assert_eq!(Instruction::LDUMINH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMINH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SWPH_32_memop() {
        assert_eq!(Instruction::SWPH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SWPH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDADDLH_32_memop() {
        assert_eq!(Instruction::LDADDLH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDADDLH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDCLRLH_32_memop() {
        assert_eq!(Instruction::LDCLRLH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDCLRLH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDEORLH_32_memop() {
        assert_eq!(Instruction::LDEORLH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDEORLH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSETLH_32_memop() {
        assert_eq!(Instruction::LDSETLH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSETLH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMAXLH_32_memop() {
        assert_eq!(Instruction::LDSMAXLH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMAXLH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMINLH_32_memop() {
        assert_eq!(Instruction::LDSMINLH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMINLH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMAXLH_32_memop() {
        assert_eq!(Instruction::LDUMAXLH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMAXLH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMINLH_32_memop() {
        assert_eq!(Instruction::LDUMINLH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMINLH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SWPLH_32_memop() {
        assert_eq!(Instruction::SWPLH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SWPLH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDADDAH_32_memop() {
        assert_eq!(Instruction::LDADDAH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDADDAH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDCLRAH_32_memop() {
        assert_eq!(Instruction::LDCLRAH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDCLRAH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDEORAH_32_memop() {
        assert_eq!(Instruction::LDEORAH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDEORAH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSETAH_32_memop() {
        assert_eq!(Instruction::LDSETAH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSETAH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMAXAH_32_memop() {
        assert_eq!(Instruction::LDSMAXAH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMAXAH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMINAH_32_memop() {
        assert_eq!(Instruction::LDSMINAH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMINAH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMAXAH_32_memop() {
        assert_eq!(Instruction::LDUMAXAH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMAXAH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMINAH_32_memop() {
        assert_eq!(Instruction::LDUMINAH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMINAH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SWPAH_32_memop() {
        assert_eq!(Instruction::SWPAH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SWPAH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAPRH_32L_memop() {
        assert_eq!(Instruction::LDAPRH_32L_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAPRH_32L_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDADDALH_32_memop() {
        assert_eq!(Instruction::LDADDALH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDADDALH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDCLRALH_32_memop() {
        assert_eq!(Instruction::LDCLRALH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDCLRALH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDEORALH_32_memop() {
        assert_eq!(Instruction::LDEORALH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDEORALH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSETALH_32_memop() {
        assert_eq!(Instruction::LDSETALH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSETALH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMAXALH_32_memop() {
        assert_eq!(Instruction::LDSMAXALH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMAXALH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMINALH_32_memop() {
        assert_eq!(Instruction::LDSMINALH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMINALH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMAXALH_32_memop() {
        assert_eq!(Instruction::LDUMAXALH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMAXALH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMINALH_32_memop() {
        assert_eq!(Instruction::LDUMINALH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMINALH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SWPALH_32_memop() {
        assert_eq!(Instruction::SWPALH_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SWPALH_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SBCS_32_addsub_carry() {
        assert_eq!(Instruction::SBCS_32_addsub_carry { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SBCS_32_addsub_carry { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGE_asisdsamefp16_only() {
        assert_eq!(Instruction::FCMGE_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMGE_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FACGE_asisdsamefp16_only() {
        assert_eq!(Instruction::FACGE_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FACGE_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FABD_asisdsamefp16_only() {
        assert_eq!(Instruction::FABD_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FABD_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGT_asisdsamefp16_only() {
        assert_eq!(Instruction::FCMGT_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMGT_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FACGT_asisdsamefp16_only() {
        assert_eq!(Instruction::FACGT_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FACGT_asisdsamefp16_only { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CAS_C32_ldstexcl() {
        assert_eq!(Instruction::CAS_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CAS_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASL_C32_ldstexcl() {
        assert_eq!(Instruction::CASL_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASL_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASA_C32_ldstexcl() {
        assert_eq!(Instruction::CASA_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASA_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASAL_C32_ldstexcl() {
        assert_eq!(Instruction::CASAL_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASAL_C32_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ADC_64_addsub_carry() {
        assert_eq!(Instruction::ADC_64_addsub_carry { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADC_64_addsub_carry { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUBP_64S_dp_2src() {
        assert_eq!(Instruction::SUBP_64S_dp_2src { Xm: 0, Xn: 0, Xd: 0, }.encode().decode(), 
                   Instruction::SUBP_64S_dp_2src { Xm: 0, Xn: 0, Xd: 0, })
    }
    #[test]
    fn roundtrip_UDIV_64_dp_2src() {
        assert_eq!(Instruction::UDIV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UDIV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SDIV_64_dp_2src() {
        assert_eq!(Instruction::SDIV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SDIV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_IRG_64I_dp_2src() {
        assert_eq!(Instruction::IRG_64I_dp_2src { Xm: 0, Xn: 0, Xd: 0, }.encode().decode(), 
                   Instruction::IRG_64I_dp_2src { Xm: 0, Xn: 0, Xd: 0, })
    }
    #[test]
    fn roundtrip_GMI_64G_dp_2src() {
        assert_eq!(Instruction::GMI_64G_dp_2src { Xm: 0, Xn: 0, Xd: 0, }.encode().decode(), 
                   Instruction::GMI_64G_dp_2src { Xm: 0, Xn: 0, Xd: 0, })
    }
    #[test]
    fn roundtrip_LSL_LSLV_64_dp_2src() {
        assert_eq!(Instruction::LSL_LSLV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::LSL_LSLV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_LSLV_64_dp_2src() {
        assert_eq!(Instruction::LSLV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::LSLV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_LSR_LSRV_64_dp_2src() {
        assert_eq!(Instruction::LSR_LSRV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::LSR_LSRV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_LSRV_64_dp_2src() {
        assert_eq!(Instruction::LSRV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::LSRV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ASR_ASRV_64_dp_2src() {
        assert_eq!(Instruction::ASR_ASRV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ASR_ASRV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ASRV_64_dp_2src() {
        assert_eq!(Instruction::ASRV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ASRV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ROR_RORV_64_dp_2src() {
        assert_eq!(Instruction::ROR_RORV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ROR_RORV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_RORV_64_dp_2src() {
        assert_eq!(Instruction::RORV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::RORV_64_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_PACGA_64P_dp_2src() {
        assert_eq!(Instruction::PACGA_64P_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::PACGA_64P_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CRC32X_64C_dp_2src() {
        assert_eq!(Instruction::CRC32X_64C_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CRC32X_64C_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CRC32CX_64C_dp_2src() {
        assert_eq!(Instruction::CRC32CX_64C_dp_2src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CRC32CX_64C_dp_2src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MUL_MADD_64A_dp_3src() {
        assert_eq!(Instruction::MUL_MADD_64A_dp_3src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MUL_MADD_64A_dp_3src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MNEG_MSUB_64A_dp_3src() {
        assert_eq!(Instruction::MNEG_MSUB_64A_dp_3src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MNEG_MSUB_64A_dp_3src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMULL_SMADDL_64WA_dp_3src() {
        assert_eq!(Instruction::SMULL_SMADDL_64WA_dp_3src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMULL_SMADDL_64WA_dp_3src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMNEGL_SMSUBL_64WA_dp_3src() {
        assert_eq!(Instruction::SMNEGL_SMSUBL_64WA_dp_3src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMNEGL_SMSUBL_64WA_dp_3src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMULL_UMADDL_64WA_dp_3src() {
        assert_eq!(Instruction::UMULL_UMADDL_64WA_dp_3src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMULL_UMADDL_64WA_dp_3src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMNEGL_UMSUBL_64WA_dp_3src() {
        assert_eq!(Instruction::UMNEGL_UMSUBL_64WA_dp_3src { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMNEGL_UMSUBL_64WA_dp_3src { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_LDADD_32_memop() {
        assert_eq!(Instruction::LDADD_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDADD_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDCLR_32_memop() {
        assert_eq!(Instruction::LDCLR_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDCLR_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDEOR_32_memop() {
        assert_eq!(Instruction::LDEOR_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDEOR_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSET_32_memop() {
        assert_eq!(Instruction::LDSET_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSET_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMAX_32_memop() {
        assert_eq!(Instruction::LDSMAX_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMAX_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMIN_32_memop() {
        assert_eq!(Instruction::LDSMIN_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMIN_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMAX_32_memop() {
        assert_eq!(Instruction::LDUMAX_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMAX_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMIN_32_memop() {
        assert_eq!(Instruction::LDUMIN_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMIN_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SWP_32_memop() {
        assert_eq!(Instruction::SWP_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SWP_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDADDL_32_memop() {
        assert_eq!(Instruction::LDADDL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDADDL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDCLRL_32_memop() {
        assert_eq!(Instruction::LDCLRL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDCLRL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDEORL_32_memop() {
        assert_eq!(Instruction::LDEORL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDEORL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSETL_32_memop() {
        assert_eq!(Instruction::LDSETL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSETL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMAXL_32_memop() {
        assert_eq!(Instruction::LDSMAXL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMAXL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMINL_32_memop() {
        assert_eq!(Instruction::LDSMINL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMINL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMAXL_32_memop() {
        assert_eq!(Instruction::LDUMAXL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMAXL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMINL_32_memop() {
        assert_eq!(Instruction::LDUMINL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMINL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SWPL_32_memop() {
        assert_eq!(Instruction::SWPL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SWPL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDADDA_32_memop() {
        assert_eq!(Instruction::LDADDA_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDADDA_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDCLRA_32_memop() {
        assert_eq!(Instruction::LDCLRA_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDCLRA_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDEORA_32_memop() {
        assert_eq!(Instruction::LDEORA_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDEORA_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSETA_32_memop() {
        assert_eq!(Instruction::LDSETA_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSETA_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMAXA_32_memop() {
        assert_eq!(Instruction::LDSMAXA_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMAXA_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMINA_32_memop() {
        assert_eq!(Instruction::LDSMINA_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMINA_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMAXA_32_memop() {
        assert_eq!(Instruction::LDUMAXA_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMAXA_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMINA_32_memop() {
        assert_eq!(Instruction::LDUMINA_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMINA_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SWPA_32_memop() {
        assert_eq!(Instruction::SWPA_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SWPA_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAPR_32L_memop() {
        assert_eq!(Instruction::LDAPR_32L_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAPR_32L_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDADDAL_32_memop() {
        assert_eq!(Instruction::LDADDAL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDADDAL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDCLRAL_32_memop() {
        assert_eq!(Instruction::LDCLRAL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDCLRAL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDEORAL_32_memop() {
        assert_eq!(Instruction::LDEORAL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDEORAL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSETAL_32_memop() {
        assert_eq!(Instruction::LDSETAL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSETAL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMAXAL_32_memop() {
        assert_eq!(Instruction::LDSMAXAL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMAXAL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMINAL_32_memop() {
        assert_eq!(Instruction::LDSMINAL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMINAL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMAXAL_32_memop() {
        assert_eq!(Instruction::LDUMAXAL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMAXAL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMINAL_32_memop() {
        assert_eq!(Instruction::LDUMINAL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMINAL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SWPAL_32_memop() {
        assert_eq!(Instruction::SWPAL_32_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SWPAL_32_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ADCS_64_addsub_carry() {
        assert_eq!(Instruction::ADCS_64_addsub_carry { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADCS_64_addsub_carry { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_RMIF_only_rmif() {
        assert_eq!(Instruction::RMIF_only_rmif { imm6: 0, Rn: 0, mask: 0, }.encode().decode(), 
                   Instruction::RMIF_only_rmif { imm6: 0, Rn: 0, mask: 0, })
    }
    #[test]
    fn roundtrip_SUBPS_64S_dp_2src() {
        assert_eq!(Instruction::SUBPS_64S_dp_2src { Xm: 0, Xn: 0, Xd: 0, }.encode().decode(), 
                   Instruction::SUBPS_64S_dp_2src { Xm: 0, Xn: 0, Xd: 0, })
    }
    #[test]
    fn roundtrip_CAS_C64_ldstexcl() {
        assert_eq!(Instruction::CAS_C64_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CAS_C64_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASL_C64_ldstexcl() {
        assert_eq!(Instruction::CASL_C64_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASL_C64_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASA_C64_ldstexcl() {
        assert_eq!(Instruction::CASA_C64_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASA_C64_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CASAL_C64_ldstexcl() {
        assert_eq!(Instruction::CASAL_C64_ldstexcl { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CASAL_C64_ldstexcl { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SHA512H_QQV_cryptosha512_3() {
        assert_eq!(Instruction::SHA512H_QQV_cryptosha512_3 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHA512H_QQV_cryptosha512_3 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHA512H2_QQV_cryptosha512_3() {
        assert_eq!(Instruction::SHA512H2_QQV_cryptosha512_3 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHA512H2_QQV_cryptosha512_3 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHA512SU1_VVV2_cryptosha512_3() {
        assert_eq!(Instruction::SHA512SU1_VVV2_cryptosha512_3 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHA512SU1_VVV2_cryptosha512_3 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_RAX1_VVV2_cryptosha512_3() {
        assert_eq!(Instruction::RAX1_VVV2_cryptosha512_3 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::RAX1_VVV2_cryptosha512_3 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SM3PARTW1_VVV4_cryptosha512_3() {
        assert_eq!(Instruction::SM3PARTW1_VVV4_cryptosha512_3 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SM3PARTW1_VVV4_cryptosha512_3 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SM3PARTW2_VVV4_cryptosha512_3() {
        assert_eq!(Instruction::SM3PARTW2_VVV4_cryptosha512_3 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SM3PARTW2_VVV4_cryptosha512_3 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SM4EKEY_VVV4_cryptosha512_3() {
        assert_eq!(Instruction::SM4EKEY_VVV4_cryptosha512_3 { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SM4EKEY_VVV4_cryptosha512_3 { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_DC_SYS_CR_systeminstrs() {
        assert_eq!(Instruction::DC_SYS_CR_systeminstrs { op1: 0, CRm: 0, op2: 0, Rt: 0, }.encode().decode(), 
                   Instruction::DC_SYS_CR_systeminstrs { op1: 0, CRm: 0, op2: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_IC_SYS_CR_systeminstrs() {
        assert_eq!(Instruction::IC_SYS_CR_systeminstrs { op1: 0, CRm: 0, op2: 0, Rt: 0, }.encode().decode(), 
                   Instruction::IC_SYS_CR_systeminstrs { op1: 0, CRm: 0, op2: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_TLBI_SYS_CR_systeminstrs() {
        assert_eq!(Instruction::TLBI_SYS_CR_systeminstrs { op1: 0, CRm: 0, op2: 0, Rt: 0, }.encode().decode(), 
                   Instruction::TLBI_SYS_CR_systeminstrs { op1: 0, CRm: 0, op2: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SBC_64_addsub_carry() {
        assert_eq!(Instruction::SBC_64_addsub_carry { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SBC_64_addsub_carry { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_LDADD_64_memop() {
        assert_eq!(Instruction::LDADD_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDADD_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDCLR_64_memop() {
        assert_eq!(Instruction::LDCLR_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDCLR_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDEOR_64_memop() {
        assert_eq!(Instruction::LDEOR_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDEOR_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSET_64_memop() {
        assert_eq!(Instruction::LDSET_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSET_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMAX_64_memop() {
        assert_eq!(Instruction::LDSMAX_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMAX_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMIN_64_memop() {
        assert_eq!(Instruction::LDSMIN_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMIN_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMAX_64_memop() {
        assert_eq!(Instruction::LDUMAX_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMAX_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMIN_64_memop() {
        assert_eq!(Instruction::LDUMIN_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMIN_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SWP_64_memop() {
        assert_eq!(Instruction::SWP_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SWP_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST64BV0_64_memop() {
        assert_eq!(Instruction::ST64BV0_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST64BV0_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST64BV_64_memop() {
        assert_eq!(Instruction::ST64BV_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST64BV_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDADDL_64_memop() {
        assert_eq!(Instruction::LDADDL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDADDL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDCLRL_64_memop() {
        assert_eq!(Instruction::LDCLRL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDCLRL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDEORL_64_memop() {
        assert_eq!(Instruction::LDEORL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDEORL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSETL_64_memop() {
        assert_eq!(Instruction::LDSETL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSETL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMAXL_64_memop() {
        assert_eq!(Instruction::LDSMAXL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMAXL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMINL_64_memop() {
        assert_eq!(Instruction::LDSMINL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMINL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMAXL_64_memop() {
        assert_eq!(Instruction::LDUMAXL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMAXL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMINL_64_memop() {
        assert_eq!(Instruction::LDUMINL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMINL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SWPL_64_memop() {
        assert_eq!(Instruction::SWPL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SWPL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDADDA_64_memop() {
        assert_eq!(Instruction::LDADDA_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDADDA_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDCLRA_64_memop() {
        assert_eq!(Instruction::LDCLRA_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDCLRA_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDEORA_64_memop() {
        assert_eq!(Instruction::LDEORA_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDEORA_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSETA_64_memop() {
        assert_eq!(Instruction::LDSETA_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSETA_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMAXA_64_memop() {
        assert_eq!(Instruction::LDSMAXA_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMAXA_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMINA_64_memop() {
        assert_eq!(Instruction::LDSMINA_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMINA_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMAXA_64_memop() {
        assert_eq!(Instruction::LDUMAXA_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMAXA_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMINA_64_memop() {
        assert_eq!(Instruction::LDUMINA_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMINA_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SWPA_64_memop() {
        assert_eq!(Instruction::SWPA_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SWPA_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAPR_64L_memop() {
        assert_eq!(Instruction::LDAPR_64L_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAPR_64L_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDADDAL_64_memop() {
        assert_eq!(Instruction::LDADDAL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDADDAL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDCLRAL_64_memop() {
        assert_eq!(Instruction::LDCLRAL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDCLRAL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDEORAL_64_memop() {
        assert_eq!(Instruction::LDEORAL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDEORAL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSETAL_64_memop() {
        assert_eq!(Instruction::LDSETAL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSETAL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMAXAL_64_memop() {
        assert_eq!(Instruction::LDSMAXAL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMAXAL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDSMINAL_64_memop() {
        assert_eq!(Instruction::LDSMINAL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDSMINAL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMAXAL_64_memop() {
        assert_eq!(Instruction::LDUMAXAL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMAXAL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUMINAL_64_memop() {
        assert_eq!(Instruction::LDUMINAL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUMINAL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SWPAL_64_memop() {
        assert_eq!(Instruction::SWPAL_64_memop { Rs: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SWPAL_64_memop { Rs: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SBCS_64_addsub_carry() {
        assert_eq!(Instruction::SBCS_64_addsub_carry { Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SBCS_64_addsub_carry { Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UDF_only_perm_undef() {
        assert_eq!(Instruction::UDF_only_perm_undef { imm16: 0, }.encode().decode(), 
                   Instruction::UDF_only_perm_undef { imm16: 0, })
    }
    #[test]
    fn roundtrip_MOVPRFX_z_p_z() {
        assert_eq!(Instruction::MOVPRFX_z_p_z { size: 0, M: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::MOVPRFX_z_p_z { size: 0, M: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ADDVL_r_ri() {
        assert_eq!(Instruction::ADDVL_r_ri { Rn: 0, imm6: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADDVL_r_ri { Rn: 0, imm6: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADDPL_r_ri() {
        assert_eq!(Instruction::ADDPL_r_ri { Rn: 0, imm6: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADDPL_r_ri { Rn: 0, imm6: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlsop_DX1_r1d() {
        assert_eq!(Instruction::ST1_asisdlsop_DX1_r1d { Q: 0, Rm: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlsop_DX1_r1d { Q: 0, Rm: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST3_asisdlsop_DX3_r3d() {
        assert_eq!(Instruction::ST3_asisdlsop_DX3_r3d { Q: 0, Rm: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST3_asisdlsop_DX3_r3d { Q: 0, Rm: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST2_asisdlsop_DX2_r2d() {
        assert_eq!(Instruction::ST2_asisdlsop_DX2_r2d { Q: 0, Rm: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST2_asisdlsop_DX2_r2d { Q: 0, Rm: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST4_asisdlsop_DX4_r4d() {
        assert_eq!(Instruction::ST4_asisdlsop_DX4_r4d { Q: 0, Rm: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST4_asisdlsop_DX4_r4d { Q: 0, Rm: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlsop_DX1_r1d() {
        assert_eq!(Instruction::LD1_asisdlsop_DX1_r1d { Q: 0, Rm: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlsop_DX1_r1d { Q: 0, Rm: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3_asisdlsop_DX3_r3d() {
        assert_eq!(Instruction::LD3_asisdlsop_DX3_r3d { Q: 0, Rm: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3_asisdlsop_DX3_r3d { Q: 0, Rm: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2_asisdlsop_DX2_r2d() {
        assert_eq!(Instruction::LD2_asisdlsop_DX2_r2d { Q: 0, Rm: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2_asisdlsop_DX2_r2d { Q: 0, Rm: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4_asisdlsop_DX4_r4d() {
        assert_eq!(Instruction::LD4_asisdlsop_DX4_r4d { Q: 0, Rm: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4_asisdlsop_DX4_r4d { Q: 0, Rm: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_TBL_asimdtbl_L1_1() {
        assert_eq!(Instruction::TBL_asimdtbl_L1_1 { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::TBL_asimdtbl_L1_1 { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_DUP_asimdins_DV_v() {
        assert_eq!(Instruction::DUP_asimdins_DV_v { Q: 0, imm5: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::DUP_asimdins_DV_v { Q: 0, imm5: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_DUP_asimdins_DR_r() {
        assert_eq!(Instruction::DUP_asimdins_DR_r { Q: 0, imm5: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::DUP_asimdins_DR_r { Q: 0, imm5: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_TBX_asimdtbl_L1_1() {
        assert_eq!(Instruction::TBX_asimdtbl_L1_1 { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::TBX_asimdtbl_L1_1 { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_TBL_asimdtbl_L2_2() {
        assert_eq!(Instruction::TBL_asimdtbl_L2_2 { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::TBL_asimdtbl_L2_2 { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_TBX_asimdtbl_L2_2() {
        assert_eq!(Instruction::TBX_asimdtbl_L2_2 { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::TBX_asimdtbl_L2_2 { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_TBL_asimdtbl_L3_3() {
        assert_eq!(Instruction::TBL_asimdtbl_L3_3 { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::TBL_asimdtbl_L3_3 { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_TBX_asimdtbl_L3_3() {
        assert_eq!(Instruction::TBX_asimdtbl_L3_3 { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::TBX_asimdtbl_L3_3 { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_TBL_asimdtbl_L4_4() {
        assert_eq!(Instruction::TBL_asimdtbl_L4_4 { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::TBL_asimdtbl_L4_4 { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_TBX_asimdtbl_L4_4() {
        assert_eq!(Instruction::TBX_asimdtbl_L4_4 { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::TBX_asimdtbl_L4_4 { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_AND_asimdsame_only() {
        assert_eq!(Instruction::AND_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::AND_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLAL_asimdsame_F() {
        assert_eq!(Instruction::FMLAL_asimdsame_F { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLAL_asimdsame_F { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAXNM_asimdsamefp16_only() {
        assert_eq!(Instruction::FMAXNM_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXNM_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLA_asimdsamefp16_only() {
        assert_eq!(Instruction::FMLA_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLA_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FADD_asimdsamefp16_only() {
        assert_eq!(Instruction::FADD_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FADD_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMULX_asimdsamefp16_only() {
        assert_eq!(Instruction::FMULX_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMULX_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMEQ_asimdsamefp16_only() {
        assert_eq!(Instruction::FCMEQ_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMEQ_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAX_asimdsamefp16_only() {
        assert_eq!(Instruction::FMAX_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAX_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRECPS_asimdsamefp16_only() {
        assert_eq!(Instruction::FRECPS_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRECPS_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BIC_asimdsame_only() {
        assert_eq!(Instruction::BIC_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BIC_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_USDOT_asimdsame2_D() {
        assert_eq!(Instruction::USDOT_asimdsame2_D { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::USDOT_asimdsame2_D { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOV_ORR_asimdsame_only() {
        assert_eq!(Instruction::MOV_ORR_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOV_ORR_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ORR_asimdsame_only() {
        assert_eq!(Instruction::ORR_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ORR_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLSL_asimdsame_F() {
        assert_eq!(Instruction::FMLSL_asimdsame_F { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLSL_asimdsame_F { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINNM_asimdsamefp16_only() {
        assert_eq!(Instruction::FMINNM_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINNM_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLS_asimdsamefp16_only() {
        assert_eq!(Instruction::FMLS_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLS_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FSUB_asimdsamefp16_only() {
        assert_eq!(Instruction::FSUB_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FSUB_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMIN_asimdsamefp16_only() {
        assert_eq!(Instruction::FMIN_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMIN_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRSQRTS_asimdsamefp16_only() {
        assert_eq!(Instruction::FRSQRTS_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRSQRTS_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ORN_asimdsame_only() {
        assert_eq!(Instruction::ORN_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ORN_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOVI_asimdimm_L_sl() {
        assert_eq!(Instruction::MOVI_asimdimm_L_sl { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOVI_asimdimm_L_sl { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ORR_asimdimm_L_sl() {
        assert_eq!(Instruction::ORR_asimdimm_L_sl { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ORR_asimdimm_L_sl { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ASR_SBFM_32M_bitfield() {
        assert_eq!(Instruction::ASR_SBFM_32M_bitfield { immr: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ASR_SBFM_32M_bitfield { immr: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_S32_float2fix() {
        assert_eq!(Instruction::SCVTF_S32_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_S32_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_S32_float2fix() {
        assert_eq!(Instruction::UCVTF_S32_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_S32_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_32S_float2fix() {
        assert_eq!(Instruction::FCVTZS_32S_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_32S_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_32S_float2fix() {
        assert_eq!(Instruction::FCVTZU_32S_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_32S_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_D32_float2fix() {
        assert_eq!(Instruction::SCVTF_D32_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_D32_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_D32_float2fix() {
        assert_eq!(Instruction::UCVTF_D32_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_D32_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_32D_float2fix() {
        assert_eq!(Instruction::FCVTZS_32D_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_32D_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_32D_float2fix() {
        assert_eq!(Instruction::FCVTZU_32D_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_32D_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_H32_float2fix() {
        assert_eq!(Instruction::SCVTF_H32_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_H32_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_H32_float2fix() {
        assert_eq!(Instruction::UCVTF_H32_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_H32_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_32H_float2fix() {
        assert_eq!(Instruction::FCVTZS_32H_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_32H_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_32H_float2fix() {
        assert_eq!(Instruction::FCVTZU_32H_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_32H_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_AND_p_p_pp_z() {
        assert_eq!(Instruction::AND_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::AND_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_MOV_and_p_p_pp_z() {
        assert_eq!(Instruction::MOV_and_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::MOV_and_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_BIC_p_p_pp_z() {
        assert_eq!(Instruction::BIC_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::BIC_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_EOR_p_p_pp_z() {
        assert_eq!(Instruction::EOR_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::EOR_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_NOT_eor_p_p_pp_z() {
        assert_eq!(Instruction::NOT_eor_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::NOT_eor_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_MOV_sel_p_p_pp() {
        assert_eq!(Instruction::MOV_sel_p_p_pp { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::MOV_sel_p_p_pp { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_SEL_p_p_pp() {
        assert_eq!(Instruction::SEL_p_p_pp { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::SEL_p_p_pp { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_BRKPA_p_p_pp() {
        assert_eq!(Instruction::BRKPA_p_p_pp { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::BRKPA_p_p_pp { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_BRKPB_p_p_pp() {
        assert_eq!(Instruction::BRKPB_p_p_pp { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::BRKPB_p_p_pp { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_ADD_z_zi() {
        assert_eq!(Instruction::ADD_z_zi { size: 0, sh: 0, imm8: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::ADD_z_zi { size: 0, sh: 0, imm8: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SUB_z_zi() {
        assert_eq!(Instruction::SUB_z_zi { size: 0, sh: 0, imm8: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SUB_z_zi { size: 0, sh: 0, imm8: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SUBR_z_zi() {
        assert_eq!(Instruction::SUBR_z_zi { size: 0, sh: 0, imm8: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SUBR_z_zi { size: 0, sh: 0, imm8: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SQADD_z_zi() {
        assert_eq!(Instruction::SQADD_z_zi { size: 0, sh: 0, imm8: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SQADD_z_zi { size: 0, sh: 0, imm8: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UQADD_z_zi() {
        assert_eq!(Instruction::UQADD_z_zi { size: 0, sh: 0, imm8: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UQADD_z_zi { size: 0, sh: 0, imm8: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_SQSUB_z_zi() {
        assert_eq!(Instruction::SQSUB_z_zi { size: 0, sh: 0, imm8: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::SQSUB_z_zi { size: 0, sh: 0, imm8: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_UQSUB_z_zi() {
        assert_eq!(Instruction::UQSUB_z_zi { size: 0, sh: 0, imm8: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::UQSUB_z_zi { size: 0, sh: 0, imm8: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_DUP_z_i() {
        assert_eq!(Instruction::DUP_z_i { size: 0, sh: 0, imm8: 0, Zd: 0, }.encode().decode(), 
                   Instruction::DUP_z_i { size: 0, sh: 0, imm8: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_MOV_dup_z_i() {
        assert_eq!(Instruction::MOV_dup_z_i { size: 0, sh: 0, imm8: 0, Zd: 0, }.encode().decode(), 
                   Instruction::MOV_dup_z_i { size: 0, sh: 0, imm8: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ANDS_p_p_pp_z() {
        assert_eq!(Instruction::ANDS_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::ANDS_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_MOVS_ands_p_p_pp_z() {
        assert_eq!(Instruction::MOVS_ands_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::MOVS_ands_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_BICS_p_p_pp_z() {
        assert_eq!(Instruction::BICS_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::BICS_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_EORS_p_p_pp_z() {
        assert_eq!(Instruction::EORS_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::EORS_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_NOTS_eors_p_p_pp_z() {
        assert_eq!(Instruction::NOTS_eors_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::NOTS_eors_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_BRKPAS_p_p_pp() {
        assert_eq!(Instruction::BRKPAS_p_p_pp { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::BRKPAS_p_p_pp { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_BRKPBS_p_p_pp() {
        assert_eq!(Instruction::BRKPBS_p_p_pp { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::BRKPBS_p_p_pp { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_MOV_orr_p_p_pp_z() {
        assert_eq!(Instruction::MOV_orr_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::MOV_orr_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_ORR_p_p_pp_z() {
        assert_eq!(Instruction::ORR_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::ORR_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_ORN_p_p_pp_z() {
        assert_eq!(Instruction::ORN_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::ORN_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_NOR_p_p_pp_z() {
        assert_eq!(Instruction::NOR_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::NOR_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_NAND_p_p_pp_z() {
        assert_eq!(Instruction::NAND_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::NAND_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_MOVS_orrs_p_p_pp_z() {
        assert_eq!(Instruction::MOVS_orrs_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::MOVS_orrs_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_ORRS_p_p_pp_z() {
        assert_eq!(Instruction::ORRS_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::ORRS_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_ORNS_p_p_pp_z() {
        assert_eq!(Instruction::ORNS_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::ORNS_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_NORS_p_p_pp_z() {
        assert_eq!(Instruction::NORS_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::NORS_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_NANDS_p_p_pp_z() {
        assert_eq!(Instruction::NANDS_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::NANDS_p_p_pp_z { Pm: 0, Pg: 0, Pn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMN_ADDS_32S_addsub_ext() {
        assert_eq!(Instruction::CMN_ADDS_32S_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, }.encode().decode(), 
                   Instruction::CMN_ADDS_32S_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_EOR_asimdsame_only() {
        assert_eq!(Instruction::EOR_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::EOR_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLAL2_asimdsame_F() {
        assert_eq!(Instruction::FMLAL2_asimdsame_F { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLAL2_asimdsame_F { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAXNMP_asimdsamefp16_only() {
        assert_eq!(Instruction::FMAXNMP_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXNMP_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FADDP_asimdsamefp16_only() {
        assert_eq!(Instruction::FADDP_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FADDP_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMUL_asimdsamefp16_only() {
        assert_eq!(Instruction::FMUL_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMUL_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGE_asimdsamefp16_only() {
        assert_eq!(Instruction::FCMGE_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMGE_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FACGE_asimdsamefp16_only() {
        assert_eq!(Instruction::FACGE_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FACGE_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAXP_asimdsamefp16_only() {
        assert_eq!(Instruction::FMAXP_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXP_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FDIV_asimdsamefp16_only() {
        assert_eq!(Instruction::FDIV_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FDIV_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BFDOT_asimdsame2_D() {
        assert_eq!(Instruction::BFDOT_asimdsame2_D { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BFDOT_asimdsame2_D { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BSL_asimdsame_only() {
        assert_eq!(Instruction::BSL_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BSL_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BIT_asimdsame_only() {
        assert_eq!(Instruction::BIT_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BIT_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLSL2_asimdsame_F() {
        assert_eq!(Instruction::FMLSL2_asimdsame_F { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLSL2_asimdsame_F { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINNMP_asimdsamefp16_only() {
        assert_eq!(Instruction::FMINNMP_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINNMP_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FABD_asimdsamefp16_only() {
        assert_eq!(Instruction::FABD_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FABD_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGT_asimdsamefp16_only() {
        assert_eq!(Instruction::FCMGT_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMGT_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FACGT_asimdsamefp16_only() {
        assert_eq!(Instruction::FACGT_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FACGT_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINP_asimdsamefp16_only() {
        assert_eq!(Instruction::FMINP_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINP_asimdsamefp16_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BFMLAL_asimdsame2_F() {
        assert_eq!(Instruction::BFMLAL_asimdsame2_F { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BFMLAL_asimdsame2_F { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BIF_asimdsame_only() {
        assert_eq!(Instruction::BIF_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BIF_asimdsame_only { Q: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MVNI_asimdimm_L_sl() {
        assert_eq!(Instruction::MVNI_asimdimm_L_sl { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MVNI_asimdimm_L_sl { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BIC_asimdimm_L_sl() {
        assert_eq!(Instruction::BIC_asimdimm_L_sl { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BIC_asimdimm_L_sl { Q: 0, a: 0, b: 0, c: 0, cmode: 0, d: 0, e: 0, f: 0, g: 0, h: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STRB_32BL_ldst_regoff() {
        assert_eq!(Instruction::STRB_32BL_ldst_regoff { Rm: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STRB_32BL_ldst_regoff { Rm: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRB_32BL_ldst_regoff() {
        assert_eq!(Instruction::LDRB_32BL_ldst_regoff { Rm: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRB_32BL_ldst_regoff { Rm: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSB_64BL_ldst_regoff() {
        assert_eq!(Instruction::LDRSB_64BL_ldst_regoff { Rm: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSB_64BL_ldst_regoff { Rm: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSB_32BL_ldst_regoff() {
        assert_eq!(Instruction::LDRSB_32BL_ldst_regoff { Rm: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSB_32BL_ldst_regoff { Rm: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_BL_ldst_regoff() {
        assert_eq!(Instruction::STR_BL_ldst_regoff { Rm: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_BL_ldst_regoff { Rm: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_BL_ldst_regoff() {
        assert_eq!(Instruction::LDR_BL_ldst_regoff { Rm: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_BL_ldst_regoff { Rm: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LSR_UBFM_32M_bitfield() {
        assert_eq!(Instruction::LSR_UBFM_32M_bitfield { immr: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::LSR_UBFM_32M_bitfield { immr: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMULX_asisdsame_only() {
        assert_eq!(Instruction::FMULX_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMULX_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMEQ_asisdsame_only() {
        assert_eq!(Instruction::FCMEQ_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMEQ_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRECPS_asisdsame_only() {
        assert_eq!(Instruction::FRECPS_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRECPS_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRSQRTS_asisdsame_only() {
        assert_eq!(Instruction::FRSQRTS_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRSQRTS_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCADD_z_p_zz() {
        assert_eq!(Instruction::FCADD_z_p_zz { size: 0, rot: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FCADD_z_p_zz { size: 0, rot: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FMLA_z_zzzi_h() {
        assert_eq!(Instruction::FMLA_z_zzzi_h { i3h: 0, i3l: 0, Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::FMLA_z_zzzi_h { i3h: 0, i3l: 0, Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_FMLS_z_zzzi_h() {
        assert_eq!(Instruction::FMLS_z_zzzi_h { i3h: 0, i3l: 0, Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::FMLS_z_zzzi_h { i3h: 0, i3l: 0, Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_FMUL_z_zzi_h() {
        assert_eq!(Instruction::FMUL_z_zzi_h { i3h: 0, i3l: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FMUL_z_zzi_h { i3h: 0, i3l: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_BFMLALB_z_zzzi() {
        assert_eq!(Instruction::BFMLALB_z_zzzi { i3h: 0, Zm: 0, i3l: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::BFMLALB_z_zzzi { i3h: 0, Zm: 0, i3l: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_BFMLALT_z_zzzi() {
        assert_eq!(Instruction::BFMLALT_z_zzzi { i3h: 0, Zm: 0, i3l: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::BFMLALT_z_zzzi { i3h: 0, Zm: 0, i3l: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_CMP_SUBS_32S_addsub_ext() {
        assert_eq!(Instruction::CMP_SUBS_32S_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, }.encode().decode(), 
                   Instruction::CMP_SUBS_32S_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_FCMGE_asisdsame_only() {
        assert_eq!(Instruction::FCMGE_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMGE_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FACGE_asisdsame_only() {
        assert_eq!(Instruction::FACGE_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FACGE_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FABD_asisdsame_only() {
        assert_eq!(Instruction::FABD_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FABD_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGT_asisdsame_only() {
        assert_eq!(Instruction::FCMGT_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMGT_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FACGT_asisdsame_only() {
        assert_eq!(Instruction::FACGT_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FACGT_asisdsame_only { sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ASR_SBFM_64M_bitfield() {
        assert_eq!(Instruction::ASR_SBFM_64M_bitfield { immr: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ASR_SBFM_64M_bitfield { immr: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_S64_float2fix() {
        assert_eq!(Instruction::SCVTF_S64_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_S64_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_S64_float2fix() {
        assert_eq!(Instruction::UCVTF_S64_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_S64_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_64S_float2fix() {
        assert_eq!(Instruction::FCVTZS_64S_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_64S_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_64S_float2fix() {
        assert_eq!(Instruction::FCVTZU_64S_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_64S_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_D64_float2fix() {
        assert_eq!(Instruction::SCVTF_D64_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_D64_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_D64_float2fix() {
        assert_eq!(Instruction::UCVTF_D64_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_D64_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_64D_float2fix() {
        assert_eq!(Instruction::FCVTZS_64D_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_64D_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_64D_float2fix() {
        assert_eq!(Instruction::FCVTZU_64D_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_64D_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_H64_float2fix() {
        assert_eq!(Instruction::SCVTF_H64_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_H64_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_H64_float2fix() {
        assert_eq!(Instruction::UCVTF_H64_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_H64_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_64H_float2fix() {
        assert_eq!(Instruction::FCVTZS_64H_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_64H_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_64H_float2fix() {
        assert_eq!(Instruction::FCVTZU_64H_float2fix { scale: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_64H_float2fix { scale: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMN_ADDS_64S_addsub_ext() {
        assert_eq!(Instruction::CMN_ADDS_64S_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, }.encode().decode(), 
                   Instruction::CMN_ADDS_64S_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_LSR_UBFM_64M_bitfield() {
        assert_eq!(Instruction::LSR_UBFM_64M_bitfield { immr: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::LSR_UBFM_64M_bitfield { immr: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SVC_EX_exception() {
        assert_eq!(Instruction::SVC_EX_exception { imm16: 0, }.encode().decode(), 
                   Instruction::SVC_EX_exception { imm16: 0, })
    }
    #[test]
    fn roundtrip_HVC_EX_exception() {
        assert_eq!(Instruction::HVC_EX_exception { imm16: 0, }.encode().decode(), 
                   Instruction::HVC_EX_exception { imm16: 0, })
    }
    #[test]
    fn roundtrip_SMC_EX_exception() {
        assert_eq!(Instruction::SMC_EX_exception { imm16: 0, }.encode().decode(), 
                   Instruction::SMC_EX_exception { imm16: 0, })
    }
    #[test]
    fn roundtrip_BRK_EX_exception() {
        assert_eq!(Instruction::BRK_EX_exception { imm16: 0, }.encode().decode(), 
                   Instruction::BRK_EX_exception { imm16: 0, })
    }
    #[test]
    fn roundtrip_HLT_EX_exception() {
        assert_eq!(Instruction::HLT_EX_exception { imm16: 0, }.encode().decode(), 
                   Instruction::HLT_EX_exception { imm16: 0, })
    }
    #[test]
    fn roundtrip_DCPS1_DC_exception() {
        assert_eq!(Instruction::DCPS1_DC_exception { imm16: 0, }.encode().decode(), 
                   Instruction::DCPS1_DC_exception { imm16: 0, })
    }
    #[test]
    fn roundtrip_DCPS2_DC_exception() {
        assert_eq!(Instruction::DCPS2_DC_exception { imm16: 0, }.encode().decode(), 
                   Instruction::DCPS2_DC_exception { imm16: 0, })
    }
    #[test]
    fn roundtrip_DCPS3_DC_exception() {
        assert_eq!(Instruction::DCPS3_DC_exception { imm16: 0, }.encode().decode(), 
                   Instruction::DCPS3_DC_exception { imm16: 0, })
    }
    #[test]
    fn roundtrip_CMP_SUBS_64S_addsub_ext() {
        assert_eq!(Instruction::CMP_SUBS_64S_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, }.encode().decode(), 
                   Instruction::CMP_SUBS_64S_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_SSHR_asisdshf_R() {
        assert_eq!(Instruction::SSHR_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SSHR_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SSRA_asisdshf_R() {
        assert_eq!(Instruction::SSRA_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SSRA_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SRSHR_asisdshf_R() {
        assert_eq!(Instruction::SRSHR_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SRSHR_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SRSRA_asisdshf_R() {
        assert_eq!(Instruction::SRSRA_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SRSRA_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHL_asisdshf_R() {
        assert_eq!(Instruction::SHL_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHL_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQSHL_asisdshf_R() {
        assert_eq!(Instruction::SQSHL_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQSHL_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQSHRN_asisdshf_N() {
        assert_eq!(Instruction::SQSHRN_asisdshf_N { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQSHRN_asisdshf_N { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQRSHRN_asisdshf_N() {
        assert_eq!(Instruction::SQRSHRN_asisdshf_N { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRSHRN_asisdshf_N { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_asisdshf_C() {
        assert_eq!(Instruction::SCVTF_asisdshf_C { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_asisdshf_C { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_asisdshf_C() {
        assert_eq!(Instruction::FCVTZS_asisdshf_C { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_asisdshf_C { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_USHR_asisdshf_R() {
        assert_eq!(Instruction::USHR_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::USHR_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_USRA_asisdshf_R() {
        assert_eq!(Instruction::USRA_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::USRA_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_URSHR_asisdshf_R() {
        assert_eq!(Instruction::URSHR_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::URSHR_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_URSRA_asisdshf_R() {
        assert_eq!(Instruction::URSRA_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::URSRA_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SRI_asisdshf_R() {
        assert_eq!(Instruction::SRI_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SRI_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SLI_asisdshf_R() {
        assert_eq!(Instruction::SLI_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SLI_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQSHLU_asisdshf_R() {
        assert_eq!(Instruction::SQSHLU_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQSHLU_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UQSHL_asisdshf_R() {
        assert_eq!(Instruction::UQSHL_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UQSHL_asisdshf_R { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQSHRUN_asisdshf_N() {
        assert_eq!(Instruction::SQSHRUN_asisdshf_N { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQSHRUN_asisdshf_N { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQRSHRUN_asisdshf_N() {
        assert_eq!(Instruction::SQRSHRUN_asisdshf_N { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRSHRUN_asisdshf_N { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UQSHRN_asisdshf_N() {
        assert_eq!(Instruction::UQSHRN_asisdshf_N { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UQSHRN_asisdshf_N { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UQRSHRN_asisdshf_N() {
        assert_eq!(Instruction::UQRSHRN_asisdshf_N { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UQRSHRN_asisdshf_N { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_asisdshf_C() {
        assert_eq!(Instruction::UCVTF_asisdshf_C { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_asisdshf_C { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_asisdshf_C() {
        assert_eq!(Instruction::FCVTZU_asisdshf_C { immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_asisdshf_C { immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADD_z_zz() {
        assert_eq!(Instruction::ADD_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::ADD_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_SUB_z_zz() {
        assert_eq!(Instruction::SUB_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::SUB_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_SQADD_z_zz() {
        assert_eq!(Instruction::SQADD_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::SQADD_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UQADD_z_zz() {
        assert_eq!(Instruction::UQADD_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UQADD_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_SQSUB_z_zz() {
        assert_eq!(Instruction::SQSUB_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::SQSUB_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UQSUB_z_zz() {
        assert_eq!(Instruction::UQSUB_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UQSUB_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_INDEX_z_ii() {
        assert_eq!(Instruction::INDEX_z_ii { size: 0, imm5b: 0, imm5: 0, Zd: 0, }.encode().decode(), 
                   Instruction::INDEX_z_ii { size: 0, imm5b: 0, imm5: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_INDEX_z_ri() {
        assert_eq!(Instruction::INDEX_z_ri { size: 0, imm5: 0, Rn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::INDEX_z_ri { size: 0, imm5: 0, Rn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_INDEX_z_ir() {
        assert_eq!(Instruction::INDEX_z_ir { size: 0, Rm: 0, imm5: 0, Zd: 0, }.encode().decode(), 
                   Instruction::INDEX_z_ir { size: 0, Rm: 0, imm5: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_INDEX_z_rr() {
        assert_eq!(Instruction::INDEX_z_rr { size: 0, Rm: 0, Rn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::INDEX_z_rr { size: 0, Rm: 0, Rn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ASR_z_zw() {
        assert_eq!(Instruction::ASR_z_zw { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::ASR_z_zw { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_LSR_z_zw() {
        assert_eq!(Instruction::LSR_z_zw { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::LSR_z_zw { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_LSL_z_zw() {
        assert_eq!(Instruction::LSL_z_zw { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::LSL_z_zw { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ASR_z_zi() {
        assert_eq!(Instruction::ASR_z_zi { tszh: 0, tszl: 0, imm3: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::ASR_z_zi { tszh: 0, tszl: 0, imm3: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_LSR_z_zi() {
        assert_eq!(Instruction::LSR_z_zi { tszh: 0, tszl: 0, imm3: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::LSR_z_zi { tszh: 0, tszl: 0, imm3: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_LSL_z_zi() {
        assert_eq!(Instruction::LSL_z_zi { tszh: 0, tszl: 0, imm3: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::LSL_z_zi { tszh: 0, tszl: 0, imm3: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ADR_z_az_d_s32_scaled() {
        assert_eq!(Instruction::ADR_z_az_d_s32_scaled { Zm: 0, msz: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::ADR_z_az_d_s32_scaled { Zm: 0, msz: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FTSSEL_z_zz() {
        assert_eq!(Instruction::FTSSEL_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FTSSEL_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ADR_z_az_d_u32_scaled() {
        assert_eq!(Instruction::ADR_z_az_d_u32_scaled { Zm: 0, msz: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::ADR_z_az_d_u32_scaled { Zm: 0, msz: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_DUP_z_zi() {
        assert_eq!(Instruction::DUP_z_zi { imm2: 0, tsz: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::DUP_z_zi { imm2: 0, tsz: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_MOV_dup_z_zi() {
        assert_eq!(Instruction::MOV_dup_z_zi { imm2: 0, tsz: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::MOV_dup_z_zi { imm2: 0, tsz: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_TBL_z_zz_1() {
        assert_eq!(Instruction::TBL_z_zz_1 { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::TBL_z_zz_1 { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ZIP1_z_zz() {
        assert_eq!(Instruction::ZIP1_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::ZIP1_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ZIP2_z_zz() {
        assert_eq!(Instruction::ZIP2_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::ZIP2_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UZP1_z_zz() {
        assert_eq!(Instruction::UZP1_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UZP1_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_UZP2_z_zz() {
        assert_eq!(Instruction::UZP2_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::UZP2_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_TRN1_z_zz() {
        assert_eq!(Instruction::TRN1_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::TRN1_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_TRN2_z_zz() {
        assert_eq!(Instruction::TRN2_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::TRN2_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlsop_SX1_r1s() {
        assert_eq!(Instruction::ST1_asisdlsop_SX1_r1s { Q: 0, Rm: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlsop_SX1_r1s { Q: 0, Rm: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST3_asisdlsop_SX3_r3s() {
        assert_eq!(Instruction::ST3_asisdlsop_SX3_r3s { Q: 0, Rm: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST3_asisdlsop_SX3_r3s { Q: 0, Rm: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST2_asisdlsop_SX2_r2s() {
        assert_eq!(Instruction::ST2_asisdlsop_SX2_r2s { Q: 0, Rm: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST2_asisdlsop_SX2_r2s { Q: 0, Rm: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST4_asisdlsop_SX4_r4s() {
        assert_eq!(Instruction::ST4_asisdlsop_SX4_r4s { Q: 0, Rm: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST4_asisdlsop_SX4_r4s { Q: 0, Rm: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlsop_SX1_r1s() {
        assert_eq!(Instruction::LD1_asisdlsop_SX1_r1s { Q: 0, Rm: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlsop_SX1_r1s { Q: 0, Rm: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3_asisdlsop_SX3_r3s() {
        assert_eq!(Instruction::LD3_asisdlsop_SX3_r3s { Q: 0, Rm: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3_asisdlsop_SX3_r3s { Q: 0, Rm: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2_asisdlsop_SX2_r2s() {
        assert_eq!(Instruction::LD2_asisdlsop_SX2_r2s { Q: 0, Rm: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2_asisdlsop_SX2_r2s { Q: 0, Rm: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4_asisdlsop_SX4_r4s() {
        assert_eq!(Instruction::LD4_asisdlsop_SX4_r4s { Q: 0, Rm: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4_asisdlsop_SX4_r4s { Q: 0, Rm: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_FMAXNM_asimdsame_only() {
        assert_eq!(Instruction::FMAXNM_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXNM_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLA_asimdsame_only() {
        assert_eq!(Instruction::FMLA_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLA_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FADD_asimdsame_only() {
        assert_eq!(Instruction::FADD_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FADD_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMULX_asimdsame_only() {
        assert_eq!(Instruction::FMULX_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMULX_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMEQ_asimdsame_only() {
        assert_eq!(Instruction::FCMEQ_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMEQ_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAX_asimdsame_only() {
        assert_eq!(Instruction::FMAX_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAX_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRECPS_asimdsame_only() {
        assert_eq!(Instruction::FRECPS_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRECPS_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINNM_asimdsame_only() {
        assert_eq!(Instruction::FMINNM_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINNM_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLS_asimdsame_only() {
        assert_eq!(Instruction::FMLS_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLS_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FSUB_asimdsame_only() {
        assert_eq!(Instruction::FSUB_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FSUB_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMIN_asimdsame_only() {
        assert_eq!(Instruction::FMIN_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMIN_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FRSQRTS_asimdsame_only() {
        assert_eq!(Instruction::FRSQRTS_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FRSQRTS_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_WHILELT_p_p_rr() {
        assert_eq!(Instruction::WHILELT_p_p_rr { size: 0, Rm: 0, sf: 0, Rn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::WHILELT_p_p_rr { size: 0, Rm: 0, sf: 0, Rn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_WHILELE_p_p_rr() {
        assert_eq!(Instruction::WHILELE_p_p_rr { size: 0, Rm: 0, sf: 0, Rn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::WHILELE_p_p_rr { size: 0, Rm: 0, sf: 0, Rn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_WHILELO_p_p_rr() {
        assert_eq!(Instruction::WHILELO_p_p_rr { size: 0, Rm: 0, sf: 0, Rn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::WHILELO_p_p_rr { size: 0, Rm: 0, sf: 0, Rn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_WHILELS_p_p_rr() {
        assert_eq!(Instruction::WHILELS_p_p_rr { size: 0, Rm: 0, sf: 0, Rn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::WHILELS_p_p_rr { size: 0, Rm: 0, sf: 0, Rn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FMAXNMP_asimdsame_only() {
        assert_eq!(Instruction::FMAXNMP_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXNMP_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FADDP_asimdsame_only() {
        assert_eq!(Instruction::FADDP_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FADDP_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMUL_asimdsame_only() {
        assert_eq!(Instruction::FMUL_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMUL_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGE_asimdsame_only() {
        assert_eq!(Instruction::FCMGE_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMGE_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FACGE_asimdsame_only() {
        assert_eq!(Instruction::FACGE_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FACGE_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMAXP_asimdsame_only() {
        assert_eq!(Instruction::FMAXP_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMAXP_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FDIV_asimdsame_only() {
        assert_eq!(Instruction::FDIV_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FDIV_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINNMP_asimdsame_only() {
        assert_eq!(Instruction::FMINNMP_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINNMP_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FABD_asimdsame_only() {
        assert_eq!(Instruction::FABD_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FABD_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGT_asimdsame_only() {
        assert_eq!(Instruction::FCMGT_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMGT_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FACGT_asimdsame_only() {
        assert_eq!(Instruction::FACGT_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FACGT_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMINP_asimdsame_only() {
        assert_eq!(Instruction::FMINP_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMINP_asimdsame_only { Q: 0, sz: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOV_ORR_32_log_imm() {
        assert_eq!(Instruction::MOV_ORR_32_log_imm { immr: 0, imms: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOV_ORR_32_log_imm { immr: 0, imms: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BFC_BFM_32M_bitfield() {
        assert_eq!(Instruction::BFC_BFM_32M_bitfield { immr: 0, imms: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BFC_BFM_32M_bitfield { immr: 0, imms: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SDOT_z_zzz() {
        assert_eq!(Instruction::SDOT_z_zzz { size: 0, Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::SDOT_z_zzz { size: 0, Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_UDOT_z_zzz() {
        assert_eq!(Instruction::UDOT_z_zzz { size: 0, Zm: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::UDOT_z_zzz { size: 0, Zm: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_SQADD_asisdsame_only() {
        assert_eq!(Instruction::SQADD_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQADD_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQSUB_asisdsame_only() {
        assert_eq!(Instruction::SQSUB_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQSUB_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMGT_asisdsame_only() {
        assert_eq!(Instruction::CMGT_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMGT_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMGE_asisdsame_only() {
        assert_eq!(Instruction::CMGE_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMGE_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SSHL_asisdsame_only() {
        assert_eq!(Instruction::SSHL_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SSHL_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQSHL_asisdsame_only() {
        assert_eq!(Instruction::SQSHL_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQSHL_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SRSHL_asisdsame_only() {
        assert_eq!(Instruction::SRSHL_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SRSHL_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQRSHL_asisdsame_only() {
        assert_eq!(Instruction::SQRSHL_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRSHL_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADD_asisdsame_only() {
        assert_eq!(Instruction::ADD_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADD_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMTST_asisdsame_only() {
        assert_eq!(Instruction::CMTST_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMTST_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQDMLAL_asisddiff_only() {
        assert_eq!(Instruction::SQDMLAL_asisddiff_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQDMLAL_asisddiff_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQDMLSL_asisddiff_only() {
        assert_eq!(Instruction::SQDMLSL_asisddiff_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQDMLSL_asisddiff_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQDMULH_asisdsame_only() {
        assert_eq!(Instruction::SQDMULH_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQDMULH_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQDMULL_asisddiff_only() {
        assert_eq!(Instruction::SQDMULL_asisddiff_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQDMULL_asisddiff_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLA_asisdelem_RH_H() {
        assert_eq!(Instruction::FMLA_asisdelem_RH_H { L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLA_asisdelem_RH_H { L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLS_asisdelem_RH_H() {
        assert_eq!(Instruction::FMLS_asisdelem_RH_H { L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLS_asisdelem_RH_H { L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMUL_asisdelem_RH_H() {
        assert_eq!(Instruction::FMUL_asisdelem_RH_H { L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMUL_asisdelem_RH_H { L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMLA_z_zzzi_h() {
        assert_eq!(Instruction::FCMLA_z_zzzi_h { i2: 0, Zm: 0, rot: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::FCMLA_z_zzzi_h { i2: 0, Zm: 0, rot: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_FCMLA_z_zzzi_s() {
        assert_eq!(Instruction::FCMLA_z_zzzi_s { i1: 0, Zm: 0, rot: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::FCMLA_z_zzzi_s { i1: 0, Zm: 0, rot: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_FADD_z_zz() {
        assert_eq!(Instruction::FADD_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FADD_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FSUB_z_zz() {
        assert_eq!(Instruction::FSUB_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FSUB_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FMUL_z_zz() {
        assert_eq!(Instruction::FMUL_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FMUL_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FTSMUL_z_zz() {
        assert_eq!(Instruction::FTSMUL_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FTSMUL_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FRECPS_z_zz() {
        assert_eq!(Instruction::FRECPS_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FRECPS_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FRSQRTS_z_zz() {
        assert_eq!(Instruction::FRSQRTS_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FRSQRTS_z_zz { size: 0, Zm: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_TST_ANDS_32S_log_imm() {
        assert_eq!(Instruction::TST_ANDS_32S_log_imm { immr: 0, imms: 0, Rn: 0, }.encode().decode(), 
                   Instruction::TST_ANDS_32S_log_imm { immr: 0, imms: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_SQRDMLAH_asisdsame2_only() {
        assert_eq!(Instruction::SQRDMLAH_asisdsame2_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRDMLAH_asisdsame2_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQRDMLSH_asisdsame2_only() {
        assert_eq!(Instruction::SQRDMLSH_asisdsame2_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRDMLSH_asisdsame2_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UQADD_asisdsame_only() {
        assert_eq!(Instruction::UQADD_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UQADD_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UQSUB_asisdsame_only() {
        assert_eq!(Instruction::UQSUB_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UQSUB_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMHI_asisdsame_only() {
        assert_eq!(Instruction::CMHI_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMHI_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMHS_asisdsame_only() {
        assert_eq!(Instruction::CMHS_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMHS_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_USHL_asisdsame_only() {
        assert_eq!(Instruction::USHL_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::USHL_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UQSHL_asisdsame_only() {
        assert_eq!(Instruction::UQSHL_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UQSHL_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_URSHL_asisdsame_only() {
        assert_eq!(Instruction::URSHL_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::URSHL_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UQRSHL_asisdsame_only() {
        assert_eq!(Instruction::UQRSHL_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UQRSHL_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUB_asisdsame_only() {
        assert_eq!(Instruction::SUB_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUB_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMEQ_asisdsame_only() {
        assert_eq!(Instruction::CMEQ_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMEQ_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQRDMULH_asisdsame_only() {
        assert_eq!(Instruction::SQRDMULH_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRDMULH_asisdsame_only { size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMULX_asisdelem_RH_H() {
        assert_eq!(Instruction::FMULX_asisdelem_RH_H { L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMULX_asisdelem_RH_H { L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_PRFB_i_p_br_s() {
        assert_eq!(Instruction::PRFB_i_p_br_s { Rm: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFB_i_p_br_s { Rm: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFB_i_p_ai_s() {
        assert_eq!(Instruction::PRFB_i_p_ai_s { imm5: 0, Pg: 0, Zn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFB_i_p_ai_s { imm5: 0, Pg: 0, Zn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFH_i_p_br_s() {
        assert_eq!(Instruction::PRFH_i_p_br_s { Rm: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFH_i_p_br_s { Rm: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFH_i_p_ai_s() {
        assert_eq!(Instruction::PRFH_i_p_ai_s { imm5: 0, Pg: 0, Zn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFH_i_p_ai_s { imm5: 0, Pg: 0, Zn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFW_i_p_br_s() {
        assert_eq!(Instruction::PRFW_i_p_br_s { Rm: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFW_i_p_br_s { Rm: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFW_i_p_ai_s() {
        assert_eq!(Instruction::PRFW_i_p_ai_s { imm5: 0, Pg: 0, Zn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFW_i_p_ai_s { imm5: 0, Pg: 0, Zn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFD_i_p_br_s() {
        assert_eq!(Instruction::PRFD_i_p_br_s { Rm: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFD_i_p_br_s { Rm: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFD_i_p_ai_s() {
        assert_eq!(Instruction::PRFD_i_p_ai_s { imm5: 0, Pg: 0, Zn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFD_i_p_ai_s { imm5: 0, Pg: 0, Zn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_LD1RQB_z_p_bi_u8() {
        assert_eq!(Instruction::LD1RQB_z_p_bi_u8 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RQB_z_p_bi_u8 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1B_z_p_bi_u8() {
        assert_eq!(Instruction::LD1B_z_p_bi_u8 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1B_z_p_bi_u8 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNT1B_z_p_bi_contiguous() {
        assert_eq!(Instruction::LDNT1B_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNT1B_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNF1B_z_p_bi_u8() {
        assert_eq!(Instruction::LDNF1B_z_p_bi_u8 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNF1B_z_p_bi_u8 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1ROB_z_p_bi_u8() {
        assert_eq!(Instruction::LD1ROB_z_p_bi_u8 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1ROB_z_p_bi_u8 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1B_z_p_bi_u16() {
        assert_eq!(Instruction::LD1B_z_p_bi_u16 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1B_z_p_bi_u16 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD2B_z_p_bi_contiguous() {
        assert_eq!(Instruction::LD2B_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD2B_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNF1B_z_p_bi_u16() {
        assert_eq!(Instruction::LDNF1B_z_p_bi_u16 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNF1B_z_p_bi_u16 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1B_z_p_bi_u32() {
        assert_eq!(Instruction::LD1B_z_p_bi_u32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1B_z_p_bi_u32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD3B_z_p_bi_contiguous() {
        assert_eq!(Instruction::LD3B_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD3B_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNF1B_z_p_bi_u32() {
        assert_eq!(Instruction::LDNF1B_z_p_bi_u32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNF1B_z_p_bi_u32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1B_z_p_bi_u64() {
        assert_eq!(Instruction::LD1B_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1B_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD4B_z_p_bi_contiguous() {
        assert_eq!(Instruction::LD4B_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD4B_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNF1B_z_p_bi_u64() {
        assert_eq!(Instruction::LDNF1B_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNF1B_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RQH_z_p_bi_u16() {
        assert_eq!(Instruction::LD1RQH_z_p_bi_u16 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RQH_z_p_bi_u16 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SW_z_p_bi_s64() {
        assert_eq!(Instruction::LD1SW_z_p_bi_s64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SW_z_p_bi_s64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNT1H_z_p_bi_contiguous() {
        assert_eq!(Instruction::LDNT1H_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNT1H_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNF1SW_z_p_bi_s64() {
        assert_eq!(Instruction::LDNF1SW_z_p_bi_s64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNF1SW_z_p_bi_s64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1ROH_z_p_bi_u16() {
        assert_eq!(Instruction::LD1ROH_z_p_bi_u16 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1ROH_z_p_bi_u16 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1H_z_p_bi_u16() {
        assert_eq!(Instruction::LD1H_z_p_bi_u16 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1H_z_p_bi_u16 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD2H_z_p_bi_contiguous() {
        assert_eq!(Instruction::LD2H_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD2H_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNF1H_z_p_bi_u16() {
        assert_eq!(Instruction::LDNF1H_z_p_bi_u16 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNF1H_z_p_bi_u16 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1H_z_p_bi_u32() {
        assert_eq!(Instruction::LD1H_z_p_bi_u32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1H_z_p_bi_u32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD3H_z_p_bi_contiguous() {
        assert_eq!(Instruction::LD3H_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD3H_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNF1H_z_p_bi_u32() {
        assert_eq!(Instruction::LDNF1H_z_p_bi_u32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNF1H_z_p_bi_u32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1H_z_p_bi_u64() {
        assert_eq!(Instruction::LD1H_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1H_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD4H_z_p_bi_contiguous() {
        assert_eq!(Instruction::LD4H_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD4H_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNF1H_z_p_bi_u64() {
        assert_eq!(Instruction::LDNF1H_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNF1H_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RQW_z_p_bi_u32() {
        assert_eq!(Instruction::LD1RQW_z_p_bi_u32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RQW_z_p_bi_u32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SH_z_p_bi_s64() {
        assert_eq!(Instruction::LD1SH_z_p_bi_s64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SH_z_p_bi_s64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNT1W_z_p_bi_contiguous() {
        assert_eq!(Instruction::LDNT1W_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNT1W_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNF1SH_z_p_bi_s64() {
        assert_eq!(Instruction::LDNF1SH_z_p_bi_s64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNF1SH_z_p_bi_s64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1ROW_z_p_bi_u32() {
        assert_eq!(Instruction::LD1ROW_z_p_bi_u32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1ROW_z_p_bi_u32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SH_z_p_bi_s32() {
        assert_eq!(Instruction::LD1SH_z_p_bi_s32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SH_z_p_bi_s32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD2W_z_p_bi_contiguous() {
        assert_eq!(Instruction::LD2W_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD2W_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNF1SH_z_p_bi_s32() {
        assert_eq!(Instruction::LDNF1SH_z_p_bi_s32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNF1SH_z_p_bi_s32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1W_z_p_bi_u32() {
        assert_eq!(Instruction::LD1W_z_p_bi_u32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1W_z_p_bi_u32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD3W_z_p_bi_contiguous() {
        assert_eq!(Instruction::LD3W_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD3W_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNF1W_z_p_bi_u32() {
        assert_eq!(Instruction::LDNF1W_z_p_bi_u32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNF1W_z_p_bi_u32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1W_z_p_bi_u64() {
        assert_eq!(Instruction::LD1W_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1W_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD4W_z_p_bi_contiguous() {
        assert_eq!(Instruction::LD4W_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD4W_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNF1W_z_p_bi_u64() {
        assert_eq!(Instruction::LDNF1W_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNF1W_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RQD_z_p_bi_u64() {
        assert_eq!(Instruction::LD1RQD_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RQD_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SB_z_p_bi_s64() {
        assert_eq!(Instruction::LD1SB_z_p_bi_s64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SB_z_p_bi_s64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNT1D_z_p_bi_contiguous() {
        assert_eq!(Instruction::LDNT1D_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNT1D_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNF1SB_z_p_bi_s64() {
        assert_eq!(Instruction::LDNF1SB_z_p_bi_s64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNF1SB_z_p_bi_s64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1ROD_z_p_bi_u64() {
        assert_eq!(Instruction::LD1ROD_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1ROD_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SB_z_p_bi_s32() {
        assert_eq!(Instruction::LD1SB_z_p_bi_s32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SB_z_p_bi_s32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD2D_z_p_bi_contiguous() {
        assert_eq!(Instruction::LD2D_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD2D_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNF1SB_z_p_bi_s32() {
        assert_eq!(Instruction::LDNF1SB_z_p_bi_s32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNF1SB_z_p_bi_s32 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SB_z_p_bi_s16() {
        assert_eq!(Instruction::LD1SB_z_p_bi_s16 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SB_z_p_bi_s16 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD3D_z_p_bi_contiguous() {
        assert_eq!(Instruction::LD3D_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD3D_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNF1SB_z_p_bi_s16() {
        assert_eq!(Instruction::LDNF1SB_z_p_bi_s16 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNF1SB_z_p_bi_s16 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1D_z_p_bi_u64() {
        assert_eq!(Instruction::LD1D_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1D_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD4D_z_p_bi_contiguous() {
        assert_eq!(Instruction::LD4D_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD4D_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNF1D_z_p_bi_u64() {
        assert_eq!(Instruction::LDNF1D_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNF1D_z_p_bi_u64 { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_BFC_BFM_64M_bitfield() {
        assert_eq!(Instruction::BFC_BFM_64M_bitfield { immr: 0, imms: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BFC_BFM_64M_bitfield { immr: 0, imms: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_PRFB_i_p_ai_d() {
        assert_eq!(Instruction::PRFB_i_p_ai_d { imm5: 0, Pg: 0, Zn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFB_i_p_ai_d { imm5: 0, Pg: 0, Zn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFB_i_p_bz_d_64_scaled() {
        assert_eq!(Instruction::PRFB_i_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFB_i_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFH_i_p_bz_d_64_scaled() {
        assert_eq!(Instruction::PRFH_i_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFH_i_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFW_i_p_bz_d_64_scaled() {
        assert_eq!(Instruction::PRFW_i_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFW_i_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFD_i_p_bz_d_64_scaled() {
        assert_eq!(Instruction::PRFD_i_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFD_i_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFH_i_p_ai_d() {
        assert_eq!(Instruction::PRFH_i_p_ai_d { imm5: 0, Pg: 0, Zn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFH_i_p_ai_d { imm5: 0, Pg: 0, Zn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFW_i_p_ai_d() {
        assert_eq!(Instruction::PRFW_i_p_ai_d { imm5: 0, Pg: 0, Zn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFW_i_p_ai_d { imm5: 0, Pg: 0, Zn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFD_i_p_ai_d() {
        assert_eq!(Instruction::PRFD_i_p_ai_d { imm5: 0, Pg: 0, Zn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFD_i_p_ai_d { imm5: 0, Pg: 0, Zn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_SM3TT1A_VVV4_crypto3_imm2() {
        assert_eq!(Instruction::SM3TT1A_VVV4_crypto3_imm2 { Rm: 0, imm2: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SM3TT1A_VVV4_crypto3_imm2 { Rm: 0, imm2: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SM3TT1B_VVV4_crypto3_imm2() {
        assert_eq!(Instruction::SM3TT1B_VVV4_crypto3_imm2 { Rm: 0, imm2: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SM3TT1B_VVV4_crypto3_imm2 { Rm: 0, imm2: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SM3TT2A_VVV4_crypto3_imm2() {
        assert_eq!(Instruction::SM3TT2A_VVV4_crypto3_imm2 { Rm: 0, imm2: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SM3TT2A_VVV4_crypto3_imm2 { Rm: 0, imm2: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SM3TT2B_VVV_crypto3_imm2() {
        assert_eq!(Instruction::SM3TT2B_VVV_crypto3_imm2 { Rm: 0, imm2: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SM3TT2B_VVV_crypto3_imm2 { Rm: 0, imm2: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STNT1B_z_p_bi_contiguous() {
        assert_eq!(Instruction::STNT1B_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::STNT1B_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST2B_z_p_bi_contiguous() {
        assert_eq!(Instruction::ST2B_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST2B_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST3B_z_p_bi_contiguous() {
        assert_eq!(Instruction::ST3B_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST3B_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST4B_z_p_bi_contiguous() {
        assert_eq!(Instruction::ST4B_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST4B_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_STNT1H_z_p_bi_contiguous() {
        assert_eq!(Instruction::STNT1H_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::STNT1H_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST2H_z_p_bi_contiguous() {
        assert_eq!(Instruction::ST2H_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST2H_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST3H_z_p_bi_contiguous() {
        assert_eq!(Instruction::ST3H_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST3H_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST4H_z_p_bi_contiguous() {
        assert_eq!(Instruction::ST4H_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST4H_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_STNT1W_z_p_bi_contiguous() {
        assert_eq!(Instruction::STNT1W_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::STNT1W_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST2W_z_p_bi_contiguous() {
        assert_eq!(Instruction::ST2W_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST2W_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST3W_z_p_bi_contiguous() {
        assert_eq!(Instruction::ST3W_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST3W_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST4W_z_p_bi_contiguous() {
        assert_eq!(Instruction::ST4W_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST4W_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_STNT1D_z_p_bi_contiguous() {
        assert_eq!(Instruction::STNT1D_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::STNT1D_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST2D_z_p_bi_contiguous() {
        assert_eq!(Instruction::ST2D_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST2D_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST3D_z_p_bi_contiguous() {
        assert_eq!(Instruction::ST3D_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST3D_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST4D_z_p_bi_contiguous() {
        assert_eq!(Instruction::ST4D_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST4D_z_p_bi_contiguous { imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_NEGS_SUBS_32_addsub_shift() {
        assert_eq!(Instruction::NEGS_SUBS_32_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rd: 0, }.encode().decode(), 
                   Instruction::NEGS_SUBS_32_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_NEGS_SUBS_64_addsub_shift() {
        assert_eq!(Instruction::NEGS_SUBS_64_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rd: 0, }.encode().decode(), 
                   Instruction::NEGS_SUBS_64_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SSHR_asimdshf_R() {
        assert_eq!(Instruction::SSHR_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SSHR_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SSRA_asimdshf_R() {
        assert_eq!(Instruction::SSRA_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SSRA_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SRSHR_asimdshf_R() {
        assert_eq!(Instruction::SRSHR_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SRSHR_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SRSRA_asimdshf_R() {
        assert_eq!(Instruction::SRSRA_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SRSRA_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHL_asimdshf_R() {
        assert_eq!(Instruction::SHL_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHL_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQSHL_asimdshf_R() {
        assert_eq!(Instruction::SQSHL_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQSHL_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHRN_asimdshf_N() {
        assert_eq!(Instruction::SHRN_asimdshf_N { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHRN_asimdshf_N { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_RSHRN_asimdshf_N() {
        assert_eq!(Instruction::RSHRN_asimdshf_N { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::RSHRN_asimdshf_N { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQSHRN_asimdshf_N() {
        assert_eq!(Instruction::SQSHRN_asimdshf_N { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQSHRN_asimdshf_N { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQRSHRN_asimdshf_N() {
        assert_eq!(Instruction::SQRSHRN_asimdshf_N { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRSHRN_asimdshf_N { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SSHLL_asimdshf_L() {
        assert_eq!(Instruction::SSHLL_asimdshf_L { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SSHLL_asimdshf_L { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SCVTF_asimdshf_C() {
        assert_eq!(Instruction::SCVTF_asimdshf_C { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SCVTF_asimdshf_C { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZS_asimdshf_C() {
        assert_eq!(Instruction::FCVTZS_asimdshf_C { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZS_asimdshf_C { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_USHR_asimdshf_R() {
        assert_eq!(Instruction::USHR_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::USHR_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_USRA_asimdshf_R() {
        assert_eq!(Instruction::USRA_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::USRA_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_URSHR_asimdshf_R() {
        assert_eq!(Instruction::URSHR_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::URSHR_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_URSRA_asimdshf_R() {
        assert_eq!(Instruction::URSRA_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::URSRA_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SRI_asimdshf_R() {
        assert_eq!(Instruction::SRI_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SRI_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SLI_asimdshf_R() {
        assert_eq!(Instruction::SLI_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SLI_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQSHLU_asimdshf_R() {
        assert_eq!(Instruction::SQSHLU_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQSHLU_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UQSHL_asimdshf_R() {
        assert_eq!(Instruction::UQSHL_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UQSHL_asimdshf_R { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQSHRUN_asimdshf_N() {
        assert_eq!(Instruction::SQSHRUN_asimdshf_N { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQSHRUN_asimdshf_N { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQRSHRUN_asimdshf_N() {
        assert_eq!(Instruction::SQRSHRUN_asimdshf_N { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRSHRUN_asimdshf_N { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UQSHRN_asimdshf_N() {
        assert_eq!(Instruction::UQSHRN_asimdshf_N { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UQSHRN_asimdshf_N { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UQRSHRN_asimdshf_N() {
        assert_eq!(Instruction::UQRSHRN_asimdshf_N { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UQRSHRN_asimdshf_N { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_USHLL_asimdshf_L() {
        assert_eq!(Instruction::USHLL_asimdshf_L { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::USHLL_asimdshf_L { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UCVTF_asimdshf_C() {
        assert_eq!(Instruction::UCVTF_asimdshf_C { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UCVTF_asimdshf_C { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCVTZU_asimdshf_C() {
        assert_eq!(Instruction::FCVTZU_asimdshf_C { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCVTZU_asimdshf_C { Q: 0, immh: 0, immb: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADR_z_az_sd_same_scaled() {
        assert_eq!(Instruction::ADR_z_az_sd_same_scaled { sz: 0, Zm: 0, msz: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::ADR_z_az_sd_same_scaled { sz: 0, Zm: 0, msz: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ORN_orr_z_zi() {
        assert_eq!(Instruction::ORN_orr_z_zi { imm13: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::ORN_orr_z_zi { imm13: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_ORR_z_zi() {
        assert_eq!(Instruction::ORR_z_zi { imm13: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::ORR_z_zi { imm13: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_EXT_z_zi_des() {
        assert_eq!(Instruction::EXT_z_zi_des { imm8h: 0, imm8l: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::EXT_z_zi_des { imm8h: 0, imm8l: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_EON_eor_z_zi() {
        assert_eq!(Instruction::EON_eor_z_zi { imm13: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::EON_eor_z_zi { imm13: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_EOR_z_zi() {
        assert_eq!(Instruction::EOR_z_zi { imm13: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::EOR_z_zi { imm13: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_AND_z_zi() {
        assert_eq!(Instruction::AND_z_zi { imm13: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::AND_z_zi { imm13: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_BIC_and_z_zi() {
        assert_eq!(Instruction::BIC_and_z_zi { imm13: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::BIC_and_z_zi { imm13: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_DUPM_z_i() {
        assert_eq!(Instruction::DUPM_z_i { imm13: 0, Zd: 0, }.encode().decode(), 
                   Instruction::DUPM_z_i { imm13: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_MOV_dupm_z_i() {
        assert_eq!(Instruction::MOV_dupm_z_i { imm13: 0, Zd: 0, }.encode().decode(), 
                   Instruction::MOV_dupm_z_i { imm13: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ST4_asisdlsep_R4_r() {
        assert_eq!(Instruction::ST4_asisdlsep_R4_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST4_asisdlsep_R4_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlsep_R4_r4() {
        assert_eq!(Instruction::ST1_asisdlsep_R4_r4 { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlsep_R4_r4 { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST3_asisdlsep_R3_r() {
        assert_eq!(Instruction::ST3_asisdlsep_R3_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST3_asisdlsep_R3_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlsep_R3_r3() {
        assert_eq!(Instruction::ST1_asisdlsep_R3_r3 { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlsep_R3_r3 { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlsep_R1_r1() {
        assert_eq!(Instruction::ST1_asisdlsep_R1_r1 { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlsep_R1_r1 { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST2_asisdlsep_R2_r() {
        assert_eq!(Instruction::ST2_asisdlsep_R2_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST2_asisdlsep_R2_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlsep_R2_r2() {
        assert_eq!(Instruction::ST1_asisdlsep_R2_r2 { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlsep_R2_r2 { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4_asisdlsep_R4_r() {
        assert_eq!(Instruction::LD4_asisdlsep_R4_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4_asisdlsep_R4_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlsep_R4_r4() {
        assert_eq!(Instruction::LD1_asisdlsep_R4_r4 { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlsep_R4_r4 { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3_asisdlsep_R3_r() {
        assert_eq!(Instruction::LD3_asisdlsep_R3_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3_asisdlsep_R3_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlsep_R3_r3() {
        assert_eq!(Instruction::LD1_asisdlsep_R3_r3 { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlsep_R3_r3 { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlsep_R1_r1() {
        assert_eq!(Instruction::LD1_asisdlsep_R1_r1 { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlsep_R1_r1 { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2_asisdlsep_R2_r() {
        assert_eq!(Instruction::LD2_asisdlsep_R2_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2_asisdlsep_R2_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlsep_R2_r2() {
        assert_eq!(Instruction::LD1_asisdlsep_R2_r2 { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlsep_R2_r2 { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlsop_HX1_r1h() {
        assert_eq!(Instruction::ST1_asisdlsop_HX1_r1h { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlsop_HX1_r1h { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST3_asisdlsop_HX3_r3h() {
        assert_eq!(Instruction::ST3_asisdlsop_HX3_r3h { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST3_asisdlsop_HX3_r3h { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST2_asisdlsop_HX2_r2h() {
        assert_eq!(Instruction::ST2_asisdlsop_HX2_r2h { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST2_asisdlsop_HX2_r2h { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST4_asisdlsop_HX4_r4h() {
        assert_eq!(Instruction::ST4_asisdlsop_HX4_r4h { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST4_asisdlsop_HX4_r4h { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlsop_HX1_r1h() {
        assert_eq!(Instruction::LD1_asisdlsop_HX1_r1h { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlsop_HX1_r1h { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3_asisdlsop_HX3_r3h() {
        assert_eq!(Instruction::LD3_asisdlsop_HX3_r3h { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3_asisdlsop_HX3_r3h { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1R_asisdlsop_RX1_r() {
        assert_eq!(Instruction::LD1R_asisdlsop_RX1_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1R_asisdlsop_RX1_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3R_asisdlsop_RX3_r() {
        assert_eq!(Instruction::LD3R_asisdlsop_RX3_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3R_asisdlsop_RX3_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2_asisdlsop_HX2_r2h() {
        assert_eq!(Instruction::LD2_asisdlsop_HX2_r2h { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2_asisdlsop_HX2_r2h { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4_asisdlsop_HX4_r4h() {
        assert_eq!(Instruction::LD4_asisdlsop_HX4_r4h { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4_asisdlsop_HX4_r4h { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2R_asisdlsop_RX2_r() {
        assert_eq!(Instruction::LD2R_asisdlsop_RX2_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2R_asisdlsop_RX2_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4R_asisdlsop_RX4_r() {
        assert_eq!(Instruction::LD4R_asisdlsop_RX4_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4R_asisdlsop_RX4_r { Q: 0, Rm: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_UZP1_asimdperm_only() {
        assert_eq!(Instruction::UZP1_asimdperm_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UZP1_asimdperm_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_TRN1_asimdperm_only() {
        assert_eq!(Instruction::TRN1_asimdperm_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::TRN1_asimdperm_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ZIP1_asimdperm_only() {
        assert_eq!(Instruction::ZIP1_asimdperm_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ZIP1_asimdperm_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UZP2_asimdperm_only() {
        assert_eq!(Instruction::UZP2_asimdperm_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UZP2_asimdperm_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_TRN2_asimdperm_only() {
        assert_eq!(Instruction::TRN2_asimdperm_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::TRN2_asimdperm_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ZIP2_asimdperm_only() {
        assert_eq!(Instruction::ZIP2_asimdperm_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ZIP2_asimdperm_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SDOT_asimdsame2_D() {
        assert_eq!(Instruction::SDOT_asimdsame2_D { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SDOT_asimdsame2_D { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SADDL_asimddiff_L() {
        assert_eq!(Instruction::SADDL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SADDL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHADD_asimdsame_only() {
        assert_eq!(Instruction::SHADD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHADD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQADD_asimdsame_only() {
        assert_eq!(Instruction::SQADD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQADD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SADDW_asimddiff_W() {
        assert_eq!(Instruction::SADDW_asimddiff_W { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SADDW_asimddiff_W { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SRHADD_asimdsame_only() {
        assert_eq!(Instruction::SRHADD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SRHADD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SSUBL_asimddiff_L() {
        assert_eq!(Instruction::SSUBL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SSUBL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SHSUB_asimdsame_only() {
        assert_eq!(Instruction::SHSUB_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SHSUB_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQSUB_asimdsame_only() {
        assert_eq!(Instruction::SQSUB_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQSUB_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SSUBW_asimddiff_W() {
        assert_eq!(Instruction::SSUBW_asimddiff_W { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SSUBW_asimddiff_W { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMGT_asimdsame_only() {
        assert_eq!(Instruction::CMGT_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMGT_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMGE_asimdsame_only() {
        assert_eq!(Instruction::CMGE_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMGE_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADDHN_asimddiff_N() {
        assert_eq!(Instruction::ADDHN_asimddiff_N { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADDHN_asimddiff_N { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SSHL_asimdsame_only() {
        assert_eq!(Instruction::SSHL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SSHL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQSHL_asimdsame_only() {
        assert_eq!(Instruction::SQSHL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQSHL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SABAL_asimddiff_L() {
        assert_eq!(Instruction::SABAL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SABAL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SRSHL_asimdsame_only() {
        assert_eq!(Instruction::SRSHL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SRSHL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQRSHL_asimdsame_only() {
        assert_eq!(Instruction::SQRSHL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRSHL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUBHN_asimddiff_N() {
        assert_eq!(Instruction::SUBHN_asimddiff_N { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUBHN_asimddiff_N { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMAX_asimdsame_only() {
        assert_eq!(Instruction::SMAX_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMAX_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMIN_asimdsame_only() {
        assert_eq!(Instruction::SMIN_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMIN_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SABDL_asimddiff_L() {
        assert_eq!(Instruction::SABDL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SABDL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SABD_asimdsame_only() {
        assert_eq!(Instruction::SABD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SABD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SABA_asimdsame_only() {
        assert_eq!(Instruction::SABA_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SABA_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMLAL_asimddiff_L() {
        assert_eq!(Instruction::SMLAL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMLAL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADD_asimdsame_only() {
        assert_eq!(Instruction::ADD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMTST_asimdsame_only() {
        assert_eq!(Instruction::CMTST_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMTST_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQDMLAL_asimddiff_L() {
        assert_eq!(Instruction::SQDMLAL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQDMLAL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MLA_asimdsame_only() {
        assert_eq!(Instruction::MLA_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MLA_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MUL_asimdsame_only() {
        assert_eq!(Instruction::MUL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MUL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMLSL_asimddiff_L() {
        assert_eq!(Instruction::SMLSL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMLSL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMAXP_asimdsame_only() {
        assert_eq!(Instruction::SMAXP_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMAXP_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMINP_asimdsame_only() {
        assert_eq!(Instruction::SMINP_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMINP_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQDMLSL_asimddiff_L() {
        assert_eq!(Instruction::SQDMLSL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQDMLSL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQDMULH_asimdsame_only() {
        assert_eq!(Instruction::SQDMULH_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQDMULH_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADDP_asimdsame_only() {
        assert_eq!(Instruction::ADDP_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADDP_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMULL_asimddiff_L() {
        assert_eq!(Instruction::SMULL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMULL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQDMULL_asimddiff_L() {
        assert_eq!(Instruction::SQDMULL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQDMULL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_PMULL_asimddiff_L() {
        assert_eq!(Instruction::PMULL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::PMULL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLA_asimdelem_RH_H() {
        assert_eq!(Instruction::FMLA_asimdelem_RH_H { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLA_asimdelem_RH_H { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLS_asimdelem_RH_H() {
        assert_eq!(Instruction::FMLS_asimdelem_RH_H { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLS_asimdelem_RH_H { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMUL_asimdelem_RH_H() {
        assert_eq!(Instruction::FMUL_asimdelem_RH_H { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMUL_asimdelem_RH_H { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUDOT_asimdelem_D() {
        assert_eq!(Instruction::SUDOT_asimdelem_D { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUDOT_asimdelem_D { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BFDOT_asimdelem_E() {
        assert_eq!(Instruction::BFDOT_asimdelem_E { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BFDOT_asimdelem_E { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLAL_asimdelem_LH() {
        assert_eq!(Instruction::FMLAL_asimdelem_LH { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLAL_asimdelem_LH { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLSL_asimdelem_LH() {
        assert_eq!(Instruction::FMLSL_asimdelem_LH { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLSL_asimdelem_LH { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_USDOT_asimdelem_D() {
        assert_eq!(Instruction::USDOT_asimdelem_D { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::USDOT_asimdelem_D { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BFMLAL_asimdelem_F() {
        assert_eq!(Instruction::BFMLAL_asimdelem_F { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BFMLAL_asimdelem_F { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCCMP_S_floatccmp() {
        assert_eq!(Instruction::FCCMP_S_floatccmp { Rm: 0, cond: 0, Rn: 0, nzcv: 0, }.encode().decode(), 
                   Instruction::FCCMP_S_floatccmp { Rm: 0, cond: 0, Rn: 0, nzcv: 0, })
    }
    #[test]
    fn roundtrip_FCCMPE_S_floatccmp() {
        assert_eq!(Instruction::FCCMPE_S_floatccmp { Rm: 0, cond: 0, Rn: 0, nzcv: 0, }.encode().decode(), 
                   Instruction::FCCMPE_S_floatccmp { Rm: 0, cond: 0, Rn: 0, nzcv: 0, })
    }
    #[test]
    fn roundtrip_FCCMP_D_floatccmp() {
        assert_eq!(Instruction::FCCMP_D_floatccmp { Rm: 0, cond: 0, Rn: 0, nzcv: 0, }.encode().decode(), 
                   Instruction::FCCMP_D_floatccmp { Rm: 0, cond: 0, Rn: 0, nzcv: 0, })
    }
    #[test]
    fn roundtrip_FCCMPE_D_floatccmp() {
        assert_eq!(Instruction::FCCMPE_D_floatccmp { Rm: 0, cond: 0, Rn: 0, nzcv: 0, }.encode().decode(), 
                   Instruction::FCCMPE_D_floatccmp { Rm: 0, cond: 0, Rn: 0, nzcv: 0, })
    }
    #[test]
    fn roundtrip_FCCMP_H_floatccmp() {
        assert_eq!(Instruction::FCCMP_H_floatccmp { Rm: 0, cond: 0, Rn: 0, nzcv: 0, }.encode().decode(), 
                   Instruction::FCCMP_H_floatccmp { Rm: 0, cond: 0, Rn: 0, nzcv: 0, })
    }
    #[test]
    fn roundtrip_FCCMPE_H_floatccmp() {
        assert_eq!(Instruction::FCCMPE_H_floatccmp { Rm: 0, cond: 0, Rn: 0, nzcv: 0, }.encode().decode(), 
                   Instruction::FCCMPE_H_floatccmp { Rm: 0, cond: 0, Rn: 0, nzcv: 0, })
    }
    #[test]
    fn roundtrip_MVN_ORN_32_log_shift() {
        assert_eq!(Instruction::MVN_ORN_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MVN_ORN_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMN_ADDS_32_addsub_shift() {
        assert_eq!(Instruction::CMN_ADDS_32_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, }.encode().decode(), 
                   Instruction::CMN_ADDS_32_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_SQRDMLAH_asimdsame2_only() {
        assert_eq!(Instruction::SQRDMLAH_asimdsame2_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRDMLAH_asimdsame2_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQRDMLSH_asimdsame2_only() {
        assert_eq!(Instruction::SQRDMLSH_asimdsame2_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRDMLSH_asimdsame2_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UDOT_asimdsame2_D() {
        assert_eq!(Instruction::UDOT_asimdsame2_D { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UDOT_asimdsame2_D { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UADDL_asimddiff_L() {
        assert_eq!(Instruction::UADDL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UADDL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UHADD_asimdsame_only() {
        assert_eq!(Instruction::UHADD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UHADD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UQADD_asimdsame_only() {
        assert_eq!(Instruction::UQADD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UQADD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UADDW_asimddiff_W() {
        assert_eq!(Instruction::UADDW_asimddiff_W { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UADDW_asimddiff_W { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_URHADD_asimdsame_only() {
        assert_eq!(Instruction::URHADD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::URHADD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_USUBL_asimddiff_L() {
        assert_eq!(Instruction::USUBL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::USUBL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UHSUB_asimdsame_only() {
        assert_eq!(Instruction::UHSUB_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UHSUB_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UQSUB_asimdsame_only() {
        assert_eq!(Instruction::UQSUB_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UQSUB_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_USUBW_asimddiff_W() {
        assert_eq!(Instruction::USUBW_asimddiff_W { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::USUBW_asimddiff_W { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMHI_asimdsame_only() {
        assert_eq!(Instruction::CMHI_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMHI_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMHS_asimdsame_only() {
        assert_eq!(Instruction::CMHS_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMHS_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_RADDHN_asimddiff_N() {
        assert_eq!(Instruction::RADDHN_asimddiff_N { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::RADDHN_asimddiff_N { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_USHL_asimdsame_only() {
        assert_eq!(Instruction::USHL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::USHL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UQSHL_asimdsame_only() {
        assert_eq!(Instruction::UQSHL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UQSHL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UABAL_asimddiff_L() {
        assert_eq!(Instruction::UABAL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UABAL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_URSHL_asimdsame_only() {
        assert_eq!(Instruction::URSHL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::URSHL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UQRSHL_asimdsame_only() {
        assert_eq!(Instruction::UQRSHL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UQRSHL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_RSUBHN_asimddiff_N() {
        assert_eq!(Instruction::RSUBHN_asimddiff_N { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::RSUBHN_asimddiff_N { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMAX_asimdsame_only() {
        assert_eq!(Instruction::UMAX_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMAX_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMIN_asimdsame_only() {
        assert_eq!(Instruction::UMIN_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMIN_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UABDL_asimddiff_L() {
        assert_eq!(Instruction::UABDL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UABDL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UABD_asimdsame_only() {
        assert_eq!(Instruction::UABD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UABD_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UABA_asimdsame_only() {
        assert_eq!(Instruction::UABA_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UABA_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMLAL_asimddiff_L() {
        assert_eq!(Instruction::UMLAL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMLAL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUB_asimdsame_only() {
        assert_eq!(Instruction::SUB_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUB_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMEQ_asimdsame_only() {
        assert_eq!(Instruction::CMEQ_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CMEQ_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MLS_asimdsame_only() {
        assert_eq!(Instruction::MLS_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MLS_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_PMUL_asimdsame_only() {
        assert_eq!(Instruction::PMUL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::PMUL_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMLSL_asimddiff_L() {
        assert_eq!(Instruction::UMLSL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMLSL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMAXP_asimdsame_only() {
        assert_eq!(Instruction::UMAXP_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMAXP_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMINP_asimdsame_only() {
        assert_eq!(Instruction::UMINP_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMINP_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQRDMULH_asimdsame_only() {
        assert_eq!(Instruction::SQRDMULH_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRDMULH_asimdsame_only { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMULL_asimddiff_L() {
        assert_eq!(Instruction::UMULL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMULL_asimddiff_L { Q: 0, size: 0, Rm: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMULX_asimdelem_RH_H() {
        assert_eq!(Instruction::FMULX_asimdelem_RH_H { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMULX_asimdelem_RH_H { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLAL2_asimdelem_LH() {
        assert_eq!(Instruction::FMLAL2_asimdelem_LH { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLAL2_asimdelem_LH { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLSL2_asimdelem_LH() {
        assert_eq!(Instruction::FMLSL2_asimdelem_LH { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLSL2_asimdelem_LH { Q: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMN_ADDS_32S_addsub_imm() {
        assert_eq!(Instruction::CMN_ADDS_32S_addsub_imm { sh: 0, imm12: 0, Rn: 0, }.encode().decode(), 
                   Instruction::CMN_ADDS_32S_addsub_imm { sh: 0, imm12: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_CCMN_32_condcmp_reg() {
        assert_eq!(Instruction::CCMN_32_condcmp_reg { Rm: 0, cond: 0, Rn: 0, nzcv: 0, }.encode().decode(), 
                   Instruction::CCMN_32_condcmp_reg { Rm: 0, cond: 0, Rn: 0, nzcv: 0, })
    }
    #[test]
    fn roundtrip_CCMN_32_condcmp_imm() {
        assert_eq!(Instruction::CCMN_32_condcmp_imm { imm5: 0, cond: 0, Rn: 0, nzcv: 0, }.encode().decode(), 
                   Instruction::CCMN_32_condcmp_imm { imm5: 0, cond: 0, Rn: 0, nzcv: 0, })
    }
    #[test]
    fn roundtrip_NEG_SUB_32_addsub_shift() {
        assert_eq!(Instruction::NEG_SUB_32_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rd: 0, }.encode().decode(), 
                   Instruction::NEG_SUB_32_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLA_asisdelem_R_SD() {
        assert_eq!(Instruction::FMLA_asisdelem_R_SD { sz: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLA_asisdelem_R_SD { sz: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLS_asisdelem_R_SD() {
        assert_eq!(Instruction::FMLS_asisdelem_R_SD { sz: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLS_asisdelem_R_SD { sz: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMUL_asisdelem_R_SD() {
        assert_eq!(Instruction::FMUL_asisdelem_R_SD { sz: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMUL_asisdelem_R_SD { sz: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_TST_ANDS_32_log_shift() {
        assert_eq!(Instruction::TST_ANDS_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, }.encode().decode(), 
                   Instruction::TST_ANDS_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_CMP_SUBS_32_addsub_shift() {
        assert_eq!(Instruction::CMP_SUBS_32_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, }.encode().decode(), 
                   Instruction::CMP_SUBS_32_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_CMP_SUBS_32S_addsub_imm() {
        assert_eq!(Instruction::CMP_SUBS_32S_addsub_imm { sh: 0, imm12: 0, Rn: 0, }.encode().decode(), 
                   Instruction::CMP_SUBS_32S_addsub_imm { sh: 0, imm12: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_CCMP_32_condcmp_reg() {
        assert_eq!(Instruction::CCMP_32_condcmp_reg { Rm: 0, cond: 0, Rn: 0, nzcv: 0, }.encode().decode(), 
                   Instruction::CCMP_32_condcmp_reg { Rm: 0, cond: 0, Rn: 0, nzcv: 0, })
    }
    #[test]
    fn roundtrip_CCMP_32_condcmp_imm() {
        assert_eq!(Instruction::CCMP_32_condcmp_imm { imm5: 0, cond: 0, Rn: 0, nzcv: 0, }.encode().decode(), 
                   Instruction::CCMP_32_condcmp_imm { imm5: 0, cond: 0, Rn: 0, nzcv: 0, })
    }
    #[test]
    fn roundtrip_FMULX_asisdelem_R_SD() {
        assert_eq!(Instruction::FMULX_asisdelem_R_SD { sz: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMULX_asisdelem_R_SD { sz: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_PRFB_i_p_bz_s_x32_scaled() {
        assert_eq!(Instruction::PRFB_i_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFB_i_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFH_i_p_bz_s_x32_scaled() {
        assert_eq!(Instruction::PRFH_i_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFH_i_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFW_i_p_bz_s_x32_scaled() {
        assert_eq!(Instruction::PRFW_i_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFW_i_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFD_i_p_bz_s_x32_scaled() {
        assert_eq!(Instruction::PRFD_i_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFD_i_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_LD1SB_z_p_ai_s() {
        assert_eq!(Instruction::LD1SB_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SB_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SB_z_p_ai_s() {
        assert_eq!(Instruction::LDFF1SB_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SB_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1B_z_p_ai_s() {
        assert_eq!(Instruction::LD1B_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1B_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1B_z_p_ai_s() {
        assert_eq!(Instruction::LDFF1B_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1B_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SH_z_p_ai_s() {
        assert_eq!(Instruction::LD1SH_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SH_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SH_z_p_ai_s() {
        assert_eq!(Instruction::LDFF1SH_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SH_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1H_z_p_ai_s() {
        assert_eq!(Instruction::LD1H_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1H_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1H_z_p_ai_s() {
        assert_eq!(Instruction::LDFF1H_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1H_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1W_z_p_ai_s() {
        assert_eq!(Instruction::LD1W_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1W_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1W_z_p_ai_s() {
        assert_eq!(Instruction::LDFF1W_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1W_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDR_p_bi() {
        assert_eq!(Instruction::LDR_p_bi { imm9h: 0, imm9l: 0, Rn: 0, Pt: 0, }.encode().decode(), 
                   Instruction::LDR_p_bi { imm9h: 0, imm9l: 0, Rn: 0, Pt: 0, })
    }
    #[test]
    fn roundtrip_PRFB_i_p_bi_s() {
        assert_eq!(Instruction::PRFB_i_p_bi_s { imm6: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFB_i_p_bi_s { imm6: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFH_i_p_bi_s() {
        assert_eq!(Instruction::PRFH_i_p_bi_s { imm6: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFH_i_p_bi_s { imm6: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFW_i_p_bi_s() {
        assert_eq!(Instruction::PRFW_i_p_bi_s { imm6: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFW_i_p_bi_s { imm6: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFD_i_p_bi_s() {
        assert_eq!(Instruction::PRFD_i_p_bi_s { imm6: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFD_i_p_bi_s { imm6: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_LD1RQB_z_p_br_contiguous() {
        assert_eq!(Instruction::LD1RQB_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RQB_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1B_z_p_br_u8() {
        assert_eq!(Instruction::LD1B_z_p_br_u8 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1B_z_p_br_u8 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1B_z_p_br_u8() {
        assert_eq!(Instruction::LDFF1B_z_p_br_u8 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1B_z_p_br_u8 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNT1B_z_p_br_contiguous() {
        assert_eq!(Instruction::LDNT1B_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNT1B_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1ROB_z_p_br_contiguous() {
        assert_eq!(Instruction::LD1ROB_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1ROB_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1B_z_p_br_u16() {
        assert_eq!(Instruction::LD1B_z_p_br_u16 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1B_z_p_br_u16 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1B_z_p_br_u16() {
        assert_eq!(Instruction::LDFF1B_z_p_br_u16 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1B_z_p_br_u16 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD2B_z_p_br_contiguous() {
        assert_eq!(Instruction::LD2B_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD2B_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1B_z_p_br_u32() {
        assert_eq!(Instruction::LD1B_z_p_br_u32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1B_z_p_br_u32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1B_z_p_br_u32() {
        assert_eq!(Instruction::LDFF1B_z_p_br_u32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1B_z_p_br_u32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD3B_z_p_br_contiguous() {
        assert_eq!(Instruction::LD3B_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD3B_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1B_z_p_br_u64() {
        assert_eq!(Instruction::LD1B_z_p_br_u64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1B_z_p_br_u64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1B_z_p_br_u64() {
        assert_eq!(Instruction::LDFF1B_z_p_br_u64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1B_z_p_br_u64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD4B_z_p_br_contiguous() {
        assert_eq!(Instruction::LD4B_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD4B_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RQH_z_p_br_contiguous() {
        assert_eq!(Instruction::LD1RQH_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RQH_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SW_z_p_br_s64() {
        assert_eq!(Instruction::LD1SW_z_p_br_s64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SW_z_p_br_s64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SW_z_p_br_s64() {
        assert_eq!(Instruction::LDFF1SW_z_p_br_s64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SW_z_p_br_s64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNT1H_z_p_br_contiguous() {
        assert_eq!(Instruction::LDNT1H_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNT1H_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1ROH_z_p_br_contiguous() {
        assert_eq!(Instruction::LD1ROH_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1ROH_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1H_z_p_br_u16() {
        assert_eq!(Instruction::LD1H_z_p_br_u16 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1H_z_p_br_u16 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1H_z_p_br_u16() {
        assert_eq!(Instruction::LDFF1H_z_p_br_u16 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1H_z_p_br_u16 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD2H_z_p_br_contiguous() {
        assert_eq!(Instruction::LD2H_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD2H_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1H_z_p_br_u32() {
        assert_eq!(Instruction::LD1H_z_p_br_u32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1H_z_p_br_u32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1H_z_p_br_u32() {
        assert_eq!(Instruction::LDFF1H_z_p_br_u32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1H_z_p_br_u32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD3H_z_p_br_contiguous() {
        assert_eq!(Instruction::LD3H_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD3H_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1H_z_p_br_u64() {
        assert_eq!(Instruction::LD1H_z_p_br_u64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1H_z_p_br_u64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1H_z_p_br_u64() {
        assert_eq!(Instruction::LDFF1H_z_p_br_u64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1H_z_p_br_u64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD4H_z_p_br_contiguous() {
        assert_eq!(Instruction::LD4H_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD4H_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RQW_z_p_br_contiguous() {
        assert_eq!(Instruction::LD1RQW_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RQW_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SH_z_p_br_s64() {
        assert_eq!(Instruction::LD1SH_z_p_br_s64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SH_z_p_br_s64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SH_z_p_br_s64() {
        assert_eq!(Instruction::LDFF1SH_z_p_br_s64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SH_z_p_br_s64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNT1W_z_p_br_contiguous() {
        assert_eq!(Instruction::LDNT1W_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNT1W_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1ROW_z_p_br_contiguous() {
        assert_eq!(Instruction::LD1ROW_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1ROW_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SH_z_p_br_s32() {
        assert_eq!(Instruction::LD1SH_z_p_br_s32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SH_z_p_br_s32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SH_z_p_br_s32() {
        assert_eq!(Instruction::LDFF1SH_z_p_br_s32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SH_z_p_br_s32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD2W_z_p_br_contiguous() {
        assert_eq!(Instruction::LD2W_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD2W_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1W_z_p_br_u32() {
        assert_eq!(Instruction::LD1W_z_p_br_u32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1W_z_p_br_u32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1W_z_p_br_u32() {
        assert_eq!(Instruction::LDFF1W_z_p_br_u32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1W_z_p_br_u32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD3W_z_p_br_contiguous() {
        assert_eq!(Instruction::LD3W_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD3W_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1W_z_p_br_u64() {
        assert_eq!(Instruction::LD1W_z_p_br_u64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1W_z_p_br_u64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1W_z_p_br_u64() {
        assert_eq!(Instruction::LDFF1W_z_p_br_u64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1W_z_p_br_u64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD4W_z_p_br_contiguous() {
        assert_eq!(Instruction::LD4W_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD4W_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RQD_z_p_br_contiguous() {
        assert_eq!(Instruction::LD1RQD_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RQD_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SB_z_p_br_s64() {
        assert_eq!(Instruction::LD1SB_z_p_br_s64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SB_z_p_br_s64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SB_z_p_br_s64() {
        assert_eq!(Instruction::LDFF1SB_z_p_br_s64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SB_z_p_br_s64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDNT1D_z_p_br_contiguous() {
        assert_eq!(Instruction::LDNT1D_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDNT1D_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1ROD_z_p_br_contiguous() {
        assert_eq!(Instruction::LD1ROD_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1ROD_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SB_z_p_br_s32() {
        assert_eq!(Instruction::LD1SB_z_p_br_s32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SB_z_p_br_s32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SB_z_p_br_s32() {
        assert_eq!(Instruction::LDFF1SB_z_p_br_s32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SB_z_p_br_s32 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD2D_z_p_br_contiguous() {
        assert_eq!(Instruction::LD2D_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD2D_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SB_z_p_br_s16() {
        assert_eq!(Instruction::LD1SB_z_p_br_s16 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SB_z_p_br_s16 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SB_z_p_br_s16() {
        assert_eq!(Instruction::LDFF1SB_z_p_br_s16 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SB_z_p_br_s16 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD3D_z_p_br_contiguous() {
        assert_eq!(Instruction::LD3D_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD3D_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1D_z_p_br_u64() {
        assert_eq!(Instruction::LD1D_z_p_br_u64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1D_z_p_br_u64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1D_z_p_br_u64() {
        assert_eq!(Instruction::LDFF1D_z_p_br_u64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1D_z_p_br_u64 { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD4D_z_p_br_contiguous() {
        assert_eq!(Instruction::LD4D_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD4D_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_MVN_ORN_64_log_shift() {
        assert_eq!(Instruction::MVN_ORN_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MVN_ORN_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMN_ADDS_64_addsub_shift() {
        assert_eq!(Instruction::CMN_ADDS_64_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, }.encode().decode(), 
                   Instruction::CMN_ADDS_64_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_CMN_ADDS_64S_addsub_imm() {
        assert_eq!(Instruction::CMN_ADDS_64S_addsub_imm { sh: 0, imm12: 0, Rn: 0, }.encode().decode(), 
                   Instruction::CMN_ADDS_64S_addsub_imm { sh: 0, imm12: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_MOV_ORR_64_log_imm() {
        assert_eq!(Instruction::MOV_ORR_64_log_imm { N: 0, immr: 0, imms: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOV_ORR_64_log_imm { N: 0, immr: 0, imms: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CCMN_64_condcmp_reg() {
        assert_eq!(Instruction::CCMN_64_condcmp_reg { Rm: 0, cond: 0, Rn: 0, nzcv: 0, }.encode().decode(), 
                   Instruction::CCMN_64_condcmp_reg { Rm: 0, cond: 0, Rn: 0, nzcv: 0, })
    }
    #[test]
    fn roundtrip_CCMN_64_condcmp_imm() {
        assert_eq!(Instruction::CCMN_64_condcmp_imm { imm5: 0, cond: 0, Rn: 0, nzcv: 0, }.encode().decode(), 
                   Instruction::CCMN_64_condcmp_imm { imm5: 0, cond: 0, Rn: 0, nzcv: 0, })
    }
    #[test]
    fn roundtrip_PRFB_i_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::PRFB_i_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFB_i_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFH_i_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::PRFH_i_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFH_i_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFW_i_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::PRFW_i_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFW_i_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_PRFD_i_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::PRFD_i_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, prfop: 0, }.encode().decode(), 
                   Instruction::PRFD_i_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, prfop: 0, })
    }
    #[test]
    fn roundtrip_LD1SB_z_p_ai_d() {
        assert_eq!(Instruction::LD1SB_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SB_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SB_z_p_ai_d() {
        assert_eq!(Instruction::LDFF1SB_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SB_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1B_z_p_ai_d() {
        assert_eq!(Instruction::LD1B_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1B_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1B_z_p_ai_d() {
        assert_eq!(Instruction::LDFF1B_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1B_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SB_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::LD1SB_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SB_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SB_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::LDFF1SB_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SB_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1B_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::LD1B_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1B_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1B_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::LDFF1B_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1B_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SH_z_p_ai_d() {
        assert_eq!(Instruction::LD1SH_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SH_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SH_z_p_ai_d() {
        assert_eq!(Instruction::LDFF1SH_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SH_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1H_z_p_ai_d() {
        assert_eq!(Instruction::LD1H_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1H_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1H_z_p_ai_d() {
        assert_eq!(Instruction::LDFF1H_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1H_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SH_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::LD1SH_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SH_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SH_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::LDFF1SH_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SH_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1H_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::LD1H_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1H_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1H_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::LDFF1H_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1H_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SH_z_p_bz_d_64_scaled() {
        assert_eq!(Instruction::LD1SH_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SH_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SH_z_p_bz_d_64_scaled() {
        assert_eq!(Instruction::LDFF1SH_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SH_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1H_z_p_bz_d_64_scaled() {
        assert_eq!(Instruction::LD1H_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1H_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1H_z_p_bz_d_64_scaled() {
        assert_eq!(Instruction::LDFF1H_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1H_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SW_z_p_ai_d() {
        assert_eq!(Instruction::LD1SW_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SW_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SW_z_p_ai_d() {
        assert_eq!(Instruction::LDFF1SW_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SW_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1W_z_p_ai_d() {
        assert_eq!(Instruction::LD1W_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1W_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1W_z_p_ai_d() {
        assert_eq!(Instruction::LDFF1W_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1W_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SW_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::LD1SW_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SW_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SW_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::LDFF1SW_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SW_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1W_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::LD1W_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1W_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1W_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::LDFF1W_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1W_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SW_z_p_bz_d_64_scaled() {
        assert_eq!(Instruction::LD1SW_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SW_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SW_z_p_bz_d_64_scaled() {
        assert_eq!(Instruction::LDFF1SW_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SW_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1W_z_p_bz_d_64_scaled() {
        assert_eq!(Instruction::LD1W_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1W_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1W_z_p_bz_d_64_scaled() {
        assert_eq!(Instruction::LDFF1W_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1W_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1D_z_p_ai_d() {
        assert_eq!(Instruction::LD1D_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1D_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1D_z_p_ai_d() {
        assert_eq!(Instruction::LDFF1D_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1D_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1D_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::LD1D_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1D_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1D_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::LDFF1D_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1D_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1D_z_p_bz_d_64_scaled() {
        assert_eq!(Instruction::LD1D_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1D_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1D_z_p_bz_d_64_scaled() {
        assert_eq!(Instruction::LDFF1D_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1D_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_NEG_SUB_64_addsub_shift() {
        assert_eq!(Instruction::NEG_SUB_64_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rd: 0, }.encode().decode(), 
                   Instruction::NEG_SUB_64_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STNT1B_z_p_br_contiguous() {
        assert_eq!(Instruction::STNT1B_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::STNT1B_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1B_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::ST1B_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1B_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST2B_z_p_br_contiguous() {
        assert_eq!(Instruction::ST2B_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST2B_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST3B_z_p_br_contiguous() {
        assert_eq!(Instruction::ST3B_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST3B_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1B_z_p_ai_d() {
        assert_eq!(Instruction::ST1B_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1B_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST4B_z_p_br_contiguous() {
        assert_eq!(Instruction::ST4B_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST4B_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1B_z_p_ai_s() {
        assert_eq!(Instruction::ST1B_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1B_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_STNT1H_z_p_br_contiguous() {
        assert_eq!(Instruction::STNT1H_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::STNT1H_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1H_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::ST1H_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1H_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST2H_z_p_br_contiguous() {
        assert_eq!(Instruction::ST2H_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST2H_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1H_z_p_bz_d_64_scaled() {
        assert_eq!(Instruction::ST1H_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1H_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST3H_z_p_br_contiguous() {
        assert_eq!(Instruction::ST3H_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST3H_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1H_z_p_ai_d() {
        assert_eq!(Instruction::ST1H_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1H_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST4H_z_p_br_contiguous() {
        assert_eq!(Instruction::ST4H_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST4H_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1H_z_p_ai_s() {
        assert_eq!(Instruction::ST1H_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1H_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_STNT1W_z_p_br_contiguous() {
        assert_eq!(Instruction::STNT1W_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::STNT1W_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1W_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::ST1W_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1W_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST2W_z_p_br_contiguous() {
        assert_eq!(Instruction::ST2W_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST2W_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1W_z_p_bz_d_64_scaled() {
        assert_eq!(Instruction::ST1W_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1W_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST3W_z_p_br_contiguous() {
        assert_eq!(Instruction::ST3W_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST3W_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1W_z_p_ai_d() {
        assert_eq!(Instruction::ST1W_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1W_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST4W_z_p_br_contiguous() {
        assert_eq!(Instruction::ST4W_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST4W_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1W_z_p_ai_s() {
        assert_eq!(Instruction::ST1W_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1W_z_p_ai_s { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_STR_p_bi() {
        assert_eq!(Instruction::STR_p_bi { imm9h: 0, imm9l: 0, Rn: 0, Pt: 0, }.encode().decode(), 
                   Instruction::STR_p_bi { imm9h: 0, imm9l: 0, Rn: 0, Pt: 0, })
    }
    #[test]
    fn roundtrip_STNT1D_z_p_br_contiguous() {
        assert_eq!(Instruction::STNT1D_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::STNT1D_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1D_z_p_bz_d_64_unscaled() {
        assert_eq!(Instruction::ST1D_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1D_z_p_bz_d_64_unscaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST2D_z_p_br_contiguous() {
        assert_eq!(Instruction::ST2D_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST2D_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1D_z_p_bz_d_64_scaled() {
        assert_eq!(Instruction::ST1D_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1D_z_p_bz_d_64_scaled { Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST3D_z_p_br_contiguous() {
        assert_eq!(Instruction::ST3D_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST3D_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1D_z_p_ai_d() {
        assert_eq!(Instruction::ST1D_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1D_z_p_ai_d { imm5: 0, Pg: 0, Zn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1D_z_p_br() {
        assert_eq!(Instruction::ST1D_z_p_br { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1D_z_p_br { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST4D_z_p_br_contiguous() {
        assert_eq!(Instruction::ST4D_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST4D_z_p_br_contiguous { Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_TST_ANDS_64_log_shift() {
        assert_eq!(Instruction::TST_ANDS_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, }.encode().decode(), 
                   Instruction::TST_ANDS_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_CMP_SUBS_64_addsub_shift() {
        assert_eq!(Instruction::CMP_SUBS_64_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, }.encode().decode(), 
                   Instruction::CMP_SUBS_64_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_CMP_SUBS_64S_addsub_imm() {
        assert_eq!(Instruction::CMP_SUBS_64S_addsub_imm { sh: 0, imm12: 0, Rn: 0, }.encode().decode(), 
                   Instruction::CMP_SUBS_64S_addsub_imm { sh: 0, imm12: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_TST_ANDS_64S_log_imm() {
        assert_eq!(Instruction::TST_ANDS_64S_log_imm { N: 0, immr: 0, imms: 0, Rn: 0, }.encode().decode(), 
                   Instruction::TST_ANDS_64S_log_imm { N: 0, immr: 0, imms: 0, Rn: 0, })
    }
    #[test]
    fn roundtrip_CCMP_64_condcmp_reg() {
        assert_eq!(Instruction::CCMP_64_condcmp_reg { Rm: 0, cond: 0, Rn: 0, nzcv: 0, }.encode().decode(), 
                   Instruction::CCMP_64_condcmp_reg { Rm: 0, cond: 0, Rn: 0, nzcv: 0, })
    }
    #[test]
    fn roundtrip_CCMP_64_condcmp_imm() {
        assert_eq!(Instruction::CCMP_64_condcmp_imm { imm5: 0, cond: 0, Rn: 0, nzcv: 0, }.encode().decode(), 
                   Instruction::CCMP_64_condcmp_imm { imm5: 0, cond: 0, Rn: 0, nzcv: 0, })
    }
    #[test]
    fn roundtrip_CINC_CSINC_32_condsel() {
        assert_eq!(Instruction::CINC_CSINC_32_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CINC_CSINC_32_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CINV_CSINV_32_condsel() {
        assert_eq!(Instruction::CINV_CSINV_32_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CINV_CSINV_32_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CINC_CSINC_64_condsel() {
        assert_eq!(Instruction::CINC_CSINC_64_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CINC_CSINC_64_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CINV_CSINV_64_condsel() {
        assert_eq!(Instruction::CINV_CSINV_64_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CINV_CSINV_64_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CNEG_CSNEG_32_condsel() {
        assert_eq!(Instruction::CNEG_CSNEG_32_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CNEG_CSNEG_32_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CNEG_CSNEG_64_condsel() {
        assert_eq!(Instruction::CNEG_CSNEG_64_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CNEG_CSNEG_64_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCPY_z_p_i() {
        assert_eq!(Instruction::FCPY_z_p_i { size: 0, Pg: 0, imm8: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FCPY_z_p_i { size: 0, Pg: 0, imm8: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_FMOV_fcpy_z_p_i() {
        assert_eq!(Instruction::FMOV_fcpy_z_p_i { size: 0, Pg: 0, imm8: 0, Zd: 0, }.encode().decode(), 
                   Instruction::FMOV_fcpy_z_p_i { size: 0, Pg: 0, imm8: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ST1_asisdlsop_BX1_r1b() {
        assert_eq!(Instruction::ST1_asisdlsop_BX1_r1b { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST1_asisdlsop_BX1_r1b { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST3_asisdlsop_BX3_r3b() {
        assert_eq!(Instruction::ST3_asisdlsop_BX3_r3b { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST3_asisdlsop_BX3_r3b { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST2_asisdlsop_BX2_r2b() {
        assert_eq!(Instruction::ST2_asisdlsop_BX2_r2b { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST2_asisdlsop_BX2_r2b { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST4_asisdlsop_BX4_r4b() {
        assert_eq!(Instruction::ST4_asisdlsop_BX4_r4b { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::ST4_asisdlsop_BX4_r4b { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1_asisdlsop_BX1_r1b() {
        assert_eq!(Instruction::LD1_asisdlsop_BX1_r1b { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD1_asisdlsop_BX1_r1b { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD3_asisdlsop_BX3_r3b() {
        assert_eq!(Instruction::LD3_asisdlsop_BX3_r3b { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD3_asisdlsop_BX3_r3b { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD2_asisdlsop_BX2_r2b() {
        assert_eq!(Instruction::LD2_asisdlsop_BX2_r2b { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD2_asisdlsop_BX2_r2b { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD4_asisdlsop_BX4_r4b() {
        assert_eq!(Instruction::LD4_asisdlsop_BX4_r4b { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LD4_asisdlsop_BX4_r4b { Q: 0, Rm: 0, S: 0, size: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_FMLA_asimdelem_R_SD() {
        assert_eq!(Instruction::FMLA_asimdelem_R_SD { Q: 0, sz: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLA_asimdelem_R_SD { Q: 0, sz: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMLS_asimdelem_R_SD() {
        assert_eq!(Instruction::FMLS_asimdelem_R_SD { Q: 0, sz: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMLS_asimdelem_R_SD { Q: 0, sz: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMUL_asimdelem_R_SD() {
        assert_eq!(Instruction::FMUL_asimdelem_R_SD { Q: 0, sz: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMUL_asimdelem_R_SD { Q: 0, sz: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STLURB_32_ldapstl_unscaled() {
        assert_eq!(Instruction::STLURB_32_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLURB_32_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAPURB_32_ldapstl_unscaled() {
        assert_eq!(Instruction::LDAPURB_32_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAPURB_32_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAPURSB_64_ldapstl_unscaled() {
        assert_eq!(Instruction::LDAPURSB_64_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAPURSB_64_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAPURSB_32_ldapstl_unscaled() {
        assert_eq!(Instruction::LDAPURSB_32_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAPURSB_32_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CSEL_32_condsel() {
        assert_eq!(Instruction::CSEL_32_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CSEL_32_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CSINC_32_condsel() {
        assert_eq!(Instruction::CSINC_32_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CSINC_32_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCSEL_S_floatsel() {
        assert_eq!(Instruction::FCSEL_S_floatsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCSEL_S_floatsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCSEL_D_floatsel() {
        assert_eq!(Instruction::FCSEL_D_floatsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCSEL_D_floatsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCSEL_H_floatsel() {
        assert_eq!(Instruction::FCSEL_H_floatsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCSEL_H_floatsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMPHS_p_p_zz() {
        assert_eq!(Instruction::CMPHS_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPHS_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPLS_cmphs_p_p_zz() {
        assert_eq!(Instruction::CMPLS_cmphs_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPLS_cmphs_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPHI_p_p_zz() {
        assert_eq!(Instruction::CMPHI_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPHI_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPLO_cmphi_p_p_zz() {
        assert_eq!(Instruction::CMPLO_cmphi_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPLO_cmphi_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPEQ_p_p_zw() {
        assert_eq!(Instruction::CMPEQ_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPEQ_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPNE_p_p_zw() {
        assert_eq!(Instruction::CMPNE_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPNE_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPGE_p_p_zw() {
        assert_eq!(Instruction::CMPGE_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPGE_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPGT_p_p_zw() {
        assert_eq!(Instruction::CMPGT_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPGT_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPLT_p_p_zw() {
        assert_eq!(Instruction::CMPLT_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPLT_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPLE_p_p_zw() {
        assert_eq!(Instruction::CMPLE_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPLE_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPGE_p_p_zz() {
        assert_eq!(Instruction::CMPGE_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPGE_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPLE_cmpge_p_p_zz() {
        assert_eq!(Instruction::CMPLE_cmpge_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPLE_cmpge_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPGT_p_p_zz() {
        assert_eq!(Instruction::CMPGT_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPGT_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPLT_cmpgt_p_p_zz() {
        assert_eq!(Instruction::CMPLT_cmpgt_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPLT_cmpgt_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPEQ_p_p_zz() {
        assert_eq!(Instruction::CMPEQ_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPEQ_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPNE_p_p_zz() {
        assert_eq!(Instruction::CMPNE_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPNE_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPHS_p_p_zw() {
        assert_eq!(Instruction::CMPHS_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPHS_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPHI_p_p_zw() {
        assert_eq!(Instruction::CMPHI_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPHI_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPLO_p_p_zw() {
        assert_eq!(Instruction::CMPLO_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPLO_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPLS_p_p_zw() {
        assert_eq!(Instruction::CMPLS_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPLS_p_p_zw { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPGE_p_p_zi() {
        assert_eq!(Instruction::CMPGE_p_p_zi { size: 0, imm5: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPGE_p_p_zi { size: 0, imm5: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPGT_p_p_zi() {
        assert_eq!(Instruction::CMPGT_p_p_zi { size: 0, imm5: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPGT_p_p_zi { size: 0, imm5: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPLT_p_p_zi() {
        assert_eq!(Instruction::CMPLT_p_p_zi { size: 0, imm5: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPLT_p_p_zi { size: 0, imm5: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPLE_p_p_zi() {
        assert_eq!(Instruction::CMPLE_p_p_zi { size: 0, imm5: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPLE_p_p_zi { size: 0, imm5: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPEQ_p_p_zi() {
        assert_eq!(Instruction::CMPEQ_p_p_zi { size: 0, imm5: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPEQ_p_p_zi { size: 0, imm5: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPNE_p_p_zi() {
        assert_eq!(Instruction::CMPNE_p_p_zi { size: 0, imm5: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPNE_p_p_zi { size: 0, imm5: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FCADD_asimdsame2_C() {
        assert_eq!(Instruction::FCADD_asimdsame2_C { Q: 0, size: 0, Rm: 0, rot: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCADD_asimdsame2_C { Q: 0, size: 0, Rm: 0, rot: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMULX_asimdelem_R_SD() {
        assert_eq!(Instruction::FMULX_asimdelem_R_SD { Q: 0, sz: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMULX_asimdelem_R_SD { Q: 0, sz: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STURB_32_ldst_unscaled() {
        assert_eq!(Instruction::STURB_32_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STURB_32_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STRB_32_ldst_immpost() {
        assert_eq!(Instruction::STRB_32_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STRB_32_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STTRB_32_ldst_unpriv() {
        assert_eq!(Instruction::STTRB_32_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STTRB_32_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STRB_32_ldst_immpre() {
        assert_eq!(Instruction::STRB_32_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STRB_32_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STRB_32B_ldst_regoff() {
        assert_eq!(Instruction::STRB_32B_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STRB_32B_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDURB_32_ldst_unscaled() {
        assert_eq!(Instruction::LDURB_32_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDURB_32_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRB_32_ldst_immpost() {
        assert_eq!(Instruction::LDRB_32_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRB_32_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDTRB_32_ldst_unpriv() {
        assert_eq!(Instruction::LDTRB_32_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDTRB_32_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRB_32_ldst_immpre() {
        assert_eq!(Instruction::LDRB_32_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRB_32_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRB_32B_ldst_regoff() {
        assert_eq!(Instruction::LDRB_32B_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRB_32B_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDURSB_64_ldst_unscaled() {
        assert_eq!(Instruction::LDURSB_64_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDURSB_64_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSB_64_ldst_immpost() {
        assert_eq!(Instruction::LDRSB_64_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSB_64_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDTRSB_64_ldst_unpriv() {
        assert_eq!(Instruction::LDTRSB_64_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDTRSB_64_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSB_64_ldst_immpre() {
        assert_eq!(Instruction::LDRSB_64_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSB_64_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSB_64B_ldst_regoff() {
        assert_eq!(Instruction::LDRSB_64B_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSB_64B_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDURSB_32_ldst_unscaled() {
        assert_eq!(Instruction::LDURSB_32_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDURSB_32_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSB_32_ldst_immpost() {
        assert_eq!(Instruction::LDRSB_32_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSB_32_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDTRSB_32_ldst_unpriv() {
        assert_eq!(Instruction::LDTRSB_32_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDTRSB_32_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSB_32_ldst_immpre() {
        assert_eq!(Instruction::LDRSB_32_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSB_32_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSB_32B_ldst_regoff() {
        assert_eq!(Instruction::LDRSB_32B_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSB_32B_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STUR_B_ldst_unscaled() {
        assert_eq!(Instruction::STUR_B_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STUR_B_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_B_ldst_immpost() {
        assert_eq!(Instruction::STR_B_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_B_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_B_ldst_immpre() {
        assert_eq!(Instruction::STR_B_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_B_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_B_ldst_regoff() {
        assert_eq!(Instruction::STR_B_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_B_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUR_B_ldst_unscaled() {
        assert_eq!(Instruction::LDUR_B_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUR_B_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_B_ldst_immpost() {
        assert_eq!(Instruction::LDR_B_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_B_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_B_ldst_immpre() {
        assert_eq!(Instruction::LDR_B_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_B_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_B_ldst_regoff() {
        assert_eq!(Instruction::LDR_B_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_B_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STUR_Q_ldst_unscaled() {
        assert_eq!(Instruction::STUR_Q_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STUR_Q_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_Q_ldst_immpost() {
        assert_eq!(Instruction::STR_Q_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_Q_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_Q_ldst_immpre() {
        assert_eq!(Instruction::STR_Q_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_Q_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_Q_ldst_regoff() {
        assert_eq!(Instruction::STR_Q_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_Q_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUR_Q_ldst_unscaled() {
        assert_eq!(Instruction::LDUR_Q_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUR_Q_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_Q_ldst_immpost() {
        assert_eq!(Instruction::LDR_Q_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_Q_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_Q_ldst_immpre() {
        assert_eq!(Instruction::LDR_Q_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_Q_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_Q_ldst_regoff() {
        assert_eq!(Instruction::LDR_Q_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_Q_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STLURH_32_ldapstl_unscaled() {
        assert_eq!(Instruction::STLURH_32_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLURH_32_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAPURH_32_ldapstl_unscaled() {
        assert_eq!(Instruction::LDAPURH_32_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAPURH_32_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAPURSH_64_ldapstl_unscaled() {
        assert_eq!(Instruction::LDAPURSH_64_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAPURSH_64_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAPURSH_32_ldapstl_unscaled() {
        assert_eq!(Instruction::LDAPURSH_32_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAPURSH_32_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CSINV_32_condsel() {
        assert_eq!(Instruction::CSINV_32_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CSINV_32_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CSNEG_32_condsel() {
        assert_eq!(Instruction::CSNEG_32_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CSNEG_32_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQDMLAL_asisdelem_L() {
        assert_eq!(Instruction::SQDMLAL_asisdelem_L { size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQDMLAL_asisdelem_L { size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQDMLSL_asisdelem_L() {
        assert_eq!(Instruction::SQDMLSL_asisdelem_L { size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQDMLSL_asisdelem_L { size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQDMULL_asisdelem_L() {
        assert_eq!(Instruction::SQDMULL_asisdelem_L { size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQDMULL_asisdelem_L { size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQDMULH_asisdelem_R() {
        assert_eq!(Instruction::SQDMULH_asisdelem_R { size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQDMULH_asisdelem_R { size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQRDMULH_asisdelem_R() {
        assert_eq!(Instruction::SQRDMULH_asisdelem_R { size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRDMULH_asisdelem_R { size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMGE_p_p_zz() {
        assert_eq!(Instruction::FCMGE_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FCMGE_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FCMLE_fcmge_p_p_zz() {
        assert_eq!(Instruction::FCMLE_fcmge_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FCMLE_fcmge_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FCMGT_p_p_zz() {
        assert_eq!(Instruction::FCMGT_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FCMGT_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FCMLT_fcmgt_p_p_zz() {
        assert_eq!(Instruction::FCMLT_fcmgt_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FCMLT_fcmgt_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FCMEQ_p_p_zz() {
        assert_eq!(Instruction::FCMEQ_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FCMEQ_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FCMNE_p_p_zz() {
        assert_eq!(Instruction::FCMNE_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FCMNE_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FCMUO_p_p_zz() {
        assert_eq!(Instruction::FCMUO_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FCMUO_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FACGE_p_p_zz() {
        assert_eq!(Instruction::FACGE_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FACGE_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FACLE_facge_p_p_zz() {
        assert_eq!(Instruction::FACLE_facge_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FACLE_facge_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FACGT_p_p_zz() {
        assert_eq!(Instruction::FACGT_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FACGT_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_FACLT_facgt_p_p_zz() {
        assert_eq!(Instruction::FACLT_facgt_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::FACLT_facgt_p_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_INS_asimdins_IV_v() {
        assert_eq!(Instruction::INS_asimdins_IV_v { imm5: 0, imm4: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::INS_asimdins_IV_v { imm5: 0, imm4: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOV_INS_asimdins_IV_v() {
        assert_eq!(Instruction::MOV_INS_asimdins_IV_v { imm5: 0, imm4: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOV_INS_asimdins_IV_v { imm5: 0, imm4: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STURH_32_ldst_unscaled() {
        assert_eq!(Instruction::STURH_32_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STURH_32_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STRH_32_ldst_immpost() {
        assert_eq!(Instruction::STRH_32_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STRH_32_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STTRH_32_ldst_unpriv() {
        assert_eq!(Instruction::STTRH_32_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STTRH_32_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STRH_32_ldst_immpre() {
        assert_eq!(Instruction::STRH_32_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STRH_32_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STRH_32_ldst_regoff() {
        assert_eq!(Instruction::STRH_32_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STRH_32_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDURH_32_ldst_unscaled() {
        assert_eq!(Instruction::LDURH_32_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDURH_32_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRH_32_ldst_immpost() {
        assert_eq!(Instruction::LDRH_32_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRH_32_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDTRH_32_ldst_unpriv() {
        assert_eq!(Instruction::LDTRH_32_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDTRH_32_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRH_32_ldst_immpre() {
        assert_eq!(Instruction::LDRH_32_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRH_32_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRH_32_ldst_regoff() {
        assert_eq!(Instruction::LDRH_32_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRH_32_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDURSH_64_ldst_unscaled() {
        assert_eq!(Instruction::LDURSH_64_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDURSH_64_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSH_64_ldst_immpost() {
        assert_eq!(Instruction::LDRSH_64_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSH_64_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDTRSH_64_ldst_unpriv() {
        assert_eq!(Instruction::LDTRSH_64_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDTRSH_64_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSH_64_ldst_immpre() {
        assert_eq!(Instruction::LDRSH_64_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSH_64_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSH_64_ldst_regoff() {
        assert_eq!(Instruction::LDRSH_64_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSH_64_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDURSH_32_ldst_unscaled() {
        assert_eq!(Instruction::LDURSH_32_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDURSH_32_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSH_32_ldst_immpost() {
        assert_eq!(Instruction::LDRSH_32_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSH_32_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDTRSH_32_ldst_unpriv() {
        assert_eq!(Instruction::LDTRSH_32_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDTRSH_32_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSH_32_ldst_immpre() {
        assert_eq!(Instruction::LDRSH_32_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSH_32_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSH_32_ldst_regoff() {
        assert_eq!(Instruction::LDRSH_32_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSH_32_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STUR_H_ldst_unscaled() {
        assert_eq!(Instruction::STUR_H_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STUR_H_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_H_ldst_immpost() {
        assert_eq!(Instruction::STR_H_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_H_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_H_ldst_immpre() {
        assert_eq!(Instruction::STR_H_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_H_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_H_ldst_regoff() {
        assert_eq!(Instruction::STR_H_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_H_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUR_H_ldst_unscaled() {
        assert_eq!(Instruction::LDUR_H_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUR_H_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_H_ldst_immpost() {
        assert_eq!(Instruction::LDR_H_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_H_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_H_ldst_immpre() {
        assert_eq!(Instruction::LDR_H_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_H_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_H_ldst_regoff() {
        assert_eq!(Instruction::LDR_H_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_H_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SQRDMLAH_asisdelem_R() {
        assert_eq!(Instruction::SQRDMLAH_asisdelem_R { size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRDMLAH_asisdelem_R { size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQRDMLSH_asisdelem_R() {
        assert_eq!(Instruction::SQRDMLSH_asisdelem_R { size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRDMLSH_asisdelem_R { size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_LD1SB_z_p_bz_s_x32_unscaled() {
        assert_eq!(Instruction::LD1SB_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SB_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SB_z_p_bz_s_x32_unscaled() {
        assert_eq!(Instruction::LDFF1SB_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SB_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1B_z_p_bz_s_x32_unscaled() {
        assert_eq!(Instruction::LD1B_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1B_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1B_z_p_bz_s_x32_unscaled() {
        assert_eq!(Instruction::LDFF1B_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1B_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RB_z_p_bi_u8() {
        assert_eq!(Instruction::LD1RB_z_p_bi_u8 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RB_z_p_bi_u8 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RB_z_p_bi_u16() {
        assert_eq!(Instruction::LD1RB_z_p_bi_u16 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RB_z_p_bi_u16 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RB_z_p_bi_u32() {
        assert_eq!(Instruction::LD1RB_z_p_bi_u32 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RB_z_p_bi_u32 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RB_z_p_bi_u64() {
        assert_eq!(Instruction::LD1RB_z_p_bi_u64 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RB_z_p_bi_u64 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SH_z_p_bz_s_x32_unscaled() {
        assert_eq!(Instruction::LD1SH_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SH_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SH_z_p_bz_s_x32_unscaled() {
        assert_eq!(Instruction::LDFF1SH_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SH_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1H_z_p_bz_s_x32_unscaled() {
        assert_eq!(Instruction::LD1H_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1H_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1H_z_p_bz_s_x32_unscaled() {
        assert_eq!(Instruction::LDFF1H_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1H_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SH_z_p_bz_s_x32_scaled() {
        assert_eq!(Instruction::LD1SH_z_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SH_z_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SH_z_p_bz_s_x32_scaled() {
        assert_eq!(Instruction::LDFF1SH_z_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SH_z_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1H_z_p_bz_s_x32_scaled() {
        assert_eq!(Instruction::LD1H_z_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1H_z_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1H_z_p_bz_s_x32_scaled() {
        assert_eq!(Instruction::LDFF1H_z_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1H_z_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RSW_z_p_bi_s64() {
        assert_eq!(Instruction::LD1RSW_z_p_bi_s64 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RSW_z_p_bi_s64 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RH_z_p_bi_u16() {
        assert_eq!(Instruction::LD1RH_z_p_bi_u16 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RH_z_p_bi_u16 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RH_z_p_bi_u32() {
        assert_eq!(Instruction::LD1RH_z_p_bi_u32 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RH_z_p_bi_u32 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RH_z_p_bi_u64() {
        assert_eq!(Instruction::LD1RH_z_p_bi_u64 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RH_z_p_bi_u64 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1W_z_p_bz_s_x32_unscaled() {
        assert_eq!(Instruction::LD1W_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1W_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1W_z_p_bz_s_x32_unscaled() {
        assert_eq!(Instruction::LDFF1W_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1W_z_p_bz_s_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1W_z_p_bz_s_x32_scaled() {
        assert_eq!(Instruction::LD1W_z_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1W_z_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1W_z_p_bz_s_x32_scaled() {
        assert_eq!(Instruction::LDFF1W_z_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1W_z_p_bz_s_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RSH_z_p_bi_s64() {
        assert_eq!(Instruction::LD1RSH_z_p_bi_s64 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RSH_z_p_bi_s64 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RSH_z_p_bi_s32() {
        assert_eq!(Instruction::LD1RSH_z_p_bi_s32 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RSH_z_p_bi_s32 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RW_z_p_bi_u32() {
        assert_eq!(Instruction::LD1RW_z_p_bi_u32 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RW_z_p_bi_u32 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RW_z_p_bi_u64() {
        assert_eq!(Instruction::LD1RW_z_p_bi_u64 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RW_z_p_bi_u64 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDR_z_bi() {
        assert_eq!(Instruction::LDR_z_bi { imm9h: 0, imm9l: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDR_z_bi { imm9h: 0, imm9l: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RSB_z_p_bi_s64() {
        assert_eq!(Instruction::LD1RSB_z_p_bi_s64 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RSB_z_p_bi_s64 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RSB_z_p_bi_s32() {
        assert_eq!(Instruction::LD1RSB_z_p_bi_s32 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RSB_z_p_bi_s32 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RSB_z_p_bi_s16() {
        assert_eq!(Instruction::LD1RSB_z_p_bi_s16 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RSB_z_p_bi_s16 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1RD_z_p_bi_u64() {
        assert_eq!(Instruction::LD1RD_z_p_bi_u64 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1RD_z_p_bi_u64 { imm6: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_STLUR_32_ldapstl_unscaled() {
        assert_eq!(Instruction::STLUR_32_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLUR_32_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAPUR_32_ldapstl_unscaled() {
        assert_eq!(Instruction::LDAPUR_32_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAPUR_32_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAPURSW_64_ldapstl_unscaled() {
        assert_eq!(Instruction::LDAPURSW_64_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAPURSW_64_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CSEL_64_condsel() {
        assert_eq!(Instruction::CSEL_64_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CSEL_64_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CSINC_64_condsel() {
        assert_eq!(Instruction::CSINC_64_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CSINC_64_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STUR_32_ldst_unscaled() {
        assert_eq!(Instruction::STUR_32_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STUR_32_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_32_ldst_immpost() {
        assert_eq!(Instruction::STR_32_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_32_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STTR_32_ldst_unpriv() {
        assert_eq!(Instruction::STTR_32_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STTR_32_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_32_ldst_immpre() {
        assert_eq!(Instruction::STR_32_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_32_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_32_ldst_regoff() {
        assert_eq!(Instruction::STR_32_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_32_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUR_32_ldst_unscaled() {
        assert_eq!(Instruction::LDUR_32_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUR_32_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_32_ldst_immpost() {
        assert_eq!(Instruction::LDR_32_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_32_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDTR_32_ldst_unpriv() {
        assert_eq!(Instruction::LDTR_32_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDTR_32_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_32_ldst_immpre() {
        assert_eq!(Instruction::LDR_32_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_32_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_32_ldst_regoff() {
        assert_eq!(Instruction::LDR_32_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_32_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDURSW_64_ldst_unscaled() {
        assert_eq!(Instruction::LDURSW_64_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDURSW_64_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSW_64_ldst_immpost() {
        assert_eq!(Instruction::LDRSW_64_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSW_64_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDTRSW_64_ldst_unpriv() {
        assert_eq!(Instruction::LDTRSW_64_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDTRSW_64_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSW_64_ldst_immpre() {
        assert_eq!(Instruction::LDRSW_64_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSW_64_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSW_64_ldst_regoff() {
        assert_eq!(Instruction::LDRSW_64_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSW_64_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STUR_S_ldst_unscaled() {
        assert_eq!(Instruction::STUR_S_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STUR_S_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_S_ldst_immpost() {
        assert_eq!(Instruction::STR_S_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_S_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_S_ldst_immpre() {
        assert_eq!(Instruction::STR_S_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_S_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_S_ldst_regoff() {
        assert_eq!(Instruction::STR_S_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_S_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUR_S_ldst_unscaled() {
        assert_eq!(Instruction::LDUR_S_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUR_S_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_S_ldst_immpost() {
        assert_eq!(Instruction::LDR_S_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_S_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_S_ldst_immpre() {
        assert_eq!(Instruction::LDR_S_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_S_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_S_ldst_regoff() {
        assert_eq!(Instruction::LDR_S_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_S_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LD1SB_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::LD1SB_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SB_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SB_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::LDFF1SB_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SB_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1B_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::LD1B_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1B_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1B_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::LDFF1B_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1B_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SH_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::LD1SH_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SH_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SH_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::LDFF1SH_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SH_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1H_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::LD1H_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1H_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1H_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::LDFF1H_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1H_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SH_z_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::LD1SH_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SH_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SH_z_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::LDFF1SH_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SH_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1H_z_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::LD1H_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1H_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1H_z_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::LDFF1H_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1H_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SW_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::LD1SW_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SW_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SW_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::LDFF1SW_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SW_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1W_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::LD1W_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1W_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1W_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::LDFF1W_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1W_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1SW_z_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::LD1SW_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1SW_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1SW_z_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::LDFF1SW_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1SW_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1W_z_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::LD1W_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1W_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1W_z_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::LDFF1W_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1W_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1D_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::LD1D_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1D_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1D_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::LDFF1D_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1D_z_p_bz_d_x32_unscaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LD1D_z_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::LD1D_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LD1D_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDFF1D_z_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::LDFF1D_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::LDFF1D_z_p_bz_d_x32_scaled { xs: 0, Zm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_SYS_CR_systeminstrs() {
        assert_eq!(Instruction::SYS_CR_systeminstrs { op1: 0, CRn: 0, CRm: 0, op2: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SYS_CR_systeminstrs { op1: 0, CRn: 0, CRm: 0, op2: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SYSL_RC_systeminstrs() {
        assert_eq!(Instruction::SYSL_RC_systeminstrs { op1: 0, CRn: 0, CRm: 0, op2: 0, Rt: 0, }.encode().decode(), 
                   Instruction::SYSL_RC_systeminstrs { op1: 0, CRn: 0, CRm: 0, op2: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STLUR_64_ldapstl_unscaled() {
        assert_eq!(Instruction::STLUR_64_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLUR_64_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STG_64Spost_ldsttags() {
        assert_eq!(Instruction::STG_64Spost_ldsttags { imm9: 0, Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::STG_64Spost_ldsttags { imm9: 0, Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_STG_64Soffset_ldsttags() {
        assert_eq!(Instruction::STG_64Soffset_ldsttags { imm9: 0, Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::STG_64Soffset_ldsttags { imm9: 0, Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_STG_64Spre_ldsttags() {
        assert_eq!(Instruction::STG_64Spre_ldsttags { imm9: 0, Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::STG_64Spre_ldsttags { imm9: 0, Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_LDAPUR_64_ldapstl_unscaled() {
        assert_eq!(Instruction::LDAPUR_64_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAPUR_64_ldapstl_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDG_64Loffset_ldsttags() {
        assert_eq!(Instruction::LDG_64Loffset_ldsttags { imm9: 0, Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::LDG_64Loffset_ldsttags { imm9: 0, Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_STZG_64Spost_ldsttags() {
        assert_eq!(Instruction::STZG_64Spost_ldsttags { imm9: 0, Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::STZG_64Spost_ldsttags { imm9: 0, Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_STZG_64Soffset_ldsttags() {
        assert_eq!(Instruction::STZG_64Soffset_ldsttags { imm9: 0, Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::STZG_64Soffset_ldsttags { imm9: 0, Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_STZG_64Spre_ldsttags() {
        assert_eq!(Instruction::STZG_64Spre_ldsttags { imm9: 0, Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::STZG_64Spre_ldsttags { imm9: 0, Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_ST2G_64Spost_ldsttags() {
        assert_eq!(Instruction::ST2G_64Spost_ldsttags { imm9: 0, Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::ST2G_64Spost_ldsttags { imm9: 0, Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_ST2G_64Soffset_ldsttags() {
        assert_eq!(Instruction::ST2G_64Soffset_ldsttags { imm9: 0, Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::ST2G_64Soffset_ldsttags { imm9: 0, Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_ST2G_64Spre_ldsttags() {
        assert_eq!(Instruction::ST2G_64Spre_ldsttags { imm9: 0, Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::ST2G_64Spre_ldsttags { imm9: 0, Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_STZ2G_64Spost_ldsttags() {
        assert_eq!(Instruction::STZ2G_64Spost_ldsttags { imm9: 0, Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::STZ2G_64Spost_ldsttags { imm9: 0, Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_STZ2G_64Soffset_ldsttags() {
        assert_eq!(Instruction::STZ2G_64Soffset_ldsttags { imm9: 0, Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::STZ2G_64Soffset_ldsttags { imm9: 0, Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_STZ2G_64Spre_ldsttags() {
        assert_eq!(Instruction::STZ2G_64Spre_ldsttags { imm9: 0, Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::STZ2G_64Spre_ldsttags { imm9: 0, Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_CSINV_64_condsel() {
        assert_eq!(Instruction::CSINV_64_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CSINV_64_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CSNEG_64_condsel() {
        assert_eq!(Instruction::CSNEG_64_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::CSNEG_64_condsel { Rm: 0, cond: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ST1B_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::ST1B_z_p_bz_d_x32_unscaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1B_z_p_bz_d_x32_unscaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1B_z_p_bi() {
        assert_eq!(Instruction::ST1B_z_p_bi { size: 0, imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1B_z_p_bi { size: 0, imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1B_z_p_bz_s_x32_unscaled() {
        assert_eq!(Instruction::ST1B_z_p_bz_s_x32_unscaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1B_z_p_bz_s_x32_unscaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1H_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::ST1H_z_p_bz_d_x32_unscaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1H_z_p_bz_d_x32_unscaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1H_z_p_bi() {
        assert_eq!(Instruction::ST1H_z_p_bi { size: 0, imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1H_z_p_bi { size: 0, imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1H_z_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::ST1H_z_p_bz_d_x32_scaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1H_z_p_bz_d_x32_scaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1H_z_p_bz_s_x32_unscaled() {
        assert_eq!(Instruction::ST1H_z_p_bz_s_x32_unscaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1H_z_p_bz_s_x32_unscaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1H_z_p_bz_s_x32_scaled() {
        assert_eq!(Instruction::ST1H_z_p_bz_s_x32_scaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1H_z_p_bz_s_x32_scaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1W_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::ST1W_z_p_bz_d_x32_unscaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1W_z_p_bz_d_x32_unscaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1W_z_p_bi() {
        assert_eq!(Instruction::ST1W_z_p_bi { size: 0, imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1W_z_p_bi { size: 0, imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1W_z_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::ST1W_z_p_bz_d_x32_scaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1W_z_p_bz_d_x32_scaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1W_z_p_bz_s_x32_unscaled() {
        assert_eq!(Instruction::ST1W_z_p_bz_s_x32_unscaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1W_z_p_bz_s_x32_unscaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1W_z_p_bz_s_x32_scaled() {
        assert_eq!(Instruction::ST1W_z_p_bz_s_x32_scaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1W_z_p_bz_s_x32_scaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_STR_z_bi() {
        assert_eq!(Instruction::STR_z_bi { imm9h: 0, imm9l: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::STR_z_bi { imm9h: 0, imm9l: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1D_z_p_bz_d_x32_unscaled() {
        assert_eq!(Instruction::ST1D_z_p_bz_d_x32_unscaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1D_z_p_bz_d_x32_unscaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1D_z_p_bi() {
        assert_eq!(Instruction::ST1D_z_p_bi { size: 0, imm4: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1D_z_p_bi { size: 0, imm4: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1D_z_p_bz_d_x32_scaled() {
        assert_eq!(Instruction::ST1D_z_p_bz_d_x32_scaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1D_z_p_bz_d_x32_scaled { Zm: 0, xs: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_STUR_64_ldst_unscaled() {
        assert_eq!(Instruction::STUR_64_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STUR_64_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_64_ldst_immpost() {
        assert_eq!(Instruction::STR_64_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_64_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STTR_64_ldst_unpriv() {
        assert_eq!(Instruction::STTR_64_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STTR_64_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_64_ldst_immpre() {
        assert_eq!(Instruction::STR_64_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_64_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_64_ldst_regoff() {
        assert_eq!(Instruction::STR_64_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_64_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUR_64_ldst_unscaled() {
        assert_eq!(Instruction::LDUR_64_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUR_64_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_64_ldst_immpost() {
        assert_eq!(Instruction::LDR_64_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_64_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDTR_64_ldst_unpriv() {
        assert_eq!(Instruction::LDTR_64_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDTR_64_ldst_unpriv { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_64_ldst_immpre() {
        assert_eq!(Instruction::LDR_64_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_64_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_64_ldst_regoff() {
        assert_eq!(Instruction::LDR_64_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_64_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_PRFUM_P_ldst_unscaled() {
        assert_eq!(Instruction::PRFUM_P_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::PRFUM_P_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_PRFM_P_ldst_regoff() {
        assert_eq!(Instruction::PRFM_P_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::PRFM_P_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STUR_D_ldst_unscaled() {
        assert_eq!(Instruction::STUR_D_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STUR_D_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_D_ldst_immpost() {
        assert_eq!(Instruction::STR_D_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_D_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_D_ldst_immpre() {
        assert_eq!(Instruction::STR_D_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_D_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_D_ldst_regoff() {
        assert_eq!(Instruction::STR_D_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_D_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDUR_D_ldst_unscaled() {
        assert_eq!(Instruction::LDUR_D_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDUR_D_ldst_unscaled { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_D_ldst_immpost() {
        assert_eq!(Instruction::LDR_D_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_D_ldst_immpost { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_D_ldst_immpre() {
        assert_eq!(Instruction::LDR_D_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_D_ldst_immpre { imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_D_ldst_regoff() {
        assert_eq!(Instruction::LDR_D_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_D_ldst_regoff { Rm: 0, option: 0, S: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_MLA_z_p_zzz() {
        assert_eq!(Instruction::MLA_z_p_zzz { size: 0, Zm: 0, Pg: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::MLA_z_p_zzz { size: 0, Zm: 0, Pg: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_MLS_z_p_zzz() {
        assert_eq!(Instruction::MLS_z_p_zzz { size: 0, Zm: 0, Pg: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::MLS_z_p_zzz { size: 0, Zm: 0, Pg: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_MAD_z_p_zzz() {
        assert_eq!(Instruction::MAD_z_p_zzz { size: 0, Zm: 0, Pg: 0, Za: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::MAD_z_p_zzz { size: 0, Zm: 0, Pg: 0, Za: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_MSB_z_p_zzz() {
        assert_eq!(Instruction::MSB_z_p_zzz { size: 0, Zm: 0, Pg: 0, Za: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::MSB_z_p_zzz { size: 0, Zm: 0, Pg: 0, Za: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_CPY_z_o_i() {
        assert_eq!(Instruction::CPY_z_o_i { size: 0, Pg: 0, sh: 0, imm8: 0, Zd: 0, }.encode().decode(), 
                   Instruction::CPY_z_o_i { size: 0, Pg: 0, sh: 0, imm8: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_MOV_cpy_z_o_i() {
        assert_eq!(Instruction::MOV_cpy_z_o_i { size: 0, Pg: 0, sh: 0, imm8: 0, Zd: 0, }.encode().decode(), 
                   Instruction::MOV_cpy_z_o_i { size: 0, Pg: 0, sh: 0, imm8: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_CPY_z_p_i() {
        assert_eq!(Instruction::CPY_z_p_i { size: 0, Pg: 0, sh: 0, imm8: 0, Zd: 0, }.encode().decode(), 
                   Instruction::CPY_z_p_i { size: 0, Pg: 0, sh: 0, imm8: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_MOV_cpy_z_p_i() {
        assert_eq!(Instruction::MOV_cpy_z_p_i { size: 0, Pg: 0, sh: 0, imm8: 0, Zd: 0, }.encode().decode(), 
                   Instruction::MOV_cpy_z_p_i { size: 0, Pg: 0, sh: 0, imm8: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_STXRB_SR32_ldstexcl() {
        assert_eq!(Instruction::STXRB_SR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STXRB_SR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STLXRB_SR32_ldstexcl() {
        assert_eq!(Instruction::STLXRB_SR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLXRB_SR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDXRB_LR32_ldstexcl() {
        assert_eq!(Instruction::LDXRB_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDXRB_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAXRB_LR32_ldstexcl() {
        assert_eq!(Instruction::LDAXRB_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAXRB_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STLLRB_SL32_ldstexcl() {
        assert_eq!(Instruction::STLLRB_SL32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLLRB_SL32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STLRB_SL32_ldstexcl() {
        assert_eq!(Instruction::STLRB_SL32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLRB_SL32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDLARB_LR32_ldstexcl() {
        assert_eq!(Instruction::LDLARB_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDLARB_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDARB_LR32_ldstexcl() {
        assert_eq!(Instruction::LDARB_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDARB_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SMLAL_asimdelem_L() {
        assert_eq!(Instruction::SMLAL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMLAL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQDMLAL_asimdelem_L() {
        assert_eq!(Instruction::SQDMLAL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQDMLAL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMLSL_asimdelem_L() {
        assert_eq!(Instruction::SMLSL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMLSL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQDMLSL_asimdelem_L() {
        assert_eq!(Instruction::SQDMLSL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQDMLSL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MUL_asimdelem_R() {
        assert_eq!(Instruction::MUL_asimdelem_R { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MUL_asimdelem_R { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMULL_asimdelem_L() {
        assert_eq!(Instruction::SMULL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMULL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQDMULL_asimdelem_L() {
        assert_eq!(Instruction::SQDMULL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQDMULL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQDMULH_asimdelem_R() {
        assert_eq!(Instruction::SQDMULH_asimdelem_R { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQDMULH_asimdelem_R { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQRDMULH_asimdelem_R() {
        assert_eq!(Instruction::SQRDMULH_asimdelem_R { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRDMULH_asimdelem_R { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SDOT_asimdelem_D() {
        assert_eq!(Instruction::SDOT_asimdelem_D { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SDOT_asimdelem_D { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_EXTR_32_extract() {
        assert_eq!(Instruction::EXTR_32_extract { Rm: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::EXTR_32_extract { Rm: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ROR_EXTR_32_extract() {
        assert_eq!(Instruction::ROR_EXTR_32_extract { Rm: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ROR_EXTR_32_extract { Rm: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MADD_32A_dp_3src() {
        assert_eq!(Instruction::MADD_32A_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MADD_32A_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MSUB_32A_dp_3src() {
        assert_eq!(Instruction::MSUB_32A_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MSUB_32A_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMADD_S_floatdp3() {
        assert_eq!(Instruction::FMADD_S_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMADD_S_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMSUB_S_floatdp3() {
        assert_eq!(Instruction::FMSUB_S_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMSUB_S_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FNMADD_S_floatdp3() {
        assert_eq!(Instruction::FNMADD_S_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FNMADD_S_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FNMSUB_S_floatdp3() {
        assert_eq!(Instruction::FNMSUB_S_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FNMSUB_S_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMADD_D_floatdp3() {
        assert_eq!(Instruction::FMADD_D_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMADD_D_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMSUB_D_floatdp3() {
        assert_eq!(Instruction::FMSUB_D_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMSUB_D_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FNMADD_D_floatdp3() {
        assert_eq!(Instruction::FNMADD_D_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FNMADD_D_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FNMSUB_D_floatdp3() {
        assert_eq!(Instruction::FNMSUB_D_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FNMSUB_D_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMADD_H_floatdp3() {
        assert_eq!(Instruction::FMADD_H_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMADD_H_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FMSUB_H_floatdp3() {
        assert_eq!(Instruction::FMSUB_H_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FMSUB_H_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FNMADD_H_floatdp3() {
        assert_eq!(Instruction::FNMADD_H_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FNMADD_H_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FNMSUB_H_floatdp3() {
        assert_eq!(Instruction::FNMSUB_H_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FNMSUB_H_floatdp3 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_EXT_asimdext_only() {
        assert_eq!(Instruction::EXT_asimdext_only { Q: 0, Rm: 0, imm4: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::EXT_asimdext_only { Q: 0, Rm: 0, imm4: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMLA_asimdsame2_C() {
        assert_eq!(Instruction::FCMLA_asimdsame2_C { Q: 0, size: 0, Rm: 0, rot: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMLA_asimdsame2_C { Q: 0, size: 0, Rm: 0, rot: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MLA_asimdelem_R() {
        assert_eq!(Instruction::MLA_asimdelem_R { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MLA_asimdelem_R { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMLAL_asimdelem_L() {
        assert_eq!(Instruction::UMLAL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMLAL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MLS_asimdelem_R() {
        assert_eq!(Instruction::MLS_asimdelem_R { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MLS_asimdelem_R { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMLSL_asimdelem_L() {
        assert_eq!(Instruction::UMLSL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMLSL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMULL_asimdelem_L() {
        assert_eq!(Instruction::UMULL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMULL_asimdelem_L { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQRDMLAH_asimdelem_R() {
        assert_eq!(Instruction::SQRDMLAH_asimdelem_R { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRDMLAH_asimdelem_R { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UDOT_asimdelem_D() {
        assert_eq!(Instruction::UDOT_asimdelem_D { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UDOT_asimdelem_D { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SQRDMLSH_asimdelem_R() {
        assert_eq!(Instruction::SQRDMLSH_asimdelem_R { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SQRDMLSH_asimdelem_R { Q: 0, size: 0, L: 0, M: 0, Rm: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMLA_asimdelem_C_H() {
        assert_eq!(Instruction::FCMLA_asimdelem_C_H { Q: 0, L: 0, M: 0, Rm: 0, rot: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMLA_asimdelem_C_H { Q: 0, L: 0, M: 0, Rm: 0, rot: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMLA_asimdelem_C_S() {
        assert_eq!(Instruction::FCMLA_asimdelem_C_S { Q: 0, L: 0, M: 0, Rm: 0, rot: 0, H: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::FCMLA_asimdelem_C_S { Q: 0, L: 0, M: 0, Rm: 0, rot: 0, H: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STXRH_SR32_ldstexcl() {
        assert_eq!(Instruction::STXRH_SR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STXRH_SR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STLXRH_SR32_ldstexcl() {
        assert_eq!(Instruction::STLXRH_SR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLXRH_SR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDXRH_LR32_ldstexcl() {
        assert_eq!(Instruction::LDXRH_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDXRH_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAXRH_LR32_ldstexcl() {
        assert_eq!(Instruction::LDAXRH_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAXRH_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STLLRH_SL32_ldstexcl() {
        assert_eq!(Instruction::STLLRH_SL32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLLRH_SL32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STLRH_SL32_ldstexcl() {
        assert_eq!(Instruction::STLRH_SL32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLRH_SL32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDLARH_LR32_ldstexcl() {
        assert_eq!(Instruction::LDLARH_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDLARH_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDARH_LR32_ldstexcl() {
        assert_eq!(Instruction::LDARH_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDARH_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_FMLA_z_p_zzz() {
        assert_eq!(Instruction::FMLA_z_p_zzz { size: 0, Zm: 0, Pg: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::FMLA_z_p_zzz { size: 0, Zm: 0, Pg: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_FMLS_z_p_zzz() {
        assert_eq!(Instruction::FMLS_z_p_zzz { size: 0, Zm: 0, Pg: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::FMLS_z_p_zzz { size: 0, Zm: 0, Pg: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_FNMLA_z_p_zzz() {
        assert_eq!(Instruction::FNMLA_z_p_zzz { size: 0, Zm: 0, Pg: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::FNMLA_z_p_zzz { size: 0, Zm: 0, Pg: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_FNMLS_z_p_zzz() {
        assert_eq!(Instruction::FNMLS_z_p_zzz { size: 0, Zm: 0, Pg: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::FNMLS_z_p_zzz { size: 0, Zm: 0, Pg: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_FMAD_z_p_zzz() {
        assert_eq!(Instruction::FMAD_z_p_zzz { size: 0, Za: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FMAD_z_p_zzz { size: 0, Za: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FMSB_z_p_zzz() {
        assert_eq!(Instruction::FMSB_z_p_zzz { size: 0, Za: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FMSB_z_p_zzz { size: 0, Za: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FNMAD_z_p_zzz() {
        assert_eq!(Instruction::FNMAD_z_p_zzz { size: 0, Za: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FNMAD_z_p_zzz { size: 0, Za: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_FNMSB_z_p_zzz() {
        assert_eq!(Instruction::FNMSB_z_p_zzz { size: 0, Za: 0, Pg: 0, Zm: 0, Zdn: 0, }.encode().decode(), 
                   Instruction::FNMSB_z_p_zzz { size: 0, Za: 0, Pg: 0, Zm: 0, Zdn: 0, })
    }
    #[test]
    fn roundtrip_STXR_SR32_ldstexcl() {
        assert_eq!(Instruction::STXR_SR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STXR_SR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STLXR_SR32_ldstexcl() {
        assert_eq!(Instruction::STLXR_SR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLXR_SR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STXP_SP32_ldstexcl() {
        assert_eq!(Instruction::STXP_SP32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STXP_SP32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STLXP_SP32_ldstexcl() {
        assert_eq!(Instruction::STLXP_SP32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLXP_SP32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDXR_LR32_ldstexcl() {
        assert_eq!(Instruction::LDXR_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDXR_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAXR_LR32_ldstexcl() {
        assert_eq!(Instruction::LDAXR_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAXR_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDXP_LP32_ldstexcl() {
        assert_eq!(Instruction::LDXP_LP32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDXP_LP32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAXP_LP32_ldstexcl() {
        assert_eq!(Instruction::LDAXP_LP32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAXP_LP32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STLLR_SL32_ldstexcl() {
        assert_eq!(Instruction::STLLR_SL32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLLR_SL32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STLR_SL32_ldstexcl() {
        assert_eq!(Instruction::STLR_SL32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLR_SL32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDLAR_LR32_ldstexcl() {
        assert_eq!(Instruction::LDLAR_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDLAR_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAR_LR32_ldstexcl() {
        assert_eq!(Instruction::LDAR_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAR_LR32_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_MADD_64A_dp_3src() {
        assert_eq!(Instruction::MADD_64A_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MADD_64A_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MSUB_64A_dp_3src() {
        assert_eq!(Instruction::MSUB_64A_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MSUB_64A_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMADDL_64WA_dp_3src() {
        assert_eq!(Instruction::SMADDL_64WA_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMADDL_64WA_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMSUBL_64WA_dp_3src() {
        assert_eq!(Instruction::SMSUBL_64WA_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMSUBL_64WA_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SMULH_64_dp_3src() {
        assert_eq!(Instruction::SMULH_64_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SMULH_64_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMADDL_64WA_dp_3src() {
        assert_eq!(Instruction::UMADDL_64WA_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMADDL_64WA_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMSUBL_64WA_dp_3src() {
        assert_eq!(Instruction::UMSUBL_64WA_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMSUBL_64WA_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UMULH_64_dp_3src() {
        assert_eq!(Instruction::UMULH_64_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UMULH_64_dp_3src { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STXR_SR64_ldstexcl() {
        assert_eq!(Instruction::STXR_SR64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STXR_SR64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STLXR_SR64_ldstexcl() {
        assert_eq!(Instruction::STLXR_SR64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLXR_SR64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STXP_SP64_ldstexcl() {
        assert_eq!(Instruction::STXP_SP64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STXP_SP64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STLXP_SP64_ldstexcl() {
        assert_eq!(Instruction::STLXP_SP64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLXP_SP64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDXR_LR64_ldstexcl() {
        assert_eq!(Instruction::LDXR_LR64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDXR_LR64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAXR_LR64_ldstexcl() {
        assert_eq!(Instruction::LDAXR_LR64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAXR_LR64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDXP_LP64_ldstexcl() {
        assert_eq!(Instruction::LDXP_LP64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDXP_LP64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAXP_LP64_ldstexcl() {
        assert_eq!(Instruction::LDAXP_LP64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAXP_LP64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STLLR_SL64_ldstexcl() {
        assert_eq!(Instruction::STLLR_SL64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLLR_SL64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STLR_SL64_ldstexcl() {
        assert_eq!(Instruction::STLR_SL64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STLR_SL64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDLAR_LR64_ldstexcl() {
        assert_eq!(Instruction::LDLAR_LR64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDLAR_LR64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDAR_LR64_ldstexcl() {
        assert_eq!(Instruction::LDAR_LR64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDAR_LR64_ldstexcl { Rs: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_EOR3_VVV16_crypto4() {
        assert_eq!(Instruction::EOR3_VVV16_crypto4 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::EOR3_VVV16_crypto4 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BCAX_VVV16_crypto4() {
        assert_eq!(Instruction::BCAX_VVV16_crypto4 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BCAX_VVV16_crypto4 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SM3SS1_VVV4_crypto4() {
        assert_eq!(Instruction::SM3SS1_VVV4_crypto4 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SM3SS1_VVV4_crypto4 { Rm: 0, Ra: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MSR_SR_systemmove() {
        assert_eq!(Instruction::MSR_SR_systemmove { o0: 0, op1: 0, CRn: 0, CRm: 0, op2: 0, Rt: 0, }.encode().decode(), 
                   Instruction::MSR_SR_systemmove { o0: 0, op1: 0, CRn: 0, CRm: 0, op2: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_MRS_RS_systemmove() {
        assert_eq!(Instruction::MRS_RS_systemmove { o0: 0, op1: 0, CRn: 0, CRm: 0, op2: 0, Rt: 0, }.encode().decode(), 
                   Instruction::MRS_RS_systemmove { o0: 0, op1: 0, CRn: 0, CRm: 0, op2: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ST1B_z_p_br() {
        assert_eq!(Instruction::ST1B_z_p_br { size: 0, Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1B_z_p_br { size: 0, Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1H_z_p_br() {
        assert_eq!(Instruction::ST1H_z_p_br { size: 0, Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1H_z_p_br { size: 0, Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_ST1W_z_p_br() {
        assert_eq!(Instruction::ST1W_z_p_br { size: 0, Rm: 0, Pg: 0, Rn: 0, Zt: 0, }.encode().decode(), 
                   Instruction::ST1W_z_p_br { size: 0, Rm: 0, Pg: 0, Rn: 0, Zt: 0, })
    }
    #[test]
    fn roundtrip_LDRAA_64_ldst_pac() {
        assert_eq!(Instruction::LDRAA_64_ldst_pac { S: 0, imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRAA_64_ldst_pac { S: 0, imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRAA_64W_ldst_pac() {
        assert_eq!(Instruction::LDRAA_64W_ldst_pac { S: 0, imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRAA_64W_ldst_pac { S: 0, imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRAB_64_ldst_pac() {
        assert_eq!(Instruction::LDRAB_64_ldst_pac { S: 0, imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRAB_64_ldst_pac { S: 0, imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRAB_64W_ldst_pac() {
        assert_eq!(Instruction::LDRAB_64W_ldst_pac { S: 0, imm9: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRAB_64W_ldst_pac { S: 0, imm9: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_MOV_sel_z_p_zz() {
        assert_eq!(Instruction::MOV_sel_z_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::MOV_sel_z_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_SEL_z_p_zz() {
        assert_eq!(Instruction::SEL_z_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Zd: 0, }.encode().decode(), 
                   Instruction::SEL_z_p_zz { size: 0, Zm: 0, Pg: 0, Zn: 0, Zd: 0, })
    }
    #[test]
    fn roundtrip_ADD_32_addsub_ext() {
        assert_eq!(Instruction::ADD_32_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADD_32_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_CMPHS_p_p_zi() {
        assert_eq!(Instruction::CMPHS_p_p_zi { size: 0, imm7: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPHS_p_p_zi { size: 0, imm7: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPHI_p_p_zi() {
        assert_eq!(Instruction::CMPHI_p_p_zi { size: 0, imm7: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPHI_p_p_zi { size: 0, imm7: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPLO_p_p_zi() {
        assert_eq!(Instruction::CMPLO_p_p_zi { size: 0, imm7: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPLO_p_p_zi { size: 0, imm7: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_CMPLS_p_p_zi() {
        assert_eq!(Instruction::CMPLS_p_p_zi { size: 0, imm7: 0, Pg: 0, Zn: 0, Pd: 0, }.encode().decode(), 
                   Instruction::CMPLS_p_p_zi { size: 0, imm7: 0, Pg: 0, Zn: 0, Pd: 0, })
    }
    #[test]
    fn roundtrip_ADDS_32S_addsub_ext() {
        assert_eq!(Instruction::ADDS_32S_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADDS_32S_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUB_32_addsub_ext() {
        assert_eq!(Instruction::SUB_32_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUB_32_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUBS_32S_addsub_ext() {
        assert_eq!(Instruction::SUBS_32S_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUBS_32S_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADD_64_addsub_ext() {
        assert_eq!(Instruction::ADD_64_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADD_64_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_EXTR_64_extract() {
        assert_eq!(Instruction::EXTR_64_extract { Rm: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::EXTR_64_extract { Rm: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ROR_EXTR_64_extract() {
        assert_eq!(Instruction::ROR_EXTR_64_extract { Rm: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ROR_EXTR_64_extract { Rm: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADDS_64S_addsub_ext() {
        assert_eq!(Instruction::ADDS_64S_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADDS_64S_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUB_64_addsub_ext() {
        assert_eq!(Instruction::SUB_64_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUB_64_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_XAR_VVV2_crypto3_imm6() {
        assert_eq!(Instruction::XAR_VVV2_crypto3_imm6 { Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::XAR_VVV2_crypto3_imm6 { Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUBS_64S_addsub_ext() {
        assert_eq!(Instruction::SUBS_64S_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUBS_64S_addsub_ext { Rm: 0, option: 0, imm3: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BFI_BFM_32M_bitfield() {
        assert_eq!(Instruction::BFI_BFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BFI_BFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_LSL_UBFM_32M_bitfield() {
        assert_eq!(Instruction::LSL_UBFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::LSL_UBFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BFI_BFM_64M_bitfield() {
        assert_eq!(Instruction::BFI_BFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BFI_BFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_LSL_UBFM_64M_bitfield() {
        assert_eq!(Instruction::LSL_UBFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::LSL_UBFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_AND_32_log_imm() {
        assert_eq!(Instruction::AND_32_log_imm { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::AND_32_log_imm { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOV_MOVN_32_movewide() {
        assert_eq!(Instruction::MOV_MOVN_32_movewide { hw: 0, imm16: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOV_MOVN_32_movewide { hw: 0, imm16: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOVN_32_movewide() {
        assert_eq!(Instruction::MOVN_32_movewide { hw: 0, imm16: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOVN_32_movewide { hw: 0, imm16: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SBFIZ_SBFM_32M_bitfield() {
        assert_eq!(Instruction::SBFIZ_SBFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SBFIZ_SBFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SBFM_32M_bitfield() {
        assert_eq!(Instruction::SBFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SBFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SBFX_SBFM_32M_bitfield() {
        assert_eq!(Instruction::SBFX_SBFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SBFX_SBFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STNP_32_ldstnapair_offs() {
        assert_eq!(Instruction::STNP_32_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STNP_32_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDNP_32_ldstnapair_offs() {
        assert_eq!(Instruction::LDNP_32_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDNP_32_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STP_32_ldstpair_post() {
        assert_eq!(Instruction::STP_32_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STP_32_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDP_32_ldstpair_post() {
        assert_eq!(Instruction::LDP_32_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDP_32_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STP_32_ldstpair_off() {
        assert_eq!(Instruction::STP_32_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STP_32_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDP_32_ldstpair_off() {
        assert_eq!(Instruction::LDP_32_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDP_32_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STP_32_ldstpair_pre() {
        assert_eq!(Instruction::STP_32_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STP_32_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDP_32_ldstpair_pre() {
        assert_eq!(Instruction::LDP_32_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDP_32_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STNP_S_ldstnapair_offs() {
        assert_eq!(Instruction::STNP_S_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STNP_S_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDNP_S_ldstnapair_offs() {
        assert_eq!(Instruction::LDNP_S_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDNP_S_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STP_S_ldstpair_post() {
        assert_eq!(Instruction::STP_S_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STP_S_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDP_S_ldstpair_post() {
        assert_eq!(Instruction::LDP_S_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDP_S_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STP_S_ldstpair_off() {
        assert_eq!(Instruction::STP_S_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STP_S_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDP_S_ldstpair_off() {
        assert_eq!(Instruction::LDP_S_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDP_S_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STP_S_ldstpair_pre() {
        assert_eq!(Instruction::STP_S_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STP_S_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDP_S_ldstpair_pre() {
        assert_eq!(Instruction::LDP_S_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDP_S_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ORR_32_log_imm() {
        assert_eq!(Instruction::ORR_32_log_imm { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ORR_32_log_imm { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BFM_32M_bitfield() {
        assert_eq!(Instruction::BFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BFXIL_BFM_32M_bitfield() {
        assert_eq!(Instruction::BFXIL_BFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BFXIL_BFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STRB_32_ldst_pos() {
        assert_eq!(Instruction::STRB_32_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STRB_32_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRB_32_ldst_pos() {
        assert_eq!(Instruction::LDRB_32_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRB_32_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSB_64_ldst_pos() {
        assert_eq!(Instruction::LDRSB_64_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSB_64_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSB_32_ldst_pos() {
        assert_eq!(Instruction::LDRSB_32_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSB_32_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_B_ldst_pos() {
        assert_eq!(Instruction::STR_B_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_B_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_B_ldst_pos() {
        assert_eq!(Instruction::LDR_B_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_B_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_Q_ldst_pos() {
        assert_eq!(Instruction::STR_Q_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_Q_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_Q_ldst_pos() {
        assert_eq!(Instruction::LDR_Q_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_Q_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_EOR_32_log_imm() {
        assert_eq!(Instruction::EOR_32_log_imm { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::EOR_32_log_imm { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOV_MOVZ_32_movewide() {
        assert_eq!(Instruction::MOV_MOVZ_32_movewide { hw: 0, imm16: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOV_MOVZ_32_movewide { hw: 0, imm16: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOVZ_32_movewide() {
        assert_eq!(Instruction::MOVZ_32_movewide { hw: 0, imm16: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOVZ_32_movewide { hw: 0, imm16: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UBFIZ_UBFM_32M_bitfield() {
        assert_eq!(Instruction::UBFIZ_UBFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UBFIZ_UBFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UBFM_32M_bitfield() {
        assert_eq!(Instruction::UBFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UBFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UBFX_UBFM_32M_bitfield() {
        assert_eq!(Instruction::UBFX_UBFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UBFX_UBFM_32M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_FCMLA_z_p_zzz() {
        assert_eq!(Instruction::FCMLA_z_p_zzz { size: 0, Zm: 0, rot: 0, Pg: 0, Zn: 0, Zda: 0, }.encode().decode(), 
                   Instruction::FCMLA_z_p_zzz { size: 0, Zm: 0, rot: 0, Pg: 0, Zn: 0, Zda: 0, })
    }
    #[test]
    fn roundtrip_STGP_64_ldstpair_post() {
        assert_eq!(Instruction::STGP_64_ldstpair_post { simm7: 0, Xt2: 0, Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::STGP_64_ldstpair_post { simm7: 0, Xt2: 0, Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_LDPSW_64_ldstpair_post() {
        assert_eq!(Instruction::LDPSW_64_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDPSW_64_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STGP_64_ldstpair_off() {
        assert_eq!(Instruction::STGP_64_ldstpair_off { simm7: 0, Xt2: 0, Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::STGP_64_ldstpair_off { simm7: 0, Xt2: 0, Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_LDPSW_64_ldstpair_off() {
        assert_eq!(Instruction::LDPSW_64_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDPSW_64_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STGP_64_ldstpair_pre() {
        assert_eq!(Instruction::STGP_64_ldstpair_pre { simm7: 0, Xt2: 0, Xn: 0, Xt: 0, }.encode().decode(), 
                   Instruction::STGP_64_ldstpair_pre { simm7: 0, Xt2: 0, Xn: 0, Xt: 0, })
    }
    #[test]
    fn roundtrip_LDPSW_64_ldstpair_pre() {
        assert_eq!(Instruction::LDPSW_64_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDPSW_64_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STNP_D_ldstnapair_offs() {
        assert_eq!(Instruction::STNP_D_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STNP_D_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDNP_D_ldstnapair_offs() {
        assert_eq!(Instruction::LDNP_D_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDNP_D_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STP_D_ldstpair_post() {
        assert_eq!(Instruction::STP_D_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STP_D_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDP_D_ldstpair_post() {
        assert_eq!(Instruction::LDP_D_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDP_D_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STP_D_ldstpair_off() {
        assert_eq!(Instruction::STP_D_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STP_D_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDP_D_ldstpair_off() {
        assert_eq!(Instruction::LDP_D_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDP_D_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STP_D_ldstpair_pre() {
        assert_eq!(Instruction::STP_D_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STP_D_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDP_D_ldstpair_pre() {
        assert_eq!(Instruction::LDP_D_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDP_D_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ANDS_32S_log_imm() {
        assert_eq!(Instruction::ANDS_32S_log_imm { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ANDS_32S_log_imm { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOVK_32_movewide() {
        assert_eq!(Instruction::MOVK_32_movewide { hw: 0, imm16: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOVK_32_movewide { hw: 0, imm16: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STRH_32_ldst_pos() {
        assert_eq!(Instruction::STRH_32_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STRH_32_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRH_32_ldst_pos() {
        assert_eq!(Instruction::LDRH_32_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRH_32_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSH_64_ldst_pos() {
        assert_eq!(Instruction::LDRSH_64_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSH_64_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSH_32_ldst_pos() {
        assert_eq!(Instruction::LDRSH_32_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSH_32_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_H_ldst_pos() {
        assert_eq!(Instruction::STR_H_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_H_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_H_ldst_pos() {
        assert_eq!(Instruction::LDR_H_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_H_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ADDG_64_addsub_immtags() {
        assert_eq!(Instruction::ADDG_64_addsub_immtags { uimm6: 0, op3: 0, uimm4: 0, Xn: 0, Xd: 0, }.encode().decode(), 
                   Instruction::ADDG_64_addsub_immtags { uimm6: 0, op3: 0, uimm4: 0, Xn: 0, Xd: 0, })
    }
    #[test]
    fn roundtrip_SBFIZ_SBFM_64M_bitfield() {
        assert_eq!(Instruction::SBFIZ_SBFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SBFIZ_SBFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SBFM_64M_bitfield() {
        assert_eq!(Instruction::SBFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SBFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SBFX_SBFM_64M_bitfield() {
        assert_eq!(Instruction::SBFX_SBFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SBFX_SBFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STNP_64_ldstnapair_offs() {
        assert_eq!(Instruction::STNP_64_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STNP_64_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDNP_64_ldstnapair_offs() {
        assert_eq!(Instruction::LDNP_64_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDNP_64_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STP_64_ldstpair_post() {
        assert_eq!(Instruction::STP_64_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STP_64_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDP_64_ldstpair_post() {
        assert_eq!(Instruction::LDP_64_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDP_64_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STP_64_ldstpair_off() {
        assert_eq!(Instruction::STP_64_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STP_64_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDP_64_ldstpair_off() {
        assert_eq!(Instruction::LDP_64_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDP_64_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STP_64_ldstpair_pre() {
        assert_eq!(Instruction::STP_64_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STP_64_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDP_64_ldstpair_pre() {
        assert_eq!(Instruction::LDP_64_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDP_64_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STNP_Q_ldstnapair_offs() {
        assert_eq!(Instruction::STNP_Q_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STNP_Q_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDNP_Q_ldstnapair_offs() {
        assert_eq!(Instruction::LDNP_Q_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDNP_Q_ldstnapair_offs { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STP_Q_ldstpair_post() {
        assert_eq!(Instruction::STP_Q_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STP_Q_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDP_Q_ldstpair_post() {
        assert_eq!(Instruction::LDP_Q_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDP_Q_ldstpair_post { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STP_Q_ldstpair_off() {
        assert_eq!(Instruction::STP_Q_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STP_Q_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDP_Q_ldstpair_off() {
        assert_eq!(Instruction::LDP_Q_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDP_Q_ldstpair_off { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STP_Q_ldstpair_pre() {
        assert_eq!(Instruction::STP_Q_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STP_Q_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDP_Q_ldstpair_pre() {
        assert_eq!(Instruction::LDP_Q_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDP_Q_ldstpair_pre { imm7: 0, Rt2: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_BFM_64M_bitfield() {
        assert_eq!(Instruction::BFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BFXIL_BFM_64M_bitfield() {
        assert_eq!(Instruction::BFXIL_BFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BFXIL_BFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STR_32_ldst_pos() {
        assert_eq!(Instruction::STR_32_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_32_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_32_ldst_pos() {
        assert_eq!(Instruction::LDR_32_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_32_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSW_64_ldst_pos() {
        assert_eq!(Instruction::LDRSW_64_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSW_64_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_S_ldst_pos() {
        assert_eq!(Instruction::STR_S_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_S_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_S_ldst_pos() {
        assert_eq!(Instruction::LDR_S_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_S_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_SUBG_64_addsub_immtags() {
        assert_eq!(Instruction::SUBG_64_addsub_immtags { uimm6: 0, op3: 0, uimm4: 0, Xn: 0, Xd: 0, }.encode().decode(), 
                   Instruction::SUBG_64_addsub_immtags { uimm6: 0, op3: 0, uimm4: 0, Xn: 0, Xd: 0, })
    }
    #[test]
    fn roundtrip_UBFIZ_UBFM_64M_bitfield() {
        assert_eq!(Instruction::UBFIZ_UBFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UBFIZ_UBFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UBFM_64M_bitfield() {
        assert_eq!(Instruction::UBFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UBFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_UBFX_UBFM_64M_bitfield() {
        assert_eq!(Instruction::UBFX_UBFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::UBFX_UBFM_64M_bitfield { immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_STR_64_ldst_pos() {
        assert_eq!(Instruction::STR_64_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_64_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_64_ldst_pos() {
        assert_eq!(Instruction::LDR_64_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_64_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_PRFM_P_ldst_pos() {
        assert_eq!(Instruction::PRFM_P_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::PRFM_P_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_STR_D_ldst_pos() {
        assert_eq!(Instruction::STR_D_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::STR_D_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_D_ldst_pos() {
        assert_eq!(Instruction::LDR_D_ldst_pos { imm12: 0, Rn: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_D_ldst_pos { imm12: 0, Rn: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_AND_32_log_shift() {
        assert_eq!(Instruction::AND_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::AND_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BIC_32_log_shift() {
        assert_eq!(Instruction::BIC_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BIC_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADD_32_addsub_shift() {
        assert_eq!(Instruction::ADD_32_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADD_32_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADD_32_addsub_imm() {
        assert_eq!(Instruction::ADD_32_addsub_imm { sh: 0, imm12: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADD_32_addsub_imm { sh: 0, imm12: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ORR_32_log_shift() {
        assert_eq!(Instruction::ORR_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ORR_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ORN_32_log_shift() {
        assert_eq!(Instruction::ORN_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ORN_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADDS_32_addsub_shift() {
        assert_eq!(Instruction::ADDS_32_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADDS_32_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADDS_32S_addsub_imm() {
        assert_eq!(Instruction::ADDS_32S_addsub_imm { sh: 0, imm12: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADDS_32S_addsub_imm { sh: 0, imm12: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_EOR_32_log_shift() {
        assert_eq!(Instruction::EOR_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::EOR_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_EON_32_log_shift() {
        assert_eq!(Instruction::EON_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::EON_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUB_32_addsub_shift() {
        assert_eq!(Instruction::SUB_32_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUB_32_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUB_32_addsub_imm() {
        assert_eq!(Instruction::SUB_32_addsub_imm { sh: 0, imm12: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUB_32_addsub_imm { sh: 0, imm12: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_B_only_condbranch() {
        assert_eq!(Instruction::B_only_condbranch { imm19: 0, cond: 0, }.encode().decode(), 
                   Instruction::B_only_condbranch { imm19: 0, cond: 0, })
    }
    #[test]
    fn roundtrip_ANDS_32_log_shift() {
        assert_eq!(Instruction::ANDS_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ANDS_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BICS_32_log_shift() {
        assert_eq!(Instruction::BICS_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BICS_32_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUBS_32_addsub_shift() {
        assert_eq!(Instruction::SUBS_32_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUBS_32_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUBS_32S_addsub_imm() {
        assert_eq!(Instruction::SUBS_32S_addsub_imm { sh: 0, imm12: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUBS_32S_addsub_imm { sh: 0, imm12: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_AND_64_log_shift() {
        assert_eq!(Instruction::AND_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::AND_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BIC_64_log_shift() {
        assert_eq!(Instruction::BIC_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BIC_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADD_64_addsub_shift() {
        assert_eq!(Instruction::ADD_64_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADD_64_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADD_64_addsub_imm() {
        assert_eq!(Instruction::ADD_64_addsub_imm { sh: 0, imm12: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADD_64_addsub_imm { sh: 0, imm12: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_AND_64_log_imm() {
        assert_eq!(Instruction::AND_64_log_imm { N: 0, immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::AND_64_log_imm { N: 0, immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOV_MOVN_64_movewide() {
        assert_eq!(Instruction::MOV_MOVN_64_movewide { hw: 0, imm16: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOV_MOVN_64_movewide { hw: 0, imm16: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOVN_64_movewide() {
        assert_eq!(Instruction::MOVN_64_movewide { hw: 0, imm16: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOVN_64_movewide { hw: 0, imm16: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ORR_64_log_shift() {
        assert_eq!(Instruction::ORR_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ORR_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ORN_64_log_shift() {
        assert_eq!(Instruction::ORN_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ORN_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADDS_64_addsub_shift() {
        assert_eq!(Instruction::ADDS_64_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADDS_64_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ADDS_64S_addsub_imm() {
        assert_eq!(Instruction::ADDS_64S_addsub_imm { sh: 0, imm12: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADDS_64S_addsub_imm { sh: 0, imm12: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ORR_64_log_imm() {
        assert_eq!(Instruction::ORR_64_log_imm { N: 0, immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ORR_64_log_imm { N: 0, immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_EOR_64_log_shift() {
        assert_eq!(Instruction::EOR_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::EOR_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_EON_64_log_shift() {
        assert_eq!(Instruction::EON_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::EON_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUB_64_addsub_shift() {
        assert_eq!(Instruction::SUB_64_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUB_64_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUB_64_addsub_imm() {
        assert_eq!(Instruction::SUB_64_addsub_imm { sh: 0, imm12: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUB_64_addsub_imm { sh: 0, imm12: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_EOR_64_log_imm() {
        assert_eq!(Instruction::EOR_64_log_imm { N: 0, immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::EOR_64_log_imm { N: 0, immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOV_MOVZ_64_movewide() {
        assert_eq!(Instruction::MOV_MOVZ_64_movewide { hw: 0, imm16: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOV_MOVZ_64_movewide { hw: 0, imm16: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOVZ_64_movewide() {
        assert_eq!(Instruction::MOVZ_64_movewide { hw: 0, imm16: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOVZ_64_movewide { hw: 0, imm16: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ANDS_64_log_shift() {
        assert_eq!(Instruction::ANDS_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ANDS_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BICS_64_log_shift() {
        assert_eq!(Instruction::BICS_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::BICS_64_log_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUBS_64_addsub_shift() {
        assert_eq!(Instruction::SUBS_64_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUBS_64_addsub_shift { shift: 0, Rm: 0, imm6: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_SUBS_64S_addsub_imm() {
        assert_eq!(Instruction::SUBS_64S_addsub_imm { sh: 0, imm12: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::SUBS_64S_addsub_imm { sh: 0, imm12: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_ANDS_64S_log_imm() {
        assert_eq!(Instruction::ANDS_64S_log_imm { N: 0, immr: 0, imms: 0, Rn: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ANDS_64S_log_imm { N: 0, immr: 0, imms: 0, Rn: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_MOVK_64_movewide() {
        assert_eq!(Instruction::MOVK_64_movewide { hw: 0, imm16: 0, Rd: 0, }.encode().decode(), 
                   Instruction::MOVK_64_movewide { hw: 0, imm16: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_LDR_32_loadlit() {
        assert_eq!(Instruction::LDR_32_loadlit { imm19: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_32_loadlit { imm19: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_S_loadlit() {
        assert_eq!(Instruction::LDR_S_loadlit { imm19: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_S_loadlit { imm19: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CBZ_32_compbranch() {
        assert_eq!(Instruction::CBZ_32_compbranch { imm19: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CBZ_32_compbranch { imm19: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CBNZ_32_compbranch() {
        assert_eq!(Instruction::CBNZ_32_compbranch { imm19: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CBNZ_32_compbranch { imm19: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_64_loadlit() {
        assert_eq!(Instruction::LDR_64_loadlit { imm19: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_64_loadlit { imm19: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_D_loadlit() {
        assert_eq!(Instruction::LDR_D_loadlit { imm19: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_D_loadlit { imm19: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDRSW_64_loadlit() {
        assert_eq!(Instruction::LDRSW_64_loadlit { imm19: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDRSW_64_loadlit { imm19: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_LDR_Q_loadlit() {
        assert_eq!(Instruction::LDR_Q_loadlit { imm19: 0, Rt: 0, }.encode().decode(), 
                   Instruction::LDR_Q_loadlit { imm19: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CBZ_64_compbranch() {
        assert_eq!(Instruction::CBZ_64_compbranch { imm19: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CBZ_64_compbranch { imm19: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_CBNZ_64_compbranch() {
        assert_eq!(Instruction::CBNZ_64_compbranch { imm19: 0, Rt: 0, }.encode().decode(), 
                   Instruction::CBNZ_64_compbranch { imm19: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_PRFM_P_loadlit() {
        assert_eq!(Instruction::PRFM_P_loadlit { imm19: 0, Rt: 0, }.encode().decode(), 
                   Instruction::PRFM_P_loadlit { imm19: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_TBZ_only_testbranch() {
        assert_eq!(Instruction::TBZ_only_testbranch { b5: 0, b40: 0, imm14: 0, Rt: 0, }.encode().decode(), 
                   Instruction::TBZ_only_testbranch { b5: 0, b40: 0, imm14: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_TBNZ_only_testbranch() {
        assert_eq!(Instruction::TBNZ_only_testbranch { b5: 0, b40: 0, imm14: 0, Rt: 0, }.encode().decode(), 
                   Instruction::TBNZ_only_testbranch { b5: 0, b40: 0, imm14: 0, Rt: 0, })
    }
    #[test]
    fn roundtrip_ADR_only_pcreladdr() {
        assert_eq!(Instruction::ADR_only_pcreladdr { immlo: 0, immhi: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADR_only_pcreladdr { immlo: 0, immhi: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_B_only_branch_imm() {
        assert_eq!(Instruction::B_only_branch_imm { imm26: 0, }.encode().decode(), 
                   Instruction::B_only_branch_imm { imm26: 0, })
    }
    #[test]
    fn roundtrip_ADRP_only_pcreladdr() {
        assert_eq!(Instruction::ADRP_only_pcreladdr { immlo: 0, immhi: 0, Rd: 0, }.encode().decode(), 
                   Instruction::ADRP_only_pcreladdr { immlo: 0, immhi: 0, Rd: 0, })
    }
    #[test]
    fn roundtrip_BL_only_branch_imm() {
        assert_eq!(Instruction::BL_only_branch_imm { imm26: 0, }.encode().decode(), 
                   Instruction::BL_only_branch_imm { imm26: 0, })
    }

}